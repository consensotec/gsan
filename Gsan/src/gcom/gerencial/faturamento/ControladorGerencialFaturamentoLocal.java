/* * Copyright (C) 2007-2007 the GSAN - Sistema Integrado de Gestão de Serviços de * Saneamento This file is part of GSAN, an integrated service management system * for Sanitation GSAN is free software; you can redistribute it and/or modify * it under the terms of the GNU General Public License as published by the Free * Software Foundation; either version 2 of the License. GSAN is distributed in * the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the * implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See * the GNU General Public License for more details. You should have received a * copy of the GNU General Public License along with this program; if not, write * to the Free Software Foundation, Inc., 59 Temple Place - Suite 330, Boston, * MA 02111-1307, USA *//* * GSAN - Sistema Integrado de Gestão de Serviços de Saneamento Copyright (C) * <2007> Adriano Britto Siqueira Alexandre Santos Cabral Ana Carolina Alves * Breda Ana Maria Andrade Cavalcante Aryed Lins de Araújo Bruno Leonardo * Rodrigues Barros Carlos Elmano Rodrigues Ferreira Cláudio de Andrade Lira * Denys Guimarães Guenes Tavares Eduardo Breckenfeld da Rosa Borges Fabíola * Gomes de Araújo Flávio Leonardo Cavalcanti Cordeiro Francisco do Nascimento * Júnior Homero Sampaio Cavalcanti Ivan Sérgio da Silva Júnior José Edmar de * Siqueira José Thiago Tenório Lopes Kássia Regina Silvestre de Albuquerque * Leonardo Luiz Vieira da Silva Márcio Roberto Batista da Silva Maria de Fátima * Sampaio Leite Micaela Maria Coelho de Araújo Nelson Mendonça de Carvalho * Newton Morais e Silva Pedro Alexandre Santos da Silva Filho Rafael Corrêa * Lima e Silva Rafael Francisco Pinto Rafael Koury Monteiro Rafael Palermo de * Araújo Raphael Veras Rossiter Roberto Sobreira Barbalho Rodrigo Avellar * Silveira Rosana Carvalho Barbosa Sávio Luiz de Andrade Cavalcante Tai Mu Shih * Thiago Augusto Souza do Nascimento Tiago Moreno Rodrigues Vivianne Barbosa * Sousa Este programa é software livre; você pode redistribuí-lo e/ou * modificá-lo sob os termos de Licença Pública Geral GNU, conforme publicada * pela Free Software Foundation; versão 2 da Licença. Este programa é * distribuído na expectativa de ser útil, mas SEM QUALQUER GARANTIA; sem mesmo * a garantia implícita de COMERCIALIZAÇÃO ou de ADEQUAÇÃO A QUALQUER PROPÓSITO * EM PARTICULAR. Consulte a Licença Pública Geral GNU para obter mais detalhes. * Você deve ter recebido uma cópia da Licença Pública Geral GNU junto com este * programa; se não, escreva para Free Software Foundation, Inc., 59 Temple * Place, Suite 330, Boston, MA 02111-1307, USA. */package gcom.gerencial.faturamento;import gcom.gerencial.bean.InformarDadosGeracaoRelatorioConsultaHelper;import gcom.gerencial.bean.InformarDadosGeracaoRelatorioConsultaPeriodoHelper;import gcom.gerencial.faturamento.bean.ConsultarResumoSituacaoEspecialHelper;import gcom.gerencial.faturamento.bean.FiltrarRelatorioDemonstrativoSinteticoLigacoesHelper;import gcom.gerencial.faturamento.bean.FiltrarResumoDadosCasHelper;import gcom.util.ControladorException;import gcom.util.ErroRepositorioException;import java.util.Collection;import java.util.List;/** * @author Thiago Toscano * @created 19/04/2006 */public interface ControladorGerencialFaturamentoLocal extends        javax.ejb.EJBLocalObject {    /**     * Método que gera o resumo das ligações e economias [UC0275] - Gerar Resumo     * das Ligações/Economias     *      * @author Thiago Toscano     * @date 19/04/2006     */    public void gerarResumoSituacaoEspecialFaturamento(int idLocalidade,            int idFuncionalidadeIniciada, Integer parametroAnoMesReferencia) throws ControladorException;    public Collection<ResumoFaturamentoSituacaoEspecialConsultaGerenciaRegHelper> recuperaResumoSituacaoEspecialFaturamento(    		ConsultarResumoSituacaoEspecialHelper helper)            throws ControladorException;    /**     * Este caso de uso permite consultar o resumo da pendência, com a opção de     * impressão da consulta. Dependendo da opção de totalização sempre é gerado     * o relatório, sem a feração da consulta. [UC0305] Consultar Análise do     * Faturamento consultarResumoAnaliseFaturamento     *      * @author Fernanda Paiva     * @date 31/05/2006     * @param informarDadosGeracaoRelatorioConsultaHelper     * @return     * @throws ControladorException     */    public List consultarResumoAnaliseFaturamento(            InformarDadosGeracaoRelatorioConsultaHelper informarDadosGeracaoRelatorioConsultaHelper)            throws ControladorException;        public List consultarResumoAnaliseFaturamentoPeriodo(            InformarDadosGeracaoRelatorioConsultaPeriodoHelper informarDadosGeracaoRelatorioConsultaPeriodoHelper)            throws ControladorException;    /**     * Método que gera o resumo do Faturamento [UC0571] - Gerar Resumo do     * Faturamento     *      * @author Marcio Roberto     * @param idLocalidade     * @param anoMes     * @date 12/05/2007     */    public void gerarResumoFaturamentoAguaEsgoto(int idSetor,            int idFuncionalidadeIniciada, int anoMes)            throws ControladorException;    /**     * Método que gera o resumo do ReFaturamento [UC0715] - Gerar Resumo do     * ReFaturamento     *      * @author Roberto Barbalho     * @param idLocalidade     * @param anoMes     * @date 12/11/2007     */    public void gerarResumoReFaturamento(int idSetor,            int idFuncionalidadeIniciada, int anoMes)            throws ControladorException;    /**     * Método que gera o resumo do FaturamentoOutros [UC0565] - Gerar Resumo do     * FaturamentoOutros     *      * @author Marcio Roberto     * @param idLocalidade     * @param anoMes     * @date 04/07/2007     */    public void gerarResumoFaturamentoOutros(int idSetor, int anoMes,            int indice, int qtRegistros, List resumo)            throws ControladorException, ErroRepositorioException;    /**     * Método que gera resumo indicadores do faturamento [UC????] - Gerar Resumo     * Indicadores do Faturamento     *      * @author Rafael Corrêa     * @date 25/03/2008     */    public void gerarResumoIndicadoresFaturamento(int idFuncionalidadeIniciada)            throws ControladorException;    /**     * Método que gera o resumo do FaturamentoCreditos [UC0565] - Gerar Resumo     * do FaturamentoCreditos     *      * @author Marcio Roberto     * @param idLocalidade     * @param anoMes     * @date 04/07/2007     */    public void gerarResumoFaturamentoCreditos(int idSetor, int anoMes,            int indice, int qtRegistros, List resumo)            throws ControladorException, ErroRepositorioException;    public Collection pesquisarIdsSetores() throws ControladorException;    /**     * gerarResumoFaturamentoDebitoACobrar Marcio Roberto - 11/07/2007     *      * @param idSetor     * @param anoMes     * @param indice     * @param qtRegistros     * @throws ControladorException     * @throws ErroRepositorioException     */    public void gerarResumoFaturamentoDebitosACobrar(int idSetor, int anoMes)            throws ControladorException, ErroRepositorioException;    /**     * [UC057] - Gerar Resumo do Faturamento     *      * @author Bruno Barros     * @date 18/08/2008     * @param idSetor     * @throws ControladorException     */    public void gerarResumoFaturamento(int idSetor, int unidadeIniciada)            throws ControladorException;        /**     * Método que gera o resumo do ReFaturamento para o OLAP     *      * [UC0572] - Gerar Resumo do ReFaturamento     *      * @author Bruno Barros     * @param idSetor     * @param idFuncionalidadeIniciada      * @param anoMes      * @date 24/11/2008     *      */    public void gerarResumoReFaturamentoOlap(int idSetor,            int idFuncionalidadeIniciada, int anoMes) throws ControladorException;        /**     * Busca a colecao de resumoLigacaoEconomia     * [UC1003] - Emitir Relatorio Demonstrativo Sintetico das Ligacoes              *     * @author Daniel Alves     * @date 12/04/2010     *     * @param FiltrarRelatorioDemonstrativoSinteticoLigacoesHelper     * @throws ControladorException     */    public Collection<Object> pesquisarResumoLigacaoEconomiaRelatorioDemonstrativo(FiltrarRelatorioDemonstrativoSinteticoLigacoesHelper filtro)           throws ControladorException;        /**     * Busca a colecao de resumoConsumoAgua     * [UC1003] - Emitir Relatorio Demonstrativo Sintetico das Ligacoes              *     * @author Daniel Alves     * @date 15/04/2010     *     * @param FiltrarRelatorioDemonstrativoSinteticoLigacoesHelper     * @throws ControladorException     */        public Collection<Object> pesquisarResumoConsumoAguaRelatorioDemonstrativo(FiltrarRelatorioDemonstrativoSinteticoLigacoesHelper filtro)    throws ControladorException;            /**     * Busca a colecao de resumoInstalacaoHidrometro     * [UC1003] - Emitir Relatorio Demonstrativo Sintetico das Ligacoes              *     * @author Daniel Alves     * @date 15/04/2010     *     * @param FiltrarRelatorioDemonstrativoSinteticoLigacoesHelper     * @throws ControladorException     */        public Collection<Object> pesquisaResumoInstalacaoHidrometroRelatorioDemonstrativo(FiltrarRelatorioDemonstrativoSinteticoLigacoesHelper filtro)    throws ControladorException;            /**     * busca a colecao de resumoLeituraAnormalidade     * [UC1003] - Emitir Relatorio Demonstrativo Sintetico das Ligacoes              *     * @author Daniel Alves     * @date 15/04/2010     *     * @param FiltrarRelatorioDemonstrativoSinteticoLigacoesHelper     * @throws ControladorException     */        public Collection<Object> pesquisaResumoLeituraAnormalidadeRelatorioDemonstrativo(FiltrarRelatorioDemonstrativoSinteticoLigacoesHelper filtro)    throws ControladorException;            /**	 * Verifica se existe dados nas tabelas de resumo	 *	 * [UC1003] - Gerar Relatorio Demonstrativo Sintetico das Ligacoes     *     * @author Daniel Alves     * @date 16/04/2010	 *	 * @param anoMesReferencia	 * 	 * @throws ControladorException	 */	public void validarDadosRelatorioDomonstrativoSintLigacoes(int anoMesReferencia) 		throws ControladorException;		/**     * Gerar Resumo do Faturamento Por Ano     *     * @author Fernando Fontelles     * @date 25/05/2010     *     * @param idSetor     * @throws ControladorException     */    public void gerarResumoFaturamentoPorAno(int idSetor, int idFuncionalidadeIniciada)     	throws ControladorException;		/**	 * Pesquisa todas as tabelas de resumo para o "relatorio"	 *	 * [UC1017] - Gerar Resumo com Dados para o CAS	 *	 * @author Daniel Alves	 * @date 03/05/2010	 *	 * @return anoMesReferencia	 * 	 * @throws ControladorException	 */	public void validarDadosUnResumoParaResumoDadosCas(int anoMesReferencia) 		throws ControladorException;	/**	 * Pesquisa o Resumo de Ligações Economias para 	 *  o Resumo com Dados para o CAS	 *	 * [UC1017] - Gerar Resumo com Dados para o CAS	 *	 * @author Daniel Alves	 * @date 05/05/2010	 *	 * @return Collection<Object>	 */    public Collection<Object> pesquisaResumoLigacaoEconomiaResumoDadosCas(FiltrarResumoDadosCasHelper filtro)throws ControladorException;            /**	 * Pesquisa o Resumo de Consumo Agua para 	 *  o Resumo com Dados para o CAS	 *	 * [UC1017] - Gerar Resumo com Dados para o CAS	 *	 * @author Daniel Alves	 * @date 05/05/2010	 *	 * @return Collection<Object>	 */    public Collection<Object> pesquisaResumoConsumoAguaResumoDadosCas(FiltrarResumoDadosCasHelper filtro)throws ControladorException;            /**	 * Pesquisa o Resumo de Coleta Esgoto para 	 *  o Resumo com Dados para o CAS	 *	 * [UC1017] - Gerar Resumo com Dados para o CAS	 *	 * @author Daniel Alves	 * @date 05/05/2010	 *	 * @return Collection<Object>	 */    public Collection<Object> pesquisaResumoColetaEsgotoResumoDadosCas(FiltrarResumoDadosCasHelper filtro)throws ControladorException;            /**	 * Pesquisa o Resumo Arrecadacao para 	 *  o Resumo com Dados para o CAS	 *	 * [UC1017] - Gerar Resumo com Dados para o CAS	 *	 * @author Daniel Alves	 * @date 05/05/2010	 *	 * @return Collection<Object>	 */    public Collection<Object> pesquisaResumoArrecadacaoResumoDadosCas(FiltrarResumoDadosCasHelper filtro)throws ControladorException;    	    /**	 * Pesquisa o Resumo Faturamento para 	 *  o Resumo com Dados para o CAS	 *	 * [UC1017] - Gerar Resumo com Dados para o CAS	 *	 * @author Daniel Alves	 * @date 05/05/2010	 *	 * @return Collection<Object>	 */    public Collection<Object> pesquisaResumoFaturamentoResumoDadosCas(FiltrarResumoDadosCasHelper filtro)throws ControladorException;	    /**	 * Pesquisa o Resumo de Pendências para 	 *  o Resumo com Dados para o CAS	 *	 * [UC1017] - Gerar Resumo com Dados para o CAS	 *	 * @author Daniel Alves	 * @date 06/05/2010	 *	 * @return Collection<Object>	 */    public Collection<Object> pesquisaResumoPendenciaResumoDadosCas(FiltrarResumoDadosCasHelper filtro)throws ControladorException;        /**	 * [UC0572] - Gerar Resumo ReFaturamento Novo	 * 	 * @param anoMes	 * @return	 * @throws ErroRepositorioException	 */	public Integer verificarExistenciaResumoReFaturamento(Integer anoMesReferencia)			throws ControladorException;		/**	 * Método que gera o resumo do ReFaturamento Novo	 * 	 * [UC0572] - Gerar Resumo do ReFaturamento Novo	 * 	 * @author Fernando Fontelles	 * @param idSetor 	 * @param anoMes 	 * @date 29/06/2010	 * 	 */	public void gerarResumoReFaturamentoNovo(int idSetor,			int idFuncionalidadeIniciada, int anoMes) throws ControladorException;        /**	 * Pesquisa o Resumo Faturamento para 	 *  o Resumo com Dados para o CAS Comercial	 *	 * [UC1017] - Gerar Resumo com Dados para o CAS	 *	 * @author Daniel Alves	 * @date 06/07/2010	 *	 * @return Collection<Object>	 */    public Collection<Object> pesquisaResumoFaturamentoResumoDadosCasComercial(FiltrarResumoDadosCasHelper filtro)throws ControladorException;            /**	 * [UC0305] Consultar análise Faturamento	 * 	 * @author Hugo Amorim	 * @date 06/08/2010	 * 	 */	public Collection consultarResumoAnaliseFaturamentoDetalhe(			InformarDadosGeracaoRelatorioConsultaHelper informarDadosGeracaoRelatorioConsultaHelper)             throws ControladorException;		public Collection consultarResumoAnaliseFaturamentoPeriodoDetalhe(			InformarDadosGeracaoRelatorioConsultaPeriodoHelper informarDadosGeracaoRelatorioConsultaPeriodoHelper)             throws ControladorException;    	/**	 * [UC0305] Consultar análise Faturamento	 * 		-Pesquisa para geração relatorio.	 * @author Hugo Amorim	 * @date 06/08/2010	 * 	 */	public List consultarResumoAnaliseFaturamentoRelatorio(			InformarDadosGeracaoRelatorioConsultaHelper 				informarDadosGeracaoRelatorioConsultaHelper)					throws ControladorException;		/**	 * [UC0305] Consultar análise Faturamento - Pesquisa para geração relatorio por período	 * @author Davi Menezes	 * @date 06/10/2011	 * 	 */	public List consultarResumoAnaliseFaturamentoRelatorioPeriodo(			InformarDadosGeracaoRelatorioConsultaPeriodoHelper 				informarDadosGeracaoRelatorioConsultaPeriodoHelper)					throws ControladorException;		/**	 * Pesquisa o Resumo de Instalacao de Hidrometro para 	 *  o Resumo com Dados para o CAS	 *	 * [UC1017] - Gerar Resumo com Dados para o CAS	 *	 * @author Daniel Alves	 * @date 09/09/2010	 *	 * @return Collection<Object>	 */    public Collection<Object> pesquisaResumoInstalacaoHidrometroResumoDadosCas(FiltrarResumoDadosCasHelper filtro)throws ControladorException;        /**	 * 	 * 	 * 	 * @author: Rodrigo Cabral	 * @date: 26/12/2011	 */	public void gerarFaturamentoBrutoLiquido(int anoMesFaturamento, int idFuncionalidadeIniciada) throws ControladorException;	 	/**	 * 	 * @author: Rodrigo Cabral	 * @date: 19/04/2012	 */	public void executarCargaRegistroAtendimentoPorAno(int idFuncionalidadeIniciada) throws ControladorException;		/**	 * 	 * @author: Rodrigo Cabral	 * @date: 20/04/2012	 */	public void executarCargaResumoFaturamentoPorAno(int idFuncionalidadeIniciada) throws ControladorException;		/**	 * 	 * @author: Rodrigo Cabral	 * @date: 20/04/2012	 */	public void executarCargaIndicadoresDesempenhoFaturamentoPorAno(int idFuncionalidadeIniciada) throws ControladorException;		/**	 * 	 * @author: Rodrigo Cabral	 * @date: 23/04/2012	 */	public void executarCargaIndicadoresDesempenhoFaturamentoVariosAnos(int idFuncionalidadeIniciada) throws ControladorException;		/**	 * 	 * @author: Rodrigo Cabral	 * @date: 23/04/2012	 */	public void executarCargaColetaEsgotoPorAno(int idFuncionalidadeIniciada) throws ControladorException;		/**	 * 	 * @author: Rodrigo Cabral	 * @date: 23/04/2012	 */	public void executarCargaConsumoAguaPorAno(int idFuncionalidadeIniciada) throws ControladorException;		/**	 * 	 * @author: Rodrigo Cabral	 * @date: 23/04/2012	 */	public void executarCargaLeituraAnormalidadePorAno(int idFuncionalidadeIniciada) throws ControladorException;		/**	 * 	 * @author: Rodrigo Cabral	 * @date: 23/04/2012	 */	public void executarCargaIndicadoresDesempenhoMicromedicaoVariosAnos(int idFuncionalidadeIniciada) throws ControladorException;		/**	 * 	 * @author: Rodrigo Cabral	 * @date: 23/04/2012	 */	public void executarCargaIndicadoresDesempenhoMicromedicaoPorAno(int idFuncionalidadeIniciada) throws ControladorException;    }