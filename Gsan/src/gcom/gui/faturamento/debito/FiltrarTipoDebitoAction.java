/** *  *//* * Copyright (C) 2007-2007 the GSAN - Sistema Integrado de Gestão de Serviços de Saneamento * * This file is part of GSAN, an integrated service management system for Sanitation * * GSAN is free software; you can redistribute it and/or modify * it under the terms of the GNU General Public License as published by * the Free Software Foundation; either version 2 of the License. * * GSAN is distributed in the hope that it will be useful, * but WITHOUT ANY WARRANTY; without even the implied warranty of * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the * GNU General Public License for more details. * * You should have received a copy of the GNU General Public License * along with this program; if not, write to the Free Software * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA *//* * GSAN - Sistema Integrado de Gestão de Serviços de Saneamento * Copyright (C) <2007>  * Adriano Britto Siqueira * Alexandre Santos Cabral * Ana Carolina Alves Breda * Ana Maria Andrade Cavalcante * Aryed Lins de Araújo * Bruno Leonardo Rodrigues Barros * Carlos Elmano Rodrigues Ferreira * Cláudio de Andrade Lira * Denys Guimarães Guenes Tavares * Eduardo Breckenfeld da Rosa Borges * Fabíola Gomes de Araújo * Flávio Leonardo Cavalcanti Cordeiro * Francisco do Nascimento Júnior * Homero Sampaio Cavalcanti * Ivan Sérgio da Silva Júnior * José Edmar de Siqueira * José Thiago Tenório Lopes * Kássia Regina Silvestre de Albuquerque * Leonardo Luiz Vieira da Silva * Márcio Roberto Batista da Silva * Maria de Fátima Sampaio Leite * Micaela Maria Coelho de Araújo * Nelson Mendonça de Carvalho * Newton Morais e Silva * Pedro Alexandre Santos da Silva Filho * Rafael Corrêa Lima e Silva * Rafael Francisco Pinto * Rafael Koury Monteiro * Rafael Palermo de Araújo * Raphael Veras Rossiter * Roberto Sobreira Barbalho * Rodrigo Avellar Silveira * Rosana Carvalho Barbosa * Sávio Luiz de Andrade Cavalcante * Tai Mu Shih * Thiago Augusto Souza do Nascimento * Tiago Moreno Rodrigues * Vivianne Barbosa Sousa * * Este programa é software livre; você pode redistribuí-lo e/ou * modificá-lo sob os termos de Licença Pública Geral GNU, conforme * publicada pela Free Software Foundation; versão 2 da * Licença. * Este programa é distribuído na expectativa de ser útil, mas SEM * QUALQUER GARANTIA; sem mesmo a garantia implícita de * COMERCIALIZAÇÃO ou de ADEQUAÇÃO A QUALQUER PROPÓSITO EM * PARTICULAR. Consulte a Licença Pública Geral GNU para obter mais * detalhes. * Você deve ter recebido uma cópia da Licença Pública Geral GNU * junto com este programa; se não, escreva para Free Software * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA * 02111-1307, USA. */package gcom.gui.faturamento.debito;import gcom.faturamento.debito.FiltroDebitoTipo;import gcom.gui.ActionServletException;import gcom.gui.GcomAction;import gcom.util.ConstantesSistema;import gcom.util.Util;import gcom.util.filtro.ComparacaoTexto;import gcom.util.filtro.ParametroNaoNulo;import gcom.util.filtro.ParametroNulo;import gcom.util.filtro.ComparacaoTextoCompleto;import gcom.util.filtro.MaiorQue;import gcom.util.filtro.MenorQue;import gcom.util.filtro.ParametroSimples;import javax.servlet.http.HttpServletRequest;import javax.servlet.http.HttpServletResponse;import javax.servlet.http.HttpSession;import org.apache.struts.action.ActionForm;import org.apache.struts.action.ActionForward;import org.apache.struts.action.ActionMapping;/** *  * Descrição da classe *  *  *  * @author Rômulo Aurélio *  * @date 13/03/2007 *  */public class FiltrarTipoDebitoAction extends GcomAction {	/**	 * 	 * Este caso de uso cria um filtro que será usado na pesquisa de Tipo de	 * 	 * Débito	 * 	 * 	 * 	 * [UC0531] Filtrar Tipo de Débito	 * 	 * 	 * 	 * 	 * 	 * @author Rômulo Aurélio	 * 	 * @date 13/03/2007	 * 	 * 	 * 	 * @param actionMapping	 * 	 * @param actionForm	 * 	 * @param httpServletRequest	 * 	 * @param httpServletResponse	 * 	 * @return	 * 	 */	public ActionForward execute(ActionMapping actionMapping,	ActionForm actionForm, HttpServletRequest httpServletRequest,	HttpServletResponse httpServletResponse) {		ActionForward retorno = actionMapping		.findForward("exibirManterTipoDebitoAction");		FiltrarTipoDebitoActionForm form = (FiltrarTipoDebitoActionForm) actionForm;		FiltroDebitoTipo filtroDebitoTipo = new FiltroDebitoTipo();		HttpSession sessao = httpServletRequest.getSession(false);		boolean peloMenosUmParametroInformado = false;		String descricao = form.getDescricao();		String descricaoAbreviada = form.getDescricaoAbreviada();		String idTipoFinanciamento = form.getFinanciamentoTipo();		String idLancamentoItemContabil = form.getLancamentoItemContabil();		String tipoPesquisa = form.getTipoPesquisa();		String indicadorGeracaoDebitoAutomatica = form		.getIndicadorGeracaoDebitoAutomatica();		String indicadorGeracaoDebitoConta = form		.getIndicadorGeracaoDebitoConta();		String indicadorUso = form.getIndicadorUso();		String valorLimiteDebitoInicial = form.getValorLimiteDebitoInicial();		String valorLimiteDebitoFinal = form.getValorLimiteDebitoFinal();		String valorSugerido = form.getValorSugerido();		// Verifica se o campo descricao foi informado		if (descricao != null && !descricao.equalsIgnoreCase("")) {			peloMenosUmParametroInformado = true;			if (tipoPesquisa != null					&& tipoPesquisa							.equals(ConstantesSistema.TIPO_PESQUISA_COMPLETA									.toString())) {				filtroDebitoTipo						.adicionarParametro(new ComparacaoTextoCompleto(								FiltroDebitoTipo.DESCRICAO,								descricao));			} else {				filtroDebitoTipo.adicionarParametro(new ComparacaoTexto(						FiltroDebitoTipo.DESCRICAO, descricao));			}		}		// Verifica se o campo descricaoAbreviada foi informado		if (descricaoAbreviada != null		&& !descricaoAbreviada.trim().equalsIgnoreCase("")) {			peloMenosUmParametroInformado = true;			filtroDebitoTipo.adicionarParametro(new ComparacaoTexto(			FiltroDebitoTipo.DESCRICAO_ABREVIADA, descricaoAbreviada));		}		// Verifica se o campo TipoFinanciamento foi informado		if (idTipoFinanciamento != null		&& !idTipoFinanciamento.trim().equals(		"" + ConstantesSistema.NUMERO_NAO_INFORMADO)) {			peloMenosUmParametroInformado = true;			filtroDebitoTipo.adicionarParametro(new ParametroSimples(			FiltroDebitoTipo.FINANCIAMENTO_TIPO, idTipoFinanciamento));		}		// Verifica se o campo LancamentoItemContabil foi informado		if (idLancamentoItemContabil != null		&& !idLancamentoItemContabil.trim().equals(		"" + ConstantesSistema.NUMERO_NAO_INFORMADO)) {			peloMenosUmParametroInformado = true;			filtroDebitoTipo.adicionarParametro(new ParametroSimples(			FiltroDebitoTipo.LANCAMENTO_ITEM_CONTABIL_ID,			idLancamentoItemContabil));		}		if (indicadorGeracaoDebitoAutomatica != null		&& !indicadorGeracaoDebitoAutomatica.trim().equals("3")) {			peloMenosUmParametroInformado = true;			filtroDebitoTipo.adicionarParametro(new ParametroSimples(			FiltroDebitoTipo.INDICADOR_GERACAO_AUTOMATICA,			indicadorGeracaoDebitoAutomatica));		}		if (indicadorGeracaoDebitoConta != null		&& !indicadorGeracaoDebitoConta.trim().equals("3")) {			peloMenosUmParametroInformado = true;			filtroDebitoTipo.adicionarParametro(new ParametroSimples(			FiltroDebitoTipo.INDICADOR_GERACAO_DEBITO_CONTA,			indicadorGeracaoDebitoConta));		}		// se o usuário informar o intervalo inicial do valor de limite		if (valorLimiteDebitoInicial != null				&& !valorLimiteDebitoInicial.trim().equalsIgnoreCase("")) {			// se o usuário não informar o intervalo final do valor de			// limite			if (valorLimiteDebitoFinal == null					|| valorLimiteDebitoFinal.trim().equalsIgnoreCase("")) {				// o intervalo final do valor de limite vai receber o valor				// do intervalo inicial				valorLimiteDebitoFinal = valorLimiteDebitoInicial;				// se o usuário informar o intervalo final do valor de				// limite			} else {				// se o intervalo final do valor de limite for menor que o				// inicial				if ((Util						.formatarMoedaRealparaBigDecimal(valorLimiteDebitoInicial))						.doubleValue() > ((Util						.formatarMoedaRealparaBigDecimal(valorLimiteDebitoFinal)))				.doubleValue()) {					// levanta a exceção para a próxima camada					throw new ActionServletException("atencao.valorlimitefinal.menorque");				}			}			// se o usuário não informar o intervalo inicial do valor de			// limite		} else {			// seta o intervalo final do valor de limite para null			valorLimiteDebitoFinal = null;		}		// se o intervalo final do valor de limite não estiver nulo ou em		// branco		if (valorLimiteDebitoFinal != null				&& !valorLimiteDebitoFinal.trim().equalsIgnoreCase("")) {			peloMenosUmParametroInformado = true;			// seta no filtro para retornar os tipos de débito entre os			// valores informados			filtroDebitoTipo					.adicionarParametro(new MaiorQue(							FiltroDebitoTipo.VALOR_LIMITE,							Util									.formatarMoedaRealparaBigDecimal(valorLimiteDebitoInicial),							ParametroSimples.CONECTOR_AND));			filtroDebitoTipo			.adicionarParametro(new MenorQue(			FiltroDebitoTipo.VALOR_LIMITE,			Util			.formatarMoedaRealparaBigDecimal(valorLimiteDebitoFinal)));		}		if (valorSugerido != null && !valorSugerido.trim().equalsIgnoreCase("")) {			if (valorSugerido.equalsIgnoreCase("1")) {				peloMenosUmParametroInformado = true;				filtroDebitoTipo				.adicionarParametro(new ParametroNaoNulo(						FiltroDebitoTipo.VALOR_SUGERIDO));			} else if (valorSugerido.equalsIgnoreCase("2")) {				peloMenosUmParametroInformado = true;				filtroDebitoTipo				.adicionarParametro(new ParametroNulo(						FiltroDebitoTipo.VALOR_SUGERIDO));			}		}		if (indicadorUso != null && !indicadorUso.trim().equals("3")) {			peloMenosUmParametroInformado = true;			filtroDebitoTipo.adicionarParametro(new ParametroSimples(			FiltroDebitoTipo.INDICADOR_USO, indicadorUso));		}		// Erro caso o usuário mandou Pesquisar sem nenhum parâmetro		if (!peloMenosUmParametroInformado) {			throw new ActionServletException(			"atencao.filtro.nenhum_parametro_informado");		}		filtroDebitoTipo		.adicionarCaminhoParaCarregamentoEntidade("financiamentoTipo");		filtroDebitoTipo		.adicionarCaminhoParaCarregamentoEntidade("lancamentoItemContabil");		// Verifica se o checkbox Atualizar está marcado e em caso afirmativo		// manda pelo um request uma variável para o		// ExibirManterFuncionalidadeAction e nele verificar se irá para o		// atualizar ou para o manter		if (form.getAtualizar() != null		&& form.getAtualizar().equalsIgnoreCase("1")) {			httpServletRequest.setAttribute("atualizar", form.getAtualizar());		}		// Manda o filtro pelo sessao para o		// ExibirFuncionalidadeAction		sessao.setAttribute("filtroDebitoTipo", filtroDebitoTipo);		httpServletRequest.setAttribute("filtroDebitoTipo", filtroDebitoTipo);		return retorno;	}}