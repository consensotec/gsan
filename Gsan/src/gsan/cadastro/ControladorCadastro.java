/*
 * Copyright (C) 2007-2007 the GSAN - Sistema Integrado de Gestão de Serviços de Saneamento
 *
 * This file is part of GSAN, an integrated service management system for Sanitation
 *
 * GSAN is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License.
 *
 * GSAN is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA
 */
/*
 * GSAN - Sistema Integrado de Gestão de Serviços de Saneamento
 * Copyright (C) <2007> 
 * Adriano Britto Siqueira
 * Alexandre Santos Cabral
 * Ana Carolina Alves Breda
 * Ana Maria Andrade Cavalcante
 * Aryed Lins de Araújo
 * Bruno Leonardo Rodrigues Barros
 * Carlos Elmano Rodrigues Ferreira
 * Cláudio de Andrade Lira
 * Denys Guimarães Guenes Tavares
 * Eduardo Breckenfeld da Rosa Borges
 * Fabíola Gomes de Araújo
 * Flávio Leonardo Cavalcanti Cordeiro
 * Francisco do Nascimento Júnior
 * Homero Sampaio Cavalcanti
 * Ivan Sérgio da Silva Júnior
 * José Edmar de Siqueira
 * José Thiago Tenório Lopes
 * Kássia Regina Silvestre de Albuquerque
 * Leonardo Luiz Vieira da Silva
 * Márcio Roberto Batista da Silva
 * Maria de Fátima Sampaio Leite
 * Micaela Maria Coelho de Araújo
 * Nelson Mendonça de Carvalho
 * Newton Morais e Silva
 * Pedro Alexandre Santos da Silva Filho
 * Rafael Corrêa Lima e Silva
 * Rafael Francisco Pinto
 * Rafael Koury Monteiro
 * Rafael Palermo de Araújo
 * Raphael Veras Rossiter
 * Roberto Sobreira Barbalho
 * Rodrigo Avellar Silveira
 * Rosana Carvalho Barbosa
 * Sávio Luiz de Andrade Cavalcante
 * Tai Mu Shih
 * Thiago Augusto Souza do Nascimento
 * Tiago Moreno Rodrigues
 * Vivianne Barbosa Sousa
 *
 * Este programa é software livre; você pode redistribuí-lo e/ou
 * modificá-lo sob os termos de Licença Pública Geral GNU, conforme
 * publicada pela Free Software Foundation; versão 2 da
 * Licença.
 * Este programa é distribuído na expectativa de ser útil, mas SEM
 * QUALQUER GARANTIA; sem mesmo a garantia implícita de
 * COMERCIALIZAÇÃO ou de ADEQUAÇÃO A QUALQUER PROPÓSITO EM
 * PARTICULAR. Consulte a Licença Pública Geral GNU para obter mais
 * detalhes.
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU
 * junto com este programa; se não, escreva para Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
 * 02111-1307, USA.
 */

package gsan.cadastro;

import gsan.arrecadacao.ControladorArrecadacaoLocal;
import gsan.arrecadacao.ControladorArrecadacaoLocalHome;
import gsan.arrecadacao.pagamento.FiltroPagamento;
import gsan.arrecadacao.pagamento.Pagamento;
import gsan.atendimentopublico.ControladorAtendimentoPublicoLocal;
import gsan.atendimentopublico.ControladorAtendimentoPublicoLocalHome;
import gsan.atendimentopublico.bean.DadosLigacoesBoletimCadastroHelper;
import gsan.atendimentopublico.ligacaoagua.ControladorLigacaoAguaLocal;
import gsan.atendimentopublico.ligacaoagua.ControladorLigacaoAguaLocalHome;
import gsan.atendimentopublico.ligacaoagua.FiltroLigacaoAguaSituacao;
import gsan.atendimentopublico.ligacaoagua.LigacaoAgua;
import gsan.atendimentopublico.ligacaoagua.LigacaoAguaDiametro;
import gsan.atendimentopublico.ligacaoagua.LigacaoAguaMaterial;
import gsan.atendimentopublico.ligacaoagua.LigacaoAguaPerfil;
import gsan.atendimentopublico.ligacaoagua.LigacaoAguaSituacao;
import gsan.atendimentopublico.ligacaoesgoto.ControladorLigacaoEsgotoLocal;
import gsan.atendimentopublico.ligacaoesgoto.ControladorLigacaoEsgotoLocalHome;
import gsan.atendimentopublico.ligacaoesgoto.FiltroLigacaoEsgotoSituacao;
import gsan.atendimentopublico.ligacaoesgoto.LigacaoEsgoto;
import gsan.atendimentopublico.ligacaoesgoto.LigacaoEsgotoDiametro;
import gsan.atendimentopublico.ligacaoesgoto.LigacaoEsgotoMaterial;
import gsan.atendimentopublico.ligacaoesgoto.LigacaoEsgotoPerfil;
import gsan.atendimentopublico.ligacaoesgoto.LigacaoEsgotoSituacao;
import gsan.atendimentopublico.ordemservico.ControladorOrdemServicoLocal;
import gsan.atendimentopublico.ordemservico.ControladorOrdemServicoLocalHome;
import gsan.atendimentopublico.ordemservico.FiltroFotoSituacaoOrdemServico;
import gsan.atendimentopublico.ordemservico.FiscalizacaoSituacao;
import gsan.atendimentopublico.ordemservico.FotoSituacaoOrdemServico;
import gsan.atendimentopublico.ordemservico.IRepositorioOrdemServico;
import gsan.atendimentopublico.ordemservico.OrdemServico;
import gsan.atendimentopublico.ordemservico.RepositorioOrdemServicoHBM;
import gsan.atendimentopublico.ordemservico.bean.SituacaoEncontradaHelper;
import gsan.atendimentopublico.registroatendimento.AtendimentoMotivoEncerramento;
import gsan.atendimentopublico.registroatendimento.ControladorRegistroAtendimentoLocal;
import gsan.atendimentopublico.registroatendimento.ControladorRegistroAtendimentoLocalHome;
import gsan.atendimentopublico.registroatendimento.FiltroSolicitacaoTipoEspecificacao;
import gsan.atendimentopublico.registroatendimento.MeioSolicitacao;
import gsan.atendimentopublico.registroatendimento.RegistroAtendimento;
import gsan.atendimentopublico.registroatendimento.SolicitacaoTipoEspecificacao;
import gsan.atendimentopublico.registroatendimento.bean.DefinirDataPrevistaUnidadeDestinoEspecificacaoHelper;
import gsan.atualizacaocadastral.ArquivoTextoAtualizacaoCadastralDM;
import gsan.atualizacaocadastral.AtributoAtualizacaoCadastralDM;
import gsan.atualizacaocadastral.CepAtlzCadDM;
import gsan.atualizacaocadastral.ClienteAtualizacaoCadastralDM;
import gsan.atualizacaocadastral.ClienteFoneAtualizacaoCadastralDM;
import gsan.atualizacaocadastral.FiltroArquivoTextoAtualizacaoCadastralDM;
import gsan.atualizacaocadastral.FiltroCepAtlzCadDM;
import gsan.atualizacaocadastral.FiltroClienteAtualizacaoCadastralDM;
import gsan.atualizacaocadastral.FiltroClienteFoneAtualizacaoCadastralDM;
import gsan.atualizacaocadastral.FiltroHidrometroInstalacaoHistoricoAtualizacaoCadastralDM;
import gsan.atualizacaocadastral.FiltroImovelAtualizacaoCadastralDM;
import gsan.atualizacaocadastral.FiltroImovelSubcategoriaAtualizacaoCadastralDM;
import gsan.atualizacaocadastral.FiltroLogradouroAtlzCadDM;
import gsan.atualizacaocadastral.FiltroLogradouroBairroAtlzCadDM;
import gsan.atualizacaocadastral.FiltroLogradouroCepAtlzCadDM;
import gsan.atualizacaocadastral.HidrometroInstalacaoHistoricoAtualizacaoCadastralDM;
import gsan.atualizacaocadastral.ImovelAtualizacaoCadastralDM;
import gsan.atualizacaocadastral.ImovelFotoAtualizacaoCadastralDM;
import gsan.atualizacaocadastral.ImovelOcorrenciaAtualizacaoCadastralDM;
import gsan.atualizacaocadastral.ImovelSubcategoriaAtualizacaoCadastralDM;
import gsan.atualizacaocadastral.LogradouroAtlzCadDM;
import gsan.atualizacaocadastral.LogradouroBairroAtlzCadDM;
import gsan.atualizacaocadastral.LogradouroCepAtlzCadDM;
import gsan.atualizacaocadastral.MensagemAtualizacaoCadastralDM;
import gsan.atualizacaocadastral.ParametroQuadraAtualizacaoCadastralDM;
import gsan.atualizacaocadastral.ParametroTabelaAtualizacaoCadastralDM;
import gsan.atualizacaocadastral.RetornoAtualizacaoCadastralDM;
import gsan.atualizacaocadastral.SituacaoTransmissaoAtualizacaoCadastralDM;
import gsan.atualizacaocadastral.bean.AtualizacaoCadastralArquivoTextoHelper;
import gsan.atualizacaocadastral.bean.AtualizarClienteAPartirDispositivoMovelHelper;
import gsan.atualizacaocadastral.bean.ComandoAtualizacaoCadastralDMHelper;
import gsan.atualizacaocadastral.bean.ConsultarRoteiroDispositivoMovelHelper;
import gsan.atualizacaocadastral.bean.DadosCadastradorHelper;
import gsan.atualizacaocadastral.bean.DadosImovelPreGsanHelper;
import gsan.atualizacaocadastral.bean.ImoveisRoteiroDispositivoMovelDMHelper;
import gsan.batch.ControladorBatchLocal;
import gsan.batch.ControladorBatchLocalHome;
import gsan.batch.UnidadeProcessamento;
import gsan.batch.cadastro.BuscarSMSTWWHelper;
import gsan.cadastro.atualizacaocadastral.bean.DadosResumoMovimentoAtualizacaoCadastralHelper;
import gsan.cadastro.atualizacaocadastralsimplificado.AtualizacaoCadastralSimplificado;
import gsan.cadastro.atualizacaocadastralsimplificado.AtualizacaoCadastralSimplificadoBinario;
import gsan.cadastro.atualizacaocadastralsimplificado.AtualizacaoCadastralSimplificadoCritica;
import gsan.cadastro.atualizacaocadastralsimplificado.AtualizacaoCadastralSimplificadoLinha;
import gsan.cadastro.atualizacaocadastralsimplificado.FiltroAtualizacaoCadastralSimplificadoCritica;
import gsan.cadastro.cliente.Cliente;
import gsan.cadastro.cliente.ClienteAtualizacaoCadastral;
import gsan.cadastro.cliente.ClienteConta;
import gsan.cadastro.cliente.ClienteEndereco;
import gsan.cadastro.cliente.ClienteFone;
import gsan.cadastro.cliente.ClienteFoneAtualizacaoCadastral;
import gsan.cadastro.cliente.ClienteImovel;
import gsan.cadastro.cliente.ClienteImovelFimRelacaoMotivo;
import gsan.cadastro.cliente.ClienteRelacaoTipo;
import gsan.cadastro.cliente.ClienteTipo;
import gsan.cadastro.cliente.ControladorClienteLocal;
import gsan.cadastro.cliente.ControladorClienteLocalHome;
import gsan.cadastro.cliente.FiltroCliente;
import gsan.cadastro.cliente.FiltroClienteConta;
import gsan.cadastro.cliente.FiltroClienteEndereco;
import gsan.cadastro.cliente.FiltroClienteImovel;
import gsan.cadastro.cliente.FiltroClienteTipo;
import gsan.cadastro.cliente.FiltroFoneTipo;
import gsan.cadastro.cliente.FiltroOrgaoExpedidorRg;
import gsan.cadastro.cliente.FiltroPessoaSexo;
import gsan.cadastro.cliente.FoneTipo;
import gsan.cadastro.cliente.IRepositorioClienteImovel;
import gsan.cadastro.cliente.OrgaoExpedidorRg;
import gsan.cadastro.cliente.PessoaSexo;
import gsan.cadastro.cliente.RepositorioClienteImovelHBM;
import gsan.cadastro.cliente.bean.ClienteEmitirBoletimCadastroHelper;
import gsan.cadastro.empresa.Empresa;
import gsan.cadastro.empresa.EmpresaCobrancaFaixa;
import gsan.cadastro.empresa.EmpresaContratoCobranca;
import gsan.cadastro.empresa.FiltroEmpresa;
import gsan.cadastro.empresa.FiltroEmpresaContratoCobranca;
import gsan.cadastro.empresa.IRepositorioEmpresa;
import gsan.cadastro.empresa.RepositorioEmpresaHBM;
import gsan.cadastro.endereco.Cep;
import gsan.cadastro.endereco.ControladorEnderecoLocal;
import gsan.cadastro.endereco.ControladorEnderecoLocalHome;
import gsan.cadastro.endereco.EnderecoReferencia;
import gsan.cadastro.endereco.EnderecoTipo;
import gsan.cadastro.endereco.FiltroCep;
import gsan.cadastro.endereco.FiltroEnderecoReferencia;
import gsan.cadastro.endereco.FiltroLogradouro;
import gsan.cadastro.endereco.FiltroLogradouroBairro;
import gsan.cadastro.endereco.FiltroLogradouroCep;
import gsan.cadastro.endereco.FiltroLogradouroTipo;
import gsan.cadastro.endereco.FiltroLogradouroTitulo;
import gsan.cadastro.endereco.Logradouro;
import gsan.cadastro.endereco.LogradouroBairro;
import gsan.cadastro.endereco.LogradouroCep;
import gsan.cadastro.endereco.LogradouroTipo;
import gsan.cadastro.endereco.LogradouroTitulo;
import gsan.cadastro.endereco.bean.ExibirFiltrarLogradouroHelper;
import gsan.cadastro.funcionario.FiltroFuncionario;
import gsan.cadastro.funcionario.Funcionario;
import gsan.cadastro.geografico.Bairro;
import gsan.cadastro.geografico.ControladorGeograficoLocal;
import gsan.cadastro.geografico.ControladorGeograficoLocalHome;
import gsan.cadastro.geografico.FiltroBairro;
import gsan.cadastro.geografico.FiltroMunicipioFeriado;
import gsan.cadastro.geografico.FiltroUnidadeFederacao;
import gsan.cadastro.geografico.Municipio;
import gsan.cadastro.geografico.MunicipioFeriado;
import gsan.cadastro.geografico.UnidadeFederacao;
import gsan.cadastro.imovel.CadastroOcorrencia;
import gsan.cadastro.imovel.Categoria;
import gsan.cadastro.imovel.CategoriaTipo;
import gsan.cadastro.imovel.ControladorImovelLocal;
import gsan.cadastro.imovel.ControladorImovelLocalHome;
import gsan.cadastro.imovel.EntidadeBeneficente;
import gsan.cadastro.imovel.FiltroCadastroOcorrencia;
import gsan.cadastro.imovel.FiltroCategoria;
import gsan.cadastro.imovel.FiltroEntidadeBeneficente;
import gsan.cadastro.imovel.FiltroFonteAbastecimento;
import gsan.cadastro.imovel.FiltroImovel;
import gsan.cadastro.imovel.FiltroImovelInscricaoAlterada;
import gsan.cadastro.imovel.FiltroImovelPerfil;
import gsan.cadastro.imovel.FiltroPavimentoCalcada;
import gsan.cadastro.imovel.FiltroPavimentoRua;
import gsan.cadastro.imovel.FiltroSubCategoria;
import gsan.cadastro.imovel.FonteAbastecimento;
import gsan.cadastro.imovel.IRepositorioImovel;
import gsan.cadastro.imovel.Imovel;
import gsan.cadastro.imovel.ImovelAtualizacaoCadastral;
import gsan.cadastro.imovel.ImovelContaEnvio;
import gsan.cadastro.imovel.ImovelInscricaoAlterada;
import gsan.cadastro.imovel.ImovelPerfil;
import gsan.cadastro.imovel.ImovelProgramaEspecial;
import gsan.cadastro.imovel.ImovelSubcategoria;
import gsan.cadastro.imovel.ImovelSubcategoriaAtualizacaoCadastral;
import gsan.cadastro.imovel.ImovelSubcategoriaPK;
import gsan.cadastro.imovel.ItemMovimentoProgramaEspecial;
import gsan.cadastro.imovel.MovimentoProgramaEspecial;
import gsan.cadastro.imovel.PavimentoCalcada;
import gsan.cadastro.imovel.PavimentoRua;
import gsan.cadastro.imovel.RepositorioImovelHBM;
import gsan.cadastro.imovel.Subcategoria;
import gsan.cadastro.imovel.bean.GerarArquivoTextoAtualizacaoCadastralHelper;
import gsan.cadastro.imovel.bean.ImovelGeracaoTabelasTemporariasCadastroHelper;
import gsan.cadastro.localidade.ControladorLocalidadeLocal;
import gsan.cadastro.localidade.ControladorLocalidadeLocalHome;
import gsan.cadastro.localidade.FiltroGerenciaRegional;
import gsan.cadastro.localidade.FiltroLocalidade;
import gsan.cadastro.localidade.FiltroQuadra;
import gsan.cadastro.localidade.FiltroSetorComercial;
import gsan.cadastro.localidade.FiltroUnidadeNegocio;
import gsan.cadastro.localidade.GerenciaRegional;
import gsan.cadastro.localidade.IRepositorioLocalidade;
import gsan.cadastro.localidade.IRepositorioSetorComercial;
import gsan.cadastro.localidade.Localidade;
import gsan.cadastro.localidade.Quadra;
import gsan.cadastro.localidade.QuadraFace;
import gsan.cadastro.localidade.RepositorioLocalidadeHBM;
import gsan.cadastro.localidade.RepositorioSetorComercialHBM;
import gsan.cadastro.localidade.SetorComercial;
import gsan.cadastro.localidade.UnidadeNegocio;
import gsan.cadastro.sistemaparametro.FiltroNacionalFeriado;
import gsan.cadastro.sistemaparametro.FiltroSistemaAlteracaoHistorico;
import gsan.cadastro.sistemaparametro.NacionalFeriado;
import gsan.cadastro.sistemaparametro.SistemaAlteracaoHistorico;
import gsan.cadastro.sistemaparametro.SistemaParametro;
import gsan.cadastro.sistemaparametro.bean.DadosEnvioEmailHelper;
import gsan.cadastro.sistemaparametro.bean.FeriadoHelper;
import gsan.cadastro.tarifasocial.ControladorTarifaSocialLocal;
import gsan.cadastro.tarifasocial.ControladorTarifaSocialLocalHome;
import gsan.cadastro.tarifasocial.TarifaSocialCarta;
import gsan.cadastro.tarifasocial.TarifaSocialCartaDebito;
import gsan.cadastro.tarifasocial.TarifaSocialCartaDebitoPK;
import gsan.cadastro.tarifasocial.TarifaSocialCartaPK;
import gsan.cadastro.tarifasocial.TarifaSocialComandoCarta;
import gsan.cadastro.tarifasocial.TarifaSocialDadoEconomia;
import gsan.cadastro.tarifasocial.TarifaSocialMotivoCarta;
import gsan.cadastro.unidade.FiltroUnidadeOrganizacional;
import gsan.cadastro.unidade.UnidadeOrganizacional;
import gsan.cobranca.CobrancaAcao;
import gsan.cobranca.CobrancaAcaoAtividadeComando;
import gsan.cobranca.CobrancaAcaoAtividadeCronograma;
import gsan.cobranca.CobrancaDocumento;
import gsan.cobranca.CobrancaSituacaoHistorico;
import gsan.cobranca.ControladorCobrancaLocal;
import gsan.cobranca.ControladorCobrancaLocalHome;
import gsan.cobranca.FiltroCobrancaAcao;
import gsan.cobranca.FiltroCobrancaAcaoAtividadeComando;
import gsan.cobranca.IRepositorioCobranca;
import gsan.cobranca.RepositorioCobrancaHBM;
import gsan.cobranca.bean.CalcularAcrescimoPorImpontualidadeHelper;
import gsan.cobranca.bean.ContaValoresHelper;
import gsan.cobranca.bean.EmitirDocumentoCobrancaBoletimCadastroHelper;
import gsan.cobranca.bean.GuiaPagamentoValoresHelper;
import gsan.cobranca.bean.ObterDebitoImovelOuClienteHelper;
import gsan.fachada.Fachada;
import gsan.faturamento.ControladorFaturamentoLocal;
import gsan.faturamento.ControladorFaturamentoLocalHome;
import gsan.faturamento.FaturamentoGrupo;
import gsan.faturamento.IRepositorioFaturamento;
import gsan.faturamento.RepositorioFaturamentoHBM;
import gsan.faturamento.bean.CalcularValoresAguaEsgotoHelper;
import gsan.faturamento.consumotarifa.ConsumoTarifa;
import gsan.faturamento.conta.Conta;
import gsan.faturamento.conta.ContaMensagem;
import gsan.faturamento.conta.Fatura;
import gsan.faturamento.conta.FaturaItem;
import gsan.faturamento.conta.FiltroConta;
import gsan.faturamento.conta.FiltroContaMensagem;
import gsan.faturamento.credito.CreditoARealizar;
import gsan.faturamento.debito.DebitoACobrar;
import gsan.faturamento.debito.DebitoTipo;
import gsan.faturamento.debito.FiltroDebitoACobrar;
import gsan.faturamento.debito.FiltroDebitoTipo;
import gsan.gui.atualizacaocadastral.AtualizacaoCadastralDMOnlineHelper;
import gsan.gui.atualizacaocadastral.RelatorioImoveisInconsistentesMovimentoBean;
import gsan.gui.atualizacaocadastral.AtualizacaoCadastralDMOnlineHelper.CepDM;
import gsan.gui.atualizacaocadastral.AtualizacaoCadastralDMOnlineHelper.ClienteDM;
import gsan.gui.atualizacaocadastral.AtualizacaoCadastralDMOnlineHelper.ClienteFoneDM;
import gsan.gui.atualizacaocadastral.AtualizacaoCadastralDMOnlineHelper.HidrometroInstacaoHistoricoDM;
import gsan.gui.atualizacaocadastral.AtualizacaoCadastralDMOnlineHelper.ImovelDM;
import gsan.gui.atualizacaocadastral.AtualizacaoCadastralDMOnlineHelper.ImovelOcorrenciaDM;
import gsan.gui.atualizacaocadastral.AtualizacaoCadastralDMOnlineHelper.ImovelSubcategoriaDM;
import gsan.gui.atualizacaocadastral.AtualizacaoCadastralDMOnlineHelper.LogradouroCepDM;
import gsan.gui.atualizacaocadastral.AtualizacaoCadastralDMOnlineHelper.LogradouroDM;
import gsan.gui.cadastro.imovel.FiltrarRelatorioHistoricoImoveisProgramaEspecialHelper;
import gsan.gui.cadastro.imovel.RelatorioHistoriocoImoveisProgramaEspecialHelper;
import gsan.gui.relatorio.cadastro.FiltrarRelatorioAcessoSPCHelper;
import gsan.gui.relatorio.cadastro.GerarRelatorioAlteracoesCpfCnpjHelper;
import gsan.gui.relatorio.cadastro.micromedicao.FiltrarRelatorioColetaMedidorEnergiaHelper;
import gsan.gui.relatorio.seguranca.GerarRelatorioAlteracoesSistemaColunaHelper;
import gsan.interceptor.Interceptador;
import gsan.interceptor.RegistradorOperacao;
import gsan.micromedicao.ArquivoTextoLigacoesHidrometroHelper;
import gsan.micromedicao.ControladorMicromedicaoLocal;
import gsan.micromedicao.ControladorMicromedicaoLocalHome;
import gsan.micromedicao.IRepositorioMicromedicao;
import gsan.micromedicao.Leiturista;
import gsan.micromedicao.RepositorioMicromedicaoHBM;
import gsan.micromedicao.Rota;
import gsan.micromedicao.SituacaoTransmissaoLeitura;
import gsan.micromedicao.consumo.LigacaoTipo;
import gsan.micromedicao.hidrometro.FiltroHidrometro;
import gsan.micromedicao.hidrometro.FiltroHidrometroCapacidade;
import gsan.micromedicao.hidrometro.FiltroHidrometroInstalacaoHistorico;
import gsan.micromedicao.hidrometro.FiltroHidrometroLocalInstalacao;
import gsan.micromedicao.hidrometro.FiltroHidrometroMarca;
import gsan.micromedicao.hidrometro.FiltroHidrometroProtecao;
import gsan.micromedicao.hidrometro.Hidrometro;
import gsan.micromedicao.hidrometro.HidrometroCapacidade;
import gsan.micromedicao.hidrometro.HidrometroInstalacaoHistorico;
import gsan.micromedicao.hidrometro.HidrometroLocalInstalacao;
import gsan.micromedicao.hidrometro.HidrometroMarca;
import gsan.micromedicao.hidrometro.HidrometroProtecao;
import gsan.micromedicao.hidrometro.HidrometroSituacao;
import gsan.micromedicao.leitura.FiltroLeituraAnormalidade;
import gsan.micromedicao.leitura.FiltroLeiturista;
import gsan.micromedicao.leitura.LeituraAnormalidade;
import gsan.micromedicao.medicao.FiltroMedicaoTipo;
import gsan.micromedicao.medicao.MedicaoTipo;
import gsan.relatorio.cadastro.GerarRelatorioAtualizacaoCadastralViaInternetHelper;
import gsan.relatorio.cadastro.RelatorioAcessoSPCBean;
import gsan.relatorio.cadastro.RelatorioAtualizacaoCadastralHelper;
import gsan.relatorio.cadastro.RelatorioBoletimCadastroIndividualBean;
import gsan.relatorio.cadastro.RelatorioMensagensPendentesCadastradorBean;
import gsan.relatorio.cadastro.RelatorioQuantitativoMensagensPendentesBean;
import gsan.relatorio.cadastro.RelatorioResumoPosicaoAtualizacaoCadastralBean;
import gsan.relatorio.cadastro.RelatorioResumoSituacaoImoveisAnalistaCadastradorBean;
import gsan.relatorio.cadastro.imovel.FiltrarRelatorioImoveisAlteracaoInscricaoViaBatchHelper;
import gsan.relatorio.cadastro.imovel.FiltrarRelatorioImoveisAtivosNaoMedidosHelper;
import gsan.relatorio.cadastro.imovel.FiltrarRelatorioImoveisConsumoMedioHelper;
import gsan.relatorio.cadastro.imovel.FiltrarRelatorioImoveisFaturasAtrasoHelper;
import gsan.relatorio.cadastro.imovel.FiltrarRelatorioImoveisFaturasRecentesDiaFaturasAntigasAtrasoHelper;
import gsan.relatorio.cadastro.imovel.FiltrarRelatorioImoveisProgramasEspeciaisHelper;
import gsan.relatorio.cadastro.imovel.FiltrarRelatorioImoveisSituacaoLigacaoAguaHelper;
import gsan.relatorio.cadastro.imovel.FiltrarRelatorioImoveisTipoConsumoHelper;
import gsan.relatorio.cadastro.imovel.FiltrarRelatorioImoveisUltimosConsumosAguaHelper;
import gsan.relatorio.cadastro.imovel.RelatorioImoveisAtivosNaoMedidosHelper;
import gsan.relatorio.cadastro.imovel.RelatorioImoveisConsumoMedioHelper;
import gsan.relatorio.cadastro.imovel.RelatorioImoveisFaturasAtrasoHelper;
import gsan.relatorio.cadastro.imovel.RelatorioImoveisFaturasRecentesDiaFaturasAntigasAtrasoHelper;
import gsan.relatorio.cadastro.imovel.RelatorioImoveisProgramasEspeciaisHelper;
import gsan.relatorio.cadastro.imovel.RelatorioImoveisSituacaoLigacaoAguaHelper;
import gsan.relatorio.cadastro.imovel.RelatorioImoveisTipoConsumoHelper;
import gsan.relatorio.cadastro.imovel.RelatorioImoveisUltimosConsumosAguaHelper;
import gsan.relatorio.cadastro.micromedicao.RelatorioColetaMedidorEnergiaHelper;
import gsan.seguranca.Atributo;
import gsan.seguranca.acesso.Operacao;
import gsan.seguranca.acesso.OperacaoEfetuada;
import gsan.seguranca.acesso.usuario.FiltroUsuario;
import gsan.seguranca.acesso.usuario.IRepositorioUsuario;
import gsan.seguranca.acesso.usuario.RepositorioUsuarioHBM;
import gsan.seguranca.acesso.usuario.Usuario;
import gsan.seguranca.acesso.usuario.UsuarioAcao;
import gsan.seguranca.acesso.usuario.UsuarioAcaoUsuarioHelper;
import gsan.seguranca.transacao.AlteracaoTipo;
import gsan.seguranca.transacao.ControladorTransacaoLocal;
import gsan.seguranca.transacao.ControladorTransacaoLocalHome;
import gsan.seguranca.transacao.Tabela;
import gsan.seguranca.transacao.TabelaAtualizacaoCadastral;
import gsan.seguranca.transacao.TabelaColuna;
import gsan.seguranca.transacao.TabelaColunaAtualizacaoCadastral;
import gsan.seguranca.transacao.TabelaLinhaColunaAlteracao;
import gsan.util.CollectionUtil;
import gsan.util.ConstantesJNDI;
import gsan.util.ConstantesSistema;
import gsan.util.ControladorException;
import gsan.util.ControladorUtilLocal;
import gsan.util.ControladorUtilLocalHome;
import gsan.util.ErroRepositorioException;
import gsan.util.FachadaException;
import gsan.util.IRepositorioUtil;
import gsan.util.IoUtil;
import gsan.util.ParserUtil;
import gsan.util.RepositorioUtilHBM;
import gsan.util.ServiceLocator;
import gsan.util.ServiceLocatorException;
import gsan.util.SistemaException;
import gsan.util.Util;
import gsan.util.ZipUtil;
import gsan.util.email.ErroEmailException;
import gsan.util.email.ServicosEmail;
import gsan.util.filtro.ParametroNaoNulo;
import gsan.util.filtro.ParametroNulo;
import gsan.util.filtro.ParametroSimples;
import gsan.util.filtro.ParametroSimplesDiferenteDe;
import gsan.util.filtro.ParametroSimplesIn;

import java.awt.image.BufferedImage;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.OutputStream;
import java.io.OutputStreamWriter;
import java.math.BigDecimal;
import java.net.HttpURLConnection;
import java.net.URL;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.text.DecimalFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Collection;
import java.util.Collections;
import java.util.Comparator;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.HashSet;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.List;
import java.util.Set;
import java.util.StringTokenizer;
import java.util.TreeMap;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import java.util.zip.ZipOutputStream;

import javax.ejb.CreateException;
import javax.ejb.EJBException;
import javax.ejb.SessionBean;
import javax.ejb.SessionContext;
import javax.imageio.ImageIO;

import org.apache.commons.io.FilenameUtils;

import br.com.danhil.BarCode.Interleaved2of5;

/**
 * <p>
 * 
 * Title: GCOM
 * </p>
 * <p>
 * 
 * Description: Sistema de Gestão Comercial
 * </p>
 * <p>
 * 
 * Copyright: Copyright (c) 2004
 * </p>
 * <p>
 * 
 * Company: COMPESA - Companhia Pernambucana de Saneamento
 * </p>
 * 
 * @author not attributable
 * @created 6 de Setembro de 2005
 * @version 1.0
 */

public class ControladorCadastro implements SessionBean {

	private static final long serialVersionUID = 1L;

	SessionContext sessionContext;

	private IRepositorioEmpresa repositorioEmpresa = null;

	protected IRepositorioCadastro repositorioCadastro = null;

	private IRepositorioSetorComercial repositorioSetorComercial = null;

	private IRepositorioCobranca repositorioCobranca = null;

	private IRepositorioClienteImovel repositorioClienteImovel = null;

	private IRepositorioImovel repositorioImovel = null;

	private IRepositorioFaturamento repositorioFaturamento = null;

	private IRepositorioUtil repositorioUtil = null;

	private IRepositorioMicromedicao repositorioMicromedicao = null;

	private IRepositorioLocalidade repositorioLocalidade = null;

	private IRepositorioOrdemServico repositorioOrdemServico = null;

	private IRepositorioUsuario repositorioUsuario = null;

	/**
	 * < <Descrição do método>>
	 * 
	 * @exception CreateException
	 *                Descrição da exceção
	 */
	public void ejbCreate() throws CreateException {
		repositorioEmpresa = RepositorioEmpresaHBM.getInstancia();
		repositorioCadastro = RepositorioCadastroHBM.getInstancia();
		repositorioSetorComercial = RepositorioSetorComercialHBM.getInstancia();
		repositorioCobranca = RepositorioCobrancaHBM.getInstancia();
		repositorioClienteImovel = RepositorioClienteImovelHBM.getInstancia();
		repositorioImovel = RepositorioImovelHBM.getInstancia();
		repositorioFaturamento = RepositorioFaturamentoHBM.getInstancia();
		repositorioUtil = RepositorioUtilHBM.getInstancia();
		repositorioMicromedicao = RepositorioMicromedicaoHBM.getInstancia();
		repositorioLocalidade = RepositorioLocalidadeHBM.getInstancia();
		repositorioOrdemServico = RepositorioOrdemServicoHBM.getInstancia();
		repositorioUsuario = RepositorioUsuarioHBM.getInstancia();
	}

	/**
	 * < <Descrição do método>>
	 */
	public void ejbRemove() {
	}

	/**
	 * < <Descrição do método>>
	 */
	public void ejbActivate() {
	}

	/**
	 * < <Descrição do método>>
	 */
	public void ejbPassivate() {
	}

	/**
	 * Seta o valor de sessionContext
	 * 
	 * @param sessionContext
	 *            O novo valor de sessionContext
	 */
	public void setSessionContext(SessionContext sessionContext) {
		this.sessionContext = sessionContext;
	}

	private ControladorFaturamentoLocal getControladorFaturamento() {
		ControladorFaturamentoLocalHome localHome = null;
		ControladorFaturamentoLocal local = null;

		// pega a instância do ServiceLocator.

		ServiceLocator locator = null;

		try {
			locator = ServiceLocator.getInstancia();

			localHome = (ControladorFaturamentoLocalHome) locator
					.getLocalHomePorEmpresa(ConstantesJNDI.CONTROLADOR_FATURAMENTO_SEJB);
			// guarda a referencia de um objeto capaz de fazer chamadas
			// objetos remotamente
			local = localHome.create();

			return local;
		} catch (CreateException e) {
			throw new SistemaException(e);
		} catch (ServiceLocatorException e) {
			throw new SistemaException(e);
		}
	}

	/**
	 * Retorna o valor de controladorUtil
	 * 
	 * @return O valor de controladorUtil
	 */
	protected ControladorUtilLocal getControladorUtil() {

		ControladorUtilLocalHome localHome = null;
		ControladorUtilLocal local = null;

		// pega a instância do ServiceLocator.

		ServiceLocator locator = null;

		try {
			locator = ServiceLocator.getInstancia();

			localHome = (ControladorUtilLocalHome) locator
					.getLocalHome(ConstantesJNDI.CONTROLADOR_UTIL_SEJB);
			// guarda a referencia de um objeto capaz de fazer chamadas à
			// objetos remotamente
			local = localHome.create();

			return local;
		} catch (CreateException e) {
			throw new SistemaException(e);
		} catch (ServiceLocatorException e) {
			throw new SistemaException(e);
		}

	}

	/**
	 * Retorna o valor de controladorAcesso
	 * 
	 * @return O valor de controladorAcesso
	 */
	protected ControladorArrecadacaoLocal getControladorArrecadacao() {
		ControladorArrecadacaoLocalHome localHome = null;
		ControladorArrecadacaoLocal local = null;

		// pega a instância do ServiceLocator.

		ServiceLocator locator = null;

		try {
			locator = ServiceLocator.getInstancia();

			localHome = (ControladorArrecadacaoLocalHome) locator
					.getLocalHomePorEmpresa(ConstantesJNDI.CONTROLADOR_ARRECADACAO_SEJB);
			// guarda a referencia de um objeto capaz de fazer chamadas à
			// objetos remotamente
			local = localHome.create();

			return local;
		} catch (CreateException e) {
			throw new SistemaException(e);
		} catch (ServiceLocatorException e) {
			throw new SistemaException(e);
		}
	}

	protected ControladorLigacaoAguaLocal getControladorLigacaoAgua() {

		ControladorLigacaoAguaLocalHome localHome = null;
		ControladorLigacaoAguaLocal local = null;

		// pega a instância do ServiceLocator.

		ServiceLocator locator = null;

		try {
			locator = ServiceLocator.getInstancia();

			localHome = (ControladorLigacaoAguaLocalHome) locator
					.getLocalHome(ConstantesJNDI.CONTROLADOR_LIGACAO_AGUA_SEJB);
			// guarda a referencia de um objeto capaz de fazer chamadas à
			// objetos remotamente
			local = localHome.create();

			return local;
		} catch (CreateException e) {
			throw new SistemaException(e);
		} catch (ServiceLocatorException e) {
			throw new SistemaException(e);
		}

	}

	/**
	 * Retorna o valor de controladorUtil
	 * 
	 * @return O valor de controladorUtil
	 */
	protected ControladorLocalidadeLocal getControladorLocalidade() {

		ControladorLocalidadeLocalHome localHome = null;
		ControladorLocalidadeLocal local = null;

		// pega a instância do ServiceLocator.

		ServiceLocator locator = null;

		try {
			locator = ServiceLocator.getInstancia();

			localHome = (ControladorLocalidadeLocalHome) locator
					.getLocalHome(ConstantesJNDI.CONTROLADOR_LOCALIDADE_SEJB);
			// guarda a referencia de um objeto capaz de fazer chamadas à
			// objetos remotamente
			local = localHome.create();

			return local;
		} catch (CreateException e) {
			throw new SistemaException(e);
		} catch (ServiceLocatorException e) {
			throw new SistemaException(e);
		}

	}

	/**
	 * Retorna o valor de controladorEndereco
	 * 
	 * @return O valor de controladorEndereco
	 */
	protected ControladorEnderecoLocal getControladorEndereco() {

		ControladorEnderecoLocalHome localHome = null;
		ControladorEnderecoLocal local = null;

		// pega a instância do ServiceLocator.

		ServiceLocator locator = null;

		try {
			locator = ServiceLocator.getInstancia();

			localHome = (ControladorEnderecoLocalHome) locator
					.getLocalHome(ConstantesJNDI.CONTROLADOR_ENDERECO_SEJB);
			// guarda a referencia de um objeto capaz de fazer chamadas à
			// objetos remotamente
			local = localHome.create();

			return local;
		} catch (CreateException e) {
			throw new SistemaException(e);
		} catch (ServiceLocatorException e) {
			throw new SistemaException(e);
		}
	}

	/**
	 * Retorna o valor de controladorImovel
	 * 
	 * @return O valor de controladorImovel
	 */
	protected ControladorImovelLocal getControladorImovel() {

		ControladorImovelLocalHome localHome = null;
		ControladorImovelLocal local = null;

		// pega a instância do ServiceLocator.

		ServiceLocator locator = null;

		try {
			locator = ServiceLocator.getInstancia();

			localHome = (ControladorImovelLocalHome) locator
					.getLocalHome(ConstantesJNDI.CONTROLADOR_IMOVEL_SEJB);
			// guarda a referencia de um objeto capaz de fazer chamadas à
			// objetos remotamente
			local = localHome.create();

			return local;
		} catch (CreateException e) {
			throw new SistemaException(e);
		} catch (ServiceLocatorException e) {
			throw new SistemaException(e);
		}
	}

	/**
	 * Author: Rafael Santos Data: 04/01/2006
	 * 
	 * Retorna o valor do Controlador de Cobranca
	 * 
	 * @return O valor de controladorCobrancaLocal
	 */
	protected ControladorCobrancaLocal getControladorCobranca() {

		ControladorCobrancaLocalHome localHome = null;
		ControladorCobrancaLocal local = null;

		// pega a instância do ServiceLocator.

		ServiceLocator locator = null;

		try {
			locator = ServiceLocator.getInstancia();

			localHome = (ControladorCobrancaLocalHome) locator
					.getLocalHomePorEmpresa(ConstantesJNDI.CONTROLADOR_COBRANCA_SEJB);
			// guarda a referencia de um objeto capaz de fazer chamadas
			// objetos remotamente
			local = localHome.create();

			return local;
		} catch (CreateException e) {
			throw new SistemaException(e);
		} catch (ServiceLocatorException e) {
			throw new SistemaException(e);
		}

	}

	/**
	 * Retorna o controladorLigacaoEsgoto
	 */
	protected ControladorLigacaoEsgotoLocal getControladorLigacaoEsgoto() {
		ControladorLigacaoEsgotoLocalHome localHome = null;
		ControladorLigacaoEsgotoLocal local = null;

		ServiceLocator locator = null;
		try {
			locator = ServiceLocator.getInstancia();
			localHome = (ControladorLigacaoEsgotoLocalHome) locator
					.getLocalHome(ConstantesJNDI.CONTROLADOR_LIGACAO_ESGOTO_SEJB);
			local = localHome.create();
			return local;
		} catch (CreateException e) {
			throw new SistemaException(e);
		} catch (ServiceLocatorException e) {
			throw new SistemaException(e);
		}
	}

	/**
	 * Retorna o valor de controladorAtendimentoPublico
	 * 
	 * @return O valor de controladorAtendimentoPublico
	 */
	protected ControladorAtendimentoPublicoLocal getControladorAtendimentoPublico() {

		ControladorAtendimentoPublicoLocalHome localHome = null;
		ControladorAtendimentoPublicoLocal local = null;

		// pega a instância do ServiceLocator.

		ServiceLocator locator = null;

		try {
			locator = ServiceLocator.getInstancia();

			localHome = (ControladorAtendimentoPublicoLocalHome) locator
					.getLocalHome(ConstantesJNDI.CONTROLADOR_ATENDIMENTO_PUBLICO_SEJB);
			// guarda a referencia de um objeto capaz de fazer chamadas à
			// objetos remotamente
			local = localHome.create();

			return local;
		} catch (CreateException e) {
			throw new SistemaException(e);
		} catch (ServiceLocatorException e) {
			throw new SistemaException(e);
		}
	}

	/**
	 * Retorna o valor de controladorCliente
	 * 
	 * @return O valor de controladorImovel
	 */
	protected ControladorClienteLocal getControladorCliente() {

		ControladorClienteLocalHome localHome = null;
		ControladorClienteLocal local = null;

		// pega a instância do ServiceLocator.

		ServiceLocator locator = null;

		try {
			locator = ServiceLocator.getInstancia();

			localHome = (ControladorClienteLocalHome) locator
					.getLocalHome(ConstantesJNDI.CONTROLADOR_CLIENTE_SEJB);
			// guarda a referencia de um objeto capaz de fazer chamadas à
			// objetos remotamente
			local = localHome.create();

			return local;
		} catch (CreateException e) {
			throw new SistemaException(e);
		} catch (ServiceLocatorException e) {
			throw new SistemaException(e);
		}
	}

	/**
	 * Retorna o valor do ControladorBatch
	 * 
	 * @author Rafael Corrêa
	 * @date 31/05/2007
	 * 
	 * @return O valor de ControladorBatch
	 */
	protected ControladorBatchLocal getControladorBatch() {
		ControladorBatchLocalHome localHome = null;
		ControladorBatchLocal local = null;

		// pega a instância do ServiceLocator.

		ServiceLocator locator = null;

		try {
			locator = ServiceLocator.getInstancia();

			localHome = (ControladorBatchLocalHome) locator
					.getLocalHome(ConstantesJNDI.CONTROLADOR_BATCH_SEJB);
			// guarda a referencia de um objeto capaz de fazer chamadas à
			// objetos remotamente
			local = localHome.create();

			return local;
		} catch (CreateException e) {
			throw new SistemaException(e);
		} catch (ServiceLocatorException e) {
			throw new SistemaException(e);
		}
	}

	/**
	 * Retorna o valor de controladorTarifaSocial
	 * 
	 * @return O valor de controladorTarifaSocial
	 */
	private ControladorTarifaSocialLocal getControladorTarifaSocialSEJB() {
		ControladorTarifaSocialLocalHome localHome = null;
		ControladorTarifaSocialLocal local = null;

		// pega a instância do ServiceLocator.

		ServiceLocator locator = null;

		try {
			locator = ServiceLocator.getInstancia();

			localHome = (ControladorTarifaSocialLocalHome) locator
					.getLocalHome(ConstantesJNDI.CONTROLADOR_TARIFA_SOCIAL_SEJB);
			// guarda a referencia de um objeto capaz de fazer chamadas
			// objetos remotamente
			local = localHome.create();

			return local;
		} catch (CreateException e) {
			throw new SistemaException(e);
		} catch (ServiceLocatorException e) {
			throw new SistemaException(e);
		}
	}

	private ControladorRegistroAtendimentoLocal getControladorRegistroAtendimento() {
		ControladorRegistroAtendimentoLocalHome localHome = null;
		ControladorRegistroAtendimentoLocal local = null;

		// pega a instância do ServiceLocator.

		ServiceLocator locator = null;

		try {
			locator = ServiceLocator.getInstancia();
			localHome = (ControladorRegistroAtendimentoLocalHome) locator
					.getLocalHome(ConstantesJNDI.CONTROLADOR_REGISTRO_ATENDIMENTO_SEJB);
			// guarda a referencia de um objeto capaz de fazer chamadas à
			// objetos remotamente
			local = localHome.create();

			return local;
		} catch (CreateException e) {
			throw new SistemaException(e);
		} catch (ServiceLocatorException e) {
			throw new SistemaException(e);
		}
	}

	protected ControladorMicromedicaoLocal getControladorMicromedicao() {
		ControladorMicromedicaoLocalHome localHome = null;
		ControladorMicromedicaoLocal local = null;

		// pega a instância do ServiceLocator.

		ServiceLocator locator = null;

		try {
			locator = ServiceLocator.getInstancia();

			localHome = (ControladorMicromedicaoLocalHome) locator
					.getLocalHomePorEmpresa(ConstantesJNDI.CONTROLADOR_MICROMEDICAO_SEJB);
			// guarda a referencia de um objeto capaz de fazer chamadas à
			// objetos remotamente
			local = localHome.create();

			return local;
		} catch (CreateException e) {
			throw new SistemaException(e);
		} catch (ServiceLocatorException e) {
			throw new SistemaException(e);
		}
	}

	protected ControladorTransacaoLocal getControladorTransacao() {
		ControladorTransacaoLocalHome localHome = null;
		ControladorTransacaoLocal local = null;

		// pega a instância do ServiceLocator.

		ServiceLocator locator = null;

		try {
			locator = ServiceLocator.getInstancia();

			localHome = (ControladorTransacaoLocalHome) locator
					.getLocalHome(ConstantesJNDI.CONTROLADOR_TRANSACAO_SEJB);
			// guarda a referencia de um objeto capaz de fazer chamadas
			// objetos remotamente
			local = localHome.create();

			return local;
		} catch (CreateException e) {
			throw new SistemaException(e);
		} catch (ServiceLocatorException e) {
			throw new SistemaException(e);
		}

	}

	/**
	 * Retorna o valor de controladorUtil
	 * 
	 * @return O valor de controladorUtil
	 */
	protected ControladorGeograficoLocal getControladorGeografico() {

		ControladorGeograficoLocalHome localHome = null;
		ControladorGeograficoLocal local = null;

		// pega a instância do ServiceLocator.

		ServiceLocator locator = null;

		try {
			locator = ServiceLocator.getInstancia();

			localHome = (ControladorGeograficoLocalHome) locator
					.getLocalHome(ConstantesJNDI.CONTROLADOR_GEOGRAFICO_SEJB);
			// guarda a referencia de um objeto capaz de fazer chamadas à
			// objetos remotamente
			local = localHome.create();

			return local;
		} catch (CreateException e) {
			throw new SistemaException(e);
		} catch (ServiceLocatorException e) {
			throw new SistemaException(e);
		}

	}

	/**
	 * Retorna o valor de controladorEndereco
	 * 
	 * @return O valor de controladorEndereco
	 */
	private ControladorOrdemServicoLocal getControladorOrdemServico() {

		ControladorOrdemServicoLocalHome localHome = null;
		ControladorOrdemServicoLocal local = null;

		// pega a instância do ServiceLocator.
		ServiceLocator locator = null;

		try {
			locator = ServiceLocator.getInstancia();

			localHome = (ControladorOrdemServicoLocalHome) locator
					.getLocalHome(ConstantesJNDI.CONTROLADOR_ORDEM_SERVICO_SEJB);
			// guarda a referencia de um objeto capaz de fazer chamadas à
			// objetos remotamente
			local = localHome.create();

			return local;
		} catch (CreateException e) {
			throw new SistemaException(e);
		} catch (ServiceLocatorException e) {
			throw new SistemaException(e);
		}
	}

	/**
	 * Permite inserir um Sistema Alteracao Historico
	 * 
	 * [UC0217] Inserir Sistema Alteracao Historico
	 * 
	 * @author Thiago Tenório
	 * @date 30/03/2006
	 * 
	 */
	public Integer inserirHistoricoAlteracaoSistema(
			SistemaAlteracaoHistorico sistemaAlteracaoHistorico)
			throws ControladorException {

		FiltroSistemaAlteracaoHistorico filtroSistemaAlteracaoHistorico = new FiltroSistemaAlteracaoHistorico();
		filtroSistemaAlteracaoHistorico
				.adicionarParametro(new ParametroSimples(
						FiltroSistemaAlteracaoHistorico.NOME,
						sistemaAlteracaoHistorico.getNome()));

		Collection colecaoSistemaAlteracaoHistorico = getControladorUtil()
				.pesquisar(filtroSistemaAlteracaoHistorico,
						SistemaAlteracaoHistorico.class.getName());

		if (colecaoSistemaAlteracaoHistorico != null
				&& !colecaoSistemaAlteracaoHistorico.isEmpty()) {
			throw new ControladorException(
					"atencao.numero_resolucao_ja_existente");
		}

		sistemaAlteracaoHistorico.setUltimaAlteracao(new Date());

		Integer id = (Integer) getControladorUtil().inserir(
				sistemaAlteracaoHistorico);

		return id;

	}

	/**
	 * Permite inserir uma Gerencia Regional
	 * 
	 * [UC0217] Inserir Gerencia Regional
	 * 
	 * @author Thiago Tenório
	 * @date 30/03/2006
	 * 
	 */
	public Integer inserirGerenciaRegional(GerenciaRegional gerenciaRegional)
			throws ControladorException {

		FiltroGerenciaRegional filtroGerenciaRegional = new FiltroGerenciaRegional();

		filtroGerenciaRegional.adicionarParametro(new ParametroSimples(
				FiltroGerenciaRegional.NOME, gerenciaRegional.getNome()));

		filtroGerenciaRegional.adicionarParametro(new ParametroSimples(
				FiltroGerenciaRegional.NOME_ABREVIADO, gerenciaRegional
						.getNomeAbreviado()));

		// Collection colecaoEnderecos = getControladorUtil().pesquisar(
		// filtroGerenciaRegional, GerenciaRegional.class.getName());

		// if (colecaoEnderecos != null && !colecaoEnderecos.isEmpty()) {
		// throw new ControladorException(
		// "atencao.endereco_localidade_nao_informado");
		// }

		Integer id = (Integer) getControladorUtil().inserir(gerenciaRegional);

		return id;

	}

	/**
	 * [UC0298] Manter Gerência Regional [] Atualizar Gerencia Regional Metodo
	 * que atualiza a Gerencia Regional
	 * 
	 * 
	 * @author Thiago Tenório
	 * @date 25/05/2006
	 * 
	 * 
	 * @throws ControladorException
	 */

	public void atualizarGerenciaRegional(GerenciaRegional gerenciaRegional)
			throws ControladorException {

		// Verifica se todos os campos obrigatorios foram preenchidos

		if ((gerenciaRegional.getId() == null || gerenciaRegional.getId()
				.equals("" + ConstantesSistema.NUMERO_NAO_INFORMADO))
				&& (gerenciaRegional.getNome() == null || gerenciaRegional
						.getNome().equals(
								"" + ConstantesSistema.NUMERO_NAO_INFORMADO))
				&& (gerenciaRegional.getNomeAbreviado() == null || gerenciaRegional
						.getNomeAbreviado().equals(
								"" + ConstantesSistema.NUMERO_NAO_INFORMADO))
				&& (gerenciaRegional.getFone() == null || gerenciaRegional
						.getFone().equals(
								"" + ConstantesSistema.NUMERO_NAO_INFORMADO))) {
			throw new ControladorException(
					"atencao.filtro.nenhum_parametro_informado");

		}

		// Verifica se o campo Nome foi preenchido

		if (gerenciaRegional.getNome() == null
				|| gerenciaRegional.getNome().equals(
						"" + ConstantesSistema.NUMERO_NAO_INFORMADO)) {
			throw new ControladorException("atencao.Informe_entidade", null,
					" Nome");
		}

		// Verifica se o campo Nome Abreviado foi preenchido
		if (gerenciaRegional.getNomeAbreviado() == null
				|| gerenciaRegional.getNomeAbreviado().equals(
						"" + ConstantesSistema.NUMERO_NAO_INFORMADO)) {
			throw new ControladorException("atencao.Informe_entidade", null,
					" Nome Abreviado");
		}

		// Verifica se o campo Telefone foi preenchido
		if (gerenciaRegional.getFone() == null
				|| gerenciaRegional.getFone().equals(
						"" + ConstantesSistema.NUMERO_NAO_INFORMADO)) {
			throw new ControladorException("atencao.Informe_entidade", null,
					" Telefone");
		}

		// [FS0003] - Atualização realizada por outro usuário
		FiltroGerenciaRegional filtroGerenciaRegional = new FiltroGerenciaRegional();
		filtroGerenciaRegional.adicionarParametro(new ParametroSimples(
				FiltroGerenciaRegional.ID, gerenciaRegional.getId()));

		Collection colecaoGerenciaRegionalBase = getControladorUtil()
				.pesquisar(filtroGerenciaRegional,
						GerenciaRegional.class.getName());

		if (colecaoGerenciaRegionalBase == null
				|| colecaoGerenciaRegionalBase.isEmpty()) {
			sessionContext.setRollbackOnly();
			throw new ControladorException("atencao.atualizacao.timestamp");
		}

		GerenciaRegional gerenciaRegionalBase = (GerenciaRegional) colecaoGerenciaRegionalBase
				.iterator().next();

		if (gerenciaRegionalBase.getUltimaAlteracao().after(
				gerenciaRegional.getUltimaAlteracao())) {
			sessionContext.setRollbackOnly();
			throw new ControladorException("atencao.atualizacao.timestamp");
		}

		gerenciaRegional.setUltimaAlteracao(new Date());

		getControladorUtil().atualizar(gerenciaRegional);

	}

	/**
	 * Pesquisa as empresas que serão processadas no emitir contas
	 * 
	 * @author Sávio Luiz
	 * @date 09/01/2007
	 * 
	 */

	public Collection pesquisarIdsEmpresa() throws ControladorException {
		try {
			return repositorioEmpresa.pesquisarIdsEmpresa();
		} catch (ErroRepositorioException e) {
			throw new ControladorException("erro.sistema", e);
		}
	}

	/**
	 * Informar Parametros do Sistema
	 * 
	 * @author Rômulo Aurélio
	 * @date 09/01/2007
	 * 
	 */

	public void informarParametrosSistema(SistemaParametro sistemaParametro,
			Usuario usuarioLogado) throws ControladorException {

		/*
		 * Validação de Campos Obrigatórios
		 */

		if (sistemaParametro.getNomeEstado().equals("")) {
			// O Nome do Estado é obrigatório
			throw new ControladorException("atencao.informe_campo", null,
					"Nome do Estado");
		}

		if (sistemaParametro.getNomeEmpresa().equals("")) {
			// O Nome da Empresa é obrigatório
			throw new ControladorException("atencao.informe_campo", null,
					"Nome da Empresa");
		}

		if (sistemaParametro.getNomeAbreviadoEmpresa().equals("")) {
			// O Abreviatura da Empresa é obrigatório
			throw new ControladorException("atencao.informe_campo", null,
					"Abreviatura da Empresa");
		}

		if (sistemaParametro.getCnpjEmpresa().equals("")) {
			// CNPJ é obrigatório
			throw new ControladorException("atencao.informe_campo", null,
					"CNPJ");
		}

		if (sistemaParametro.getLogradouro().equals("")) {
			// O Logradouro é obrigatório
			throw new ControladorException("atencao.informe_campo", null,
					"Logradouro");
		}

		if (sistemaParametro.getAnoMesFaturamento() == null
				|| sistemaParametro.getAnoMesFaturamento().equals("")) {
			// O Mês e Ano de Referência é obrigatório
			throw new ControladorException("atencao.informe_campo", null,
					"Mês e Ano de Referência");
		}

		if (sistemaParametro.getAnoMesArrecadacao() == null
				|| sistemaParametro.getAnoMesArrecadacao().equals("")) {
			// O Mês e Ano de Referência é obrigatório
			throw new ControladorException("atencao.informe_campo", null,
					"Mês e Ano de Referência");
		}

		if (sistemaParametro.getMenorConsumoGrandeUsuario() == null
				|| sistemaParametro.getMenorConsumoGrandeUsuario().equals("")) {
			// O Menor Consumo para ser Grande Usuário é obrigatório
			throw new ControladorException("atencao.informe_campo", null,
					"Menor Consumo para ser Grande Usuário");
		}

		if (sistemaParametro.getValorMinimoEmissaoConta() == null
				|| sistemaParametro.getValorMinimoEmissaoConta().equals("")) {
			// O Menor Valor para Emissão de Contas é obrigatório
			throw new ControladorException("atencao.informe_campo", null,
					"Menor Valor para Emissão de Contas");
		}

		if (sistemaParametro.getMenorEconomiasGrandeUsuario() == null
				|| sistemaParametro.getMenorEconomiasGrandeUsuario().equals("")) {
			// O Qtde de Economias para ser Grande Usuário é obrigatório
			throw new ControladorException("atencao.informe_campo", null,
					"Qtde de Economias para ser Grande Usuário");
		}

		if (sistemaParametro.getMesesMediaConsumo() == null
				|| sistemaParametro.getMesesMediaConsumo().equals("")) {
			// O Menor Valor para Emissão de Contas é obrigatório
			throw new ControladorException("atencao.informe_campo", null,
					"Meses para Cálculo de Média de Consumo");
		}

		if (sistemaParametro.getNumeroMinimoDiasEmissaoVencimento() == null
				|| sistemaParametro.getNumeroMinimoDiasEmissaoVencimento()
						.equals("")) {
			throw new ControladorException("atencao.informe_campo", null,
					"Número de Dias entre o Vencimento e o Início da Cobrança");
		}

		if (sistemaParametro.getIncrementoMaximoConsumoRateio() == null
				|| sistemaParametro.getIncrementoMaximoConsumoRateio().equals(
						"")) {
			throw new ControladorException("atencao.informe_campo", null,
					"Incremento Máximo de Consumo por economia em Rateio");
		}

		if (sistemaParametro.getDecrementoMaximoConsumoRateio() == null
				|| sistemaParametro.getDecrementoMaximoConsumoRateio().equals(
						"")) {
			throw new ControladorException("atencao.informe_campo", null,
					"Decremento Máximo de Consumo por economia em Rateio");
		}

		if (sistemaParametro.getDiasMaximoAlterarOS() == null
				|| sistemaParametro.getDiasMaximoAlterarOS().equals("")) {
			throw new ControladorException("atencao.informe_campo", null,
					"Dias Máximo para Alterar Dados da OS");

		}

		if (sistemaParametro.getUltimoRAManual() == null
				|| sistemaParametro.getUltimoRAManual().equals("")) {
			throw new ControladorException("atencao.informe_campo", null,
					"Último ID Utilizado para Geração do RA Manual");

		}

		if (sistemaParametro.getTituloPagina() == null
				|| sistemaParametro.getTituloPagina().equals("")) {
			throw new ControladorException("atencao.informe_campo", null,
					"Títulos de Relatório");

		}

		sistemaParametro.setUltimaAlteracao(new Date());

		// ------------ REGISTRAR TRANSAÇÃO----------------------------

		// RegistradorOperacao registradorOperacao = new RegistradorOperacao(
		// Operacao.OPERACAO_SISTEMA_PARAMETROS_INSERIR,
		// new UsuarioAcaoUsuarioHelper(usuario,
		// UsuarioAcao.USUARIO_ACAO_EFETUOU_OPERACAO));
		//
		// Operacao operacao = new Operacao();
		// operacao.setId(Operacao.OPERACAO_SISTEMA_PARAMETROS_INSERIR);
		//
		// OperacaoEfetuada operacaoEfetuada = new OperacaoEfetuada();
		// operacaoEfetuada.setOperacao(operacao);
		//
		// sistemaParametro.setOperacaoEfetuada(operacaoEfetuada);
		// sistemaParametro.adicionarUsuario(Usuario.USUARIO_TESTE,
		// UsuarioAcao.USUARIO_ACAO_EFETUOU_OPERACAO);
		// registradorOperacao.registrarOperacao(sistemaParametro);

		// ------------ REGISTRAR TRANSAÇÃO----------------------------

		getControladorUtil().atualizar(sistemaParametro);

	}

	/**
	 * [UC0534] Inserir Feriado
	 * 
	 * @author Kassia Albuquerque
	 * @date 17/01/2007
	 * 
	 */
	public Integer inserirFeriado(NacionalFeriado nacionalFeriado,
			MunicipioFeriado municipioFeriado, Usuario usuarioLogado)
			throws ControladorException {

		if (nacionalFeriado != null) {

			// [FS0003] - Verificando a existência do Feriado Nacional pela
			// descrição

			FiltroNacionalFeriado filtroNacionalFeriado = new FiltroNacionalFeriado();

			/*
			 * filtroNacionalFeriado .adicionarParametro(new ParametroSimples(
			 * FiltroNacionalFeriado.NOME, nacionalFeriado .getDescricao()));
			 * filtroNacionalFeriado.adicionarParametro(new
			 * ParametroSimples(FiltroNacionalFeriado.DATA,
			 * nacionalFeriado.getData()));
			 * 
			 * Collection colecaoNacionalFeriado =
			 * getControladorUtil().pesquisar( filtroNacionalFeriado,
			 * NacionalFeriado.class.getName());
			 * 
			 * if (colecaoNacionalFeriado != null &&
			 * !colecaoNacionalFeriado.isEmpty()) { throw new
			 * ControladorException(
			 * "atencao.nacional_feriado.decricao.existente"); }
			 */

			// Verificando existência de mais de um Feriado Nacional numa mesma
			// data
			filtroNacionalFeriado.limparListaParametros();

			filtroNacionalFeriado.adicionarParametro(new ParametroSimples(
					FiltroNacionalFeriado.DATA, nacionalFeriado.getData()));

			Collection colecaoNacionalFeriado = getControladorUtil().pesquisar(
					filtroNacionalFeriado, NacionalFeriado.class.getName());

			if (colecaoNacionalFeriado != null
					&& !colecaoNacionalFeriado.isEmpty()) {
				throw new ControladorException(
						"atencao.nacional_feriado_com_data_existente");
			} else {
				filtroNacionalFeriado.limparListaParametros();

				filtroNacionalFeriado.adicionarParametro(new ParametroSimples(
						FiltroNacionalFeriado.DATA, nacionalFeriado.getData()));

				filtroNacionalFeriado.adicionarParametro(new ParametroSimples(
						FiltroNacionalFeriado.NOME, nacionalFeriado
								.getDescricao()));

				Collection colecaoNacionalFeriado2 = getControladorUtil()
						.pesquisar(filtroNacionalFeriado,
								NacionalFeriado.class.getName());

				if (!colecaoNacionalFeriado2.isEmpty()) {

					Iterator iterator2 = colecaoNacionalFeriado2.iterator();

					while (iterator2.hasNext()) {
						NacionalFeriado nacionalMunicipal = (NacionalFeriado) iterator2
								.next();

						Date data = nacionalMunicipal.getData();

						String data2String = Util.formatarData(data);

						String data2Tela = Util.formatarData(municipioFeriado
								.getDataFeriado());

						String ano2 = data2String.substring(6, 10);

						String ano2Tela = data2Tela.substring(6, 10);

						if (ano2.equals(ano2Tela)) {
							throw new ControladorException(
									"atencao.nacional_feriado_mesmo_nome_mesmo_ano");
						}
					}
				}
			}

			nacionalFeriado.setUltimaAlteracao(new Date());

			// ------------ REGISTRAR TRANSAÇÃO----------------------------
			RegistradorOperacao registradorOperacao = new RegistradorOperacao(
					Operacao.OPERACAO_FERIADO_INSERIR,
					new UsuarioAcaoUsuarioHelper(usuarioLogado,
							UsuarioAcao.USUARIO_ACAO_EFETUOU_OPERACAO));

			Operacao operacao = new Operacao();
			operacao.setId(Operacao.OPERACAO_FERIADO_INSERIR);

			OperacaoEfetuada operacaoEfetuada = new OperacaoEfetuada();
			operacaoEfetuada.setOperacao(operacao);

			nacionalFeriado.setOperacaoEfetuada(operacaoEfetuada);
			nacionalFeriado.adicionarUsuario(usuarioLogado,
					UsuarioAcao.USUARIO_ACAO_EFETUOU_OPERACAO);
			registradorOperacao.registrarOperacao(nacionalFeriado);
			// ------------ REGISTRAR TRANSAÇÃO----------------------------

			Integer idFeriado = (Integer) getControladorUtil().inserir(
					nacionalFeriado);

			return idFeriado;

		} else {

			// Verificando existencia de data Feriado Municipal numa mesma data
			// de Feriado Nacional

			FiltroNacionalFeriado filtroNacionalFeriado = new FiltroNacionalFeriado();

			filtroNacionalFeriado.adicionarParametro(new ParametroSimples(
					FiltroNacionalFeriado.DATA, municipioFeriado
							.getDataFeriado()));

			Collection colecaoNacionalFeriado = getControladorUtil().pesquisar(
					filtroNacionalFeriado, NacionalFeriado.class.getName());

			if (colecaoNacionalFeriado != null
					&& !colecaoNacionalFeriado.isEmpty()) {

				throw new ControladorException(
						"atencao.nacional_feriado_com_data_existente");
			}

			// Verificando se existe Feriado Municipal com mesma data do que
			// esta sendo atualizado
			FiltroMunicipioFeriado filtroMunicipioFeriado2 = new FiltroMunicipioFeriado();

			filtroMunicipioFeriado2.adicionarParametro(new ParametroSimples(
					FiltroMunicipioFeriado.DATA, municipioFeriado
							.getDataFeriado()));

			filtroMunicipioFeriado2.adicionarParametro(new ParametroSimples(
					FiltroMunicipioFeriado.ID_MUNICIPIO, municipioFeriado
							.getMunicipio()));

			Collection colecaoMunicipioFeriado1 = getControladorUtil()
					.pesquisar(filtroMunicipioFeriado2,
							MunicipioFeriado.class.getName());

			if (colecaoMunicipioFeriado1 != null
					&& !colecaoMunicipioFeriado1.isEmpty()) {
				throw new ControladorException(
						"atencao.municipio_feriado_com_data_existente");
			}

			filtroMunicipioFeriado2.limparListaParametros();

			filtroMunicipioFeriado2.adicionarParametro(new ParametroSimples(
					FiltroMunicipioFeriado.NOME, municipioFeriado
							.getDescricaoFeriado()));

			filtroMunicipioFeriado2.adicionarParametro(new ParametroSimples(
					FiltroMunicipioFeriado.DATA, municipioFeriado
							.getDataFeriado()));

			filtroMunicipioFeriado2.adicionarParametro(new ParametroSimples(
					FiltroMunicipioFeriado.ID_MUNICIPIO, municipioFeriado
							.getMunicipio()));

			Collection colecaoMunicipioFeriado2 = getControladorUtil()
					.pesquisar(filtroMunicipioFeriado2,
							MunicipioFeriado.class.getName());

			if (colecaoMunicipioFeriado2 != null
					&& !colecaoMunicipioFeriado2.isEmpty()) {
				throw new ControladorException(
						"atencao.municipio_feriado_com_data_existente");
			} else {
				// [FS0006] Verificar Existencia do feriado para outra data
				// informada
				filtroMunicipioFeriado2.limparListaParametros();

				filtroMunicipioFeriado2
						.adicionarParametro(new ParametroSimples(
								FiltroMunicipioFeriado.NOME, municipioFeriado
										.getDescricaoFeriado()));

				filtroMunicipioFeriado2
						.adicionarParametro(new ParametroSimples(
								FiltroMunicipioFeriado.ID_MUNICIPIO,
								municipioFeriado.getMunicipio()));

				Collection colecaoMunicipioFeriado = getControladorUtil()
						.pesquisar(filtroMunicipioFeriado2,
								MunicipioFeriado.class.getName());

				if (colecaoMunicipioFeriado != null
						&& !colecaoMunicipioFeriado.isEmpty()) {
					Iterator iterator = colecaoMunicipioFeriado.iterator();

					while (iterator.hasNext()) {
						MunicipioFeriado feriadoMunicipal = (MunicipioFeriado) iterator
								.next();

						Date data = feriadoMunicipal.getDataFeriado();

						String dataString = Util.formatarData(data);

						String dataTela = Util.formatarData(municipioFeriado
								.getDataFeriado());

						String ano = dataString.substring(6, 10);

						String anoTela = dataTela.substring(6, 10);

						if (ano.equals(anoTela)) {
							throw new ControladorException(
									"atencao.municipio_feriado_mesmo_nome_mesmo_ano");
						}
					}
				}
			}

		}
		municipioFeriado.setUltimaAlteracao(new Date());

		// ------------ REGISTRAR TRANSAÇÃO----------------------------
		RegistradorOperacao registradorOperacao = new RegistradorOperacao(
				Operacao.OPERACAO_FERIADO_INSERIR,
				new UsuarioAcaoUsuarioHelper(usuarioLogado,
						UsuarioAcao.USUARIO_ACAO_EFETUOU_OPERACAO));

		Operacao operacao = new Operacao();
		operacao.setId(Operacao.OPERACAO_FERIADO_INSERIR);

		OperacaoEfetuada operacaoEfetuada = new OperacaoEfetuada();
		operacaoEfetuada.setOperacao(operacao);

		municipioFeriado.setOperacaoEfetuada(operacaoEfetuada);
		municipioFeriado.adicionarUsuario(usuarioLogado,
				UsuarioAcao.USUARIO_ACAO_EFETUOU_OPERACAO);
		registradorOperacao.registrarOperacao(municipioFeriado);
		// ------------ REGISTRAR TRANSAÇÃO----------------------------

		Integer idFeriado = (Integer) getControladorUtil().inserir(
				municipioFeriado);
		return idFeriado;
	}

	/**
	 * Pesquisa os feriados(nacionais e municipais)
	 * 
	 * @author Kássia Albuquerque
	 * @date 22/01/2007
	 * 
	 */
	public Collection pesquisarFeriado(Short tipoFeriado, String descricao,
			Date dataFeriadoInicio, Date dataFeriadoFim, Integer idMunicipio,
			Integer numeroPagina) throws ControladorException {

		Collection colecaoObject = new ArrayList();

		Collection colecaoFeriado = new ArrayList();

		try {
			colecaoObject = repositorioCadastro.pesquisarFeriado(tipoFeriado,
					descricao, dataFeriadoInicio, dataFeriadoFim, idMunicipio,
					numeroPagina);
			Iterator iteratorObject = colecaoObject.iterator();
			while (iteratorObject.hasNext()) {
				Object[] arrayObject = (Object[]) iteratorObject.next();
				if (arrayObject != null) {
					// instancia um FeriadoHelper que é um helper
					FeriadoHelper feriadoHelper = new FeriadoHelper();
					// tipo do feriado
					if (arrayObject[0] != null) {
						feriadoHelper.setTipoFeriado((Short) arrayObject[0]);
					}
					// código do feriado
					if (arrayObject[1] != null) {
						feriadoHelper.setId((Integer) arrayObject[1]);
					}
					// descrição do feriado
					if (arrayObject[2] != null) {
						feriadoHelper.setDescricao((String) arrayObject[2]);
					}
					// descrição do município
					if (arrayObject[3] != null) {
						feriadoHelper
								.setDescricaoMunicipio((String) arrayObject[3]);
					}
					// data do feriado
					if (arrayObject[4] != null) {
						feriadoHelper.setData((Date) arrayObject[4]);
					}

					colecaoFeriado.add(feriadoHelper);
				}
			}

		} catch (ErroRepositorioException e) {
			throw new ControladorException("erro.sistema", e);
		}

		return colecaoFeriado;
	}

	/**
	 * Pesquisar quantidade de registro dos feriados(nacionais e municipais)
	 * 
	 * @author Kássia Albuquerque
	 * @date 22/01/2007
	 * 
	 */
	public Integer pesquisarFeriadoCount(Short tipoFeriado, String descricao,
			Date dataFeriadoInicio, Date dataFeriadoFim, Integer idMunicipio)
			throws ControladorException {
		try {
			return repositorioCadastro.pesquisarFeriadoCount(tipoFeriado,
					descricao, dataFeriadoInicio, dataFeriadoFim, idMunicipio);
		} catch (ErroRepositorioException e) {
			throw new ControladorException("erro.sistema", e);
		}
	}

	/**
	 * [UC0535] Manter Feriado [SB0001] Atualizar Feriado
	 * 
	 * @author Kassia Albuquerque
	 * @date 27/01/2006
	 * 
	 * @pparam feriado
	 * @throws ControladorException
	 */

	public void atualizarFeriado(NacionalFeriado nacionalFeriado,
			MunicipioFeriado municipioFeriado, Usuario usuarioLogado)
			throws ControladorException {

		if (nacionalFeriado != null) {

			// [FS0003] - Verificando a existência do Feriado Nacional pela
			// descrição

			FiltroNacionalFeriado filtroNacionalFeriado = new FiltroNacionalFeriado();
			/*
			 * filtroNacionalFeriado .adicionarParametro(new ParametroSimples(
			 * FiltroNacionalFeriado.NOME, nacionalFeriado .getDescricao()));
			 * 
			 * filtroNacionalFeriado .adicionarParametro(new
			 * ParametroSimplesDiferenteDe( FiltroNacionalFeriado.ID,
			 * nacionalFeriado.getId()));
			 * 
			 * Collection colecaoNacionalFeriado =
			 * getControladorUtil().pesquisar( filtroNacionalFeriado,
			 * NacionalFeriado.class.getName());
			 * 
			 * if (colecaoNacionalFeriado != null &&
			 * !colecaoNacionalFeriado.isEmpty()) { throw new
			 * ControladorException(
			 * "atencao.nacional_feriado.decricao.existente"); }
			 */

			// Verificando existência de mais de um Feriado Nacional numa mesma
			// data
			filtroNacionalFeriado.limparListaParametros();

			filtroNacionalFeriado.adicionarParametro(new ParametroSimples(
					FiltroNacionalFeriado.DATA, nacionalFeriado.getData()));

			filtroNacionalFeriado
					.adicionarParametro(new ParametroSimplesDiferenteDe(
							FiltroNacionalFeriado.ID, nacionalFeriado.getId()));

			Collection colecaoNacionalFeriado = new ArrayList();

			colecaoNacionalFeriado = getControladorUtil().pesquisar(
					filtroNacionalFeriado, NacionalFeriado.class.getName());

			if (!colecaoNacionalFeriado.isEmpty()) {
				throw new ControladorException(
						"atencao.nacional_feriado_com_data_existente");
			} else {
				filtroNacionalFeriado.limparListaParametros();

				filtroNacionalFeriado.adicionarParametro(new ParametroSimples(
						FiltroNacionalFeriado.DATA, nacionalFeriado.getData()));

				filtroNacionalFeriado.adicionarParametro(new ParametroSimples(
						FiltroNacionalFeriado.NOME, nacionalFeriado
								.getDescricao()));

				Collection colecaoNacionalFeriado2 = getControladorUtil()
						.pesquisar(filtroNacionalFeriado,
								NacionalFeriado.class.getName());

				if (!colecaoNacionalFeriado2.isEmpty()) {

					Iterator iterator2 = colecaoNacionalFeriado2.iterator();

					while (iterator2.hasNext()) {
						NacionalFeriado nacionalMunicipal = (NacionalFeriado) iterator2
								.next();

						Date data = nacionalMunicipal.getData();

						String data2String = Util.formatarData(data);

						String data2Tela = Util.formatarData(nacionalFeriado
								.getData());

						String ano2 = data2String.substring(6, 10);

						String ano2Tela = data2Tela.substring(6, 10);

						if (ano2.equals(ano2Tela)
								&& !data.equals(nacionalFeriado.getData())) {
							throw new ControladorException(
									"atencao.nacional_feriado_mesmo_nome_mesmo_ano");
						}
					}
				}
			}

			nacionalFeriado.setUltimaAlteracao(new Date());

			// ------------ REGISTRAR TRANSAÇÃO----------------------------
			RegistradorOperacao registradorOperacao = new RegistradorOperacao(
					Operacao.OPERACAO_FERIADO_ATUALIZAR,
					new UsuarioAcaoUsuarioHelper(usuarioLogado,
							UsuarioAcao.USUARIO_ACAO_EFETUOU_OPERACAO));

			Operacao operacao = new Operacao();
			operacao.setId(Operacao.OPERACAO_FERIADO_ATUALIZAR);

			OperacaoEfetuada operacaoEfetuada = new OperacaoEfetuada();
			operacaoEfetuada.setOperacao(operacao);

			nacionalFeriado.setOperacaoEfetuada(operacaoEfetuada);
			nacionalFeriado.adicionarUsuario(usuarioLogado,
					UsuarioAcao.USUARIO_ACAO_EFETUOU_OPERACAO);
			registradorOperacao.registrarOperacao(nacionalFeriado);
			// ------------ REGISTRAR TRANSAÇÃO----------------------------

			// [FS0004] - Atualização realizada por outro usuário

			FiltroNacionalFeriado filtroNacionalFeriadoBase = new FiltroNacionalFeriado();

			// Seta o filtro para buscar o FERIADO na base
			filtroNacionalFeriadoBase.adicionarParametro(new ParametroSimples(
					FiltroNacionalFeriado.ID, nacionalFeriado.getId()));

			// Procura servicoPerfilTipo na base
			Collection feriadoAtualizados = getControladorUtil().pesquisar(
					filtroNacionalFeriadoBase, NacionalFeriado.class.getName());

			NacionalFeriado nacionalFeriadoNaBase = (NacionalFeriado) Util
					.retonarObjetoDeColecao(feriadoAtualizados);

			if (nacionalFeriadoNaBase == null) {

				sessionContext.setRollbackOnly();
				throw new ControladorException(
						"atencao.registro_remocao_nao_existente");
			}

			// Verificar se o feriado já foi atualizado por outro usuário
			// durante esta atualização

			if (nacionalFeriadoNaBase.getUltimaAlteracao().after(
					nacionalFeriado.getUltimaAlteracao())) {

				sessionContext.setRollbackOnly();
				throw new ControladorException("atencao.atualizacao.timestamp");
			}

			nacionalFeriado.setUltimaAlteracao(new Date());

			// Atualiza o objeto na base
			getControladorUtil().atualizar(nacionalFeriado);

		} else {

			// Verificando existencia de data Feriado Municipal numa mesma data
			// de Feriado Nacional
			FiltroNacionalFeriado filtroNacionalFeriado = new FiltroNacionalFeriado();

			filtroNacionalFeriado.adicionarParametro(new ParametroSimples(
					FiltroNacionalFeriado.DATA, municipioFeriado
							.getDataFeriado()));

			Collection colecaoNacionalFeriado = getControladorUtil().pesquisar(
					filtroNacionalFeriado, NacionalFeriado.class.getName());

			if (colecaoNacionalFeriado != null
					&& !colecaoNacionalFeriado.isEmpty()) {

				throw new ControladorException(
						"atencao.nacional_feriado_com_data_existente");
			}

			// [FS0003] - Verificando a existência do Feriado Municipal pela
			// descrição

			// Verificando se existe Feriado Municipal com mesma data do que
			// esta sendo atualizado
			FiltroMunicipioFeriado filtroMunicipioFeriado2 = new FiltroMunicipioFeriado();

			filtroMunicipioFeriado2.adicionarParametro(new ParametroSimples(
					FiltroMunicipioFeriado.DATA, municipioFeriado
							.getDataFeriado()));

			filtroMunicipioFeriado2.adicionarParametro(new ParametroSimples(
					FiltroMunicipioFeriado.ID_MUNICIPIO, municipioFeriado
							.getMunicipio()));

			filtroMunicipioFeriado2
					.adicionarParametro(new ParametroSimplesDiferenteDe(
							FiltroMunicipioFeriado.ID, municipioFeriado.getId()));

			Collection colecaoMunicipioFeriado2 = getControladorUtil()
					.pesquisar(filtroMunicipioFeriado2,
							MunicipioFeriado.class.getName());

			if (colecaoMunicipioFeriado2 != null
					&& !colecaoMunicipioFeriado2.isEmpty()) {
				throw new ControladorException(
						"atencao.municipio_feriado_com_data_existente");
			} else {
				// [FS0006] Verificar Existencia do feriado para outra data
				// informada
				filtroMunicipioFeriado2.limparListaParametros();

				filtroMunicipioFeriado2
						.adicionarParametro(new ParametroSimples(
								FiltroMunicipioFeriado.NOME, municipioFeriado
										.getDescricaoFeriado()));

				filtroMunicipioFeriado2
						.adicionarParametro(new ParametroSimples(
								FiltroMunicipioFeriado.ID_MUNICIPIO,
								municipioFeriado.getMunicipio()));

				Collection colecaoMunicipioFeriado = getControladorUtil()
						.pesquisar(filtroMunicipioFeriado2,
								MunicipioFeriado.class.getName());

				if (colecaoMunicipioFeriado != null
						&& !colecaoMunicipioFeriado.isEmpty()) {
					Iterator iterator = colecaoMunicipioFeriado.iterator();

					while (iterator.hasNext()) {
						MunicipioFeriado feriadoMunicipal = (MunicipioFeriado) iterator
								.next();

						Date data = feriadoMunicipal.getDataFeriado();

						String dataString = Util.formatarData(data);

						String dataTela = Util.formatarData(municipioFeriado
								.getDataFeriado());

						String ano = dataString.substring(6, 10);

						String anoTela = dataTela.substring(6, 10);

						if (ano.equals(anoTela)
								&& !data.equals(municipioFeriado
										.getDataFeriado())) {
							throw new ControladorException(
									"atencao.municipio_feriado_mesmo_nome_mesmo_ano");
						}
					}
				}
			}

			municipioFeriado.setUltimaAlteracao(new Date());

			// ------------ REGISTRAR TRANSAÇÃO----------------------------
			RegistradorOperacao registradorOperacao = new RegistradorOperacao(
					Operacao.OPERACAO_FERIADO_ATUALIZAR,
					new UsuarioAcaoUsuarioHelper(usuarioLogado,
							UsuarioAcao.USUARIO_ACAO_EFETUOU_OPERACAO));

			Operacao operacao = new Operacao();
			operacao.setId(Operacao.OPERACAO_FERIADO_ATUALIZAR);

			OperacaoEfetuada operacaoEfetuada = new OperacaoEfetuada();
			operacaoEfetuada.setOperacao(operacao);

			municipioFeriado.setOperacaoEfetuada(operacaoEfetuada);
			municipioFeriado.adicionarUsuario(usuarioLogado,
					UsuarioAcao.USUARIO_ACAO_EFETUOU_OPERACAO);
			registradorOperacao.registrarOperacao(municipioFeriado);
			// ------------ REGISTRAR TRANSAÇÃO----------------------------

			// [FS0004] - Atualização realizada por outro usuário

			FiltroMunicipioFeriado filtroMunicipioFeriadoBase = new FiltroMunicipioFeriado();
			// Seta o filtro para buscar o FERIADO na base
			filtroMunicipioFeriadoBase.adicionarParametro(new ParametroSimples(
					FiltroMunicipioFeriado.ID, municipioFeriado.getId()));

			// Procura feriado na base
			Collection feriadoAtualizados = getControladorUtil().pesquisar(
					filtroMunicipioFeriadoBase,
					MunicipioFeriado.class.getName());

			MunicipioFeriado municipioFeriadoNaBase = (MunicipioFeriado) Util
					.retonarObjetoDeColecao(feriadoAtualizados);

			if (municipioFeriadoNaBase == null) {

				sessionContext.setRollbackOnly();
				throw new ControladorException(
						"atencao.registro_remocao_nao_existente");
			}

			// Verificar se o feriado já foi atualizado por outro usuário
			// durante esta atualização

			if (municipioFeriadoNaBase.getUltimaAlteracao().after(
					municipioFeriado.getUltimaAlteracao())) {

				sessionContext.setRollbackOnly();
				throw new ControladorException("atencao.atualizacao.timestamp");
			}

			municipioFeriado.setUltimaAlteracao(new Date());

			// Atualiza o objeto na base
			getControladorUtil().atualizar(municipioFeriado);

		}
	}

	/**
	 * [UC0535] Manter Feriado
	 * 
	 * Remover Feriado
	 * 
	 * @author Kassia Albuquerque
	 * @date 29/01/2007
	 * 
	 * @pparam feriado
	 * @throws ControladorException
	 */
	public void removerFeriado(String[] ids, Usuario usuarioLogado)
			throws ControladorException {

		// ------------ REGISTRAR TRANSAÇÃO ----------------
		Operacao operacao = new Operacao();
		operacao.setId(Operacao.OPERACAO_FERIADO_REMOVER);

		OperacaoEfetuada operacaoEfetuada = new OperacaoEfetuada();
		operacaoEfetuada.setOperacao(operacao);

		UsuarioAcaoUsuarioHelper usuarioAcaoUsuarioHelper = new UsuarioAcaoUsuarioHelper(
				usuarioLogado, UsuarioAcao.USUARIO_ACAO_EFETUOU_OPERACAO);
		Collection<UsuarioAcaoUsuarioHelper> colecaoUsuarios = new ArrayList();
		colecaoUsuarios.add(usuarioAcaoUsuarioHelper);
		// ------------ REGISTRAR TRANSAÇÃO ----------------

		if (ids != null && ids.length != 0) {
			for (int i = 0; i < ids.length; i++) {
				String[] idsColecao = ids[i].split(";");
				if (idsColecao[1].equals("2")) {
					this.getControladorUtil().removerUm(
							new Integer(idsColecao[0]),
							MunicipioFeriado.class.getName(), operacaoEfetuada,
							colecaoUsuarios);
				} else {
					this.getControladorUtil().removerUm(
							new Integer(idsColecao[0]),
							NacionalFeriado.class.getName(), operacaoEfetuada,
							colecaoUsuarios);
				}

			}
		}
	}

	/**
	 * Pesquisar os ids do Setor comercial pela localidade
	 * 
	 * @author Ana Maria
	 * @date 07/02/2007
	 * 
	 * @return Collection<Integer>
	 * @throws ErroRepositorioException
	 */
	public Collection<Integer> pesquisarIdsSetorComercial(Integer idLocalidade)
			throws ControladorException {
		try {
			return repositorioSetorComercial
					.pesquisarIdsSetorComercial(idLocalidade);
		} catch (ErroRepositorioException ex) {
			sessionContext.setRollbackOnly();
			throw new ControladorException("erro.sistema", ex);
		}

	}

	/**
	 * Informar Mensagem do Sistema
	 * 
	 * @author Kássia Albuquerque
	 * @date 02/03/2007
	 * 
	 */
	public void atualizarMensagemSistema(SistemaParametro sistemaParametro,
			Usuario usuarioLogado) throws ControladorException {

		// [FS0003] - Atualização realizada por outro usuário
		if (sistemaParametro == null) {
			sessionContext.setRollbackOnly();
			throw new ControladorException(
					"atencao.registro_remocao_nao_existente");
		}

		// Verificar se já foi atualizado por outro usuário durante esta
		// atualização
		SistemaParametro sistemaParametroBase = getControladorUtil()
				.pesquisarParametrosDoSistema();

		if (sistemaParametroBase.getUltimaAlteracao().after(
				sistemaParametro.getUltimaAlteracao())) {
			sessionContext.setRollbackOnly();
			throw new ControladorException("atencao.atualizacao.timestamp");
		}
		try {
			// Atualiza o objeto na base
			repositorioCadastro.atualizarMensagemSistema(sistemaParametro
					.getMensagemSistema());
		} catch (ErroRepositorioException ex) {
			sessionContext.setRollbackOnly();
			throw new ControladorException("erro.sistema", ex);
		}
	}

	/**
	 * Pesquisa os dados do email do batch para ser enviado
	 * 
	 * @author Sávio Luiz
	 * @date 13/03/2007
	 * 
	 */
	public EnvioEmail pesquisarEnvioEmail(Integer idEnvioEmail)
			throws ControladorException {
		try {
			return repositorioCadastro.pesquisarEnvioEmail(idEnvioEmail);
		} catch (ErroRepositorioException ex) {
			sessionContext.setRollbackOnly();
			throw new ControladorException("erro.sistema", ex);
		}
	}

	public DadosEnvioEmailHelper pesquisarDadosEmailSistemaParametros()
			throws ControladorException {

		try {
			return repositorioCadastro.pesquisarDadosEmailSistemaParametros();
		} catch (ErroRepositorioException ex) {
			sessionContext.setRollbackOnly();
			throw new ControladorException("erro.sistema", ex);
		}
	}

	/**
	 * [UC0842] Inserir Funcionário
	 * 
	 * @author Rômulo Aurélio, Raphael Rossiter
	 * @date 12/04/2007, 17/06/2009
	 * 
	 * @param funcionario
	 *            ,
	 * @param usuarioLogado
	 * @throws ControladorException
	 */
	public void inserirFuncionario(Funcionario funcionario,
			Usuario usuarioLogado) throws ControladorException {

		// VALIDANDO OS DADOS DO FUNCIONÁRIO
		this.validarFuncionario(funcionario, true);

		// ------------ REGISTRAR TRANSAÇÃO ----------------
		RegistradorOperacao registradorOperacao = new RegistradorOperacao(
				Operacao.OPERACAO_FUNCIONARIO_INSERIR,
				new UsuarioAcaoUsuarioHelper(usuarioLogado,
						UsuarioAcao.USUARIO_ACAO_EFETUOU_OPERACAO));

		Operacao operacao = new Operacao();
		operacao.setId(Operacao.OPERACAO_FUNCIONARIO_INSERIR);

		OperacaoEfetuada operacaoEfetuada = new OperacaoEfetuada();
		operacaoEfetuada.setOperacao(operacao);

		funcionario.setOperacaoEfetuada(operacaoEfetuada);
		funcionario.adicionarUsuario(usuarioLogado,
				UsuarioAcao.USUARIO_ACAO_EFETUOU_OPERACAO);
		registradorOperacao.registrarOperacao(funcionario);
		// ------------ REGISTRAR TRANSAÇÃO ----------------

		getControladorUtil().inserir(funcionario);

	}

	/**
	 * [UC????] Atualizar Funcionario
	 * 
	 * @author Rômulo Aurélio
	 * @date 17/04/2007
	 * 
	 * @param funcionario
	 *            , usuarioLogado, idFuncionario
	 * 
	 */
	public void atualizarFuncionario(Funcionario funcionario,
			Usuario usuarioLogado) throws ControladorException {

		// VALIDANDO OS DADOS DO FUNCIONÁRIO
		this.validarFuncionario(funcionario, false);

		// ------------ REGISTRAR TRANSAÇÃO ----------------
		RegistradorOperacao registradorOperacao = new RegistradorOperacao(
				Operacao.OPERACAO_FUNCIONARIO_ATUALIZAR,
				new UsuarioAcaoUsuarioHelper(usuarioLogado,
						UsuarioAcao.USUARIO_ACAO_EFETUOU_OPERACAO));

		Operacao operacao = new Operacao();
		operacao.setId(Operacao.OPERACAO_FUNCIONARIO_ATUALIZAR);

		OperacaoEfetuada operacaoEfetuada = new OperacaoEfetuada();
		operacaoEfetuada.setOperacao(operacao);

		funcionario.setOperacaoEfetuada(operacaoEfetuada);
		funcionario.adicionarUsuario(usuarioLogado,
				UsuarioAcao.USUARIO_ACAO_EFETUOU_OPERACAO);
		registradorOperacao.registrarOperacao(funcionario);
		// ------------ REGISTRAR TRANSAÇÃO ----------------

		getControladorUtil().atualizar(funcionario);

	}

	/**
	 * Pesquisar todos ids dos setores comerciais.
	 * 
	 * [UC0564 - Gerar Resumo das Instalações de Hidrômetros]
	 * 
	 * @author Pedro Alexandre
	 * @date 25/04/2007
	 * 
	 * @return
	 * @throws ControladorException
	 */
	public Collection<Integer> pesquisarTodosIdsSetorComercial()
			throws ControladorException {
		try {
			return repositorioCadastro.pesquisarTodosIdsSetorComercial();
		} catch (ErroRepositorioException e) {
			throw new ControladorException("erro.sistema", e);
		}
	}

	/**
	 * Este caso de uso permite a emissão de boletins de cadastro
	 * 
	 * [UC0582] Emitir Boletim de Cadastro
	 * 
	 * @author Rafael Corrêa, Ivan Sergio
	 * @data 15/05/2007, 26/01/2009
	 * @alteracao 26/01/2009 - CRC1076 - Alterado o nome do arquivo gerado.
	 * 
	 * @param
	 * @return void
	 */
	public void emitirBoletimCadastro(
			CobrancaAcaoAtividadeCronograma cronogramaAtividadeAcaoCobranca,
			CobrancaAcaoAtividadeComando comandoAtividadeAcaoCobranca,
			Date dataAtualPesquisa, CobrancaAcao cobrancaAcao,
			int idFuncionalidadeIniciada) throws ControladorException {

		int idUnidadeIniciada = 0;

		if (comandoAtividadeAcaoCobranca != null) {
			idUnidadeIniciada = getControladorBatch()
					.iniciarUnidadeProcessamentoBatch(idFuncionalidadeIniciada,
							UnidadeProcessamento.COB_ACAO_ATIV_COMAND,
							comandoAtividadeAcaoCobranca.getId());
		} else {
			idUnidadeIniciada = getControladorBatch()
					.iniciarUnidadeProcessamentoBatch(idFuncionalidadeIniciada,
							UnidadeProcessamento.COB_ACAO_ATIV_CRONOG,
							cronogramaAtividadeAcaoCobranca.getId());
		}

		Integer idCronogramaAtividadeAcaoCobranca = null;
		Integer idComandoAtividadeAcaoCobranca = null;

		if (cronogramaAtividadeAcaoCobranca != null
				&& cronogramaAtividadeAcaoCobranca.getId() != null) {
			idCronogramaAtividadeAcaoCobranca = cronogramaAtividadeAcaoCobranca
					.getId();
		}
		if (comandoAtividadeAcaoCobranca != null
				&& comandoAtividadeAcaoCobranca.getId() != null) {
			idComandoAtividadeAcaoCobranca = comandoAtividadeAcaoCobranca
					.getId();
		}

		// Caso seja cobrança ação atividade cronograma e seja Fiscalização
		// cortado ou suprimido então gera boletin de cadastro
		// Caso seja cobrança ação atividade comando e o indicador de emissão de
		// boletim seja "SIM"(1) então gera boletin de cadastro
		if ((idCronogramaAtividadeAcaoCobranca != null && (cobrancaAcao.getId()
				.equals(CobrancaAcao.FISCALIZACAO_SUPRIMIDO) || cobrancaAcao
				.getId().equals(CobrancaAcao.FISCALIZACAO_CORTADO)))
				|| (idComandoAtividadeAcaoCobranca != null
						&& comandoAtividadeAcaoCobranca.getIndicadorBoletim() != null && comandoAtividadeAcaoCobranca
						.getIndicadorBoletim()
						.equals(CobrancaAcaoAtividadeComando.INDICADOR_BOLETIM_SIM))) {

			System.out.println("********************");
			System.out.println("INICIO BOLETIM CADASTRO");
			System.out.println("********************");

			try {

				boolean flagFimPesquisa = false;
				final int quantidadeCobrancaDocumento = 500;
				int quantidadeCobrancaDocumentoInicio = 0;
				StringBuilder boletimCadastroTxt = new StringBuilder();
				int sequencialImpressao = 0;
				int pagina = 0;

				while (!flagFimPesquisa) {

					pagina++;

					Collection colecaoEmitirBoletimCadastro = null;
					try {

						colecaoEmitirBoletimCadastro = repositorioCobranca
								.pesquisarCobrancaDocumentoBoletimCadastro(
										idCronogramaAtividadeAcaoCobranca,
										idComandoAtividadeAcaoCobranca,
										dataAtualPesquisa,
										cobrancaAcao.getId(),
										quantidadeCobrancaDocumentoInicio);

					} catch (ErroRepositorioException ex) {
						ex.printStackTrace();
						throw new ControladorException("erro.sistema", ex);
					}

					if (colecaoEmitirBoletimCadastro != null
							&& !colecaoEmitirBoletimCadastro.isEmpty()) {

						if (colecaoEmitirBoletimCadastro.size() < quantidadeCobrancaDocumento) {
							flagFimPesquisa = true;
						} else {
							quantidadeCobrancaDocumentoInicio = quantidadeCobrancaDocumentoInicio + 500;
						}

						Iterator colecaoEmitirBoletimCadastroIterator = colecaoEmitirBoletimCadastro
								.iterator();
						int count = 0;

						EmitirDocumentoCobrancaBoletimCadastroHelper emitirDocumentoCobrancaBoletimCadastroHelper = null;

						while (colecaoEmitirBoletimCadastroIterator.hasNext()) {

							emitirDocumentoCobrancaBoletimCadastroHelper = (EmitirDocumentoCobrancaBoletimCadastroHelper) colecaoEmitirBoletimCadastroIterator
									.next();

							count++;

							System.out
									.println("VEZ QUE ENTRA:"
											+ pagina
											+ " / "
											+ count
											+ " / IMÓVEL:"
											+ emitirDocumentoCobrancaBoletimCadastroHelper
													.getIdImovel().toString());

							sequencialImpressao++;

							if (emitirDocumentoCobrancaBoletimCadastroHelper != null) {
								criarDadosTxtBoletimCadastro(
										boletimCadastroTxt,
										emitirDocumentoCobrancaBoletimCadastroHelper);
							}

							emitirDocumentoCobrancaBoletimCadastroHelper = null;

							boletimCadastroTxt.append(System
									.getProperty("line.separator"));
						}
					} else {
						flagFimPesquisa = true;
					}
				}

				System.out.println("********************");
				System.out.println("FIM BOLETIM CADASTRO");
				System.out.println("********************");

				Date dataAtual = new Date();

				String nomeZip = null;
				String tituloComandoEventual = null;
				String grupo = null;

				if (comandoAtividadeAcaoCobranca != null
						&& comandoAtividadeAcaoCobranca.getId() != null) {

					tituloComandoEventual = comandoAtividadeAcaoCobranca
							.getDescricaoTitulo();
					nomeZip = "BOLETIM_CADASTRAL_" + tituloComandoEventual
							+ " " + Util.formatarDataComHora(dataAtual);
				} else {
					grupo = cronogramaAtividadeAcaoCobranca
							.getCobrancaAcaoCronograma()
							.getCobrancaGrupoCronogramaMes().getCobrancaGrupo()
							.getId().toString();

					nomeZip = "BOLETIM_CAD_GRUPO_" + grupo + "_"
							+ Util.formatarDataComHora(dataAtual);
				}

				nomeZip = nomeZip.replace("/", "_");
				nomeZip = nomeZip.replace(" ", "_");
				nomeZip = nomeZip.replace(":", "_");
				nomeZip = nomeZip.replace("/", "_");

				try {
					if (boletimCadastroTxt != null
							&& boletimCadastroTxt.length() != 0) {

						boletimCadastroTxt.append("\u0004");

						// criar o arquivo zip
						File compactado = new File(nomeZip + ".zip"); // nomeZip
						ZipOutputStream zos = new ZipOutputStream(
								new FileOutputStream(compactado));

						File leitura = new File(nomeZip + ".txt");

						BufferedWriter out = new BufferedWriter(
								new OutputStreamWriter(new FileOutputStream(
										leitura.getAbsolutePath())));

						out.write(boletimCadastroTxt.toString());
						out.flush();
						out.close();
						ZipUtil.adicionarArquivo(zos, leitura);

						// close the stream
						zos.close();
						leitura.delete();
					}

					System.out.println("********************");
					System.out.println("FIM GERAÇÃO ARQUIVO");
					System.out.println("********************");

				} catch (IOException e) {
					e.printStackTrace();
					throw new ControladorException("erro.sistema", e);
				} catch (Exception e) {
					e.printStackTrace();
					throw new ControladorException("erro.sistema", e);
				}

				getControladorBatch().encerrarUnidadeProcessamentoBatch(null,
						idUnidadeIniciada, false);

			} catch (Exception e) {

				// Este catch serve para interceptar qualquer exceção que o
				// processo
				// batch venha a lançar e garantir que a unidade de
				// processamento do
				// batch será atualizada com o erro ocorrido
				e.printStackTrace();
				getControladorBatch().encerrarUnidadeProcessamentoBatch(e,
						idUnidadeIniciada, true);
				throw new EJBException(e);
			}
		} else {
			getControladorBatch().encerrarUnidadeProcessamentoBatch(null,
					idUnidadeIniciada, false);
		}
	}

	private void criarDadosTxtBoletimCadastro(
			StringBuilder boletimCadastroTxt,
			EmitirDocumentoCobrancaBoletimCadastroHelper emitirDocumentoCobrancaBoletimCadastroHelper)
			throws ControladorException {

		ClienteEmitirBoletimCadastroHelper clienteEmitirBoletimCadastroHelperProprietario = null;
		ClienteEmitirBoletimCadastroHelper clienteEmitirBoletimCadastroHelperUsuario = null;

		clienteEmitirBoletimCadastroHelperProprietario = getControladorCliente()
				.pesquisarClienteEmitirBoletimCadastro(
						emitirDocumentoCobrancaBoletimCadastroHelper
								.getIdImovel(),
						ClienteRelacaoTipo.PROPRIETARIO);

		clienteEmitirBoletimCadastroHelperUsuario = getControladorCliente()
				.pesquisarClienteEmitirBoletimCadastro(
						emitirDocumentoCobrancaBoletimCadastroHelper
								.getIdImovel(),
						ClienteRelacaoTipo.USUARIO);

		// Início do processo de geração do arquivo txt

		// Número Documento/Referência
		boletimCadastroTxt.append(Util.completaString("", 8));

		// Dados do Cliente Proprietário
		if (clienteEmitirBoletimCadastroHelperProprietario != null) {

			adicionarDadosClienteEmitirBoletimCadastroTxt(boletimCadastroTxt,
					clienteEmitirBoletimCadastroHelperProprietario);
		} else {
			boletimCadastroTxt.append(Util.completaString("", 279));
		}

		// Dados do Cliente Usuário
		if (clienteEmitirBoletimCadastroHelperUsuario != null) {

			adicionarDadosClienteEmitirBoletimCadastroTxt(boletimCadastroTxt,
					clienteEmitirBoletimCadastroHelperUsuario);

		} else {
			boletimCadastroTxt.append(Util.completaString("", 279));
		}

		// Dados do Imóvel
		boletimCadastroTxt.append(Util.completaString("", 1));

		// Inscrição
		String inscricaoImovel =

		// Localidade
		Util.adicionarZerosEsquedaNumero(3,
				emitirDocumentoCobrancaBoletimCadastroHelper.getIdLocalidade()
						.toString())

				// Setor Comercial
				+ Util.adicionarZerosEsquedaNumero(3,
						emitirDocumentoCobrancaBoletimCadastroHelper
								.getCodigoSetorComercial().toString())

				// Quadra
				+ Util.adicionarZerosEsquedaNumero(
						3,
						""
								+ emitirDocumentoCobrancaBoletimCadastroHelper
										.getNumeroQuadra())

				// Lote
				+ Util.adicionarZerosEsquedaNumero(
						4,
						""
								+ emitirDocumentoCobrancaBoletimCadastroHelper
										.getLote())

				// Sublote
				+ Util.adicionarZerosEsquedaNumero(
						3,
						""
								+ emitirDocumentoCobrancaBoletimCadastroHelper
										.getSubLote());

		boletimCadastroTxt.append(Util.completaString(inscricaoImovel, 16));

		// Matrícula do imóvel
		String matriculaImovelFormatada = Util
				.adicionarZerosEsquedaNumero(
						9,
						""
								+ emitirDocumentoCobrancaBoletimCadastroHelper
										.getIdImovel());

		boletimCadastroTxt.append(Util.completaString(matriculaImovelFormatada,
				9));

		// Código do Cliente Proprietário
		String idClienteProprietario = "";

		if (clienteEmitirBoletimCadastroHelperProprietario != null) {

			idClienteProprietario = Util.adicionarZerosEsquedaNumero(12,
					clienteEmitirBoletimCadastroHelperProprietario.getCliente()
							.getId().toString());
		}

		boletimCadastroTxt.append(Util
				.completaString(idClienteProprietario, 12));

		// Inscrição Atual
		boletimCadastroTxt.append(Util.completaString("", 16));

		// Número de Moradores
		String numeroMoradores = "";

		if (emitirDocumentoCobrancaBoletimCadastroHelper.getNumeroMorador() != null) {

			numeroMoradores = Util.adicionarZerosEsquedaNumero(4,
					emitirDocumentoCobrancaBoletimCadastroHelper
							.getNumeroMorador().toString());
		}

		boletimCadastroTxt.append(Util.completaString(numeroMoradores, 4));

		// Nome na Conta
		String nomeConta = "";
		Integer idRelacaoTipo = null;

		try {

			idRelacaoTipo = repositorioClienteImovel
					.retornaTipoRelacaoClienteImovelNomeConta(emitirDocumentoCobrancaBoletimCadastroHelper
							.getIdImovel());

		} catch (ErroRepositorioException ex) {
			ex.printStackTrace();
			throw new ControladorException("erro.sistema", ex);
		}

		if (idRelacaoTipo != null) {

			if (idRelacaoTipo.toString().equals(
					ClienteRelacaoTipo.PROPRIETARIO.toString())) {
				nomeConta = "P";
			} else if (idRelacaoTipo.toString().equals(
					ClienteRelacaoTipo.USUARIO.toString())) {
				nomeConta = "U";
			} else {
				nomeConta = "R";
			}
		}

		boletimCadastroTxt.append(Util.completaString(nomeConta, 1));

		// Código do Cliente Usuário
		String idClienteUsuario = "";

		if (clienteEmitirBoletimCadastroHelperUsuario != null) {
			idClienteUsuario = Util.adicionarZerosEsquedaNumero(12,
					clienteEmitirBoletimCadastroHelperUsuario.getCliente()
							.getId().toString());
		}

		boletimCadastroTxt.append(Util.completaString(idClienteUsuario, 12));

		// Logradouro
		String idLogradouro = "";

		if (emitirDocumentoCobrancaBoletimCadastroHelper.getNumeroMorador() != null) {

			idLogradouro = Util.adicionarZerosEsquedaNumero(9,
					emitirDocumentoCobrancaBoletimCadastroHelper
							.getIdLogradouro().toString());
		}

		boletimCadastroTxt.append(Util.completaString(idLogradouro, 9));

		// Endereço Abreviado
		String enderecoImovel = getControladorEndereco()
				.pesquisarEnderecoFormatado(
						emitirDocumentoCobrancaBoletimCadastroHelper
								.getIdImovel());

		if (enderecoImovel == null) {
			enderecoImovel = "";
		}

		boletimCadastroTxt.append(Util.completaString(enderecoImovel, 60));

		// CEP
		String cep = "";

		if (emitirDocumentoCobrancaBoletimCadastroHelper.getCodigoCep() != null) {

			cep = Util.adicionarZerosEsquedaNumero(8,
					emitirDocumentoCobrancaBoletimCadastroHelper.getCodigoCep()
							.toString());
		}

		boletimCadastroTxt.append(Util.completaString(cep, 8));

		// Bairro
		String bairro = "";

		if (emitirDocumentoCobrancaBoletimCadastroHelper.getCodigoBairro() != null) {

			bairro = Util.adicionarZerosEsquedaNumero(3,
					emitirDocumentoCobrancaBoletimCadastroHelper
							.getCodigoBairro().toString());
		}

		boletimCadastroTxt.append(Util.completaString(bairro, 3));

		// Referência
		String referencia = "";

		if (emitirDocumentoCobrancaBoletimCadastroHelper.getReferencia() != null) {

			referencia = emitirDocumentoCobrancaBoletimCadastroHelper
					.getReferencia().toString();
		}

		boletimCadastroTxt.append(Util.completaString(referencia, 1));

		// Número do Imóvel
		String numeroImovel = "";

		if (emitirDocumentoCobrancaBoletimCadastroHelper.getNumeroImovel() != null) {

			numeroImovel = Util.adicionarZerosEsquedaNumero(5,
					emitirDocumentoCobrancaBoletimCadastroHelper
							.getNumeroImovel().toString());
		}

		boletimCadastroTxt.append(Util.completaString(numeroImovel, 5));

		// Complemento
		String complemento = "";

		if (emitirDocumentoCobrancaBoletimCadastroHelper.getComplemento() != null) {
			complemento = emitirDocumentoCobrancaBoletimCadastroHelper
					.getComplemento();
		}

		boletimCadastroTxt.append(Util.completaString(complemento, 19));

		// Dados das Subcategorias
		Collection colecaoSubcategorias = getControladorImovel()
				.obterQuantidadeEconomiasSubCategoria(
						emitirDocumentoCobrancaBoletimCadastroHelper
								.getIdImovel());

		String subcategorias = "";

		if (colecaoSubcategorias != null && !colecaoSubcategorias.isEmpty()) {

			Iterator colecaoSubcategoriasIterator = colecaoSubcategorias
					.iterator();

			for (int i = 0; i < 6; i++) {

				if (colecaoSubcategoriasIterator.hasNext()) {

					Subcategoria subcategoria = (Subcategoria) colecaoSubcategoriasIterator
							.next();

					subcategorias = subcategorias
							+ Util.adicionarZerosEsquedaNumero(2,
									subcategoria.getId() + "")
							+ Util.adicionarZerosEsquedaNumero(4, subcategoria
									.getQuantidadeEconomias().toString());
				} else {
					break;
				}
			}
		}

		boletimCadastroTxt.append(Util.completaString(subcategorias, 36));

		// Qtde Apartamentos (Hotel)
		boletimCadastroTxt.append(Util.completaString("", 6));

		// Área Construída
		String areaConstruida = "";

		if (emitirDocumentoCobrancaBoletimCadastroHelper.getAreaConstruida() != null) {

			areaConstruida = ""
					+ emitirDocumentoCobrancaBoletimCadastroHelper
							.getAreaConstruida().intValue();
		}

		boletimCadastroTxt.append(Util.completaString(areaConstruida, 6));

		// Situação de Água
		String situacaoAgua = "";

		if (emitirDocumentoCobrancaBoletimCadastroHelper
				.getIdLigacaoAguaSituacao() != null) {

			situacaoAgua = emitirDocumentoCobrancaBoletimCadastroHelper
					.getIdLigacaoAguaSituacao().toString();
		}

		boletimCadastroTxt.append(Util.completaString(situacaoAgua, 1));

		// Obtém os dados das ligações de água e esgoto
		DadosLigacoesBoletimCadastroHelper dadosLigacoesBoletimCadastroHelper = getControladorAtendimentoPublico()
				.obterDadosLigacaoAguaEsgoto(
						emitirDocumentoCobrancaBoletimCadastroHelper
								.getIdImovel());

		// Diâmetro Ligação Água
		String diametroLigAgua = "";

		if (dadosLigacoesBoletimCadastroHelper.getLigacaoAgua() != null
				&& dadosLigacoesBoletimCadastroHelper.getLigacaoAgua()
						.getLigacaoAguaDiametro() != null) {

			diametroLigAgua = dadosLigacoesBoletimCadastroHelper
					.getLigacaoAgua().getLigacaoAguaDiametro().getId()
					.toString();

		}

		boletimCadastroTxt.append(Util.completaString(diametroLigAgua, 1));

		// Material Ligação Água
		String materialLigAgua = "";

		if (dadosLigacoesBoletimCadastroHelper.getLigacaoAgua() != null
				&& dadosLigacoesBoletimCadastroHelper.getLigacaoAgua()
						.getLigacaoAguaMaterial() != null) {

			materialLigAgua = dadosLigacoesBoletimCadastroHelper
					.getLigacaoAgua().getLigacaoAguaMaterial().getId()
					.toString();

		}

		boletimCadastroTxt.append(Util.completaString(materialLigAgua, 1));

		// Volume Reservatório Inferior
		String volumeReservatorioInferior = "";

		if (emitirDocumentoCobrancaBoletimCadastroHelper
				.getVolumeReservatorioInferior() != null) {

			volumeReservatorioInferior = emitirDocumentoCobrancaBoletimCadastroHelper
					.getVolumeReservatorioInferior().toString();
		}

		boletimCadastroTxt.append(Util.completaString(
				volumeReservatorioInferior, 1));

		// Volume Reservatório Superior
		String volumeReservatorioSuperior = "";

		if (emitirDocumentoCobrancaBoletimCadastroHelper
				.getVolumeReservatorioSuperior() != null) {

			volumeReservatorioSuperior = emitirDocumentoCobrancaBoletimCadastroHelper
					.getVolumeReservatorioSuperior().toString();
		}

		boletimCadastroTxt.append(Util.completaString(
				volumeReservatorioSuperior, 1));

		// Volume Piscina
		String volumePiscina = "";

		if (emitirDocumentoCobrancaBoletimCadastroHelper.getVolumePiscina() != null) {
			volumePiscina = emitirDocumentoCobrancaBoletimCadastroHelper
					.getVolumePiscina().toString();
		}

		boletimCadastroTxt.append(Util.completaString(volumePiscina, 1));

		// Jardim
		String jardim = "";

		if (emitirDocumentoCobrancaBoletimCadastroHelper.getJardim() != null) {
			jardim = emitirDocumentoCobrancaBoletimCadastroHelper.getJardim()
					.toString();
		}

		boletimCadastroTxt.append(Util.completaString(jardim, 1));

		// Pavimento Calçada
		String pavimentoCalcada = "";

		if (emitirDocumentoCobrancaBoletimCadastroHelper
				.getIdPavimentoCalcada() != null) {

			pavimentoCalcada = Util.adicionarZerosEsquedaNumero(2,
					emitirDocumentoCobrancaBoletimCadastroHelper
							.getIdPavimentoCalcada().toString());
		}

		boletimCadastroTxt.append(Util.completaString(pavimentoCalcada, 2));

		// Pavimento Rua
		String pavimentoRua = "";

		if (emitirDocumentoCobrancaBoletimCadastroHelper.getIdPavimentoRua() != null) {

			pavimentoRua = Util.adicionarZerosEsquedaNumero(2,
					emitirDocumentoCobrancaBoletimCadastroHelper
							.getIdPavimentoRua().toString());
		}

		boletimCadastroTxt.append(Util.completaString(pavimentoRua, 2));

		// Fonte de Abastecimento
		String fonteAbastecimento = "";

		if (emitirDocumentoCobrancaBoletimCadastroHelper
				.getIdFonteAbastecimento() != null) {
			fonteAbastecimento = emitirDocumentoCobrancaBoletimCadastroHelper
					.getIdFonteAbastecimento().toString();
		}

		boletimCadastroTxt.append(Util.completaString(fonteAbastecimento, 1));

		// Tipo de Poço
		String pocoTipo = "";

		if (emitirDocumentoCobrancaBoletimCadastroHelper.getIdPoco() != null) {
			pocoTipo = emitirDocumentoCobrancaBoletimCadastroHelper.getIdPoco()
					.toString();
		}

		boletimCadastroTxt.append(Util.completaString(pocoTipo, 1));

		// Número de Pontos
		String numeroPontos = "";

		if (emitirDocumentoCobrancaBoletimCadastroHelper
				.getNumeroPontosUtilizacao() != null) {

			numeroPontos = Util.adicionarZerosEsquedaNumero(4,
					emitirDocumentoCobrancaBoletimCadastroHelper
							.getNumeroPontosUtilizacao().toString());
		}

		boletimCadastroTxt.append(Util.completaString(numeroPontos, 4));

		// Situação de Esgoto
		String situacaoEsgoto = "";

		if (emitirDocumentoCobrancaBoletimCadastroHelper
				.getIdLigacaoEsgotoSituacao() != null) {

			situacaoEsgoto = emitirDocumentoCobrancaBoletimCadastroHelper
					.getIdLigacaoEsgotoSituacao().toString();
		}

		boletimCadastroTxt.append(Util.completaString(situacaoEsgoto, 1));

		// Diâmetro Ligação Esgoto
		String diametroLigEsgoto = "";

		if (dadosLigacoesBoletimCadastroHelper.getLigacaoEsgoto() != null
				&& dadosLigacoesBoletimCadastroHelper.getLigacaoEsgoto()
						.getLigacaoEsgotoDiametro() != null) {

			diametroLigEsgoto = dadosLigacoesBoletimCadastroHelper
					.getLigacaoEsgoto().getLigacaoEsgotoDiametro().getId()
					.toString();

		}

		boletimCadastroTxt.append(Util.completaString(diametroLigEsgoto, 1));

		// Material Ligação Esgoto
		String materialLigEsgoto = "";

		if (dadosLigacoesBoletimCadastroHelper.getLigacaoEsgoto() != null
				&& dadosLigacoesBoletimCadastroHelper.getLigacaoEsgoto()
						.getLigacaoEsgotoMaterial() != null) {

			materialLigEsgoto = dadosLigacoesBoletimCadastroHelper
					.getLigacaoEsgoto().getLigacaoEsgotoMaterial().getId()
					.toString();

		}

		boletimCadastroTxt.append(Util.completaString(materialLigEsgoto, 1));

		// Perfil do Imóvel
		String perfilImovel = "";

		if (emitirDocumentoCobrancaBoletimCadastroHelper.getIdImovelPerfil() != null) {
			perfilImovel = emitirDocumentoCobrancaBoletimCadastroHelper
					.getIdImovelPerfil().toString();
		}

		boletimCadastroTxt.append(Util.completaString(perfilImovel, 1));

		// Despejo
		String despejo = "";

		if (emitirDocumentoCobrancaBoletimCadastroHelper.getIdDespejo() != null) {
			despejo = emitirDocumentoCobrancaBoletimCadastroHelper
					.getIdDespejo().toString();
		}

		boletimCadastroTxt.append(Util.completaString(despejo, 1));

		// Dados do Hidrômetro na Ligação de Água
		// Leitura Inicial
		String leituraInicial = "";

		if (dadosLigacoesBoletimCadastroHelper.getLigacaoAgua() != null
				&& dadosLigacoesBoletimCadastroHelper.getLigacaoAgua()
						.getHidrometroInstalacaoHistorico() != null) {

			leituraInicial = Util.adicionarZerosEsquedaNumero(6,
					dadosLigacoesBoletimCadastroHelper.getLigacaoAgua()
							.getHidrometroInstalacaoHistorico()
							.getNumeroLeituraInstalacao().toString());

		}

		// Numero do Hidrometro
		String numeroHidrometro = "";
		if (dadosLigacoesBoletimCadastroHelper.getLigacaoAgua() != null
				&& dadosLigacoesBoletimCadastroHelper.getLigacaoAgua()
						.getHidrometroInstalacaoHistorico() != null) {

			numeroHidrometro = dadosLigacoesBoletimCadastroHelper
					.getLigacaoAgua().getHidrometroInstalacaoHistorico()
					.getHidrometro().getNumero();
		}

		boletimCadastroTxt.append(Util.completaString(leituraInicial, 6));

		// Capacidade
		String capacidadeHidrometro = "";

		if (dadosLigacoesBoletimCadastroHelper.getLigacaoAgua() != null
				&& dadosLigacoesBoletimCadastroHelper.getLigacaoAgua()
						.getHidrometroInstalacaoHistorico() != null
				&& dadosLigacoesBoletimCadastroHelper.getLigacaoAgua()
						.getHidrometroInstalacaoHistorico().getHidrometro()
						.getHidrometroCapacidade() != null) {

			capacidadeHidrometro = Util.adicionarZerosEsquedaNumero(2,
					dadosLigacoesBoletimCadastroHelper.getLigacaoAgua()
							.getHidrometroInstalacaoHistorico().getHidrometro()
							.getHidrometroCapacidade().getId().toString());

		}

		boletimCadastroTxt.append(Util.completaString(capacidadeHidrometro, 2));

		// Marca
		String marcaHidrometro = "";

		if (dadosLigacoesBoletimCadastroHelper.getLigacaoAgua() != null
				&& dadosLigacoesBoletimCadastroHelper.getLigacaoAgua()
						.getHidrometroInstalacaoHistorico() != null
				&& dadosLigacoesBoletimCadastroHelper.getLigacaoAgua()
						.getHidrometroInstalacaoHistorico().getHidrometro()
						.getHidrometroMarca() != null) {

			marcaHidrometro = Util.adicionarZerosEsquedaNumero(2,
					dadosLigacoesBoletimCadastroHelper.getLigacaoAgua()
							.getHidrometroInstalacaoHistorico().getHidrometro()
							.getHidrometroMarca().getId().toString());

		}

		boletimCadastroTxt.append(Util.completaString(marcaHidrometro, 2));

		// Local de Instalação do Hidrômetro
		String localInstalacaoHidrometro = "";

		if (dadosLigacoesBoletimCadastroHelper.getLigacaoAgua() != null
				&& dadosLigacoesBoletimCadastroHelper.getLigacaoAgua()
						.getHidrometroInstalacaoHistorico() != null
				&& dadosLigacoesBoletimCadastroHelper.getLigacaoAgua()
						.getHidrometroInstalacaoHistorico()
						.getHidrometroLocalInstalacao() != null) {

			localInstalacaoHidrometro = Util.adicionarZerosEsquedaNumero(2,
					dadosLigacoesBoletimCadastroHelper.getLigacaoAgua()
							.getHidrometroInstalacaoHistorico()
							.getHidrometroLocalInstalacao().getId().toString());

		}

		boletimCadastroTxt.append(Util.completaString(
				localInstalacaoHidrometro, 2));

		// Proteção
		String protecaoHidrometro = "";

		if (dadosLigacoesBoletimCadastroHelper.getLigacaoAgua() != null
				&& dadosLigacoesBoletimCadastroHelper.getLigacaoAgua()
						.getHidrometroInstalacaoHistorico() != null
				&& dadosLigacoesBoletimCadastroHelper.getLigacaoAgua()
						.getHidrometroInstalacaoHistorico()
						.getHidrometroProtecao() != null) {

			protecaoHidrometro = dadosLigacoesBoletimCadastroHelper
					.getLigacaoAgua().getHidrometroInstalacaoHistorico()
					.getHidrometroProtecao().getId().toString();

		}

		boletimCadastroTxt.append(Util.completaString(protecaoHidrometro, 1));

		// Indicador Cavalete
		String indicadorCavalete = "";

		if (dadosLigacoesBoletimCadastroHelper.getLigacaoAgua() != null
				&& dadosLigacoesBoletimCadastroHelper.getLigacaoAgua()
						.getHidrometroInstalacaoHistorico() != null
				&& dadosLigacoesBoletimCadastroHelper.getLigacaoAgua()
						.getHidrometroInstalacaoHistorico()
						.getIndicadorExistenciaCavalete() != null) {

			protecaoHidrometro = dadosLigacoesBoletimCadastroHelper
					.getLigacaoAgua().getHidrometroInstalacaoHistorico()
					.getIndicadorExistenciaCavalete().toString();

		}

		boletimCadastroTxt.append(Util.completaString(indicadorCavalete, 1));

		// Número IPTU
		String numeroIptu = "";

		if (emitirDocumentoCobrancaBoletimCadastroHelper.getNumeroIptu() != null) {

			numeroIptu = Util.adicionarZerosEsquedaNumero(26, ""
					+ emitirDocumentoCobrancaBoletimCadastroHelper
							.getNumeroIptu().intValue());
		}

		boletimCadastroTxt.append(Util.completaString(numeroIptu, 26));

		// Número Contrato CELPE
		String numeroCelpe = "";
		if (emitirDocumentoCobrancaBoletimCadastroHelper.getNumeroCelpe() != null) {
			numeroCelpe = Util.adicionarZerosEsquedaNumero(10,
					emitirDocumentoCobrancaBoletimCadastroHelper
							.getNumeroCelpe().toString());
		}
		boletimCadastroTxt.append(Util.completaString(numeroCelpe, 10));

		// Codigo Rota
		String codigoRota = "";
		if (emitirDocumentoCobrancaBoletimCadastroHelper.getCodigoRota() != null) {
			codigoRota = Util.adicionarZerosEsquedaNumero(7,
					emitirDocumentoCobrancaBoletimCadastroHelper
							.getCodigoRota().toString());
		}
		boletimCadastroTxt.append(Util.completaString(codigoRota, 7));

		// Sequencial da Rota
		String sequencialRota = "";
		if (emitirDocumentoCobrancaBoletimCadastroHelper
				.getNumeroSequencialRota() != null) {
			sequencialRota = Util.adicionarZerosEsquedaNumero(8,
					emitirDocumentoCobrancaBoletimCadastroHelper
							.getNumeroSequencialRota().toString());
		}
		boletimCadastroTxt.append(Util.completaString(sequencialRota, 8));

		// Valor Debitos
		SistemaParametro sistemaParametro = this.getControladorUtil()
				.pesquisarParametrosDoSistema();

		Integer anoMesReferenciaFinal = sistemaParametro.getAnoMesFaturamento();

		int anoMesSubtraido = Util
				.subtrairMesDoAnoMes(anoMesReferenciaFinal, 1);

		Integer dataVencimentoFinalInteger = sistemaParametro
				.getAnoMesArrecadacao();
		String anoMesSubtraidoString = ""
				+ Util.subtrairMesDoAnoMes(dataVencimentoFinalInteger, 1);

		int ano = Integer.parseInt(anoMesSubtraidoString.substring(0, 4));
		int mes = Integer.parseInt(anoMesSubtraidoString.substring(4, 6));

		// recupera o ultimo dia do anomes e passa a data como parametro
		Calendar dataVencimentoFinal = GregorianCalendar.getInstance();
		dataVencimentoFinal.set(Calendar.YEAR, ano);
		dataVencimentoFinal.set(Calendar.MONTH, (mes - 1));
		dataVencimentoFinal.set(Calendar.DAY_OF_MONTH,
				dataVencimentoFinal.getActualMaximum(Calendar.DAY_OF_MONTH));

		Date dataFinalDate = dataVencimentoFinal.getTime();

		// converte String em data
		Date dataVencimento = Util.converteStringParaDate("01/01/1900");

		ObterDebitoImovelOuClienteHelper debitoImovelClienteHelper = this
				.getControladorCobranca().obterDebitoImovelOuCliente(
						1,
						""
								+ emitirDocumentoCobrancaBoletimCadastroHelper
										.getIdImovel(), null, null, "190001",
						"" + anoMesSubtraido, dataVencimento, dataFinalDate, 1,
						1, 1, 1, 1, 1, 1, null, 2);

		BigDecimal valorTotal = this
				.calcularValorTotalDebitoBoletimCadastro(debitoImovelClienteHelper);

		boletimCadastroTxt.append(Util.completaString(
				Util.formataBigDecimal(valorTotal, 2, true), 11));

		// Descrição Abreviada da Principal Categoria do imovel
		Categoria categoria = this.getControladorImovel()
				.obterPrincipalCategoriaImovel(
						emitirDocumentoCobrancaBoletimCadastroHelper
								.getIdImovel());

		String descricaoAbreviadaPrincipalCategoria = "";
		if (categoria != null) {
			descricaoAbreviadaPrincipalCategoria = categoria
					.getDescricaoAbreviada();
		}
		boletimCadastroTxt.append(Util.completaString(
				descricaoAbreviadaPrincipalCategoria, 3));

		// **********************************************************************
		// Alterado por: Ivan Sergio
		// data: 12/05/2009
		// CRC1818
		// Alteracao: Adicionar os campos Nome do Bairro e Municipio do
		// Proprietario e Imovel.
		// **********************************************************************
		Integer idMunicipio = null;
		Integer codigoBairro = null;

		String nomeBairroProprietario = "";
		String nomeMunicipioProprietario = "";

		if (clienteEmitirBoletimCadastroHelperProprietario != null) {
			if (clienteEmitirBoletimCadastroHelperProprietario
					.getClienteEndereco().getLogradouroBairro() != null
					&& clienteEmitirBoletimCadastroHelperProprietario
							.getClienteEndereco().getLogradouroBairro()
							.getBairro() != null
					&& clienteEmitirBoletimCadastroHelperProprietario
							.getClienteEndereco().getLogradouroBairro()
							.getBairro().getMunicipio() != null) {

				codigoBairro = clienteEmitirBoletimCadastroHelperProprietario
						.getClienteEndereco().getLogradouroBairro().getBairro()
						.getCodigo();

				idMunicipio = clienteEmitirBoletimCadastroHelperProprietario
						.getClienteEndereco().getLogradouroBairro().getBairro()
						.getMunicipio().getId();

				FiltroBairro filtroBairro = new FiltroBairro();
				filtroBairro.adicionarParametro(new ParametroSimples(
						FiltroBairro.MUNICIPIO_ID, idMunicipio));
				filtroBairro.adicionarParametro(new ParametroSimples(
						FiltroBairro.CODIGO, codigoBairro));
				filtroBairro
						.adicionarCaminhoParaCarregamentoEntidade("municipio");

				Collection colecaoBairro = getControladorUtil().pesquisar(
						filtroBairro, Bairro.class.getName());

				if (colecaoBairro != null && !colecaoBairro.isEmpty()) {
					Bairro dadosBairro = (Bairro) Util
							.retonarObjetoDeColecao(colecaoBairro);

					nomeBairroProprietario = dadosBairro.getNome();
					nomeMunicipioProprietario = dadosBairro.getMunicipio()
							.getNome();
				}
			}
		}

		boletimCadastroTxt.append(Util.completaString(nomeBairroProprietario,
				30));
		boletimCadastroTxt.append(Util.completaString(
				nomeMunicipioProprietario, 30));

		Imovel imovel = getControladorEndereco().pesquisarImovelParaEndereco(
				emitirDocumentoCobrancaBoletimCadastroHelper.getIdImovel());

		// Nome do Bairro do Imovel
		String nomeBairroImovel = "";

		if (imovel.getLogradouroBairro() != null
				&& imovel.getLogradouroBairro().getBairro() != null) {

			nomeBairroImovel = imovel.getLogradouroBairro().getBairro()
					.getNome();
		}
		boletimCadastroTxt.append(Util.completaString(nomeBairroImovel, 30));

		// Nome do Municipio do Imovel
		String nomeMunicipioImovel = "";

		if (imovel.getLogradouroBairro().getBairro() != null
				&& imovel.getLogradouroBairro().getBairro().getMunicipio() != null) {

			nomeMunicipioImovel = imovel.getLogradouroBairro().getBairro()
					.getMunicipio().getNome();
		}
		boletimCadastroTxt.append(Util.completaString(nomeMunicipioImovel, 30));

		// Numero do Hidrometro
		boletimCadastroTxt.append(Util.completaString(numeroHidrometro, 10));
		// **********************************************************************

		String codigosSubcategorias = "";

		if (colecaoSubcategorias != null && !colecaoSubcategorias.isEmpty()) {

			Iterator colecaoSubcategoriasIterator = colecaoSubcategorias
					.iterator();

			for (int i = 0; i < 6; i++) {

				if (colecaoSubcategoriasIterator.hasNext()) {

					Subcategoria subcategoria = (Subcategoria) colecaoSubcategoriasIterator
							.next();

					codigosSubcategorias = codigosSubcategorias
							+ Util.adicionarZerosEsquedaNumero(3,
									subcategoria.getCodigo() + "");
				} else {
					break;
				}
			}
		}

		boletimCadastroTxt
				.append(Util.completaString(codigosSubcategorias, 18));

		if (clienteEmitirBoletimCadastroHelperProprietario != null
				&& clienteEmitirBoletimCadastroHelperProprietario
						.getTarifaSocialDadoEconomia() != null) {
			// Tipo de Renda
			String tipoRenda = "";

			if (clienteEmitirBoletimCadastroHelperProprietario
					.getTarifaSocialDadoEconomia().getRendaTipo() != null) {
				tipoRenda = clienteEmitirBoletimCadastroHelperProprietario
						.getTarifaSocialDadoEconomia().getRendaTipo()
						.getDescricao();
			}

			boletimCadastroTxt.append(Util.completaString(tipoRenda, 20));

			// Valor Renda
			String valorRenda = "";

			if (clienteEmitirBoletimCadastroHelperProprietario
					.getTarifaSocialDadoEconomia().getValorRendaFamiliar() != null) {
				valorRenda = Util.formataBigDecimal(
						clienteEmitirBoletimCadastroHelperProprietario
								.getTarifaSocialDadoEconomia()
								.getValorRendaFamiliar(), 2, true);
			}

			boletimCadastroTxt.append(Util.completaString(valorRenda, 10));

			// Tipo de Cartão
			String tipoCartao = "";

			if (clienteEmitirBoletimCadastroHelperProprietario
					.getTarifaSocialDadoEconomia().getTarifaSocialCartaoTipo() != null) {
				tipoCartao = clienteEmitirBoletimCadastroHelperProprietario
						.getTarifaSocialDadoEconomia()
						.getTarifaSocialCartaoTipo().getDescricao();
			}

			boletimCadastroTxt.append(Util.completaString(tipoCartao, 20));

			// Número Cartão
			String nomeroCartao = "";

			if (clienteEmitirBoletimCadastroHelperProprietario
					.getTarifaSocialDadoEconomia()
					.getNumeroCartaoProgramaSocial() != null) {
				nomeroCartao = clienteEmitirBoletimCadastroHelperProprietario
						.getTarifaSocialDadoEconomia()
						.getNumeroCartaoProgramaSocial().toString();
			}

			boletimCadastroTxt.append(Util.completaString(nomeroCartao, 11));
		} else {
			boletimCadastroTxt.append(Util.completaString("", 58));
		}

	}

	/**
	 * Este caso de uso permite a emissão de boletins de cadastro
	 * 
	 * [UC0582] Emitir Boletim de Cadastro
	 * 
	 * @author Rafael Pinto
	 * @data 15/01/2008
	 * 
	 * @param ObterDebitoImovelOuClienteHelper
	 * @return BigDecimal valorTotalDebito
	 */
	private BigDecimal calcularValorTotalDebitoBoletimCadastro(
			ObterDebitoImovelOuClienteHelper debitoImovelClienteHelper) {

		BigDecimal valorTotal = BigDecimal.ZERO;

		if (debitoImovelClienteHelper != null) {

			BigDecimal valorConta = BigDecimal.ZERO;
			BigDecimal valorDebitoACobrar = BigDecimal.ZERO;
			BigDecimal valorGuiaPagamento = BigDecimal.ZERO;
			BigDecimal valorCreditoARealizar = BigDecimal.ZERO;

			ContaValoresHelper dadosConta = null;
			DebitoACobrar dadosDebito = null;
			CreditoARealizar dadosCredito = null;
			GuiaPagamentoValoresHelper dadosGuiaPagamentoValoresHelper = null;

			Collection<ContaValoresHelper> colecaoContaValores = debitoImovelClienteHelper
					.getColecaoContasValores();
			if (colecaoContaValores != null && !colecaoContaValores.isEmpty()) {

				Iterator<ContaValoresHelper> colecaoContaValoresIterator = colecaoContaValores
						.iterator();

				// percorre a colecao de conta somando o valor para obter um
				// valor total
				while (colecaoContaValoresIterator.hasNext()) {

					dadosConta = (ContaValoresHelper) colecaoContaValoresIterator
							.next();
					valorConta = valorConta.add(dadosConta.getConta()
							.getValorTotal());
				}
			}

			Collection<DebitoACobrar> colecaoDebitoACobrar = debitoImovelClienteHelper
					.getColecaoDebitoACobrar();

			if (colecaoDebitoACobrar != null && !colecaoDebitoACobrar.isEmpty()) {
				Iterator<DebitoACobrar> colecaoDebitoACobrarIterator = colecaoDebitoACobrar
						.iterator();

				// percorre a colecao de debito a cobrar somando o valor para
				// obter um valor total
				while (colecaoDebitoACobrarIterator.hasNext()) {

					dadosDebito = (DebitoACobrar) colecaoDebitoACobrarIterator
							.next();
					// alterado por Vivianne Sousa data:11/04/2008
					// analista :Adriano
					valorDebitoACobrar = valorDebitoACobrar.add(dadosDebito
							.getValorTotalComBonus());
				}
			}

			Collection<CreditoARealizar> colecaoCreditoARealizar = debitoImovelClienteHelper
					.getColecaoCreditoARealizar();

			if (colecaoCreditoARealizar != null
					&& !colecaoCreditoARealizar.isEmpty()) {

				Iterator<CreditoARealizar> colecaoCreditoARealizarIterator = colecaoCreditoARealizar
						.iterator();

				// percorre a colecao de credito a realizar somando o valor para
				// obter um valor total
				while (colecaoCreditoARealizarIterator.hasNext()) {

					dadosCredito = (CreditoARealizar) colecaoCreditoARealizarIterator
							.next();
					// alterado por Vivianne Sousa data:11/04/2008
					// analista :Adriano
					valorCreditoARealizar = valorCreditoARealizar
							.add(dadosCredito.getValorTotalComBonus());

				}
			}

			Collection<GuiaPagamentoValoresHelper> colecaoGuiaPagamentoValores = debitoImovelClienteHelper
					.getColecaoGuiasPagamentoValores();

			if (colecaoGuiaPagamentoValores != null
					&& !colecaoGuiaPagamentoValores.isEmpty()) {
				Iterator<GuiaPagamentoValoresHelper> colecaoGuiaPagamentoValoresHelperIterator = colecaoGuiaPagamentoValores
						.iterator();

				// percorre a colecao de guia de pagamento somando o valor para
				// obter um valor total
				while (colecaoGuiaPagamentoValoresHelperIterator.hasNext()) {

					dadosGuiaPagamentoValoresHelper = (GuiaPagamentoValoresHelper) colecaoGuiaPagamentoValoresHelperIterator
							.next();

					valorGuiaPagamento = valorGuiaPagamento
							.add(dadosGuiaPagamentoValoresHelper
									.getGuiaPagamento().getValorDebito());
				}
			}

			valorTotal = valorConta.add(valorDebitoACobrar);
			valorTotal = valorTotal.add(valorGuiaPagamento);
			valorTotal = valorTotal.subtract(valorCreditoARealizar);

		}// fim do if debitoImovelClienteHelper != null

		return valorTotal;
	}

	public void adicionarDadosClienteEmitirBoletimCadastroTxt(
			StringBuilder boletimCadastroTxt,
			ClienteEmitirBoletimCadastroHelper clienteEmitirBoletimCadastroHelper) {

		// Dados do Cliente

		// Id do Cliente
		String idClienteFormatado = Util.adicionarZerosEsquedaNumero(9,
				clienteEmitirBoletimCadastroHelper.getCliente().getId()
						.toString());

		boletimCadastroTxt.append(idClienteFormatado);

		// Nome do Cliente
		String nomeCliente = "";

		if (clienteEmitirBoletimCadastroHelper.getCliente().getNome() != null) {
			nomeCliente = clienteEmitirBoletimCadastroHelper.getCliente()
					.getNome();
		}

		boletimCadastroTxt.append(Util.completaString(nomeCliente, 23));

		// Tipo do Cliente
		String tipoCliente = "";

		if (clienteEmitirBoletimCadastroHelper.getCliente().getClienteTipo() != null) {
			tipoCliente = Util.adicionarZerosEsquedaNumero(2,
					clienteEmitirBoletimCadastroHelper.getCliente()
							.getClienteTipo().getId().toString());
		}

		boletimCadastroTxt.append(Util.completaString(tipoCliente, 2));

		// CPF/CNPJ
		String cpfCnpj = "";

		if (clienteEmitirBoletimCadastroHelper.getCliente().getCpf() != null) {
			cpfCnpj = Util.adicionarZerosEsquedaNumero(14,
					clienteEmitirBoletimCadastroHelper.getCliente().getCpf());
		}

		if (clienteEmitirBoletimCadastroHelper.getCliente().getCnpj() != null) {
			cpfCnpj = Util.adicionarZerosEsquedaNumero(14,
					clienteEmitirBoletimCadastroHelper.getCliente().getCnpj());
		}

		boletimCadastroTxt.append(Util.completaString(cpfCnpj, 14));

		// RG
		String rg = "";

		if (clienteEmitirBoletimCadastroHelper.getCliente().getRg() != null) {
			rg = Util.adicionarZerosEsquedaNumero(13,
					clienteEmitirBoletimCadastroHelper.getCliente().getRg());
		}

		boletimCadastroTxt.append(Util.completaString(rg, 13));

		// Data de Emissão RG
		String dataEmissaoRG = "";

		if (clienteEmitirBoletimCadastroHelper.getCliente().getDataEmissaoRg() != null) {
			dataEmissaoRG = Util.formatarData(
					clienteEmitirBoletimCadastroHelper.getCliente()
							.getDataEmissaoRg()).replace("/", "");
		}

		boletimCadastroTxt.append(Util.completaString(dataEmissaoRG, 8));

		// Órgão Expedidor RG
		String orgaoExpedidorRG = "";

		if (clienteEmitirBoletimCadastroHelper.getCliente()
				.getOrgaoExpedidorRg() != null) {
			orgaoExpedidorRG = clienteEmitirBoletimCadastroHelper.getCliente()
					.getOrgaoExpedidorRg().getDescricaoAbreviada();
		}

		boletimCadastroTxt.append(Util.completaString(orgaoExpedidorRG, 4));

		// Unidade Federação
		String unidadeFederacao = "";

		if (clienteEmitirBoletimCadastroHelper.getCliente()
				.getUnidadeFederacao() != null) {

			unidadeFederacao = clienteEmitirBoletimCadastroHelper.getCliente()
					.getUnidadeFederacao().getSigla();
		}

		boletimCadastroTxt.append(Util.completaString(unidadeFederacao, 2));

		// Data de Nascimento
		String dataNascimento = "";

		if (clienteEmitirBoletimCadastroHelper.getCliente().getDataNascimento() != null) {
			dataNascimento = Util.formatarData(
					clienteEmitirBoletimCadastroHelper.getCliente()
							.getDataNascimento()).replace("/", "");
		}

		boletimCadastroTxt.append(Util.completaString(dataNascimento, 8));

		// Profissão
		String profissao = "";

		if (clienteEmitirBoletimCadastroHelper.getCliente().getProfissao() != null) {
			profissao = clienteEmitirBoletimCadastroHelper.getCliente()
					.getProfissao().getDescricao();
		}

		boletimCadastroTxt.append(Util.completaString(profissao, 18));

		// Pessoa Sexo
		String sexo = "";

		if (clienteEmitirBoletimCadastroHelper.getCliente().getPessoaSexo() != null) {
			sexo = clienteEmitirBoletimCadastroHelper.getCliente()
					.getPessoaSexo().getId().toString();
		}

		boletimCadastroTxt.append(Util.completaString(sexo, 1));

		// Nome da Mãe
		String nomeMae = "";

		if (clienteEmitirBoletimCadastroHelper.getCliente().getNomeMae() != null) {
			nomeMae = clienteEmitirBoletimCadastroHelper.getCliente()
					.getNomeMae();
		}

		boletimCadastroTxt.append(Util.completaString(nomeMae, 32));

		// Indicador de Uso
		String indicadorUso = "";

		if (clienteEmitirBoletimCadastroHelper.getCliente().getIndicadorUso() != null) {
			indicadorUso = clienteEmitirBoletimCadastroHelper.getCliente()
					.getIndicadorUso().toString();
		}

		boletimCadastroTxt.append(Util.completaString(indicadorUso, 1));

		// Dados do Endereço do Cliente

		// Tipo de Endereço
		String tipoEndereco = "";

		if (clienteEmitirBoletimCadastroHelper.getClienteEndereco()
				.getEnderecoTipo() != null) {
			tipoEndereco = clienteEmitirBoletimCadastroHelper
					.getClienteEndereco().getEnderecoTipo().getId().toString();
		}

		boletimCadastroTxt.append(Util.completaString(tipoEndereco, 1));

		// Logradouro
		String logradouro = "";

		if (clienteEmitirBoletimCadastroHelper.getClienteEndereco()
				.getLogradouroCep() != null
				&& clienteEmitirBoletimCadastroHelper.getClienteEndereco()
						.getLogradouroCep().getLogradouro() != null) {

			logradouro = Util.adicionarZerosEsquedaNumero(9,
					clienteEmitirBoletimCadastroHelper.getClienteEndereco()
							.getLogradouroCep().getLogradouro().getId()
							.toString());
		}

		boletimCadastroTxt.append(Util.completaString(logradouro, 9));

		// Endereço Abreviado
		String endereco = "";

		if (clienteEmitirBoletimCadastroHelper.getEnderecoFormatado() != null) {
			endereco = clienteEmitirBoletimCadastroHelper
					.getEnderecoFormatado();
		}

		boletimCadastroTxt.append(Util.completaString(endereco, 60));

		// CEP
		String cep = "";

		if (clienteEmitirBoletimCadastroHelper.getClienteEndereco()
				.getLogradouroCep() != null
				&& clienteEmitirBoletimCadastroHelper.getClienteEndereco()
						.getLogradouroCep().getCep() != null) {

			cep = Util
					.adicionarZerosEsquedaNumero(8,
							clienteEmitirBoletimCadastroHelper
									.getClienteEndereco().getLogradouroCep()
									.getCep().getCodigo().toString());
		}

		boletimCadastroTxt.append(Util.completaString(cep, 8));

		// Bairro
		String bairro = "";

		if (clienteEmitirBoletimCadastroHelper.getClienteEndereco()
				.getLogradouroBairro() != null
				&& clienteEmitirBoletimCadastroHelper.getClienteEndereco()
						.getLogradouroBairro().getBairro() != null) {

			bairro = Util.adicionarZerosEsquedaNumero(3, ""
					+ clienteEmitirBoletimCadastroHelper.getClienteEndereco()
							.getLogradouroBairro().getBairro().getCodigo());
		}

		boletimCadastroTxt.append(Util.completaString(bairro, 3));

		// Referência
		String referencia = "";

		if (clienteEmitirBoletimCadastroHelper.getClienteEndereco()
				.getEnderecoReferencia() != null) {
			referencia = clienteEmitirBoletimCadastroHelper
					.getClienteEndereco().getEnderecoReferencia().getId()
					.toString();
		}

		boletimCadastroTxt.append(Util.completaString(referencia, 1));

		// Número do Imóvel
		String numeroImovel = "";

		if (clienteEmitirBoletimCadastroHelper.getClienteEndereco().getNumero() != null) {
			numeroImovel = Util.adicionarZerosEsquedaNumero(5,
					clienteEmitirBoletimCadastroHelper.getClienteEndereco()
							.getNumero().toString());
		}

		boletimCadastroTxt.append(Util.completaString(numeroImovel, 5));

		// Complemento
		String complemento = "";

		if (clienteEmitirBoletimCadastroHelper.getClienteEndereco()
				.getComplemento() != null) {
			complemento = clienteEmitirBoletimCadastroHelper
					.getClienteEndereco().getComplemento();
		}

		boletimCadastroTxt.append(Util.completaString(complemento, 19));

		// Dados do Telefone do Cliente
		// Tipo do Telefone
		Collection clientesFone = clienteEmitirBoletimCadastroHelper
				.getClientesFone();

		if (clientesFone != null && !clientesFone.isEmpty()) {

			Iterator clientesFoneIterator = clientesFone.iterator();

			int tamanho = clientesFone.size();

			while (clientesFoneIterator.hasNext()) {

				ClienteFone clienteFone = (ClienteFone) clientesFoneIterator
						.next();

				String tipoTelefone = "";

				if (clienteFone.getFoneTipo() != null) {
					tipoTelefone = clienteFone.getFoneTipo().getId().toString();
				}

				boletimCadastroTxt.append(Util.completaString(tipoTelefone, 1));

				// DDD
				String ddd = "";

				if (clienteFone.getDdd() != null) {
					ddd = Util.adicionarZerosEsquedaNumero(2,
							clienteFone.getDdd());
				}

				boletimCadastroTxt.append(Util.completaString(ddd, 2));

				// Número do Telefone
				String numeroTelefone = "";

				if (clienteFone.getTelefone() != null) {
					numeroTelefone = clienteFone.getTelefone();
				}

				boletimCadastroTxt.append(Util
						.completaString(numeroTelefone, 8));

				// Ramal
				String ramal = "";

				if (clienteFone.getRamal() != null) {
					ramal = clienteFone.getRamal();
				}

				boletimCadastroTxt.append(Util.completaString(ramal, 4));

			}

			if (tamanho == 1) {
				boletimCadastroTxt.append(Util.completaString("", 15));
			}

		} else {
			boletimCadastroTxt.append(Util.completaString("", 30));
		}

		boletimCadastroTxt.append(Util.completaString("", 8));
	}

	/**
	 * Permite inserir uma Anormalidade de Leitura
	 * 
	 * [UC0217] Inserir Anormalidade Leitura
	 * 
	 * @author Thiago Tenório
	 * @date 30/03/2006
	 * 
	 */
	public Integer inserirClienteTipo(ClienteTipo clienteTipo,
			Usuario usuarioLogado) throws ControladorException {

		// ------------ REGISTRAR TRANSAÇÃO----------------------------
		RegistradorOperacao registradorOperacao = new RegistradorOperacao(
				Operacao.OPERACAO_CLIENTE_TIPO_INSERIR,
				new UsuarioAcaoUsuarioHelper(usuarioLogado,
						UsuarioAcao.USUARIO_ACAO_EFETUOU_OPERACAO));

		Operacao operacao = new Operacao();
		operacao.setId(Operacao.OPERACAO_CLIENTE_TIPO_INSERIR);

		OperacaoEfetuada operacaoEfetuada = new OperacaoEfetuada();
		operacaoEfetuada.setOperacao(operacao);

		clienteTipo.setOperacaoEfetuada(operacaoEfetuada);
		clienteTipo.adicionarUsuario(usuarioLogado,
				UsuarioAcao.USUARIO_ACAO_EFETUOU_OPERACAO);
		registradorOperacao.registrarOperacao(clienteTipo);
		// ------------ REGISTRAR TRANSAÇÃO----------------------------

		Integer id = (Integer) getControladorUtil().inserir(clienteTipo);

		return id;

	}

	/**
	 * [UC0298] Manter Agência bancária [] Atualizar Agência Bancária Metodo que
	 * atualiza a Agência Bancária
	 * 
	 * 
	 * @author Thiago Tenório
	 * @date 25/05/2006
	 * 
	 * 
	 * @throws ControladorException
	 */

	public void atualizarClienteTipo(ClienteTipo clienteTipo)
			throws ControladorException {

		// Verifica se todos os campos obrigatorios foram preenchidos

		if ((clienteTipo.getId() == null || clienteTipo.getId().equals(
				"" + ConstantesSistema.NUMERO_NAO_INFORMADO))
				&& (clienteTipo.getDescricao() == null || clienteTipo
						.getDescricao().equals(
								"" + ConstantesSistema.NUMERO_NAO_INFORMADO))
				&& (clienteTipo.getEsferaPoder() == null || clienteTipo
						.getEsferaPoder().equals(
								"" + ConstantesSistema.NUMERO_NAO_INFORMADO))
				&& (clienteTipo.getIndicadorPessoaFisicaJuridica() == null || clienteTipo
						.getIndicadorPessoaFisicaJuridica().equals(
								"" + ConstantesSistema.NUMERO_NAO_INFORMADO))) {
			throw new ControladorException(
					"atencao.filtro.nenhum_parametro_informado");

		}

		// Verifica se o campo Descrição foi preenchido

		if (clienteTipo.getDescricao() == null
				|| clienteTipo.getDescricao().equals(
						"" + ConstantesSistema.NUMERO_NAO_INFORMADO)) {
			throw new ControladorException("atencao.Informe_entidade", null,
					" Descrição");
		}

		// Verifica se o campo Esfera Poder foi preenchido
		if (clienteTipo.getEsferaPoder() == null
				|| clienteTipo.getEsferaPoder().equals(
						"" + ConstantesSistema.NUMERO_NAO_INFORMADO)) {
			throw new ControladorException("atencao.Informe_entidade", null,
					" Esfera Poder");
		}

		// Verifica se o campo Referência do Tipo de Serviço foi preenchido
		if (clienteTipo.getIndicadorPessoaFisicaJuridica() == null
				|| clienteTipo.getIndicadorPessoaFisicaJuridica().equals(
						"" + ConstantesSistema.NUMERO_NAO_INFORMADO)) {
			throw new ControladorException("atencao.Informe_entidade", null,
					" Tipo de Pessoa");
		}

		// [FS0003] - Atualização realizada por outro usuário
		FiltroClienteTipo filtroClienteTipo = new FiltroClienteTipo();
		filtroClienteTipo.adicionarParametro(new ParametroSimples(
				FiltroClienteTipo.ID, clienteTipo.getId()));

		Collection colecaoClienteTipoBase = getControladorUtil().pesquisar(
				filtroClienteTipo, ClienteTipo.class.getName());

		if (colecaoClienteTipoBase == null || colecaoClienteTipoBase.isEmpty()) {
			sessionContext.setRollbackOnly();
			throw new ControladorException("atencao.atualizacao.timestamp");
		}

		ClienteTipo clienteTipoBase = (ClienteTipo) colecaoClienteTipoBase
				.iterator().next();

		if (clienteTipoBase.getUltimaAlteracao().after(
				clienteTipo.getUltimaAlteracao())) {
			sessionContext.setRollbackOnly();
			throw new ControladorException("atencao.atualizacao.timestamp");
		}

		clienteTipo.setUltimaAlteracao(new Date());

		getControladorUtil().atualizar(clienteTipo);

	}

	/**
	 * Migração dos dados do município de Ribeirão - O sistema gerar as tabelas
	 * cliente, cliente_endereço, imovel, cliente_imovel, imovel_subcategoria,
	 * ligacao_agua a parti da tabela Cadastro_ribeirao;
	 * 
	 * @author Ana Maria
	 * 
	 * @throws ControladorException
	 */
	public void inserirRiberao() throws ControladorException {
		/*
		 * try {
		 * 
		 * List colecaoCadastroRibeiraop = (List) repositorioCadastro
		 * .pesquisarCadastroRibeiraop(); Integer idBairro =
		 * repositorioCadastro.pesquisarBairro(); Integer cepPesquisado =
		 * repositorioCadastro.pesquisarCEP(); Object[] setorQuadra =
		 * repositorioCadastro .pesquisarSetorQuadra(118);
		 * 
		 * int limiteSuperior; int limiteInferior; int limiteMaximo =
		 * colecaoCadastroRibeiraop.size(); int quantidadeMaximaPorColecao =
		 * 500; int indece = 6394;
		 * 
		 * for (int i = 0; i < limiteMaximo; i = i + quantidadeMaximaPorColecao)
		 * {
		 * 
		 * if (limiteMaximo < quantidadeMaximaPorColecao) { limiteInferior = 0;
		 * limiteSuperior = limiteMaximo; } else { limiteInferior = i;
		 * limiteSuperior = i + quantidadeMaximaPorColecao;
		 * 
		 * if (limiteSuperior > limiteMaximo) { limiteSuperior = limiteMaximo; }
		 * }
		 * 
		 * List colecaoTemporaria = new ArrayList();
		 * colecaoTemporaria.addAll(colecaoCadastroRibeiraop.subList(
		 * limiteInferior, limiteSuperior)); if (colecaoTemporaria != null &&
		 * !colecaoTemporaria.isEmpty()) { Iterator colecaoTemporariaIterator =
		 * colecaoTemporaria .iterator(); while
		 * (colecaoTemporariaIterator.hasNext()) { //CadastroRibeiraop cr =
		 * (CadastroRibeiraop) colecaoTemporariaIterator.next(); // Inserir
		 * Cliente Cliente cliente = new Cliente();
		 * cliente.setNome(cr.getNome()); ClienteTipo ct = new ClienteTipo(); if
		 * (cr.getClasse().equals("PAR")) { ct.setId(25); } else if
		 * (cr.getClasse().equals("PBM")) { ct.setId(7); } else if
		 * (cr.getClasse().equals("PBF")) { ct.setId(17); } else if
		 * (cr.getClasse().equals("PBE")) { ct.setId(8); }
		 * cliente.setClienteTipo(ct); cliente
		 * .setIndicadorUso(ConstantesSistema.INDICADOR_USO_ATIVO);
		 * cliente.setUltimaAlteracao(new Date()); cliente
		 * .setIndicadorAcaoCobranca(ConstantesSistema.INDICADOR_USO_ATIVO);
		 * cliente
		 * .setIndicadorCobrancaAcrescimos(ConstantesSistema.INDICADOR_USO_ATIVO
		 * ); cliente
		 * .setIndicadorGeraArquivoTexto(ConstantesSistema.INDICADOR_USO_DESATIVO
		 * );
		 * 
		 * Integer idCliente = (Integer) getControladorUtil() .inserir(cliente);
		 * System.out.println("idCliente:" + idCliente); // InserirImovel Imovel
		 * imovel = new Imovel(); Localidade lc = new Localidade(); lc.setId(new
		 * Integer(118)); imovel.setLocalidade(lc); SetorComercial st = new
		 * SetorComercial(); st.setId((Integer) setorQuadra[0]);
		 * imovel.setSetorComercial(st); Quadra qd = new Quadra();
		 * qd.setId((Integer) setorQuadra[1]); imovel.setQuadra(qd);
		 * imovel.setLote((short) indece); System.out.println(indece); indece =
		 * indece + 1; imovel.setSubLote(new Short("0")); String
		 * numeroImovelMenor = null; String numeroImovelMaior = null; if
		 * (cr.getNumeroImovel().length() <= 5) {
		 * imovel.setNumeroImovel(cr.getNumeroImovel()); numeroImovelMenor = "'"
		 * + cr.getNumeroImovel() + "'"; } else {
		 * imovel.setComplementoEndereco(cr.getNumeroImovel());
		 * numeroImovelMaior = "'" + cr.getNumeroImovel() + "'"; }
		 * 
		 * imovel.setIndicadorImovelCondominio(new Short("2"));
		 * LigacaoAguaSituacao ligSit = new LigacaoAguaSituacao();
		 * ligSit.setId(new Integer(cr.getSituacaoAgua()));
		 * imovel.setLigacaoAguaSituacao(ligSit); LigacaoEsgotoSituacao ligESit
		 * = new LigacaoEsgotoSituacao(); ligESit.setId(1);
		 * imovel.setLigacaoEsgotoSituacao(ligESit); ImovelPerfil imovPerf = new
		 * ImovelPerfil(); imovPerf.setId(5); imovel.setImovelPerfil(imovPerf);
		 * imovel.setNumeroParcelamento(new Short("0"));
		 * imovel.setNumeroReparcelamento(new Short("0"));
		 * imovel.setNumeroReparcelamentoConsecutivos(new Short( "0"));
		 * imovel.setIndicadorEmissaoExtratoFaturamento(new Short( "2"));
		 * imovel.setIndicadorDebitoConta(new Short("2"));
		 * imovel.setIndicadorExclusao(new Short("2"));
		 * imovel.setUltimaAlteracao(new Date()); ConsumoTarifa ctarifa = new
		 * ConsumoTarifa(); if (cr.getCategoria().equals("R-3")) {
		 * ctarifa.setId(2); } else { ctarifa.setId(1); }
		 * imovel.setConsumoTarifa(ctarifa); EnderecoReferencia endRef = new
		 * EnderecoReferencia(); endRef.setId(1);
		 * imovel.setEnderecoReferencia(endRef);
		 * imovel.setQuantidadeEconomias(new Short("1")); imovel
		 * .setIndicadorSuspensaoAbastecimento(new Short( "2"));
		 * 
		 * Integer idLogB = repositorioCadastro .pesquisarLogradouroBairro(cr
		 * .getCodigoLogradouro()); LogradouroBairro logB = new
		 * LogradouroBairro(); logB.setId(idLogB);
		 * imovel.setLogradouroBairro(logB); Integer idLogC =
		 * repositorioCadastro .pesquisarLogradouroCep(cr
		 * .getCodigoLogradouro()); LogradouroCep logC = new LogradouroCep();
		 * logC.setId(idLogC); imovel.setLogradouroCep(logC);
		 * imovel.setIndicadorJardim(new Short("2")); ImovelContaEnvio icte =
		 * new ImovelContaEnvio(); icte.setId(2);
		 * imovel.setImovelContaEnvio(icte);
		 * 
		 * Integer idImovel = (Integer) getControladorUtil() .inserir(imovel);
		 * System.out.println("idImovel:" + idImovel); // Inserir imovel no
		 * CadastroRiberao repositorioCadastro.atualizarImovelRibeirao(idImovel,
		 * cr.getCodigo()); // Data Calendar dataCalendar = new
		 * GregorianCalendar(); StringBuffer dataBD = new StringBuffer();
		 * 
		 * dataCalendar.setTime(new Date());
		 * 
		 * dataBD.append("'" + dataCalendar.get(Calendar.YEAR)); // Obs.:
		 * Janeiro no Calendar é mês zero if ((dataCalendar.get(Calendar.MONTH)
		 * + 1) > 9) { dataBD.append("-" + dataCalendar.get(Calendar.MONTH) +
		 * 1); } else { dataBD.append("-" + "0" +
		 * (dataCalendar.get(Calendar.MONTH) + 1)); }
		 * 
		 * if (dataCalendar.get(Calendar.DAY_OF_MONTH) > 9) { dataBD.append("-"
		 * + dataCalendar.get(Calendar.DAY_OF_MONTH) + "'"); } else {
		 * dataBD.append("-" + "0" + dataCalendar.get(Calendar.DAY_OF_MONTH) +
		 * "'"); }
		 * 
		 * String data = dataBD.toString(); // Inserir Cliente_Endereco
		 * repositorioCadastro.inserirClienteEndereco(idCliente,
		 * numeroImovelMenor, numeroImovelMaior, cepPesquisado, idBairro, cr
		 * .getCodigoLogradouro(), idLogB, idLogC); // Inserir Cliente_Imovel
		 * repositorioCadastro.inserirClienteImovel(idCliente, idImovel, data);
		 * // Inserir Imovel_Subcategoria Integer idSubcategoria = null; if
		 * (cr.getCategoria().substring(0, 1).equals("R")) { idSubcategoria =
		 * 10; } else if (cr.getCategoria().equals("C-1")) { idSubcategoria =
		 * 20; } else if (cr.getCategoria().substring(0, 1) .equals("I")) {
		 * idSubcategoria = 30; } else if (cr.getCategoria().equals("C-3")) {
		 * idSubcategoria = 40; } else { idSubcategoria = 10; }
		 * repositorioCadastro.inserirImovelSubcategoria(idImovel,
		 * idSubcategoria);
		 * 
		 * //Inserir Ligacao_Agua
		 * repositorioCadastro.inserirLigacaoAgua(idImovel, data); } } } } catch
		 * (ErroRepositorioException e) { throw new
		 * ControladorException("erro.sistema", e); }
		 */
	}

	/**
	 * Este caso de uso permite a emissão de boletins de cadastro
	 * 
	 * [UC0582] Emitir Boletim de Cadastro pelo Filtro Imóvel por Outros
	 * Critérios
	 * 
	 * Alterado por: Ivan Sergio Data: 26/01/2009
	 * 
	 * @alteracao 26/01/2009 - CRC1076 - Alterado o nome do arquivo gerado.
	 * 
	 * @param
	 * @return void
	 */
	public byte[] emitirBoletimCadastro(String idImovelCondominio,
			String idImovelPrincipal, String idFaturasAtraso,
			String consumoMinimoInicialAgua, String consumoMinimoFinalAgua,
			String idSituacaoLigacaoEsgoto, String consumoMinimoInicialEsgoto,
			String consumoMinimoFinalEsgoto,
			String intervaloValorPercentualEsgotoInicial,
			String intervaloValorPercentualEsgotoFinal,
			String intervaloMediaMinimaImovelInicial,
			String intervaloMediaMinimaImovelFinal,
			String intervaloMediaMinimaHidrometroInicial,
			String intervaloMediaMinimaHidrometroFinal, String idImovelPerfil,
			String idPocoTipo, String idFaturamentoSituacaoTipo,
			String idCobrancaSituacaoTipo, String idSituacaoEspecialCobranca,
			String idEloAnormalidade, String areaConstruidaInicial,
			String areaConstruidaFinal, String idCadastroOcorrencia,
			String idConsumoTarifa, String idGerenciaRegional,
			String idLocalidadeInicial, String idLocalidadeFinal,
			String setorComercialInicial, String setorComercialFinal,
			String quadraInicial, String quadraFinal, String loteOrigem,
			String loteDestno, String cep, String logradouro, String bairro,
			String municipio, String idTipoMedicao, String indicadorMedicao,
			String idSubCategoria, String idCategoria,
			String quantidadeEconomiasInicial, String quantidadeEconomiasFinal,
			String diaVencimento, String idCliente, String idClienteTipo,
			String idClienteRelacaoTipo, String numeroPontosInicial,
			String numeroPontosFinal, String numeroMoradoresInicial,
			String numeroMoradoresFinal, String idAreaConstruidaFaixa,
			String idUnidadeNegocio, String indicadorCpfCnpj, String cpfCnpj)
			throws ControladorException {

		System.out.println("********************");
		System.out.println("INICIO BOLETIM CADASTRO");
		System.out.println("********************");

		boolean flagFimPesquisa = false;
		final int quantidadeCobrancaDocumento = 500;
		int quantidadeCobrancaDocumentoInicio = 0;
		StringBuilder boletimCadastroTxt = new StringBuilder();
		int sequencialImpressao = 0;
		int pagina = 0;

		while (!flagFimPesquisa) {

			pagina++;

			Collection colecaoEmitirBoletimCadastro = null;
			try {

				colecaoEmitirBoletimCadastro = repositorioImovel
						.pesquisarBoletimCadastro(idImovelCondominio,
								idImovelPrincipal, idFaturasAtraso,
								consumoMinimoInicialAgua,
								consumoMinimoFinalAgua,
								idSituacaoLigacaoEsgoto,
								consumoMinimoInicialEsgoto,
								consumoMinimoFinalEsgoto,
								intervaloValorPercentualEsgotoInicial,
								intervaloValorPercentualEsgotoFinal,
								intervaloMediaMinimaImovelInicial,
								intervaloMediaMinimaImovelFinal,
								intervaloMediaMinimaHidrometroInicial,
								intervaloMediaMinimaHidrometroFinal,
								idImovelPerfil, idPocoTipo,
								idFaturamentoSituacaoTipo,
								idCobrancaSituacaoTipo,
								idSituacaoEspecialCobranca, idEloAnormalidade,
								areaConstruidaInicial, areaConstruidaFinal,
								idCadastroOcorrencia, idConsumoTarifa,
								idGerenciaRegional, idLocalidadeInicial,
								idLocalidadeFinal, setorComercialInicial,
								setorComercialFinal, quadraInicial,
								quadraFinal, loteOrigem, loteDestno, cep,
								logradouro, bairro, municipio, idTipoMedicao,
								indicadorMedicao, idSubCategoria, idCategoria,
								quantidadeEconomiasInicial,
								quantidadeEconomiasFinal, diaVencimento,
								idCliente, idClienteTipo, idClienteRelacaoTipo,
								numeroPontosInicial, numeroPontosFinal,
								numeroMoradoresInicial, numeroMoradoresFinal,
								idAreaConstruidaFaixa, idUnidadeNegocio,
								quantidadeCobrancaDocumentoInicio,
								indicadorCpfCnpj, cpfCnpj);

			} catch (ErroRepositorioException ex) {
				ex.printStackTrace();
				throw new ControladorException("erro.sistema", ex);
			}

			if (colecaoEmitirBoletimCadastro != null
					&& !colecaoEmitirBoletimCadastro.isEmpty()) {

				if (colecaoEmitirBoletimCadastro.size() < quantidadeCobrancaDocumento) {
					flagFimPesquisa = true;
				} else {
					quantidadeCobrancaDocumentoInicio = quantidadeCobrancaDocumentoInicio + 500;
				}

				Iterator colecaoEmitirBoletimCadastroIterator = colecaoEmitirBoletimCadastro
						.iterator();
				int count = 0;

				EmitirDocumentoCobrancaBoletimCadastroHelper emitirDocumentoCobrancaBoletimCadastroHelper = null;
				while (colecaoEmitirBoletimCadastroIterator.hasNext()) {

					emitirDocumentoCobrancaBoletimCadastroHelper = (EmitirDocumentoCobrancaBoletimCadastroHelper) colecaoEmitirBoletimCadastroIterator
							.next();

					count++;

					System.out.println("VEZ QUE ENTRA:"
							+ pagina
							+ " / "
							+ count
							+ " / IMÓVEL:"
							+ emitirDocumentoCobrancaBoletimCadastroHelper
									.getIdImovel().toString());

					sequencialImpressao++;

					if (emitirDocumentoCobrancaBoletimCadastroHelper != null) {
						criarDadosTxtBoletimCadastro(boletimCadastroTxt,
								emitirDocumentoCobrancaBoletimCadastroHelper);
					}

					emitirDocumentoCobrancaBoletimCadastroHelper = null;

					boletimCadastroTxt.append(System
							.getProperty("line.separator"));

				}
			} else {
				flagFimPesquisa = true;
			}
		}

		System.out.println("********************");
		System.out.println("FIM BOLETIM CADASTRO");
		System.out.println("********************");

		Date dataAtual = new Date();

		String nomeZip = null;
		/*
		 * String tituloComandoEventual = null; if (comandoAtividadeAcaoCobranca
		 * != null && comandoAtividadeAcaoCobranca.getId() != null) {
		 * tituloComandoEventual = comandoAtividadeAcaoCobranca
		 * .getDescricaoTitulo(); nomeZip = "BOL_CAD " + tituloComandoEventual +
		 * " " + Util.formatarDataComHora(dataAtual); }else {
		 */
		nomeZip = "BOLETIM_CADASTRAL " + Util.formatarDataComHora(dataAtual);
		// }

		nomeZip = nomeZip.replace("/", "_");
		nomeZip = nomeZip.replace(" ", "_");
		nomeZip = nomeZip.replace(":", "_");

		nomeZip = nomeZip.replace("/", "_");

		byte[] retornoArray = null;

		try {
			if (boletimCadastroTxt != null) {

				boletimCadastroTxt.append("\u0004");
				// criar o arquivo zip
				File compactado = File.createTempFile("zipHtml" + nomeZip,
						".zip");
				ZipOutputStream zos = new ZipOutputStream(new FileOutputStream(
						compactado));

				File leitura = new File(nomeZip + ".txt");
				BufferedWriter out = new BufferedWriter(new OutputStreamWriter(
						new FileOutputStream(leitura.getAbsolutePath())));
				out.write(boletimCadastroTxt.toString());
				out.flush();
				out.close();
				ZipUtil.adicionarArquivo(zos, leitura);

				// close the stream
				zos.close();

				ByteArrayOutputStream retorno = new ByteArrayOutputStream();

				FileInputStream inputStream = new FileInputStream(compactado);

				int INPUT_BUFFER_SIZE = 1024;
				byte[] temp = new byte[INPUT_BUFFER_SIZE];
				int numBytesRead = 0;

				while ((numBytesRead = inputStream.read(temp, 0,
						INPUT_BUFFER_SIZE)) != -1) {
					retorno.write(temp, 0, numBytesRead);
				}

				inputStream.close();

				leitura.delete();

				// retorno.flush();
				// retorno.close();

				retornoArray = retorno.toByteArray();

			}

			System.out.println("********************");
			System.out.println("FIM GERAÇÃO ARQUIVO");
			System.out.println("********************");

		} catch (IOException e) {
			e.printStackTrace();
			throw new ControladorException("erro.sistema", e);
		} catch (Exception e) {
			e.printStackTrace();
			throw new ControladorException("erro.sistema", e);
		}

		return retornoArray;

	}

	/**
	 * 
	 * Pesquisa os imóveis do cliente de acordo com o tipo de relação
	 * 
	 * 
	 * 
	 * [UC0251] Gerar Atividade de Ação de Cobrança [SB0001] Gerar Atividade de
	 * 
	 * Ação de Cobrança para os Imóveis do Cliente
	 * 
	 * 
	 * 
	 * @author Sávio Luiz
	 * 
	 * @created 23/11/2007
	 * 
	 * 
	 * 
	 * @param cliente
	 * 
	 * @param relacaoClienteImovel
	 * 
	 * @return
	 * 
	 * @throws ErroRepositorioException
	 * 
	 */

	public Collection pesquisarClientesSubordinados(Integer idCliente)

	throws ControladorException {
		try {
			// chama o metódo de pesquisar do repositório
			return repositorioCadastro.pesquisarClientesSubordinados(idCliente);

			// erro no hibernate
		} catch (ErroRepositorioException ex) {

			// levanta a exceção para a próxima camada
			throw new ControladorException("erro.sistema", ex);
		}
	}

	/**
	 * [UC 1392] Consultar Roteiro Dispositivo Móvel Atualização Cadastral [IT
	 * 0006] Exibir Dados Cadastrador
	 */
	public Collection<DadosCadastradorHelper> pesquisarDadosCadastrador(
			Integer idParametroAtualizacaoCadastral)
			throws ControladorException {

		DadosCadastradorHelper helper = null;

		Collection<DadosCadastradorHelper> colecaoHelper = null;
		Collection retorno = null;
		Object[] array = null;
		String cpf = null;

		try {
			retorno = repositorioCadastro
					.pesquisarDadosCadastrador(idParametroAtualizacaoCadastral);

			if (!Util.isVazioOrNulo(retorno)) {
				colecaoHelper = new ArrayList<DadosCadastradorHelper>();

				Iterator<?> it = retorno.iterator();
				while (it.hasNext()) {
					array = (Object[]) it.next();

					helper = new DadosCadastradorHelper();

					if ((String) array[0] != null) {
						cpf = (String) array[0];
						if (cpf.length() == 11) {
							cpf = Util.formatarCpf(cpf);
						}

						helper.setCpf(cpf);
					}

					if ((String) array[1] != null) {
						helper.setNome((String) array[1]);
					} else {
						helper.setNome("NÃO CADASTRADO NO GSAN");
					}

					if ((Integer) array[2] != null) {
						helper.setQuantidadeImoveis((Integer) array[2]);
					}

					colecaoHelper.add(helper);
				}
			}

			return colecaoHelper;
		} catch (ErroRepositorioException ex) {
			ex.printStackTrace();
			throw new ControladorException("erro.sistema", ex);
		}
	}

	/**
	 * [UC1392] - Consultar Roteiro Dispositivo Móvel Atualização Cadastral
	 * 
	 * @author Davi Menezes
	 * @date 28/11/2012
	 * 
	 */
	public void atualizarListaAtualizacaoCadastralArquivoTexto(
			Collection<AtualizacaoCadastralArquivoTextoHelper> colecaoAtualizacaoCadastralArquivoTexto,
			Integer idSituacaoLeituraNova, Leiturista leiturista, Date date)
			throws ControladorException {

		try {
			if (leiturista != null) {
				StringBuilder retorno = new StringBuilder();
				String linha = "";

				Iterator<?> it = colecaoAtualizacaoCadastralArquivoTexto
						.iterator();
				while (it.hasNext()) {
					AtualizacaoCadastralArquivoTextoHelper helper = (AtualizacaoCadastralArquivoTextoHelper) it
							.next();

					FiltroArquivoTextoAtualizacaoCadastralDM filtro = new FiltroArquivoTextoAtualizacaoCadastralDM();
					filtro.adicionarParametro(new ParametroSimples(
							FiltroArquivoTextoAtualizacaoCadastralDM.ID, helper
									.getId()));
					filtro.adicionarCaminhoParaCarregamentoEntidade(FiltroArquivoTextoAtualizacaoCadastralDM.PARAMETRO_TABELA_ATUALIZACAO_CADASTRO);

					Collection<?> colArquivos = getControladorUtil().pesquisar(
							filtro,
							ArquivoTextoAtualizacaoCadastralDM.class.getName());
					ArquivoTextoAtualizacaoCadastralDM atualizacaoCadastralArquivoTexto = (ArquivoTextoAtualizacaoCadastralDM) Util
							.retonarObjetoDeColecao(colArquivos);

					byte[] arquivo = atualizacaoCadastralArquivoTexto
							.getArquivoTexto();

					BufferedReader buffer = new BufferedReader(
							new InputStreamReader(new ByteArrayInputStream(
									arquivo)));

					while ((linha = buffer.readLine()) != null) {
						String tipoRegistro = linha.substring(0, 2);

						if (tipoRegistro.equals("19")) {
							Integer codigoSetorComercial = null;
							if (helper.getCodigoSetorComercial() != null) {
								codigoSetorComercial = Integer.valueOf(helper
										.getCodigoSetorComercial());
							}

							retorno.append(this.gerarRegistroTipo19AC(
									leiturista.getId(),
									Integer.valueOf(helper.getIdLocalidade()),
									codigoSetorComercial,
									atualizacaoCadastralArquivoTexto
											.getParametroTabelaAtualizacaoCadastralDM()
											.getId(),
									atualizacaoCadastralArquivoTexto
											.getQuantidadeImovel(),
									atualizacaoCadastralArquivoTexto
											.getDescricaoArquivo(),
									atualizacaoCadastralArquivoTexto
											.getParametroTabelaAtualizacaoCadastralDM()
											.getEmpresa().getId()));
						} else {
							retorno.append(linha);
							retorno.append("\n");
						}
					}

					byte[] novoArquivo = retorno.toString().getBytes();

					atualizacaoCadastralArquivoTexto
							.setArquivoTexto(novoArquivo);
					atualizacaoCadastralArquivoTexto
							.setUltimaAlteracao(new Date());

					getControladorUtil().atualizar(
							atualizacaoCadastralArquivoTexto);
				}
			}

			if (idSituacaoLeituraNova
					.equals(SituacaoTransmissaoLeitura.LIBERADO)) {
				Collection<AtualizacaoCadastralArquivoTextoHelper> colecaoAtualizacaoCadastralArquivoTextoAtu = new ArrayList<AtualizacaoCadastralArquivoTextoHelper>();
				String colecaoArquivosNaoAtu = "";

				for (AtualizacaoCadastralArquivoTextoHelper helper : colecaoAtualizacaoCadastralArquivoTexto) {
					FiltroArquivoTextoAtualizacaoCadastralDM filtro = new FiltroArquivoTextoAtualizacaoCadastralDM();
					filtro.adicionarParametro(new ParametroSimples(
							FiltroArquivoTextoAtualizacaoCadastralDM.ID, helper
									.getId()));
					filtro.adicionarCaminhoParaCarregamentoEntidade(FiltroArquivoTextoAtualizacaoCadastralDM.PARAMETRO_TABELA_ATUALIZACAO_CADASTRO);

					Collection<?> colArquivos = getControladorUtil().pesquisar(
							filtro,
							ArquivoTextoAtualizacaoCadastralDM.class.getName());
					ArquivoTextoAtualizacaoCadastralDM arquivoAltzCad = (ArquivoTextoAtualizacaoCadastralDM) Util
							.retonarObjetoDeColecao(colArquivos);

					// Caso o metodo tenha sido chamado para liberar o arquivo e
					// o cadastrado vinculado ao arquivo ja tenha algum outro
					// arquivo vinculado a ele, com situacao liberado ou em
					// campo
					// nao sera possivel liberar o arquivo para ele

					ArquivoTextoAtualizacaoCadastralDM arquivoEmCampo = repositorioCadastro
							.pesquisarArquivoAtlzCadEmCampoPorCadastrador(arquivoAltzCad
									.getLeiturista().getId());
					if (arquivoEmCampo == null) {
						colecaoAtualizacaoCadastralArquivoTextoAtu.add(helper);
					} else {
						Integer idLocalidade = arquivoEmCampo
								.getParametroTabelaAtualizacaoCadastralDM()
								.getLocalidade().getId();
						Integer codSetor = arquivoEmCampo
								.getParametroTabelaAtualizacaoCadastralDM()
								.getCodigoSetorComercial();
						colecaoArquivosNaoAtu += String.format(
								"<br>%s - Localidade: %s, Setor: %s",
								arquivoAltzCad.getDescricaoArquivo(),
								idLocalidade, codSetor);
					}
				}

				if (colecaoAtualizacaoCadastralArquivoTextoAtu != null
						&& !colecaoAtualizacaoCadastralArquivoTextoAtu
								.isEmpty()) {
					repositorioCadastro
							.atualizarListaAtualizacaoCadastralArquivoTexto(
									colecaoAtualizacaoCadastralArquivoTextoAtu,
									idSituacaoLeituraNova, leiturista, date);
				}

				// Exibe um alert com os arquivos que nao poderam ser liberados
				if (!colecaoArquivosNaoAtu.isEmpty()) {
					throw new ControladorException(
							"atencao.cadastrador_com_arquivo_liberado", null,
							colecaoArquivosNaoAtu);
				}
			} else {
				repositorioCadastro
						.atualizarListaAtualizacaoCadastralArquivoTexto(
								colecaoAtualizacaoCadastralArquivoTexto,
								idSituacaoLeituraNova, leiturista, date);
			}

			if (idSituacaoLeituraNova
					.equals(SituacaoTransmissaoLeitura.TRANSMITIDO)) {
				// Disponibiliza os imóveis que nao foram atualizados no arquivo
				// - dessa forma quando gerar um novo arquivo é possivel
				// selecionar os imóveis.
				Iterator iteratorArquivos = colecaoAtualizacaoCadastralArquivoTexto
						.iterator();
				while (iteratorArquivos.hasNext()) {

					AtualizacaoCadastralArquivoTextoHelper helper = (AtualizacaoCadastralArquivoTextoHelper) iteratorArquivos
							.next();
					repositorioImovel.atualizarSituacaoTransmissaoImovel(helper
							.getIdParametro());
				}
			}

		} catch (ErroRepositorioException e) {
			sessionContext.setRollbackOnly();
			throw new ControladorException("erro.sistema", e);
		} catch (NumberFormatException e) {
			e.printStackTrace();
			throw new ControladorException("erro.sistema", e);
		} catch (IOException e) {
			e.printStackTrace();
			throw new ControladorException("erro.sistema", e);
		}
	}

	/**
	 * [UC 1392] - Consultar Roteiro Dispositivo Movel
	 * 
	 * [IT 0003] - Selecionar Arquivos
	 * 
	 * @author Davi Menezes
	 * @date 27/11/2012
	 */
	public Collection<AtualizacaoCadastralArquivoTextoHelper> pesquisarArquivoRoteiroAtualizacaoCadastral(
			ConsultarRoteiroDispositivoMovelHelper helper)
			throws ControladorException {

		Collection<AtualizacaoCadastralArquivoTextoHelper> colecaoArquivoTextoHelper = new ArrayList<AtualizacaoCadastralArquivoTextoHelper>();

		try {
			Collection colecaoArquivos = repositorioCadastro
					.pesquisarArquivoRoteiroAtualizacaoCadastral(helper);

			if (!Util.isVazioOrNulo(colecaoArquivos)) {
				AtualizacaoCadastralArquivoTextoHelper arquivoHelper = null;
				Object[] array = null;

				Iterator<?> it = colecaoArquivos.iterator();
				while (it.hasNext()) {
					arquivoHelper = new AtualizacaoCadastralArquivoTextoHelper();

					array = (Object[]) it.next();

					if ((Integer) array[0] != null) {
						arquivoHelper.setId(String.valueOf((Integer) array[0]));
					}

					Integer idParametro = null;
					if ((Integer) array[1] != null) {
						idParametro = (Integer) array[1];

						Integer qtdRecebidos = repositorioCadastro
								.pesquisarQuantidadeImoveisRecebidosAtualizacaoCadastral(idParametro);

						arquivoHelper.setIdParametro(idParametro);
						arquivoHelper.setQuantidadeRecebida(String
								.valueOf(qtdRecebidos));
					}

					if ((Integer) array[2] != null) {
						arquivoHelper.setIdLocalidade(String
								.valueOf((Integer) array[2]));
					}

					if ((Integer) array[3] != null) {
						arquivoHelper.setCodigoSetorComercial(String
								.valueOf((Integer) array[3]));
					}

					if (idParametro != null) {

						// pesquisa quadras
						ArrayList<Integer> idsQuadras = (ArrayList<Integer>) repositorioCadastro
								.pesquisarRoteiroQuadra(idParametro);
						arquivoHelper.setColecaoQuadras(idsQuadras);
					}

					if ((Integer) array[5] != null) {
						arquivoHelper.setQuantidadeEnviada(String
								.valueOf((Integer) array[5]));
					}

					if ((String) array[6] != null) {
						arquivoHelper.setNomeUsuario((String) array[6]);
					}

					if ((String) array[7] != null) {
						arquivoHelper.setSituacaoArquivo((String) array[7]);
					}

					if ((Integer) array[8] != null) {
						arquivoHelper.setIdSituacaoArquivo((Integer) array[8]);
					}

					if ((Date) array[9] != null) {
						arquivoHelper.setDataLiberacao(Util
								.formatarData((Date) array[9]));
					} else {
						arquivoHelper.setDataLiberacao("");
					}

					/*
					 * @author Jonathan Marcos
					 * 
					 * @date 18/02/2014 RM10091 [OBSERVACOES] - RETORNA A DATA
					 * DE FINALIZACAO DO ARQUIVO CADAS TENHA SIDO FINALIZADO
					 */
					if (array[10] != null) {
						arquivoHelper.setDataFinalizacaoArquivo(Util
								.formatarData((Date) array[10]));
					} else {
						arquivoHelper.setDataFinalizacaoArquivo("");
					}

					colecaoArquivoTextoHelper.add(arquivoHelper);
				}
			}

		} catch (ErroRepositorioException ex) {
			throw new ControladorException("erro.sistema", ex);
		}

		return colecaoArquivoTextoHelper;
	}

	/**
	 * 
	 * [UC0624] Gerar Relatório para Atualização Cadastral
	 * 
	 * @author Flávio Cordeiro
	 */
	public Collection pesquisarDadosRelatorioAtualizacaoCadastral(
			int anoMesFaturamento, Integer idFaturamentoGrupo,
			int indicadorLocalidadeInformatizada, Collection idLocalidades,
			Collection idSetores, Collection idQuadras, String rotaInicial,
			String rotaFinal, String sequencialRotaInicial,
			String sequencialRotaFinal, String tipoRelatorio,
			Usuario usuarioLogado) throws ControladorException {

		Collection retorno = new ArrayList();
		try {
			Collection colecaoObjeto = repositorioCadastro
					.pesquisarRelatorioAtualizacaoCadastral(idLocalidades,
							idSetores, idQuadras, rotaInicial, rotaFinal,
							sequencialRotaInicial, sequencialRotaFinal);
			if (colecaoObjeto != null && !colecaoObjeto.isEmpty()) {
				Iterator iterator = colecaoObjeto.iterator();

				while (iterator.hasNext()) {
					RelatorioAtualizacaoCadastralHelper relatorioAtualizacaoCadastralHelper = new RelatorioAtualizacaoCadastralHelper();
					Object[] objeto = (Object[]) iterator.next();
					// idImovel
					if (objeto[0] != null) {
						relatorioAtualizacaoCadastralHelper
								.setIdImovel((Integer) objeto[0]);
						relatorioAtualizacaoCadastralHelper
								.setInscricao(getControladorImovel()
										.pesquisarInscricaoImovel(
												relatorioAtualizacaoCadastralHelper
														.getIdImovel()));
					}
					// matricula Imovel
					if (objeto[1] != null) {
						relatorioAtualizacaoCadastralHelper
								.setIdImovel((Integer) objeto[1]);
					}
					// nome cliente
					if (objeto[2] != null) {
						relatorioAtualizacaoCadastralHelper
								.setNomeCliente((String) objeto[2]);
					}
					// localidade id
					if (objeto[3] != null) {
						relatorioAtualizacaoCadastralHelper
								.setIdLocalidade((Integer) objeto[3]);
					}
					// localidade descricao
					if (objeto[4] != null) {
						relatorioAtualizacaoCadastralHelper
								.setLocalidadeDescricao((String) objeto[4]);
					}
					// setor comercial codigo
					if (objeto[5] != null) {
						relatorioAtualizacaoCadastralHelper
								.setCodigoSetorComercial((Integer) objeto[5]);
					}
					// setor comercial descricao
					if (objeto[6] != null) {
						relatorioAtualizacaoCadastralHelper
								.setSetorComercialDescricao((String) objeto[6]);
					}
					// unidade negocio nome
					if (objeto[7] != null) {
						relatorioAtualizacaoCadastralHelper
								.setUnidadeNegocioDescricao((String) objeto[7]);
					}
					// rota codigo
					if (objeto[8] != null) {
						String rota = (String) objeto[8];
						// imovel numero sequencial rota
						if (objeto[9] != null) {
							rota = rota + "." + (String) objeto[9];
						}
						relatorioAtualizacaoCadastralHelper
								.setRotaSequencialRota(rota);
					}

					// imovel indicador exclusao
					if (objeto[10] != null) {
						relatorioAtualizacaoCadastralHelper
								.setIndicadorExclusao((String) objeto[10]);
					}

					// Unidade de negocio id
					if (objeto[11] != null) {
						relatorioAtualizacaoCadastralHelper
								.setIdUnidadeNegocio((Integer) objeto[11]);
					}

					String endereco = getControladorEndereco()
							.obterEnderecoAbreviadoImovel(
									relatorioAtualizacaoCadastralHelper
											.getIdImovel());
					if (endereco != null && !endereco.trim().equals("")) {
						relatorioAtualizacaoCadastralHelper
								.setEndereco(endereco);
					}

					Collection existeLigacaoAgua = getControladorLigacaoAgua()
							.verificaExistenciaLigacaoAgua(
									relatorioAtualizacaoCadastralHelper
											.getIdImovel());
					if (existeLigacaoAgua != null) {

					}

					retorno.add(relatorioAtualizacaoCadastralHelper);

				}

				// parte nova para o relatório ter o processamento em batch
				// cria uma instância da classe do relatório

			}
		} catch (ErroRepositorioException e) {
			sessionContext.setRollbackOnly();
			throw new ControladorException("erro.sistema", e);
		}
		return retorno;
	}

	/**
	 * [UC0725] Gerar Relatório de Imóveis por Situação da Ligação de Agua
	 * 
	 * @author Rafael Pinto
	 * @date 03/12/2007
	 * 
	 * @param FiltrarRelatorioImoveisSituacaoLigacaoAguaHelper
	 * 
	 * @return Collection<Object[]>
	 * @throws ErroRepositorioException
	 */
	public Collection<RelatorioImoveisSituacaoLigacaoAguaHelper> pesquisarRelatorioImoveisSituacaoLigacaoAgua(
			FiltrarRelatorioImoveisSituacaoLigacaoAguaHelper filtro)
			throws ControladorException {

		Collection<RelatorioImoveisSituacaoLigacaoAguaHelper> retorno = new ArrayList<RelatorioImoveisSituacaoLigacaoAguaHelper>();

		Collection<Object[]> colecaoPesquisa = null;

		try {
			colecaoPesquisa = this.repositorioCadastro
					.pesquisarRelatorioImoveisSituacaoLigacaoAgua(filtro);
		} catch (ErroRepositorioException e) {
			throw new ControladorException("erro.sistema", e);
		}

		if (colecaoPesquisa != null && !colecaoPesquisa.isEmpty()) {

			Iterator itera = colecaoPesquisa.iterator();

			while (itera.hasNext()) {
				Object[] objeto = (Object[]) itera.next();

				RelatorioImoveisSituacaoLigacaoAguaHelper helper = new RelatorioImoveisSituacaoLigacaoAguaHelper();

				Integer idImovel = (Integer) objeto[0];
				Integer localidade = (Integer) objeto[5];
				Integer codigoSetorComercial = (Integer) objeto[7];
				Integer numeroQuadra = (Integer) objeto[9];

				Short lote = (Short) objeto[15];
				Short subLote = (Short) objeto[16];

				helper.setMatriculaImovel(Util
						.retornaMatriculaImovelFormatada(idImovel));
				helper.setGerenciaRegional((Integer) objeto[1]);
				helper.setNomeGerenciaRegional((String) objeto[2]);
				helper.setUnidadeNegocio((Integer) objeto[3]);
				helper.setNomeUnidadeNegocio((String) objeto[4]);
				helper.setLocalidade(localidade);
				helper.setDescricaoLocalidade((String) objeto[6]);
				helper.setSetorComercial(codigoSetorComercial);
				helper.setDescricaoSetorComercial((String) objeto[8]);
				helper.setNumeroQuadra(numeroQuadra);
				helper.setNomeCliente((String) objeto[10]);
				helper.setSituacaoLigacaoAgua((String) objeto[11]);
				helper.setSituacaoLigacaoEsgoto((String) objeto[12]);

				helper.setRota((Short) objeto[13]);
				helper.setSequencialRota((Integer) objeto[14]);

				Imovel imovel = new Imovel();
				imovel.setId(idImovel);

				Localidade local = new Localidade();
				local.setId(localidade);
				imovel.setLocalidade(local);

				SetorComercial setorComercial = new SetorComercial();
				setorComercial.setCodigo(codigoSetorComercial);
				imovel.setSetorComercial(setorComercial);

				Quadra quadra = new Quadra();
				quadra.setNumeroQuadra(numeroQuadra);
				imovel.setQuadra(quadra);

				imovel.setLote(lote);
				imovel.setSubLote(subLote);

				helper.setInscricaoImovel(imovel.getInscricaoFormatada());

				String endereco = this.getControladorEndereco()
						.obterEnderecoAbreviadoImovel(idImovel);
				helper.setEndereco(endereco);

				retorno.add(helper);
			}
		}

		return retorno;
	}

	/**
	 * [UC0726] Gerar Relatório de Imóveis com Faturas em Atraso
	 * 
	 * @author Bruno Barros
	 * @date 06/12/2007
	 * 
	 * @param FiltrarRelatorioImoveisFaturasAtrasoHelper
	 * 
	 * @return Collection<RelatorioImoveisSituacaoLigacaoAguaHelper>
	 * @throws ErroRepositorioException
	 */
	public Collection<RelatorioImoveisFaturasAtrasoHelper> pesquisarRelatorioImoveisFaturasAtrasoAgrupadasLocalizacao(
			FiltrarRelatorioImoveisFaturasAtrasoHelper filtro)
			throws ControladorException {

		Collection<RelatorioImoveisFaturasAtrasoHelper> retorno = new ArrayList<RelatorioImoveisFaturasAtrasoHelper>();

		Collection<Object[]> colecaoPesquisa = null;

		try {
			colecaoPesquisa = this.repositorioCadastro
					.pesquisarRelatorioImoveisFaturasAtrasoAgrupadasLocalizacao(filtro);
		} catch (ErroRepositorioException e) {
			throw new ControladorException("erro.sistema", e);
		}

		if (colecaoPesquisa != null && !colecaoPesquisa.isEmpty()) {

			Iterator itera = colecaoPesquisa.iterator();

			while (itera.hasNext()) {
				Object[] objeto = (Object[]) itera.next();

				RelatorioImoveisFaturasAtrasoHelper helper = new RelatorioImoveisFaturasAtrasoHelper();

				Integer idImovel = (Integer) objeto[12];
				Integer localidade = (Integer) objeto[6];
				Integer codigoSetorComercial = (Integer) objeto[4];
				Integer numeroQuadra = (Integer) objeto[15];
				String cpf = (String) objeto[22];
				String cnpj = (String) objeto[23];

				helper.setMatriculaImovel(Util
						.retornaMatriculaImovelFormatada(idImovel));
				helper.setGerenciaRegional((Integer) objeto[0]);
				helper.setNomeGerenciaRegional((String) objeto[1]);
				helper.setUnidadeNegocio((Integer) objeto[2]);
				helper.setNomeUnidadeNegocio((String) objeto[3]);
				helper.setLocalidade(localidade);
				helper.setDescricaoLocalidade((String) objeto[7]);
				helper.setSetorComercial(codigoSetorComercial);
				helper.setDescricaoSetorComercial((String) objeto[5]);
				helper.setNomeClienteUsuario((String) objeto[8]);
				helper.setSituacaoLigacaoAgua((String) objeto[9]);
				helper.setSituacaoLigacaoEsgoto((String) objeto[14]);
				helper.setRota((Short) objeto[10]);
				helper.setSequencialRota((Integer) objeto[11]);
				helper.setQuantidadeFaturasAtraso(((Integer) objeto[17]));
				helper.setValorFaturasAtrasoSemEncargos((BigDecimal) objeto[18]);
				helper.setReferenciaFaturasAtrasoInicial((Integer) objeto[16]);
				helper.setReferenciaFaturasAtrasoFinal((Integer) objeto[19]);

				if (cpf != null && !cpf.equals("")) {
					helper.setCpfOuCnpjClienteUsuario(Util.formatarCpf(cpf));
				}
				if (cnpj != null && !cnpj.equals("")) {
					helper.setCpfOuCnpjClienteUsuario(Util.formatarCnpj(cnpj));
				}
				Imovel imovel = new Imovel();
				imovel.setId(idImovel);

				Localidade local = new Localidade();
				local.setId(localidade);
				imovel.setLocalidade(local);

				SetorComercial setorComercial = new SetorComercial();
				setorComercial.setCodigo(codigoSetorComercial);
				imovel.setSetorComercial(setorComercial);

				Quadra quadra = new Quadra();
				quadra.setNumeroQuadra(numeroQuadra);
				imovel.setQuadra(quadra);

				imovel.setLote((Short) objeto[20]);
				imovel.setSubLote((Short) objeto[21]);

				helper.setInscricaoImovel(imovel.getInscricaoFormatada());

				String endereco = this.getControladorEndereco()
						.pesquisarEnderecoFormatado(idImovel);
				helper.setEndereco(endereco);

				/*
				 * if((String) objeto[22] != null){
				 * helper.setCpfCnpj(Util.formatarCpf((String) objeto[22]));
				 * }else{ helper.setCpfCnpj(Util.formatarCnpj((String)
				 * objeto[23])); }
				 */

				retorno.add(helper);
			}
		}

		return retorno;
	}

	/**
	 * [UC0726] - Gerar Relatório de Imóveis com Faturas em Atraso
	 * 
	 * @since 31/08/2009
	 * @author Marlon Patrick
	 */
	public Collection<RelatorioImoveisFaturasAtrasoHelper> pesquisarRelatorioImoveisFaturasAtrasoAgrupadasCliente(
			FiltrarRelatorioImoveisFaturasAtrasoHelper filtro)
			throws ControladorException {

		Collection<RelatorioImoveisFaturasAtrasoHelper> retorno = new ArrayList<RelatorioImoveisFaturasAtrasoHelper>();

		Collection<Object[]> colecaoPesquisa = null;

		try {
			colecaoPesquisa = this.repositorioCadastro
					.pesquisarRelatorioImoveisFaturasAtrasoAgrupadasCliente(filtro);
		} catch (ErroRepositorioException e) {
			throw new ControladorException("erro.sistema", e);
		}

		if (!Util.isVazioOrNulo(colecaoPesquisa)) {

			for (Object[] dadosRelatorio : colecaoPesquisa) {

				RelatorioImoveisFaturasAtrasoHelper helper = new RelatorioImoveisFaturasAtrasoHelper();

				helper.setIdCliente((Integer) dadosRelatorio[0]);
				helper.setNomeCliente((String) dadosRelatorio[1]);
				helper.setGerenciaRegional((Integer) dadosRelatorio[2]);
				helper.setLocalidade((Integer) dadosRelatorio[3]);
				helper.setSetorComercial((Integer) dadosRelatorio[4]);
				helper.setNumeroQuadra((Integer) dadosRelatorio[5]);
				helper.setSituacaoLigacaoAgua((String) dadosRelatorio[6]);
				helper.setReferenciaFaturasAtrasoInicial((Integer) dadosRelatorio[7]);
				helper.setQuantidadeFaturasAtraso(((Integer) dadosRelatorio[8]));
				helper.setValorFaturasAtrasoSemEncargos((BigDecimal) dadosRelatorio[9]);
				helper.setRota((Short) dadosRelatorio[10]);
				helper.setSequencialRota((Integer) dadosRelatorio[11]);
				helper.setIdImovel((Integer) dadosRelatorio[12]);
				helper.setMatriculaImovel(Util
						.retornaMatriculaImovelFormatada(helper.getIdImovel()));
				helper.setSituacaoLigacaoEsgoto((String) dadosRelatorio[13]);
				helper.setReferenciaFaturasAtrasoFinal((Integer) dadosRelatorio[14]);

				String endereco = this.getControladorEndereco()
						.pesquisarEnderecoFormatado(helper.getIdImovel());
				helper.setEndereco(endereco);

				configurarInscricaoImovelFormatada(helper);

				Cliente clienteUsuario = getControladorImovel()
						.consultarClienteUsuarioImovel(
								new Imovel(helper.getIdImovel()));
				helper.setNomeClienteUsuario(clienteUsuario.getNome());

				// getControladorCobranca().calcularAcrescimoPorImpontualidade(
				// anoMesReferenciaDebito, dataVencimento, dataPagamento,
				// valorDebito,
				// valorMultasCobradas, indicadorMulta, anoMesArrecadacao,
				// idConta,
				// indicadorArrecadacao);

				retorno.add(helper);
			}
		}

		return retorno;
	}

	/**
	 * Méto auxiliar usado para obter a inscrição formatada de um imóvel e setar
	 * a mesma no Helper
	 * 
	 * @since 01/09/2009
	 * @author Marlon Patrick
	 */
	private void configurarInscricaoImovelFormatada(
			RelatorioImoveisFaturasAtrasoHelper helper) {

		SetorComercial setorComercial = new SetorComercial();
		setorComercial.setCodigo(helper.getSetorComercial());

		Quadra quadra = new Quadra();
		quadra.setNumeroQuadra(helper.getNumeroQuadra());

		Imovel imovel = new Imovel(helper.getIdImovel());
		imovel.setQuadra(quadra);
		imovel.setSetorComercial(setorComercial);
		imovel.setLocalidade(new Localidade(helper.getLocalidade()));

		helper.setInscricaoImovel(imovel.getInscricaoFormatada());
	}

	/**
	 * [UC0725] Gerar Relatório de Imóveis por Situação da Ligação de Agua
	 * 
	 * Pesquisa o Total Registro
	 * 
	 * @author Rafael Pinto
	 * @date 04/12/2007
	 * 
	 * @param FiltrarRelatorioImoveisFaturasAtrasoHelper
	 * 
	 * @return Integer
	 * @throws ControladorException
	 */
	public Integer pesquisarTotalRegistroRelatorioImoveisSituacaoLigacaoAgua(
			FiltrarRelatorioImoveisSituacaoLigacaoAguaHelper filtro)
			throws ControladorException {

		try {
			return this.repositorioCadastro
					.pesquisarTotalRegistroRelatorioImoveisSituacaoLigacaoAgua(filtro);
		} catch (ErroRepositorioException e) {
			throw new ControladorException("erro.sistema", e);
		}
	}

	/**
	 * [UC0726] Gerar Relatório de Imóveis com Faturas em Atraso
	 * 
	 * Pesquisa o Total Registro
	 * 
	 * @author Bruno Barros
	 * @date 06/12/2007
	 * 
	 * @param FiltrarRelatorioImoveisSituacaoLigacaoAguaHelper
	 * 
	 * @return Integer
	 * @throws ControladorException
	 */
	public Integer pesquisarTotalRegistroRelatorioImoveisFaturasAtrasoLocalizacao(
			FiltrarRelatorioImoveisFaturasAtrasoHelper filtro)
			throws ControladorException {

		Integer retorno = null;

		try {
			retorno = this.repositorioCadastro
					.pesquisarTotalRegistroRelatorioImoveisFaturasAtrasoLocalizacao(filtro);
		} catch (ErroRepositorioException e) {
			throw new ControladorException("erro.sistema", e);
		}

		return retorno;
	}

	public Integer pesquisarTotalRegistroRelatorioImoveisFaturasAtrasoCliente(
			FiltrarRelatorioImoveisFaturasAtrasoHelper filtro)
			throws ControladorException {

		Integer retorno = null;

		try {
			retorno = this.repositorioCadastro
					.pesquisarTotalRegistroRelatorioImoveisFaturasAtrasoCliente(filtro);
		} catch (ErroRepositorioException e) {
			throw new ControladorException("erro.sistema", e);
		}

		return retorno;
	}

	/**
	 * Pesquisa os imoveis para o relatorio de imoveis por consumo medio
	 * 
	 * @author Bruno Barros
	 * @data 17/12/2007
	 * 
	 * @param filtro
	 * @return Collection<RelatorioImoveisConsumoMedioHelper>
	 * @throws FachadaException
	 */
	public Collection<RelatorioImoveisConsumoMedioHelper> pesquisarRelatorioImoveisConsumoMedio(
			FiltrarRelatorioImoveisConsumoMedioHelper filtro)
			throws ControladorException {
		Collection<RelatorioImoveisConsumoMedioHelper> retorno = new ArrayList<RelatorioImoveisConsumoMedioHelper>();

		Collection<RelatorioImoveisConsumoMedioHelper> colecaoPesquisa = null;

		SistemaParametro sistemaParametro = this.getControladorUtil()
				.pesquisarParametrosDoSistema();

		try {
			colecaoPesquisa = this.repositorioCadastro
					.pesquisarRelatorioImoveisConsumoMedio(filtro,
							sistemaParametro.getAnoMesFaturamento());
		} catch (ErroRepositorioException e) {
			throw new ControladorException("erro.sistema", e);
		}

		if (colecaoPesquisa != null && !colecaoPesquisa.isEmpty()) {

			Iterator itera = colecaoPesquisa.iterator();

			while (itera.hasNext()) {
				Object[] objeto = (Object[]) itera.next();

				RelatorioImoveisConsumoMedioHelper helper = new RelatorioImoveisConsumoMedioHelper();

				Integer idImovel = (Integer) objeto[13];
				Integer localidade = (Integer) objeto[4];
				Integer codigoSetorComercial = (Integer) objeto[6];
				Integer numeroQuadra = (Integer) objeto[18];

				helper.setMatriculaImovel(Util
						.retornaMatriculaImovelFormatada(idImovel));
				helper.setGerenciaRegional((Integer) objeto[0]);
				helper.setNomeGerenciaRegional((String) objeto[1]);
				helper.setUnidadeNegocio((Integer) objeto[2]);
				helper.setNomeUnidadeNegocio((String) objeto[3]);
				helper.setLocalidade(localidade);
				helper.setDescricaoLocalidade((String) objeto[5]);
				helper.setSetorComercial(codigoSetorComercial);
				helper.setDescricaoSetorComercial((String) objeto[7]);
				helper.setNomeCliente((String) objeto[8]);
				helper.setSituacaoLigacaoAgua((String) objeto[9]);

				helper.setConsumoMedioAgua((Integer) objeto[10]);
				helper.setCodigoRota((Short) objeto[11]);

				if (objeto[12] != null) {
					helper.setSequencialRota((Integer) objeto[12]);
				}

				helper.setSituacaoLigacaoEsgoto((String) objeto[14]);
				helper.setConsumoMedioEsgoto((Integer) objeto[15]);

				// Montamos um objeto imovel para poder pesquisar sua inscrição
				Imovel imovel = new Imovel();
				imovel.setId(idImovel);

				Localidade local = new Localidade();
				local.setId(localidade);
				imovel.setLocalidade(local);

				SetorComercial setorComercial = new SetorComercial();
				setorComercial.setCodigo(codigoSetorComercial);
				imovel.setSetorComercial(setorComercial);

				Quadra quadra = new Quadra();
				quadra.setNumeroQuadra(numeroQuadra);
				imovel.setQuadra(quadra);

				imovel.setLote((Short) objeto[16]);
				imovel.setSubLote((Short) objeto[17]);

				helper.setInscricaoImovel(imovel.getInscricaoFormatada());
				// ------------------------------------------------------------

				// Selecionamos o endereço
				String endereco = this.getControladorEndereco()
						.obterEnderecoAbreviadoImovel(idImovel);
				helper.setEndereco(endereco);

				retorno.add(helper);
			}
		}

		return retorno;
	}

	/**
	 * [UC0727] Gerar Relatório de Imóveis por Consumo Medio Pesquisa a
	 * quantidade de imoveis para o relatorio de imoveis por consumo medio
	 * 
	 * @author Bruno Barros
	 * @data 17/12/2007
	 * 
	 * @param filtro
	 * @return Integer
	 * @throws ControladorException
	 */
	public Integer pesquisarTotalRegistroRelatorioImoveisConsumoMedio(
			FiltrarRelatorioImoveisConsumoMedioHelper filtro)
			throws ControladorException {

		SistemaParametro sistemaParametro = this.getControladorUtil()
				.pesquisarParametrosDoSistema();

		try {
			return this.repositorioCadastro
					.pesquisarTotalRegistroRelatorioImoveisConsumoMedio(filtro,
							sistemaParametro.getAnoMesFaturamento());

		} catch (ErroRepositorioException ex) {
			throw new ControladorException("erro.sistema", ex);
		}
	}

	/**
	 * [UC0731] Gerar Relatório de Imóveis com os Ultimos Consumos de Agua
	 * 
	 * @author Rafael Pinto
	 * @date 19/12/2007
	 * 
	 * @param FiltrarRelatorioImoveisUltimosConsumosAguaHelper
	 * 
	 * @return Integer
	 * @throws ErroRepositorioException
	 */
	public Integer pesquisarTotalRegistroRelatorioImoveisUltimosConsumosAgua(
			FiltrarRelatorioImoveisUltimosConsumosAguaHelper filtro)
			throws ControladorException {

		try {
			return this.repositorioCadastro
					.pesquisarTotalRegistroRelatorioImoveisUltimosConsumosAgua(filtro);
		} catch (ErroRepositorioException e) {
			throw new ControladorException("erro.sistema", e);
		}
	}

	/**
	 * [UC0731] Gerar Relatório de Imóveis com os Ultimos Consumos de Agua
	 * 
	 * @author Rafael Pinto
	 * @date 18/12/2007
	 * 
	 * @param FiltrarRelatorioImoveisUltimosConsumosAguaHelper
	 * 
	 * @return Collection<Object[]>
	 * @throws ErroRepositorioException
	 */
	public Collection<RelatorioImoveisUltimosConsumosAguaHelper> pesquisarRelatorioImoveisUltimosConsumosAgua(
			FiltrarRelatorioImoveisUltimosConsumosAguaHelper filtro)
			throws ControladorException {

		Collection<RelatorioImoveisUltimosConsumosAguaHelper> retorno = new ArrayList<RelatorioImoveisUltimosConsumosAguaHelper>();

		Collection<Object[]> colecaoPesquisa = null;

		try {
			colecaoPesquisa = this.repositorioCadastro
					.pesquisarRelatorioImoveisUltimosConsumosAgua(filtro);
		} catch (ErroRepositorioException e) {
			throw new ControladorException("erro.sistema", e);
		}

		if (colecaoPesquisa != null && !colecaoPesquisa.isEmpty()) {

			Iterator itera = colecaoPesquisa.iterator();

			while (itera.hasNext()) {
				Object[] objeto = (Object[]) itera.next();

				RelatorioImoveisUltimosConsumosAguaHelper helper = new RelatorioImoveisUltimosConsumosAguaHelper();

				Integer idImovel = (Integer) objeto[0];
				Integer localidade = (Integer) objeto[5];
				Integer codigoSetorComercial = (Integer) objeto[7];
				Integer numeroQuadra = (Integer) objeto[9];

				Short lote = (Short) objeto[15];
				Short subLote = (Short) objeto[16];

				helper.setMatriculaImovel(Util
						.retornaMatriculaImovelFormatada(idImovel));
				helper.setGerenciaRegional((Integer) objeto[1]);
				helper.setNomeGerenciaRegional((String) objeto[2]);
				helper.setUnidadeNegocio((Integer) objeto[3]);
				helper.setNomeUnidadeNegocio((String) objeto[4]);
				helper.setLocalidade(localidade);
				helper.setDescricaoLocalidade((String) objeto[6]);
				helper.setSetorComercial(codigoSetorComercial);
				helper.setDescricaoSetorComercial((String) objeto[8]);

				helper.setNomeCliente((String) objeto[10]);
				helper.setSituacaoLigacaoAgua((String) objeto[11]);
				helper.setSituacaoLigacaoEsgoto((String) objeto[12]);

				helper.setRota((Short) objeto[13]);
				helper.setSequencialRota((Integer) objeto[14]);

				Imovel imovel = new Imovel();
				imovel.setId(idImovel);

				Localidade local = new Localidade();
				local.setId(localidade);
				imovel.setLocalidade(local);

				SetorComercial setorComercial = new SetorComercial();
				setorComercial.setCodigo(codigoSetorComercial);
				imovel.setSetorComercial(setorComercial);

				Quadra quadra = new Quadra();
				quadra.setNumeroQuadra(numeroQuadra);
				imovel.setQuadra(quadra);

				imovel.setLote(lote);
				imovel.setSubLote(subLote);

				helper.setInscricaoImovel(imovel.getInscricaoFormatada());

				String endereco = this.getControladorEndereco()
						.obterEnderecoAbreviadoImovel(idImovel);
				helper.setEndereco(endereco);

				Categoria categoria = this.getControladorImovel()
						.obterPrincipalCategoriaImovel(idImovel);

				ImovelSubcategoria imovelSubCategoria = this
						.getControladorImovel().obterPrincipalSubcategoria(
								categoria.getId(), idImovel);

				helper.setSubCategoria(imovelSubCategoria.getComp_id()
						.getSubcategoria().getId());

				FiltroSubCategoria filtroSub = new FiltroSubCategoria();
				filtroSub.adicionarParametro(new ParametroSimples(
						FiltroSubCategoria.ID, imovelSubCategoria.getComp_id()
								.getSubcategoria().getId()));

				Subcategoria sub = (Subcategoria) Util
						.retonarObjetoDeColecao(this.getControladorUtil()
								.pesquisar(filtroSub,
										Subcategoria.class.getName()));

				helper.setCodigoSubcategoria(sub.getCodigo() + "");
				helper.setEconomias((Short) objeto[19]);

				int anoMes = this.getControladorUtil()
						.pesquisarParametrosDoSistema().getAnoMesFaturamento();

				String consumoAgua = "";
				String descricaoConsumo = "";

				// 1-Consumo Agua
				String[] retornoConsumo = montarConsumoHistorico(idImovel,
						anoMes, 1);

				descricaoConsumo = retornoConsumo[0];
				consumoAgua = retornoConsumo[1];

				helper.setDescricaoConsumo1(descricaoConsumo);
				helper.setConsumoAgua1(consumoAgua);

				// 2-Consumo Agua
				retornoConsumo = montarConsumoHistorico(idImovel, anoMes, 2);

				descricaoConsumo = retornoConsumo[0];
				consumoAgua = retornoConsumo[1];

				helper.setDescricaoConsumo2(descricaoConsumo);
				helper.setConsumoAgua2(consumoAgua);

				// 3-Consumo Agua
				retornoConsumo = montarConsumoHistorico(idImovel, anoMes, 3);

				descricaoConsumo = retornoConsumo[0];
				consumoAgua = retornoConsumo[1];

				helper.setDescricaoConsumo3(descricaoConsumo);
				helper.setConsumoAgua3(consumoAgua);

				// 4-Consumo Agua
				retornoConsumo = montarConsumoHistorico(idImovel, anoMes, 4);

				descricaoConsumo = retornoConsumo[0];
				consumoAgua = retornoConsumo[1];

				helper.setDescricaoConsumo4(descricaoConsumo);
				helper.setConsumoAgua4(consumoAgua);

				// 5-Consumo Agua
				retornoConsumo = montarConsumoHistorico(idImovel, anoMes, 5);

				descricaoConsumo = retornoConsumo[0];
				consumoAgua = retornoConsumo[1];

				helper.setDescricaoConsumo5(descricaoConsumo);
				helper.setConsumoAgua5(consumoAgua);

				// 6-Consumo Agua
				retornoConsumo = montarConsumoHistorico(idImovel, anoMes, 6);

				descricaoConsumo = retornoConsumo[0];
				consumoAgua = retornoConsumo[1];

				helper.setDescricaoConsumo6(descricaoConsumo);
				helper.setConsumoAgua6(consumoAgua);

				// 7-Consumo Agua
				retornoConsumo = montarConsumoHistorico(idImovel, anoMes, 7);

				descricaoConsumo = retornoConsumo[0];
				consumoAgua = retornoConsumo[1];

				helper.setDescricaoConsumo7(descricaoConsumo);
				helper.setConsumoAgua7(consumoAgua);

				// 8-Consumo Agua
				retornoConsumo = montarConsumoHistorico(idImovel, anoMes, 8);

				descricaoConsumo = retornoConsumo[0];
				consumoAgua = retornoConsumo[1];

				helper.setDescricaoConsumo8(descricaoConsumo);
				helper.setConsumoAgua8(consumoAgua);

				// 9-Consumo Agua
				retornoConsumo = montarConsumoHistorico(idImovel, anoMes, 9);

				descricaoConsumo = retornoConsumo[0];
				consumoAgua = retornoConsumo[1];

				helper.setDescricaoConsumo9(descricaoConsumo);
				helper.setConsumoAgua9(consumoAgua);

				// 10-Consumo Agua
				retornoConsumo = montarConsumoHistorico(idImovel, anoMes, 10);

				descricaoConsumo = retornoConsumo[0];
				consumoAgua = retornoConsumo[1];

				helper.setDescricaoConsumo10(descricaoConsumo);
				helper.setConsumoAgua10(consumoAgua);

				// 11-Consumo Agua
				retornoConsumo = montarConsumoHistorico(idImovel, anoMes, 11);

				descricaoConsumo = retornoConsumo[0];
				consumoAgua = retornoConsumo[1];

				helper.setDescricaoConsumo11(descricaoConsumo);
				helper.setConsumoAgua11(consumoAgua);

				// 12-Consumo Agua
				retornoConsumo = montarConsumoHistorico(idImovel, anoMes, 12);

				descricaoConsumo = retornoConsumo[0];
				consumoAgua = retornoConsumo[1];

				helper.setDescricaoConsumo12(descricaoConsumo);
				helper.setConsumoAgua12(consumoAgua);

				retorno.add(helper);
			}
		}

		return retorno;
	}

	/**
	 * [UC0731] Gerar Relatório de Imóveis com os Ultimos Consumos de Agua
	 * 
	 * Monta os consumos anteriores do imovel
	 * 
	 * @author Rafael Pinto
	 * @date 19/12/2007
	 * 
	 * @param idImovel
	 * @param anoMes
	 * 
	 * @return String[3]
	 * @throws ErroRepositorioException
	 */
	private String[] montarConsumoHistorico(int idImovel, int anoMes,
			int qtdMeses) throws ControladorException {

		String[] retorno = new String[3];

		String consumoAgua = "";

		int anoMesSubtraido = Util.subtrairMesDoAnoMes(anoMes, qtdMeses);
		String descricaoConsumo = Util.retornaDescricaoAnoMes(""
				+ anoMesSubtraido);

		Object[] consumoHistorico = this.getControladorMicromedicao()
				.obterConsumoAnteriorAnormalidadeDoImovel(idImovel,
						anoMesSubtraido, LigacaoTipo.LIGACAO_AGUA);

		if (consumoHistorico != null) {
			if (consumoHistorico[0] != null) {
				consumoAgua = "" + (Integer) consumoHistorico[0];
			}
		}

		retorno[0] = descricaoConsumo;
		retorno[1] = consumoAgua;

		return retorno;
	}

	/**
	 * [UC00728] Gerar Relatório de Imóveis Ativos e Não Medidos
	 * 
	 * @author Rafael Pinto
	 * @date 03/01/2008
	 * 
	 * @param FiltrarRelatorioImoveisAtivosNaoMedidosHelper
	 * 
	 * @return Collection<RelatorioImoveisAtivosNaoMedidosHelper>
	 * @throws ErroRepositorioException
	 */
	public Collection<RelatorioImoveisAtivosNaoMedidosHelper> pesquisarRelatorioImoveisAtivosNaoMedidos(
			FiltrarRelatorioImoveisAtivosNaoMedidosHelper filtro)
			throws ControladorException {

		Collection<RelatorioImoveisAtivosNaoMedidosHelper> retorno = new ArrayList<RelatorioImoveisAtivosNaoMedidosHelper>();

		Collection<Object[]> colecaoPesquisa = null;

		try {
			colecaoPesquisa = this.repositorioCadastro
					.pesquisarRelatorioImoveisAtivosNaoMedidos(filtro);
		} catch (ErroRepositorioException e) {
			throw new ControladorException("erro.sistema", e);
		}

		if (colecaoPesquisa != null && !colecaoPesquisa.isEmpty()) {

			Iterator itera = colecaoPesquisa.iterator();

			while (itera.hasNext()) {
				Object[] objeto = (Object[]) itera.next();

				RelatorioImoveisAtivosNaoMedidosHelper helper = new RelatorioImoveisAtivosNaoMedidosHelper();

				Integer idImovel = (Integer) objeto[0];
				Integer localidade = (Integer) objeto[5];
				Integer codigoSetorComercial = (Integer) objeto[7];
				Integer numeroQuadra = (Integer) objeto[9];

				Short lote = (Short) objeto[15];
				Short subLote = (Short) objeto[16];

				helper.setMatriculaImovel(Util
						.retornaMatriculaImovelFormatada(idImovel));

				helper.setGerenciaRegional((Integer) objeto[1]);
				helper.setNomeGerenciaRegional((String) objeto[2]);
				helper.setUnidadeNegocio((Integer) objeto[3]);
				helper.setNomeUnidadeNegocio((String) objeto[4]);
				helper.setLocalidade(localidade);
				helper.setDescricaoLocalidade((String) objeto[6]);
				helper.setSetorComercial(codigoSetorComercial);
				helper.setDescricaoSetorComercial((String) objeto[8]);
				helper.setNumeroQuadra(numeroQuadra);
				helper.setNomeCliente((String) objeto[10]);
				helper.setSituacaoLigacaoAgua((String) objeto[11]);
				helper.setSituacaoLigacaoEsgoto((String) objeto[12]);

				helper.setRota((Short) objeto[13]);
				helper.setSequencialRota((Integer) objeto[14]);

				Imovel imovel = new Imovel();
				imovel.setId(idImovel);

				Localidade local = new Localidade();
				local.setId(localidade);
				imovel.setLocalidade(local);

				SetorComercial setorComercial = new SetorComercial();
				setorComercial.setCodigo(codigoSetorComercial);
				imovel.setSetorComercial(setorComercial);

				Quadra quadra = new Quadra();
				quadra.setNumeroQuadra(numeroQuadra);
				imovel.setQuadra(quadra);

				imovel.setLote(lote);
				imovel.setSubLote(subLote);

				helper.setInscricaoImovel(imovel.getInscricaoFormatada());

				String endereco = this.getControladorEndereco()
						.obterEnderecoAbreviadoImovel(idImovel);
				helper.setEndereco(endereco);

				retorno.add(helper);
			}
		}

		return retorno;
	}

	/**
	 * [UC00728] Gerar Relatório de Imóveis Ativos e Não Medidos
	 * 
	 * @author Rafael Pinto
	 * @date 03/01/2008
	 * 
	 * @param FiltrarRelatorioImoveisAtivosNaoMedidosHelper
	 * 
	 * @return Integer
	 * @throws ErroRepositorioException
	 */
	public Integer pesquisarTotalRegistroRelatorioImoveisAtivosNaoMedidos(
			FiltrarRelatorioImoveisAtivosNaoMedidosHelper filtro)
			throws ControladorException {

		try {
			return this.repositorioCadastro
					.pesquisarTotalRegistroRelatorioImoveisAtivosNaoMedidos(filtro);
		} catch (ErroRepositorioException e) {
			throw new ControladorException("erro.sistema", e);
		}
	}

	/**
	 * [UC0729] Gerar Relatório de Imóveis por Tipo de Consumo
	 * 
	 * @author Bruno Barros
	 * @date 10/01/2008
	 * 
	 * @param RelatorioImoveisTipoConsumoHelper
	 * 
	 * @return Collection<RelatorioImoveisTipoConsumoHelper>
	 * @throws FachadaException
	 */
	public Collection<RelatorioImoveisTipoConsumoHelper> pesquisarRelatorioImoveisTipoConsumo(
			FiltrarRelatorioImoveisTipoConsumoHelper filtro)
			throws ControladorException {
		Collection<RelatorioImoveisTipoConsumoHelper> retorno = new ArrayList<RelatorioImoveisTipoConsumoHelper>();

		Collection<Object[]> colecaoPesquisa = null;

		try {
			colecaoPesquisa = this.repositorioCadastro
					.pesquisarRelatorioImoveisTipoConsumo(filtro);
		} catch (ErroRepositorioException e) {
			throw new ControladorException("erro.sistema", e);
		}

		if (colecaoPesquisa != null && !colecaoPesquisa.isEmpty()) {

			Iterator itera = colecaoPesquisa.iterator();

			while (itera.hasNext()) {
				Object[] objeto = (Object[]) itera.next();

				RelatorioImoveisTipoConsumoHelper helper = new RelatorioImoveisTipoConsumoHelper();

				Integer idImovel = (Integer) objeto[8];
				Integer localidade = (Integer) objeto[4];
				Integer codigoSetorComercial = (Integer) objeto[6];
				Integer numeroQuadra = (Integer) objeto[15];

				helper.setMatriculaImovel(Util
						.retornaMatriculaImovelFormatada(idImovel));
				helper.setGerenciaRegional((Integer) objeto[0]);
				helper.setNomeGerenciaRegional((String) objeto[1]);
				helper.setUnidadeNegocio((Integer) objeto[2]);
				helper.setNomeUnidadeNegocio((String) objeto[3]);
				helper.setLocalidade(localidade);
				helper.setDescricaoLocalidade((String) objeto[5]);
				helper.setSetorComercial(codigoSetorComercial);
				helper.setDescricaoSetorComercial((String) objeto[7]);
				helper.setNomeCliente((String) objeto[9]);
				helper.setSituacaoLigacaoAgua((String) objeto[10]);

				helper.setTipoConsumo((String) objeto[11]);
				helper.setCodigoRota((Short) objeto[12]);
				helper.setSequencialRota((Integer) objeto[13]);
				helper.setSituacaoLigacaoEsgoto((String) objeto[14]);
				String mesAno = Util.formatarAnoMesParaMesAno(objeto[18]
						.toString());
				helper.setReferencia(mesAno);

				// Montamos um objeto imovel para poder pesquisar sua inscrição
				Imovel imovel = new Imovel();
				imovel.setId(idImovel);

				Localidade local = new Localidade();
				local.setId(localidade);
				imovel.setLocalidade(local);

				SetorComercial setorComercial = new SetorComercial();
				setorComercial.setCodigo(codigoSetorComercial);
				imovel.setSetorComercial(setorComercial);

				Quadra quadra = new Quadra();
				quadra.setNumeroQuadra(numeroQuadra);
				imovel.setQuadra(quadra);

				imovel.setLote((Short) objeto[16]);
				imovel.setSubLote((Short) objeto[17]);

				helper.setInscricaoImovel(imovel.getInscricaoFormatada());
				// ------------------------------------------------------------

				// Selecionamos o endereço
				String endereco = this.getControladorEndereco()
						.obterEnderecoAbreviadoImovel(idImovel);
				helper.setEndereco(endereco);

				retorno.add(helper);
			}
		}

		return retorno;
	}

	/**
	 * [UC0729] Gerar Relatório de Imóveis por Tipo de Consumo
	 * 
	 * @author Bruno Barros
	 * @date 10/01/2008
	 * 
	 * @param RelatorioImoveisTipoConsumoHelper
	 * 
	 * @return Collection<RelatorioImoveisTipoConsumoHelper>
	 * @throws FachadaException
	 */
	public Integer pesquisarTotalRegistroRelatorioImoveisTipoConsumo(
			FiltrarRelatorioImoveisTipoConsumoHelper filtro)
			throws ControladorException {

		try {
			return this.repositorioCadastro
					.pesquisarTotalRegistroRelatorioImoveisTipoConsumo(filtro);
		} catch (ErroRepositorioException e) {
			throw new ControladorException("erro.sistema", e);
		}
	}

	/**
	 * [UC00730] Gerar Relatório de Imóveis com Faturas Recentes em Dia e
	 * Faturas Antigas em Atraso
	 * 
	 * @author Rafael Pinto
	 * @date 08/01/2008
	 * 
	 * @param FiltrarRelatorioImoveisFaturasRecentesDiaFaturasAntigasAtrasoHelper
	 * 
	 * @return 
	 *         Collection<RelatorioImoveisFaturasRecentesDiaFaturasAntigasAtrasoHelper
	 *         >
	 * @throws ErroRepositorioException
	 */
	public Collection<RelatorioImoveisFaturasRecentesDiaFaturasAntigasAtrasoHelper> pesquisarRelatorioImoveisFaturasRecentesDiaFaturasAntigasAtraso(
			FiltrarRelatorioImoveisFaturasRecentesDiaFaturasAntigasAtrasoHelper filtro)
			throws ControladorException {

		Collection<RelatorioImoveisFaturasRecentesDiaFaturasAntigasAtrasoHelper> retorno = new ArrayList<RelatorioImoveisFaturasRecentesDiaFaturasAntigasAtrasoHelper>();

		Collection<Object[]> colecaoPesquisa = null;

		try {
			colecaoPesquisa = this.repositorioCadastro
					.pesquisarRelatorioImoveisFaturasRecentesDiaFaturasAntigasAtraso(filtro);
		} catch (ErroRepositorioException e) {
			throw new ControladorException("erro.sistema", e);
		}

		if (colecaoPesquisa != null && !colecaoPesquisa.isEmpty()) {

			Iterator itera = colecaoPesquisa.iterator();

			while (itera.hasNext()) {
				Object[] objeto = (Object[]) itera.next();

				RelatorioImoveisFaturasRecentesDiaFaturasAntigasAtrasoHelper helper = new RelatorioImoveisFaturasRecentesDiaFaturasAntigasAtrasoHelper();

				Integer idImovel = (Integer) objeto[0];
				Integer localidade = (Integer) objeto[5];
				Integer codigoSetorComercial = (Integer) objeto[7];
				Integer numeroQuadra = (Integer) objeto[9];

				Short lote = (Short) objeto[15];
				Short subLote = (Short) objeto[16];

				helper.setMatriculaImovel(Util
						.retornaMatriculaImovelFormatada(idImovel));
				helper.setGerenciaRegional((Integer) objeto[1]);
				helper.setNomeGerenciaRegional((String) objeto[2]);
				helper.setUnidadeNegocio((Integer) objeto[3]);
				helper.setNomeUnidadeNegocio((String) objeto[4]);
				helper.setLocalidade(localidade);
				helper.setDescricaoLocalidade((String) objeto[6]);
				helper.setSetorComercial(codigoSetorComercial);
				helper.setDescricaoSetorComercial((String) objeto[8]);

				helper.setNomeCliente((String) objeto[10]);
				helper.setSituacaoLigacaoAgua((String) objeto[11]);
				helper.setSituacaoLigacaoEsgoto((String) objeto[12]);

				helper.setRota((Short) objeto[13]);
				helper.setSequencialRota((Integer) objeto[14]);

				Imovel imovel = new Imovel();
				imovel.setId(idImovel);

				Localidade local = new Localidade();
				local.setId(localidade);
				imovel.setLocalidade(local);

				SetorComercial setorComercial = new SetorComercial();
				setorComercial.setCodigo(codigoSetorComercial);
				imovel.setSetorComercial(setorComercial);

				Quadra quadra = new Quadra();
				quadra.setNumeroQuadra(numeroQuadra);
				imovel.setQuadra(quadra);

				imovel.setLote(lote);
				imovel.setSubLote(subLote);

				helper.setInscricaoImovel(imovel.getInscricaoFormatada());

				String endereco = this.getControladorEndereco()
						.obterEnderecoAbreviadoImovel(idImovel);
				helper.setEndereco(endereco);

				Categoria categoria = this.getControladorImovel()
						.obterPrincipalCategoriaImovel(idImovel);

				ImovelSubcategoria imovelSubCategoria = this
						.getControladorImovel().obterPrincipalSubcategoria(
								categoria.getId(), idImovel);

				helper.setSubCategoria(imovelSubCategoria.getComp_id()
						.getSubcategoria().getId());
				helper.setEconomias((Short) objeto[19]);

				try {
					Object[] dadosConta = this.repositorioFaturamento
							.pesquisarQuantidadeFaturasValorFaturas(idImovel);

					helper.setQuantidadeFaturasAtraso((Integer) dadosConta[0]);
					helper.setValorFaturasAtras((BigDecimal) dadosConta[1]);

					Integer dadosRefenciaAntigaConta = this.repositorioFaturamento
							.pesquisarReferenciaAntigaContaSemPagamento(idImovel);

					helper.setReferenciaInicial(dadosRefenciaAntigaConta);

					Integer dadosRefenciaAtualConta = this.repositorioFaturamento
							.pesquisarReferenciaAtualContaSemPagamento(idImovel);

					helper.setReferenciaFinal(dadosRefenciaAtualConta);

				} catch (ErroRepositorioException e) {
					throw new ControladorException("erro.sistema", e);
				}

				retorno.add(helper);
			}
		}

		return retorno;
	}

	/**
	 * [UC00730] Gerar Relatório de Imóveis com Faturas Recentes em Dia e
	 * Faturas Antigas em Atraso
	 * 
	 * @author Rafael Pinto
	 * @date 08/01/2008
	 * 
	 * @param FiltrarRelatorioImoveisFaturasRecentesDiaFaturasAntigasAtrasoHelper
	 * 
	 * @return Integer
	 * @throws ErroRepositorioException
	 */
	public Integer pesquisarTotalRelatorioImoveisFaturasRecentesDiaFaturasAntigasAtraso(
			FiltrarRelatorioImoveisFaturasRecentesDiaFaturasAntigasAtrasoHelper filtro)
			throws ControladorException {

		try {
			return this.repositorioCadastro
					.pesquisarTotalRegistroRelatorioImoveisFaturasRecentesDiaFaturasAntigasAtraso(filtro);
		} catch (ErroRepositorioException e) {
			throw new ControladorException("erro.sistema", e);
		}

	}

	/**
	 * [UC0762] Gerar Arquivo Texto com Dados Cadastrais - CAERN
	 * 
	 * @author Tiago Moreno
	 * @date 08/04/2008
	 * 
	 * @param ArquivoTextoDadosCadastraisHelper
	 * 
	 * @return
	 * @throws ControladorException
	 */
	public void gerarArquivoTextoDadosCadastrais(
			ArquivoTextoDadosCadastraisHelper arquivoTextoDadosCadastraisHelper)
			throws ControladorException {

		// Recupera os imoveis a serem submetidos ao processo
		Collection<Imovel> imoveis = (Collection) this
				.recuperaImoveisArquivoTextoDadosCadastrais(arquivoTextoDadosCadastraisHelper);

		// verifica se há imoveis para os parametros informados
		if (imoveis == null || imoveis.isEmpty()) {
			throw new ControladorException(
					"atencao.sem_registros_arquivo_texto");
		}

		// joga numa colecao de helper todas as informacoes necessarias
		Collection<StringArquivoTextoDadosCadastraisHelper> collectionHelper = this
				.formatarStringArquivoTextoDadosCadastrais(imoveis);

		// Arquivo texto final
		StringBuilder arquivoTxFinal = new StringBuilder();
		BufferedWriter out = null;
		ZipOutputStream zos = null;

		try {

			int i = 1;
			int j = collectionHelper.size();

			// itera a colecao do helper montando as linhas
			for (Iterator iter = collectionHelper.iterator(); iter.hasNext();) {
				StringArquivoTextoDadosCadastraisHelper helper = (StringArquivoTextoDadosCadastraisHelper) iter
						.next();

				// variavel que cria linha por linha
				StringBuilder arquivoTx = new StringBuilder();

				// Inscricao Imovel - 16
				if (helper.getInscricaoImovel() != null
						&& !helper.getInscricaoImovel().equalsIgnoreCase("")) {
					arquivoTx.append(Util.completaString(
							helper.getInscricaoImovel(), 16));
					arquivoTx.append(";");
				} else {
					arquivoTx.append(Util.completaString(" ", 16));
					arquivoTx.append(";");
				}

				// Matricula Imovel Imovel - 8
				if (helper.getMatriculaImovel() != null
						&& !helper.getMatriculaImovel().equalsIgnoreCase("")) {
					arquivoTx.append(Util.completaString(
							helper.getMatriculaImovel(), 8));
					arquivoTx.append(";");
				} else {
					arquivoTx.append(Util.completaString(" ", 8));
					arquivoTx.append(";");
				}

				// Nome Cliente usuario- 50
				if (helper.getNomeCliente() != null
						&& !helper.getNomeCliente().equalsIgnoreCase("")) {
					arquivoTx.append(Util.completaString(
							helper.getNomeCliente(), 50));
					arquivoTx.append(";");
				} else {
					arquivoTx.append(Util.completaString(" ", 50));
					arquivoTx.append(";");
				}

				// Numero Imovel Imovel - 5
				if (helper.getNumeroImovel() != null
						&& !helper.getNumeroImovel().equalsIgnoreCase("")) {
					arquivoTx.append(Util.completaString(
							helper.getNumeroImovel(), 5));
					arquivoTx.append(";");
				} else {
					arquivoTx.append(Util.completaString(" ", 5));
					arquivoTx.append(";");
				}

				// Complemento do Endereco do Imovel - 10
				if (helper.getComplementoEndereco() != null
						&& !helper.getComplementoEndereco()
								.equalsIgnoreCase("")) {
					arquivoTx.append(Util.completaString(
							helper.getComplementoEndereco(), 10));
					arquivoTx.append(";");
				} else {
					arquivoTx.append(Util.completaString(" ", 10));
					arquivoTx.append(";");
				}

				// Situacao de Agua do Imovel - 1
				if (helper.getSituacaoAgua() != null
						&& !helper.getSituacaoAgua().equalsIgnoreCase("")) {
					arquivoTx.append(Util.completaString(
							helper.getSituacaoAgua(), 1));
					arquivoTx.append(";");
				} else {
					arquivoTx.append(Util.completaString(" ", 1));
					arquivoTx.append(";");
				}

				// Situacao do Imovel - 1
				if (helper.getSituacaoImovel() != null
						&& !helper.getSituacaoImovel().equalsIgnoreCase("")) {
					arquivoTx.append(Util.completaString(
							helper.getSituacaoImovel(), 1));
					arquivoTx.append(";");
				} else {
					arquivoTx.append(Util.completaString(" ", 1));
					arquivoTx.append(";");
				}

				// Situacao de Esgoto do Imovel - 1
				if (helper.getSituacaoEsgoto() != null
						&& !helper.getSituacaoEsgoto().equalsIgnoreCase("")) {
					arquivoTx.append(Util.completaString(
							helper.getSituacaoEsgoto(), 1));
					arquivoTx.append(";");
				} else {
					arquivoTx.append(Util.completaString(" ", 1));
					arquivoTx.append(";");
				}

				// Codigo da Subcategoria 01 - 3
				if (helper.getCodigoSubcategoria01() != null
						&& !helper.getCodigoSubcategoria01().equalsIgnoreCase(
								"")) {
					arquivoTx.append(Util.completaString(
							Util.adicionarZerosEsquedaNumero(3,
									helper.getCodigoSubcategoria01()), 3));
					arquivoTx.append(";");
				} else {
					arquivoTx.append(Util.completaString("000", 3));
					arquivoTx.append(";");
				}

				// Quantidade da Subcategoria 01 - 3
				if (helper.getQuantidadeSubcategoria01() != null
						&& !helper.getQuantidadeSubcategoria01()
								.equalsIgnoreCase("")) {
					arquivoTx.append(Util.completaString(
							Util.adicionarZerosEsquedaNumero(3,
									helper.getQuantidadeSubcategoria01()), 3));
					arquivoTx.append(";");
				} else {
					arquivoTx.append(Util.completaString("000", 3));
					arquivoTx.append(";");
				}

				// Codigo da Subcategoria 02 - 3
				if (helper.getCodigoSubcategoria02() != null
						&& !helper.getCodigoSubcategoria02().equalsIgnoreCase(
								"")) {
					arquivoTx.append(Util.completaString(
							Util.adicionarZerosEsquedaNumero(3,
									helper.getCodigoSubcategoria02()), 3));
					arquivoTx.append(";");
				} else {
					arquivoTx.append(Util.completaString("000", 3));
					arquivoTx.append(";");
				}

				// Quantidade da Subcategoria 02 - 3
				if (helper.getQuantidadeSubcategoria02() != null
						&& !helper.getQuantidadeSubcategoria02()
								.equalsIgnoreCase("")) {
					arquivoTx.append(Util.completaString(
							Util.adicionarZerosEsquedaNumero(3,
									helper.getQuantidadeSubcategoria02()), 3));
					arquivoTx.append(";");
				} else {
					arquivoTx.append(Util.completaString("000", 3));
					arquivoTx.append(";");
				}

				// Codigo da Subcategoria 03 - 3
				if (helper.getCodigoSubcategoria03() != null
						&& !helper.getCodigoSubcategoria03().equalsIgnoreCase(
								"")) {
					arquivoTx.append(Util.completaString(
							Util.adicionarZerosEsquedaNumero(3,
									helper.getCodigoSubcategoria03()), 3));
					arquivoTx.append(";");
				} else {
					arquivoTx.append(Util.completaString("000", 3));
					arquivoTx.append(";");
				}

				// Quantidade da Subcategoria 03 - 3
				if (helper.getQuantidadeSubcategoria03() != null
						&& !helper.getQuantidadeSubcategoria03()
								.equalsIgnoreCase("")) {
					arquivoTx.append(Util.completaString(
							Util.adicionarZerosEsquedaNumero(3,
									helper.getQuantidadeSubcategoria03()), 3));
					arquivoTx.append(";");
				} else {
					arquivoTx.append(Util.completaString("000", 3));
					arquivoTx.append(";");
				}

				// Codigo da Subcategoria 04 - 3
				if (helper.getCodigoSubcategoria04() != null
						&& !helper.getCodigoSubcategoria04().equalsIgnoreCase(
								"")) {
					arquivoTx.append(Util.completaString(
							Util.adicionarZerosEsquedaNumero(3,
									helper.getCodigoSubcategoria04()), 3));
					arquivoTx.append(";");
				} else {
					arquivoTx.append(Util.completaString("000", 3));
					arquivoTx.append(";");
				}

				// Quantidade da Subcategoria 04 - 3
				if (helper.getQuantidadeSubcategoria04() != null
						&& !helper.getQuantidadeSubcategoria04()
								.equalsIgnoreCase("")) {
					arquivoTx.append(Util.completaString(
							Util.adicionarZerosEsquedaNumero(3,
									helper.getQuantidadeSubcategoria04()), 3));
					arquivoTx.append(";");
				} else {
					arquivoTx.append(Util.completaString("000", 3));
					arquivoTx.append(";");
				}

				// Codigo da Subcategoria 05 - 3
				if (helper.getCodigoSubcategoria05() != null
						&& !helper.getCodigoSubcategoria05().equalsIgnoreCase(
								"")) {
					arquivoTx.append(Util.completaString(
							Util.adicionarZerosEsquedaNumero(3,
									helper.getCodigoSubcategoria05()), 3));
					arquivoTx.append(";");
				} else {
					arquivoTx.append(Util.completaString("000", 3));
					arquivoTx.append(";");
				}

				// Quantidade da Subcategoria 05 - 3
				if (helper.getQuantidadeSubcategoria05() != null
						&& !helper.getQuantidadeSubcategoria05()
								.equalsIgnoreCase("")) {
					arquivoTx.append(Util.completaString(
							Util.adicionarZerosEsquedaNumero(3,
									helper.getQuantidadeSubcategoria05()), 3));
					arquivoTx.append(";");
				} else {
					arquivoTx.append(Util.completaString("000", 3));
					arquivoTx.append(";");
				}

				// Tipo do Logradouro do Imovel - 5
				if (helper.getTipoLogradouro() != null
						&& !helper.getTipoLogradouro().equalsIgnoreCase("")) {
					arquivoTx.append(Util.completaString(
							helper.getTipoLogradouro(), 5));
					arquivoTx.append(";");
				} else {
					arquivoTx.append(Util.completaString(" ", 5));
					arquivoTx.append(";");
				}

				// Título do Logradouro do Imovel - 6
				if (helper.getTituloLogradouro() != null
						&& !helper.getTituloLogradouro().equalsIgnoreCase("")) {
					arquivoTx.append(Util.completaString(
							helper.getTituloLogradouro(), 6));
					arquivoTx.append(";");
				} else {
					arquivoTx.append(Util.completaString(" ", 6));
					arquivoTx.append(";");
				}

				// Nome do Logradouro do Imovel - 19
				if (helper.getNomeLogradouro() != null
						&& !helper.getNomeLogradouro().equalsIgnoreCase("")) {
					arquivoTx.append(Util.completaString(
							helper.getNomeLogradouro(), 19));
					arquivoTx.append(";");
				} else {
					arquivoTx.append(Util.completaString(" ", 19));
					arquivoTx.append(";");
				}

				// Nome do Bairro do Imovel - 20
				if (helper.getNomeBairro() != null
						&& !helper.getNomeBairro().equalsIgnoreCase("")) {
					arquivoTx.append(Util.completaString(
							helper.getNomeBairro(), 20));
					arquivoTx.append(";");
				} else {
					arquivoTx.append(Util.completaString(" ", 20));
					arquivoTx.append(";");
				}

				// Sexo do cliente usuario - 1
				if (helper.getSexoClienteUsuario() != null
						&& !helper.getSexoClienteUsuario().equalsIgnoreCase("")) {
					arquivoTx.append(Util.completaString(
							helper.getSexoClienteUsuario(), 1));
					arquivoTx.append(";");
				} else {
					arquivoTx.append(Util.completaString(" ", 1));
					arquivoTx.append(";");
				}

				// adicionando a linha no TXT
				arquivoTxFinal.append(arquivoTx.toString());

				// zerando a variavel da linha
				arquivoTx = null;

				// adicionando quebra da linha
				arquivoTxFinal.append(System.getProperty("line.separator"));

				System.out.println("Gerada Linha: " + i + "/" + j);
				i++;

			}

			System.out.println("CRIANDO O ARQUIVO TEXTO...");

			// criando nome do arquivo
			String nomeZip = null;

			String data = Util.formatarDataSemBarraDDMMAAAA(new Date());

			String hora = Util.formatarHoraSemDataSemDoisPontos(new Date());

			nomeZip = "ARQUIVO_DADOS_CADASTRAIS_" + data + "_" + hora;

			File compactadoTipo = new File(nomeZip + ".zip");
			File leituraTipo = new File(nomeZip + ".txt");

			if (arquivoTxFinal != null && arquivoTxFinal.length() != 0) {
				zos = new ZipOutputStream(new FileOutputStream(compactadoTipo));
				out = new BufferedWriter(new OutputStreamWriter(
						new FileOutputStream(leituraTipo.getAbsolutePath())));
				out.write(arquivoTxFinal.toString());
				out.flush();
				ZipUtil.adicionarArquivo(zos, leituraTipo);
				zos.close();
				leituraTipo.delete();
				out.close();
			}

			// limpa todos os campos
			nomeZip = null;
			out = null;
			zos = null;
			compactadoTipo = null;
			leituraTipo = null;
			arquivoTxFinal = null;

			System.out.println("ARQUIVO TEXTO CRIADO COM SUCESSO!");

		} catch (IOException e) {
			String mensagem = e.getMessage();
			String[] inicioMensagem = mensagem.split("\\.");
			if (inicioMensagem != null
					&& (inicioMensagem[0].equals("erro") || inicioMensagem[0]
							.equals("atencao"))) {
				throw new ControladorException(mensagem);
			} else {
				throw new ControladorException("erro.sistema", e);
			}
		} catch (Exception e) {
			e.printStackTrace();
			String mensagem = e.getMessage();
			if (mensagem != null) {
				String[] inicioMensagem = mensagem.split("\\.");
				if (inicioMensagem != null
						&& (inicioMensagem[0].equals("erro") || inicioMensagem[0]
								.equals("atencao"))) {
					throw new ControladorException(mensagem);
				} else {
					throw new ControladorException("erro.sistema", e);
				}
			} else {
				throw new ControladorException("erro.sistema", e);
			}
		}

	}

	/**
	 * [UC0762] Gerar Arquivo Texto com Dados Cadastrais - CAERN
	 * 
	 * Retornar a string formatada para o Arquivo Texto dos dados cadastrais
	 * 
	 * @author Tiago Moreno
	 * @date 08/04/2008
	 * 
	 * @param ArquivoTextoDadosCadastraisHelper
	 * 
	 * @return
	 * @throws ControladorException
	 */
	public Collection<StringArquivoTextoDadosCadastraisHelper> formatarStringArquivoTextoDadosCadastrais(
			Collection<Imovel> imoveis) throws ControladorException {

		Collection<StringArquivoTextoDadosCadastraisHelper> retorno = new ArrayList();

		int i = 1;
		int j = imoveis.size();

		for (Iterator iter = imoveis.iterator(); iter.hasNext();) {

			Imovel imovel = (Imovel) iter.next();

			StringArquivoTextoDadosCadastraisHelper objeto = new StringArquivoTextoDadosCadastraisHelper();

			// Inscricao do Imovel - 16
			objeto.setInscricaoImovel(getControladorImovel()
					.pesquisarInscricaoImovelSemPonto(imovel.getId()));

			// Matricula do Imovel - 8
			objeto.setMatriculaImovel(Util.adicionarZerosEsquedaNumero(8,
					imovel.getId().toString()));

			// Nome do Cliente - 50
			FiltroClienteImovel filtroClienteImovel = new FiltroClienteImovel();

			filtroClienteImovel.adicionarParametro(new ParametroSimples(
					FiltroClienteImovel.IMOVEL_ID, imovel.getId().toString()));
			filtroClienteImovel.adicionarParametro(new ParametroSimples(
					FiltroClienteImovel.CLIENTE_RELACAO_TIPO_ID,
					ClienteRelacaoTipo.USUARIO));
			filtroClienteImovel.adicionarParametro(new ParametroNulo(
					FiltroClienteImovel.DATA_FIM_RELACAO));

			filtroClienteImovel
					.adicionarCaminhoParaCarregamentoEntidade("imovel");
			filtroClienteImovel
					.adicionarCaminhoParaCarregamentoEntidade("cliente");
			filtroClienteImovel
					.adicionarCaminhoParaCarregamentoEntidade("clienteRelacaoTipo");

			ClienteImovel clienteImovel = (ClienteImovel) getControladorUtil()
					.pesquisar(filtroClienteImovel,
							ClienteImovel.class.getName()).iterator().next();
			objeto.setNomeCliente(Util.completaString(clienteImovel
					.getCliente().getNome(), 50));

			// Numero do Imovel - 5
			objeto.setNumeroImovel(Util.completaString(
					imovel.getNumeroImovel(), 5));

			// Complemento Endereco - 10
			objeto.setComplementoEndereco(Util.completaString(
					imovel.getComplementoEndereco(), 10));

			// Situacao de Ligacao de Agua - 1
			String ligacaoAgua = " ";

			if (imovel.getLigacaoAguaSituacao().getId()
					.equals(LigacaoAguaSituacao.POTENCIAL)
					|| imovel.getLigacaoAguaSituacao().getId()
							.equals(LigacaoAguaSituacao.FACTIVEL)) {
				ligacaoAgua = "0";
			} else {
				ligacaoAgua = "1";
			}
			objeto.setSituacaoAgua(ligacaoAgua);

			// Situacao do Imovel
			String situacaoImovel = " ";

			switch (imovel.getLigacaoAguaSituacao().getId()) {
			case 1:
				situacaoImovel = "0";
				break;
			case 2:
				situacaoImovel = "0";
				break;
			case 3:
				situacaoImovel = "1";
				break;
			case 4:
				situacaoImovel = "1";
				break;
			case 5:
				situacaoImovel = "2";
				break;
			case 6:
				situacaoImovel = "3";
				break;
			case 7:
				situacaoImovel = "3";
				break;
			case 8:
				situacaoImovel = "3";
				break;
			case 9:
				situacaoImovel = "9";
				break;
			}

			objeto.setSituacaoImovel(Util.completaString(situacaoImovel, 1));

			// Situacao de Ligacao de Esgoto - 1
			String ligacaoEsgoto = " ";

			if (imovel.getLigacaoEsgotoSituacao().getId().equals("1")
					|| imovel.getLigacaoEsgotoSituacao().getId().equals("2")) {

				ligacaoEsgoto = "0";
			} else if (imovel.getLigacaoEsgoto() == null
					|| imovel.getLigacaoEsgoto().getLigacaoEsgotoPerfil() == null) {
				ligacaoEsgoto = "0";
			} else if (imovel.getLigacaoEsgoto().getLigacaoEsgotoPerfil()
					.getId().equals("2")) {
				ligacaoEsgoto = "2";
			} else {
				ligacaoEsgoto = "1";
			}

			objeto.setSituacaoEsgoto(ligacaoEsgoto);

			// subcategorias e economias
			Collection<ImovelSubcategoria> colecaoImovelSubcategoria = getControladorImovel()
					.pesquisarImovelSubcategoria(imovel);

			int qtImovelSubCategoria = colecaoImovelSubcategoria.size();

			Iterator iterImovelSubCategoria = colecaoImovelSubcategoria
					.iterator();

			ImovelSubcategoria imovSubCat01 = new ImovelSubcategoria();
			ImovelSubcategoria imovSubCat02 = new ImovelSubcategoria();
			ImovelSubcategoria imovSubCat03 = new ImovelSubcategoria();
			ImovelSubcategoria imovSubCat04 = new ImovelSubcategoria();
			ImovelSubcategoria imovSubCat05 = new ImovelSubcategoria();

			if (qtImovelSubCategoria == 1) {

				imovSubCat01 = (ImovelSubcategoria) iterImovelSubCategoria
						.next();
				objeto.setCodigoSubcategoria01(((ImovelSubcategoria) imovSubCat01)
						.getComp_id().getSubcategoria().getCodigo()
						+ "");
				objeto.setQuantidadeSubcategoria01(((ImovelSubcategoria) imovSubCat01)
						.getQuantidadeEconomias() + "");
			} else if (qtImovelSubCategoria == 2) {
				imovSubCat01 = (ImovelSubcategoria) iterImovelSubCategoria
						.next();
				objeto.setCodigoSubcategoria01(((ImovelSubcategoria) imovSubCat01)
						.getComp_id().getSubcategoria().getCodigo()
						+ "");
				objeto.setQuantidadeSubcategoria01(((ImovelSubcategoria) imovSubCat01)
						.getQuantidadeEconomias() + "");

				imovSubCat02 = (ImovelSubcategoria) iterImovelSubCategoria
						.next();
				objeto.setCodigoSubcategoria02(((ImovelSubcategoria) imovSubCat02)
						.getComp_id().getSubcategoria().getCodigo()
						+ "");
				objeto.setQuantidadeSubcategoria02(((ImovelSubcategoria) imovSubCat02)
						.getQuantidadeEconomias() + "");
			} else if (qtImovelSubCategoria == 3) {
				imovSubCat01 = (ImovelSubcategoria) iterImovelSubCategoria
						.next();
				objeto.setCodigoSubcategoria01(((ImovelSubcategoria) imovSubCat01)
						.getComp_id().getSubcategoria().getCodigo()
						+ "");
				objeto.setQuantidadeSubcategoria01(((ImovelSubcategoria) imovSubCat01)
						.getQuantidadeEconomias() + "");

				imovSubCat02 = (ImovelSubcategoria) iterImovelSubCategoria
						.next();
				objeto.setCodigoSubcategoria02(((ImovelSubcategoria) imovSubCat02)
						.getComp_id().getSubcategoria().getCodigo()
						+ "");
				objeto.setQuantidadeSubcategoria02(((ImovelSubcategoria) imovSubCat02)
						.getQuantidadeEconomias() + "");

				imovSubCat03 = (ImovelSubcategoria) iterImovelSubCategoria
						.next();
				objeto.setCodigoSubcategoria03(((ImovelSubcategoria) imovSubCat03)
						.getComp_id().getSubcategoria().getCodigo()
						+ "");
				objeto.setQuantidadeSubcategoria03(((ImovelSubcategoria) imovSubCat03)
						.getQuantidadeEconomias() + "");

			} else if (qtImovelSubCategoria == 4) {
				imovSubCat01 = (ImovelSubcategoria) iterImovelSubCategoria
						.next();
				objeto.setCodigoSubcategoria01(((ImovelSubcategoria) imovSubCat01)
						.getComp_id().getSubcategoria().getCodigo()
						+ "");
				objeto.setQuantidadeSubcategoria01(((ImovelSubcategoria) imovSubCat01)
						.getQuantidadeEconomias() + "");

				imovSubCat02 = (ImovelSubcategoria) iterImovelSubCategoria
						.next();
				objeto.setCodigoSubcategoria02(((ImovelSubcategoria) imovSubCat02)
						.getComp_id().getSubcategoria().getCodigo()
						+ "");
				objeto.setQuantidadeSubcategoria02(((ImovelSubcategoria) imovSubCat02)
						.getQuantidadeEconomias() + "");

				imovSubCat03 = (ImovelSubcategoria) iterImovelSubCategoria
						.next();
				objeto.setCodigoSubcategoria03(((ImovelSubcategoria) imovSubCat03)
						.getComp_id().getSubcategoria().getCodigo()
						+ "");
				objeto.setQuantidadeSubcategoria03(((ImovelSubcategoria) imovSubCat03)
						.getQuantidadeEconomias() + "");

				imovSubCat04 = (ImovelSubcategoria) iterImovelSubCategoria
						.next();
				objeto.setCodigoSubcategoria04(((ImovelSubcategoria) imovSubCat04)
						.getComp_id().getSubcategoria().getCodigo()
						+ "");
				objeto.setQuantidadeSubcategoria04(((ImovelSubcategoria) imovSubCat04)
						.getQuantidadeEconomias() + "");

			} else if (qtImovelSubCategoria == 5) {
				imovSubCat01 = (ImovelSubcategoria) iterImovelSubCategoria
						.next();
				objeto.setCodigoSubcategoria01(((ImovelSubcategoria) imovSubCat01)
						.getComp_id().getSubcategoria().getCodigo()
						+ "");
				objeto.setQuantidadeSubcategoria01(((ImovelSubcategoria) imovSubCat01)
						.getQuantidadeEconomias() + "");

				imovSubCat02 = (ImovelSubcategoria) iterImovelSubCategoria
						.next();
				objeto.setCodigoSubcategoria02(((ImovelSubcategoria) imovSubCat02)
						.getComp_id().getSubcategoria().getCodigo()
						+ "");
				objeto.setQuantidadeSubcategoria02(((ImovelSubcategoria) imovSubCat02)
						.getQuantidadeEconomias() + "");

				imovSubCat03 = (ImovelSubcategoria) iterImovelSubCategoria
						.next();
				objeto.setCodigoSubcategoria03(((ImovelSubcategoria) imovSubCat03)
						.getComp_id().getSubcategoria().getCodigo()
						+ "");
				objeto.setQuantidadeSubcategoria03(((ImovelSubcategoria) imovSubCat03)
						.getQuantidadeEconomias() + "");

				imovSubCat04 = (ImovelSubcategoria) iterImovelSubCategoria
						.next();
				objeto.setCodigoSubcategoria04(((ImovelSubcategoria) imovSubCat04)
						.getComp_id().getSubcategoria().getCodigo()
						+ "");
				objeto.setQuantidadeSubcategoria04(((ImovelSubcategoria) imovSubCat04)
						.getQuantidadeEconomias() + "");

				imovSubCat05 = (ImovelSubcategoria) iterImovelSubCategoria
						.next();
				objeto.setCodigoSubcategoria05(((ImovelSubcategoria) imovSubCat05)
						.getComp_id().getSubcategoria().getCodigo()
						+ "");
				objeto.setQuantidadeSubcategoria05(((ImovelSubcategoria) imovSubCat05)
						.getQuantidadeEconomias() + "");

			}

			// pesquisa o endereco do imovel
			Collection endereco = getControladorEndereco()
					.pesquisarEnderecoTotalmenteDividido(imovel.getId());

			Object[] objetoEndereco = (Object[]) endereco.iterator().next();

			// Tipo Logradouro - 5
			objeto.setTipoLogradouro(Util.completaString(
					(String) objetoEndereco[22], 5));

			// Titulo Logradouro - 6
			objeto.setTituloLogradouro(Util.completaString(
					(String) objetoEndereco[23], 6));

			// Nome Logradouro - 19
			objeto.setNomeLogradouro(Util.completaString(
					(String) objetoEndereco[0], 19));

			// Nome Bairro - 20
			objeto.setNomeBairro(Util.completaString(
					(String) objetoEndereco[4], 20));

			// Sexo do Cliente Usuario - 1
			FiltroCliente filtroCliente = new FiltroCliente();
			filtroCliente.adicionarParametro(new ParametroSimples(
					FiltroCliente.ID, clienteImovel.getCliente().getId()));
			filtroCliente
					.adicionarCaminhoParaCarregamentoEntidade(FiltroCliente.SEXO);
			Cliente cliente = (Cliente) getControladorUtil()
					.pesquisar(filtroCliente, Cliente.class.getName())
					.iterator().next();

			if (cliente.getPessoaSexo() != null) {
				if (cliente.getPessoaSexo().getId() == 1) {
					objeto.setSexoClienteUsuario(Util.completaString("M", 1));
				} else if (cliente.getPessoaSexo().getId() == 2) {
					objeto.setSexoClienteUsuario(Util.completaString("F", 1));
				} else {
					objeto.setSexoClienteUsuario(Util.completaString("N", 1));
				}
			} else {
				objeto.setSexoClienteUsuario(Util.completaString("N", 1));
			}

			retorno.add(objeto);

			System.out.println("Formatada Linha: " + i + "/" + j);
			i++;
		}

		return retorno;
	}

	/**
	 * [UC0762] Gerar Arquivo Texto com Dados Cadastrais - CAERN
	 * 
	 * O método retorna uma colecao de Imoveis para que a partir daí comece a
	 * geracao das linhas TXTs.
	 * 
	 * @author Tiago Moreno
	 * @date 08/04/2008
	 * 
	 * @param ArquivoTextoDadosCadastraisHelper
	 * 
	 * @return Collection<Imovel>
	 * @throws ControladorException
	 */

	public Collection<Imovel> recuperaImoveisArquivoTextoDadosCadastrais(
			ArquivoTextoDadosCadastraisHelper arquivoTextoDadosCadastraisHelper)
			throws ControladorException {

		try {
			return this.repositorioCadastro
					.pesquisarImovelArquivoTextoDadosCadastrais(arquivoTextoDadosCadastraisHelper);
		} catch (ErroRepositorioException e) {
			throw new ControladorException("erro.sistema", e);
		}

	}

	/**
	 * [UC0763] Gerar Arquivo Texto de Ligacoes com Hidrometro - CAERN
	 * 
	 * @author Tiago Moreno
	 * @date 10/04/2008
	 * 
	 * @param ArquivoTextoLigacoesHidrometroHelper
	 * 
	 * @return
	 * @throws ControladorException
	 */
	public Collection<HidrometroInstalacaoHistorico> recuperaImoveisArquivoTextoLigacoesHidrometro(
			ArquivoTextoLigacoesHidrometroHelper arquivoTextoLigacoesHidrometroHelper)
			throws ControladorException {

		try {
			return this.repositorioCadastro
					.pesquisarImovelArquivoTextoLigacoesHidrometro(arquivoTextoLigacoesHidrometroHelper);
		} catch (ErroRepositorioException e) {
			throw new ControladorException("erro.sistema", e);
		}

	}

	/**
	 * Pesquisar os todos os ids de Setor comercial
	 * 
	 * @author Vivianne Sousa
	 * @date 07/02/2007
	 * 
	 * @return Collection<Integer>
	 * @throws ErroRepositorioException
	 */
	public Collection<Integer> pesquisarIdsCodigosSetorComercial()
			throws ControladorException {

		try {
			return this.repositorioSetorComercial
					.pesquisarIdsCodigosSetorComercial();
		} catch (ErroRepositorioException e) {
			throw new ControladorException("erro.sistema", e);
		}

	}

	/**
	 * [UC0330] Inserir Mensagem da Conta
	 * 
	 * [SB0001] Pesquisar Setor Comercial
	 * 
	 * @author Raphael Rossiter
	 * @date 25/06/2008
	 * 
	 * @param tipoArgumento
	 * @param indiceInicial
	 * @param indiceFinal
	 * @param anoMesReferencia
	 * @return Collection
	 * @throws ControladorException
	 */
	public Collection pesquisarSetorComercialPorQualidadeAgua(
			int tipoArgumento, BigDecimal indiceInicial,
			BigDecimal indiceFinal, Integer anoMesReferencia)
			throws ControladorException {

		Collection colecaoRetorno = new ArrayList();
		Collection colecaoDadosQualidadeAgua = null;

		try {

			colecaoDadosQualidadeAgua = this.repositorioCadastro
					.pesquisarSetorComercialPorQualidadeAgua(tipoArgumento,
							indiceInicial, indiceFinal, anoMesReferencia);

		} catch (ErroRepositorioException e) {
			throw new ControladorException("erro.sistema", e);
		}

		// Caso a qualidade de água não exista na tabela QUALIDADE_AGUA
		if (colecaoDadosQualidadeAgua == null
				|| colecaoDadosQualidadeAgua.isEmpty()) {

			throw new ControladorException("atencao.pesquisa_inexistente",
					null, "Qualidade de Água");
		}

		Iterator iterator = colecaoDadosQualidadeAgua.iterator();
		Object[] dadosQualidadeAgua = null;

		while (iterator.hasNext()) {

			dadosQualidadeAgua = (Object[]) iterator.next();

			// Caso a qualidade de água tenha localidade na tabela
			// QUALIDADE_AGUA
			if (dadosQualidadeAgua[0] != null) {

				Localidade localidade = new Localidade();
				localidade.setId((Integer) dadosQualidadeAgua[0]);
				localidade.setDescricao((String) dadosQualidadeAgua[1]);

				/*
				 * Caso a qualidade de água tenha setor comercial na tabela
				 * QUALIDADE_AGUA, o mesmo será disponibilizado.
				 */
				if (dadosQualidadeAgua[2] != null) {

					// Será necessário carregar o nome da localidade para ser
					// visualizado ao lado do nome do setor
					SetorComercial setorComercial = (SetorComercial) dadosQualidadeAgua[2];
					setorComercial.setLocalidade(localidade);

					FiltroContaMensagem filtroContaMensagem = new FiltroContaMensagem();

					filtroContaMensagem
							.adicionarParametro(new ParametroSimples(
									FiltroContaMensagem.ANO_MES_REFERECIA_FATURAMENTO,
									anoMesReferencia));

					filtroContaMensagem
							.adicionarParametro(new ParametroSimples(
									FiltroContaMensagem.SETOR_COMERCIAL_ID,
									setorComercial.getId()));

					Collection colecaoContaMensagem = this.getControladorUtil()
							.pesquisar(filtroContaMensagem,
									ContaMensagem.class.getName());

					if (colecaoContaMensagem == null
							|| colecaoContaMensagem.isEmpty()) {
						colecaoRetorno.add(dadosQualidadeAgua[2]);
					}

				}
				// Caso contrário todos os setores da localidade serão
				// disponibilizados
				else {

					FiltroSetorComercial filtroSetorComercial = new FiltroSetorComercial(
							FiltroSetorComercial.DESCRICAO);

					filtroSetorComercial
							.adicionarCaminhoParaCarregamentoEntidade("localidade");

					filtroSetorComercial
							.adicionarParametro(new ParametroSimples(
									FiltroSetorComercial.ID_LOCALIDADE,
									localidade.getId()));

					Collection colecaoSetoresPorLocalidade = this
							.getControladorUtil().pesquisar(
									filtroSetorComercial,
									SetorComercial.class.getName());

					if (colecaoSetoresPorLocalidade != null
							&& !colecaoSetoresPorLocalidade.isEmpty()) {

						Iterator iteratorSetores = colecaoSetoresPorLocalidade
								.iterator();

						while (iteratorSetores.hasNext()) {

							SetorComercial setorComercial = (SetorComercial) iteratorSetores
									.next();

							FiltroContaMensagem filtroContaMensagem = new FiltroContaMensagem();

							filtroContaMensagem
									.adicionarParametro(new ParametroSimples(
											FiltroContaMensagem.ANO_MES_REFERECIA_FATURAMENTO,
											anoMesReferencia));

							filtroContaMensagem
									.adicionarParametro(new ParametroSimples(
											FiltroContaMensagem.SETOR_COMERCIAL_ID,
											setorComercial.getId()));

							Collection colecaoContaMensagem = this
									.getControladorUtil().pesquisar(
											filtroContaMensagem,
											ContaMensagem.class.getName());

							if (colecaoContaMensagem == null
									|| colecaoContaMensagem.isEmpty()) {
								colecaoRetorno.add(setorComercial);
							}
						}
					}
				}
			}
		}

		return colecaoRetorno;
	}

	/**
	 * [UC0726] Gerar Relatório de Imóveis com Faturas em Atraso
	 * 
	 * @author Flávio Leonardo
	 * @date 10/09/2008
	 * 
	 * @param FiltrarRelatorioImoveisFaturasAtrasoHelper
	 * 
	 * @return Collection<RelatorioImoveisSituacaoLigacaoAguaHelper>
	 * @throws ErroRepositorioException
	 */
	public Collection<RelatorioImoveisFaturasAtrasoHelper> pesquisarRelatorioImoveisFaturasAtrasoDescritasLocalizacao(
			FiltrarRelatorioImoveisFaturasAtrasoHelper filtro)
			throws ControladorException {

		Collection<RelatorioImoveisFaturasAtrasoHelper> retorno = new ArrayList<RelatorioImoveisFaturasAtrasoHelper>();

		Collection<Object[]> colecaoPesquisa = null;

		try {
			colecaoPesquisa = this.repositorioCadastro
					.pesquisarRelatorioImoveisFaturasAtrasoDescritasLocalizacao(filtro);
		} catch (ErroRepositorioException e) {
			throw new ControladorException("erro.sistema", e);
		}

		if (colecaoPesquisa != null && !colecaoPesquisa.isEmpty()) {

			Iterator itera = colecaoPesquisa.iterator();

			while (itera.hasNext()) {
				Object[] objeto = (Object[]) itera.next();

				RelatorioImoveisFaturasAtrasoHelper helper = new RelatorioImoveisFaturasAtrasoHelper();

				Integer idImovel = (Integer) objeto[12];

				Integer localidade = (Integer) objeto[6];
				Integer codigoSetorComercial = (Integer) objeto[4];
				Integer numeroQuadra = (Integer) objeto[15];

				String cpf = (String) objeto[21];
				String cnpj = (String) objeto[22];

				helper.setMatriculaImovel(Util
						.retornaMatriculaImovelFormatada(idImovel));
				helper.setGerenciaRegional((Integer) objeto[0]);
				helper.setNomeGerenciaRegional((String) objeto[1]);
				helper.setUnidadeNegocio((Integer) objeto[2]);
				helper.setNomeUnidadeNegocio((String) objeto[3]);
				helper.setLocalidade(localidade);
				helper.setDescricaoLocalidade((String) objeto[7]);
				helper.setSetorComercial(codigoSetorComercial);
				helper.setDescricaoSetorComercial((String) objeto[5]);
				helper.setNomeClienteUsuario((String) objeto[8]);
				helper.setSituacaoLigacaoAgua((String) objeto[9]);
				helper.setSituacaoLigacaoEsgoto((String) objeto[14]);
				helper.setRota((Short) objeto[10]);
				helper.setSequencialRota((Integer) objeto[11]);
				helper.setQuantidadeFaturasAtraso(0);
				// helper.setQuantidadeFaturasAtraso( ( (Integer) objeto[17] )
				// );
				helper.setValorFaturasAtrasoSemEncargos((BigDecimal) objeto[17]);
				helper.setReferenciaFaturasAtrasoInicial((Integer) objeto[16]);
				// helper.setReferenciaFaturasAtrasoFinal( (Integer) objeto[19]
				// );
				helper.setReferenciaFaturasAtrasoFinal(0);
				helper.setVencimento((Date) objeto[20]);

				if (cpf != null && !cpf.equals("")) {
					helper.setCpfOuCnpjClienteUsuario(Util.formatarCpf(cpf));
				}

				if (cnpj != null && !cnpj.equals("")) {
					helper.setCpfOuCnpjClienteUsuario(Util.formatarCnpj(cnpj));
				}

				Imovel imovel = new Imovel();
				imovel.setId(idImovel);

				Localidade local = new Localidade();
				local.setId(localidade);
				imovel.setLocalidade(local);

				SetorComercial setorComercial = new SetorComercial();
				setorComercial.setCodigo(codigoSetorComercial);
				imovel.setSetorComercial(setorComercial);

				Quadra quadra = new Quadra();
				quadra.setNumeroQuadra(numeroQuadra);
				imovel.setQuadra(quadra);

				imovel.setLote((Short) objeto[18]);
				imovel.setSubLote((Short) objeto[19]);

				helper.setInscricaoImovel(imovel.getInscricaoFormatada());

				String endereco = this.getControladorEndereco()
						.pesquisarEnderecoFormatado(idImovel);
				helper.setEndereco(endereco);

				retorno.add(helper);
			}
		}

		return retorno;
	}

	/**
	 * [UC0726] Gerar Relatório de Imóveis com Faturas em Atraso
	 * 
	 * @since 02/09/2009
	 * @author Marlon Patrick
	 * @throws Exception
	 */
	public Collection<RelatorioImoveisFaturasAtrasoHelper> pesquisarRelatorioImoveisFaturasAtrasoDescritasCliente(
			FiltrarRelatorioImoveisFaturasAtrasoHelper filtro)
			throws ControladorException {

		Collection<RelatorioImoveisFaturasAtrasoHelper> retorno = new ArrayList<RelatorioImoveisFaturasAtrasoHelper>();

		Collection<Object[]> colecaoPesquisa = null;

		try {
			colecaoPesquisa = this.repositorioCadastro
					.pesquisarRelatorioImoveisFaturasAtrasoDescritasCliente(filtro);

			if (!Util.isVazioOrNulo(colecaoPesquisa)) {

				for (Object[] dadosRelatorio : colecaoPesquisa) {

					RelatorioImoveisFaturasAtrasoHelper helper = new RelatorioImoveisFaturasAtrasoHelper();

					helper.setIdCliente((Integer) dadosRelatorio[0]);
					helper.setNomeCliente((String) dadosRelatorio[1]);
					helper.setGerenciaRegional((Integer) dadosRelatorio[2]);
					helper.setLocalidade((Integer) dadosRelatorio[3]);
					helper.setSetorComercial((Integer) dadosRelatorio[4]);
					helper.setNumeroQuadra((Integer) dadosRelatorio[5]);
					helper.setRota((Short) dadosRelatorio[6]);
					helper.setSequencialRota((Integer) dadosRelatorio[7]);
					helper.setIdImovel((Integer) dadosRelatorio[8]);
					helper.setMatriculaImovel(Util
							.retornaMatriculaImovelFormatada(helper
									.getIdImovel()));
					helper.setSituacaoLigacaoAgua((String) dadosRelatorio[9]);
					helper.setSituacaoLigacaoEsgoto((String) dadosRelatorio[10]);
					helper.setIdConta((Integer) dadosRelatorio[11]);
					helper.setReferenciaFaturasAtrasoInicial((Integer) dadosRelatorio[12]);
					helper.setVencimento((Date) dadosRelatorio[13]);
					helper.setIndicadorCobrancaMultaConta((Short) dadosRelatorio[14]);
					helper.setValorFaturasAtrasoSemEncargos((BigDecimal) dadosRelatorio[15]);
					helper.setReferenciaFaturasAtrasoFinal(0);

					String endereco = this.getControladorEndereco()
							.pesquisarEnderecoFormatado(helper.getIdImovel());
					helper.setEndereco(endereco);

					configurarInscricaoImovelFormatada(helper);

					Cliente clienteUsuario = getControladorImovel()
							.consultarClienteUsuarioImovel(
									new Imovel(helper.getIdImovel()));
					helper.setNomeClienteUsuario(clienteUsuario.getNome());

					if (Util.verificarNaoVazio(clienteUsuario.getCnpj())) {
						helper.setCpfOuCnpjClienteUsuario(clienteUsuario
								.getCnpjFormatado());
					} else {
						helper.setCpfOuCnpjClienteUsuario(clienteUsuario
								.getCpfFormatado());
					}

					Object[] pagamentoContasMenorData = repositorioFaturamento
							.obterArrecadacaoFormaPagamentoContasMenorData(
									helper.getIdConta(), helper.getIdImovel(),
									helper.getReferenciaFaturasAtrasoInicial());

					Date dataPagamento = null;
					if (pagamentoContasMenorData != null) {
						dataPagamento = (Date) pagamentoContasMenorData[1];
					}

					BigDecimal valorMultasCobradas = repositorioFaturamento
							.pesquisarValorMultasCobradas(helper.getIdConta());

					SistemaParametro sistemaParametros = Fachada.getInstancia()
							.pesquisarParametrosDoSistema();

					CalcularAcrescimoPorImpontualidadeHelper valorHelper = getControladorCobranca()
							.calcularAcrescimoPorImpontualidade(
									helper.getReferenciaFaturasAtrasoFinal(),
									helper.getVencimento(),
									dataPagamento,
									helper.getValorFaturasAtrasoSemEncargos(),
									valorMultasCobradas,
									helper.getIndicadorCobrancaMultaConta(),
									sistemaParametros.getAnoMesArrecadacao()
											.toString(),
									helper.getIdConta(),
									ConstantesSistema.INDICADOR_ARRECADACAO_ATIVO,
									null);

					helper.setValorFaturasAtrasoComEncargos(valorHelper
							.getValorTotalAcrescimosImpontualidade().add(
									helper.getValorFaturasAtrasoSemEncargos()));

					retorno.add(helper);
				}
			}

		} catch (ErroRepositorioException e) {
			throw new ControladorException("erro.sistema", e);
		}

		return retorno;
	}

	/**
	 * [UC0xxx] Inserir Unidade de Negocio
	 * 
	 * 
	 * @author Rômulo Aurélio
	 * @date 29/09/2008
	 * 
	 * 
	 * @return Integer
	 * @throws ControladorException
	 * @throws ControladorException
	 */

	public Integer inserirUnidadeNegocio(UnidadeNegocio unidadeNegocio,
			Usuario usuarioLogado) throws ControladorException {

		Integer retorno = null;

		if (unidadeNegocio.getNome() != null
				&& unidadeNegocio.getNome().equalsIgnoreCase("")) {
			throw new ControladorException("atencao.required", null, "Nome");

		}

		if (unidadeNegocio.getNomeAbreviado() != null
				&& unidadeNegocio.getNomeAbreviado().equalsIgnoreCase("")) {
			throw new ControladorException("atencao.required", null,
					"Nome Abreviado");

		}

		if (unidadeNegocio.getGerenciaRegional() == null
				|| unidadeNegocio.getGerenciaRegional().getId().toString()
						.equalsIgnoreCase("")) {
			throw new ControladorException("atencao.required", null,
					"Gerência Regional");
		}

		FiltroUnidadeNegocio filtroUnidadeNegocio = new FiltroUnidadeNegocio();

		filtroUnidadeNegocio.adicionarParametro(new ParametroSimples(
				FiltroUnidadeNegocio.NOME, unidadeNegocio.getNome()));

		// Pesquisa se existe algum funcionario com a matricula informada

		Collection colecaoUnidadeNegocioNome = new ArrayList();

		colecaoUnidadeNegocioNome = getControladorUtil().pesquisar(
				filtroUnidadeNegocio, UnidadeNegocio.class.getName());

		if (colecaoUnidadeNegocioNome != null
				&& !colecaoUnidadeNegocioNome.isEmpty()) {
			throw new ControladorException(
					"atencao.unidade_negocio_ja_existente");

		}

		unidadeNegocio.setUltimaAlteracao(new Date());

		// ------------ REGISTRAR TRANSAÇÃO ----------------
		RegistradorOperacao registradorOperacao = new RegistradorOperacao(
				Operacao.OPERACAO_INSERIR_UNIDADE_NEGOCIO,
				new UsuarioAcaoUsuarioHelper(usuarioLogado,
						UsuarioAcao.USUARIO_ACAO_EFETUOU_OPERACAO));

		Operacao operacao = new Operacao();
		// MUDARRRRRRRRR
		operacao.setId(Operacao.OPERACAO_INSERIR_UNIDADE_NEGOCIO);

		OperacaoEfetuada operacaoEfetuada = new OperacaoEfetuada();
		operacaoEfetuada.setOperacao(operacao);

		unidadeNegocio.setOperacaoEfetuada(operacaoEfetuada);
		unidadeNegocio.adicionarUsuario(usuarioLogado,
				UsuarioAcao.USUARIO_ACAO_EFETUOU_OPERACAO);
		registradorOperacao.registrarOperacao(unidadeNegocio);
		// ------------ REGISTRAR TRANSAÇÃO ----------------

		retorno = (Integer) getControladorUtil().inserir(unidadeNegocio);

		return retorno;

	}

	/**
	 * [UC0???] Atualizar Unidade de Negocio
	 * 
	 * 
	 * @author Rômulo Aurélio
	 * @date 29/09/2008
	 * 
	 * 
	 * @throws ControladorException
	 * @throws ControladorException
	 */

	public void atualizarUnidadeNegocio(UnidadeNegocio unidadeNegocio,
			Usuario usuarioLogado) throws ControladorException {

		if (unidadeNegocio.getNome() != null
				&& unidadeNegocio.getNome().equalsIgnoreCase("")) {
			throw new ControladorException("atencao.required", null, "Nome");

		}

		if (unidadeNegocio.getNomeAbreviado() != null
				&& unidadeNegocio.getNomeAbreviado().equalsIgnoreCase("")) {
			throw new ControladorException("atencao.required", null,
					"Nome Abreviado");

		}

		if (unidadeNegocio.getGerenciaRegional() == null
				|| unidadeNegocio.getGerenciaRegional().getId().toString()
						.equalsIgnoreCase("")) {
			throw new ControladorException("atencao.required", null,
					"Gerência Regional");
		}

		FiltroUnidadeNegocio filtroUnidadeNegocio = new FiltroUnidadeNegocio();

		filtroUnidadeNegocio.adicionarParametro(new ParametroSimples(
				FiltroUnidadeNegocio.NOME, unidadeNegocio.getNome()));

		// Pesquisa se existe algum funcionario com a matricula informada

		Collection colecaoUnidadeNegocioNome = new ArrayList();

		colecaoUnidadeNegocioNome = getControladorUtil().pesquisar(
				filtroUnidadeNegocio, UnidadeNegocio.class.getName());

		if (colecaoUnidadeNegocioNome != null
				&& !colecaoUnidadeNegocioNome.isEmpty()) {

			UnidadeNegocio unidadeNegocioBase = (UnidadeNegocio) colecaoUnidadeNegocioNome
					.iterator().next();

			if (unidadeNegocio.getId().intValue() != unidadeNegocioBase.getId()
					.intValue()) {

				throw new ControladorException(
						"atencao.unidade_negocio_ja_existente");
			}
		}

		unidadeNegocio.setUltimaAlteracao(new Date());

		// ------------ REGISTRAR TRANSAÇÃO ----------------
		RegistradorOperacao registradorOperacao = new RegistradorOperacao(
				Operacao.OPERACAO_INSERIR_UNIDADE_NEGOCIO,
				new UsuarioAcaoUsuarioHelper(usuarioLogado,
						UsuarioAcao.USUARIO_ACAO_EFETUOU_OPERACAO));

		Operacao operacao = new Operacao();
		// MUDARRRRRRRRR
		operacao.setId(Operacao.OPERACAO_INSERIR_UNIDADE_NEGOCIO);

		OperacaoEfetuada operacaoEfetuada = new OperacaoEfetuada();
		operacaoEfetuada.setOperacao(operacao);

		unidadeNegocio.setOperacaoEfetuada(operacaoEfetuada);
		unidadeNegocio.adicionarUsuario(usuarioLogado,
				UsuarioAcao.USUARIO_ACAO_EFETUOU_OPERACAO);
		registradorOperacao.registrarOperacao(unidadeNegocio);
		// ------------ REGISTRAR TRANSAÇÃO ----------------

		getControladorUtil().atualizar(unidadeNegocio);

	}

	/**
	 * [UC0789] Inserir Empresa
	 * 
	 * 
	 * @author Rômulo Aurélio
	 * @date 29/09/2008
	 * 
	 * 
	 * @return Integer
	 * @throws ControladorException
	 */

	public Integer inserirEmpresa(Empresa empresa,
			EmpresaContratoCobranca empresaCobranca, Usuario usuarioLogado,
			List<EmpresaCobrancaFaixa> colecaoEmpresaCobrancaFaixa)
			throws ControladorException {

		Integer retorno = null;

		if (empresa.getDescricao() != null
				&& empresa.getDescricao().equalsIgnoreCase("")) {
			throw new ControladorException("atencao.required", null,
					"Descrição");

		}

		if (empresa.getIndicadorEmpresaPrincipal() != null
				&& empresa.getIndicadorEmpresaPrincipal().toString()
						.equalsIgnoreCase("")) {
			throw new ControladorException("atencao.required", null,
					"Indicador de Empresa Principal");

		}

		if (empresa.getIndicadorEmpresaContratadaCobranca() != null
				&& empresa.getIndicadorEmpresaContratadaCobranca().toString()
						.equalsIgnoreCase("")) {
			throw new ControladorException("atencao.required", null,
					"Indicador de Empresa Cobrança");

		}

		FiltroEmpresa filtroEmpresa = new FiltroEmpresa();

		filtroEmpresa.adicionarParametro(new ParametroSimples(
				FiltroEmpresa.DESCRICAO, empresa.getDescricao()));

		// Pesquisa se existe alguma empresa com a descricao informada

		Collection colecaoEmpresaDescricao = new ArrayList();

		colecaoEmpresaDescricao = getControladorUtil().pesquisar(filtroEmpresa,
				Empresa.class.getName());

		if (colecaoEmpresaDescricao != null
				&& !colecaoEmpresaDescricao.isEmpty()) {
			throw new ControladorException("atencao.empresa_ja_cadastrada",
					null, empresa.getDescricao());

		}

		// Ultima Alteracao
		empresa.setUltimaAlteracao(new Date());

		// ------------ REGISTRAR TRANSAÇÃO ----------------
		RegistradorOperacao registradorOperacao = new RegistradorOperacao(
				Operacao.OPERACAO_INSERIR_EMPRESA,
				new UsuarioAcaoUsuarioHelper(usuarioLogado,
						UsuarioAcao.USUARIO_ACAO_EFETUOU_OPERACAO));

		Operacao operacao = new Operacao();

		operacao.setId(Operacao.OPERACAO_INSERIR_EMPRESA);

		OperacaoEfetuada operacaoEfetuada = new OperacaoEfetuada();
		operacaoEfetuada.setOperacao(operacao);

		empresa.setOperacaoEfetuada(operacaoEfetuada);
		empresa.adicionarUsuario(usuarioLogado,
				UsuarioAcao.USUARIO_ACAO_EFETUOU_OPERACAO);
		registradorOperacao.registrarOperacao(empresa);
		// ------------ REGISTRAR TRANSAÇÃO ----------------
		try {
			retorno = (Integer) getControladorUtil().inserir(empresa);
		} catch (ControladorException e) {
			sessionContext.setRollbackOnly();
			throw new ControladorException("erro.sistema", e);
		}

		Integer idEmpresaCobranca = null;

		if (empresaCobranca != null) {

			empresaCobranca.setEmpresa(empresa);

			empresaCobranca.setUltimaAlteracao(new Date());

			// ------------ REGISTRAR TRANSAÇÃO ----------------

			empresaCobranca.setOperacaoEfetuada(operacaoEfetuada);
			empresaCobranca.adicionarUsuario(usuarioLogado,
					UsuarioAcao.USUARIO_ACAO_EFETUOU_OPERACAO);
			registradorOperacao.registrarOperacao(empresaCobranca);
			// ------------ REGISTRAR TRANSAÇÃO ----------------
			try {
				idEmpresaCobranca = (Integer) getControladorUtil().inserir(
						empresaCobranca);

			} catch (ControladorException e) {
				sessionContext.setRollbackOnly();
				throw new ControladorException("erro.sistema", e);
			}

			if (colecaoEmpresaCobrancaFaixa != null
					&& !colecaoEmpresaCobrancaFaixa.isEmpty()) {
				Iterator iterator = colecaoEmpresaCobrancaFaixa.iterator();
				EmpresaContratoCobranca empresaContratoCobranca = new EmpresaContratoCobranca();
				empresaContratoCobranca.setId(idEmpresaCobranca);

				while (iterator.hasNext()) {
					EmpresaCobrancaFaixa empresaCobrancaFaixa = (EmpresaCobrancaFaixa) iterator
							.next();
					empresaCobrancaFaixa.setUltimaAlteracao(new Date());
					empresaCobrancaFaixa
							.setEmpresaContratoCobranca(empresaContratoCobranca);

					try {
						getControladorUtil().inserir(empresaCobrancaFaixa);

					} catch (ControladorException e) {
						sessionContext.setRollbackOnly();
						throw new ControladorException("erro.sistema", e);
					}

				}
			}
		}

		return retorno;

	}

	/**
	 * [UC0784] Manter Empresa
	 * 
	 * 
	 * @author Rômulo Aurélio
	 * @date 29/09/2008
	 * 
	 * 
	 * @throws ControladorException
	 */

	public void atualizarEmpresa(Empresa empresa,
			EmpresaContratoCobranca empresaCobrancaTela, Usuario usuarioLogado,
			List<EmpresaCobrancaFaixa> colecaoEmpresaCobrancaFaixa,
			List<EmpresaCobrancaFaixa> colecaoEmpresaCobrancaFaixaRemover)
			throws ControladorException {

		if (empresa.getDescricao() != null
				&& empresa.getDescricao().equalsIgnoreCase("")) {
			throw new ControladorException("atencao.required", null,
					"Descrição");

		}

		if (empresa.getIndicadorEmpresaPrincipal() != null
				&& empresa.getIndicadorEmpresaPrincipal().toString()
						.equalsIgnoreCase("")) {
			throw new ControladorException("atencao.required", null,
					"Indicador de Empresa Principal");

		}

		if (empresa.getIndicadorEmpresaContratadaCobranca() != null
				&& empresa.getIndicadorEmpresaContratadaCobranca().toString()
						.equalsIgnoreCase("")) {
			throw new ControladorException("atencao.required", null,
					"Indicador de Empresa Cobrança");

		}

		FiltroEmpresa filtroEmpresa = new FiltroEmpresa();

		filtroEmpresa.adicionarParametro(new ParametroSimples(
				FiltroEmpresa.DESCRICAO, empresa.getDescricao()));

		// Pesquisa se existe alguma empresa com a descricao informada

		Collection colecaoEmpresaDescricao = new ArrayList();

		colecaoEmpresaDescricao = getControladorUtil().pesquisar(filtroEmpresa,
				Empresa.class.getName());

		if (colecaoEmpresaDescricao != null
				&& !colecaoEmpresaDescricao.isEmpty()) {

			Empresa empresaBase = (Empresa) colecaoEmpresaDescricao.iterator()
					.next();

			if (empresa.getId().intValue() != empresaBase.getId().intValue()) {

				throw new ControladorException("atencao.empresa_ja_cadastrada",
						null, empresa.getDescricao());
			}
		}

		// Ultima Alteracao
		empresa.setUltimaAlteracao(new Date());

		// ------------ REGISTRAR TRANSAÇÃO ----------------
		RegistradorOperacao registradorOperacao = new RegistradorOperacao(
				Operacao.OPERACAO_ATUALIZAR_EMPRESA,
				new UsuarioAcaoUsuarioHelper(usuarioLogado,
						UsuarioAcao.USUARIO_ACAO_EFETUOU_OPERACAO));

		Operacao operacao = new Operacao();

		operacao.setId(Operacao.OPERACAO_ATUALIZAR_EMPRESA);

		OperacaoEfetuada operacaoEfetuada = new OperacaoEfetuada();
		operacaoEfetuada.setOperacao(operacao);

		empresa.setOperacaoEfetuada(operacaoEfetuada);
		empresa.adicionarUsuario(usuarioLogado,
				UsuarioAcao.USUARIO_ACAO_EFETUOU_OPERACAO);
		registradorOperacao.registrarOperacao(empresa);
		// ------------ REGISTRAR TRANSAÇÃO ----------------
		try {
			getControladorUtil().atualizar(empresa);
		} catch (ControladorException e) {
			sessionContext.setRollbackOnly();
			throw new ControladorException("erro.sistema", e);
		}

		/*
		 * Remover registros de EmpresaCobrancaFaixa
		 */
		if (colecaoEmpresaCobrancaFaixaRemover != null
				&& !colecaoEmpresaCobrancaFaixaRemover.isEmpty()) {
			Iterator iterator = colecaoEmpresaCobrancaFaixaRemover.iterator();

			while (iterator.hasNext()) {
				EmpresaCobrancaFaixa empresaCobrancaFaixa = (EmpresaCobrancaFaixa) iterator
						.next();
				try {
					getControladorUtil().remover(empresaCobrancaFaixa);

				} catch (ControladorException e) {
					sessionContext.setRollbackOnly();
					throw new ControladorException("erro.sistema", e);
				}
			}
		}

		FiltroEmpresaContratoCobranca filtroEmpresaCobranca = new FiltroEmpresaContratoCobranca();

		filtroEmpresaCobranca.adicionarParametro(new ParametroSimples(
				FiltroEmpresaContratoCobranca.EMPRESA_ID, empresa.getId()));

		Collection colecaoEmpesaCobrancaBase = getControladorUtil().pesquisar(
				filtroEmpresaCobranca, EmpresaContratoCobranca.class.getName());

		EmpresaContratoCobranca empresaCobrancaBase = null;

		if (colecaoEmpesaCobrancaBase != null
				&& !colecaoEmpesaCobrancaBase.isEmpty()) {

			empresaCobrancaBase = (EmpresaContratoCobranca) colecaoEmpesaCobrancaBase
					.iterator().next();
		}

		// Caso o usuario tenha atualizado os dados de cobranca na tela,
		// atualiza a tabela EmpresaCobranca
		if (empresaCobrancaTela != null && empresaCobrancaBase != null) {

			empresaCobrancaTela.setId(empresaCobrancaBase.getId());

			empresaCobrancaTela.setUltimaAlteracao(new Date());

			// ------------ REGISTRAR TRANSAÇÃO ----------------

			// empresaCobranca.setOperacaoEfetuada(operacaoEfetuada);
			empresaCobrancaTela.adicionarUsuario(usuarioLogado,
					UsuarioAcao.USUARIO_ACAO_EFETUOU_OPERACAO);
			registradorOperacao.registrarOperacao(empresaCobrancaTela);
			// ------------ REGISTRAR TRANSAÇÃO ----------------
			try {
				getControladorUtil().atualizar(empresaCobrancaTela);
			} catch (ControladorException e) {
				sessionContext.setRollbackOnly();
				throw new ControladorException("erro.sistema", e);
			}

			if (colecaoEmpresaCobrancaFaixa != null
					&& !colecaoEmpresaCobrancaFaixa.isEmpty()) {
				Iterator iterator = colecaoEmpresaCobrancaFaixa.iterator();
				EmpresaContratoCobranca empresaContratoCobranca = new EmpresaContratoCobranca();
				empresaContratoCobranca.setId(empresaCobrancaBase.getId());

				while (iterator.hasNext()) {
					EmpresaCobrancaFaixa empresaCobrancaFaixa = (EmpresaCobrancaFaixa) iterator
							.next();

					if (empresaCobrancaFaixa.getId() == null
							&& empresaCobrancaFaixa.getUltimaAlteracao() == null) {

						empresaCobrancaFaixa
								.setEmpresaContratoCobranca(empresaContratoCobranca);
						empresaCobrancaFaixa.setUltimaAlteracao(new Date());

						try {
							this.getControladorUtil().inserir(
									empresaCobrancaFaixa);

						} catch (ControladorException e) {
							sessionContext.setRollbackOnly();
							throw new ControladorException("erro.sistema", e);
						}
					}

				}
			}

		} /*
		 * Caso o usuario tenha informado os dados de cobranca na tela, e na
		 * base nao tenha dados da tabela EmpresaCobranca para a empresa a ser
		 * atualizada, insere os dados de cobranca em EmpresaCobranca
		 */
		else if (empresaCobrancaTela != null && empresaCobrancaBase == null) {

			Integer idEmpresaCobranca = null;

			empresaCobrancaTela.setUltimaAlteracao(new Date());

			// ------------ REGISTRAR TRANSAÇÃO ----------------

			// empresaCobranca.setOperacaoEfetuada(operacaoEfetuada);
			empresaCobrancaTela.adicionarUsuario(usuarioLogado,
					UsuarioAcao.USUARIO_ACAO_EFETUOU_OPERACAO);
			registradorOperacao.registrarOperacao(empresaCobrancaTela);
			// ------------ REGISTRAR TRANSAÇÃO ----------------
			try {
				idEmpresaCobranca = (Integer) getControladorUtil().inserir(
						empresaCobrancaTela);
			} catch (ControladorException e) {
				sessionContext.setRollbackOnly();
				throw new ControladorException("erro.sistema", e);
			}

			if (colecaoEmpresaCobrancaFaixa != null
					&& !colecaoEmpresaCobrancaFaixa.isEmpty()) {
				Iterator iterator = colecaoEmpresaCobrancaFaixa.iterator();
				EmpresaContratoCobranca empresaContratoCobranca = new EmpresaContratoCobranca();
				empresaContratoCobranca.setId(idEmpresaCobranca);

				while (iterator.hasNext()) {
					EmpresaCobrancaFaixa empresaCobrancaFaixa = (EmpresaCobrancaFaixa) iterator
							.next();

					if (empresaCobrancaFaixa.getId() == null
							&& empresaCobrancaFaixa.getUltimaAlteracao() == null) {

						empresaCobrancaFaixa
								.setEmpresaContratoCobranca(empresaContratoCobranca);
						empresaCobrancaFaixa.setUltimaAlteracao(new Date());

						try {
							getControladorUtil().inserir(empresaCobrancaFaixa);

						} catch (ControladorException e) {
							sessionContext.setRollbackOnly();
							throw new ControladorException("erro.sistema", e);
						}
					}

				}
			}
		} /*
		 * Caso o usuario nao tenha informado os dados de cobranca na tela, e na
		 * base os dados tenha dados da tabela EmpresaCobranca, remove os dados
		 * de cobranca em EmpresaCobranca
		 */

		else if (empresaCobrancaTela == null && empresaCobrancaBase != null) {

			if (colecaoEmpresaCobrancaFaixa != null
					&& !colecaoEmpresaCobrancaFaixa.isEmpty()) {
				Iterator iterator = colecaoEmpresaCobrancaFaixa.iterator();

				while (iterator.hasNext()) {
					EmpresaCobrancaFaixa empresaCobrancaFaixa = (EmpresaCobrancaFaixa) iterator
							.next();

					if (empresaCobrancaFaixa.getId() != null
							&& empresaCobrancaFaixa.getUltimaAlteracao() != null) {
						try {
							getControladorUtil().remover(empresaCobrancaFaixa);

						} catch (ControladorException e) {
							sessionContext.setRollbackOnly();
							throw new ControladorException("erro.sistema", e);
						}
					}

				}
			}

			// ------------ REGISTRAR TRANSAÇÃO ----------------

			// empresaCobranca.setOperacaoEfetuada(operacaoEfetuada);
			empresaCobrancaBase.adicionarUsuario(usuarioLogado,
					UsuarioAcao.USUARIO_ACAO_EFETUOU_OPERACAO);
			registradorOperacao.registrarOperacao(empresaCobrancaBase);
			// ------------ REGISTRAR TRANSAÇÃO ----------------
			try {
				getControladorUtil().remover(empresaCobrancaBase);
			} catch (ControladorException e) {
				sessionContext.setRollbackOnly();
				throw new ControladorException("erro.sistema", e);
			}
		}

	}

	/**
	 * [UC0831] Gerar Tabelas para Atualização Cadastral via celular
	 * 
	 * @author Vinicius Medeiros
	 * @date 25/08/2008
	 */
	public ImovelAtualizacaoCadastral obterImovelGeracaoTabelasTemporarias(
			Integer idImovel) throws ControladorException {

		ImovelAtualizacaoCadastral imovelAtualizacaoCadastral = null;

		try {

			Object[] element = repositorioCadastro
					.obterImovelGeracaoTabelasTemporarias(idImovel);

			// Imóvel
			imovelAtualizacaoCadastral = new ImovelAtualizacaoCadastral();
			if (element != null) {

				// Id Imóvel
				Imovel imovel = new Imovel();
				imovel.setId((Integer) element[0]);
				imovelAtualizacaoCadastral.setImovel(imovel);

				// Localidade
				if (element[1] != null) {
					imovelAtualizacaoCadastral
							.setIdLocalidade((Integer) element[1]);
				}

				// Setor Comercial
				if (element[2] != null) {
					imovelAtualizacaoCadastral
							.setCodigoSetorComercial((Integer) element[2]);
				}

				// Quadra
				if (element[3] != null) {
					imovelAtualizacaoCadastral
							.setNumeroQuadra((Integer) element[3]);
				}

				// Lote
				if (element[4] != null) {
					imovelAtualizacaoCadastral.setLote(Short
							.parseShort(element[4].toString()));
				}

				// SubLote
				if (element[5] != null) {
					imovelAtualizacaoCadastral.setSubLote(Short
							.parseShort(element[5].toString()));
				}

				// Sequência de Rota
				if (element[6] != null) {
					imovelAtualizacaoCadastral
							.setNumeroSequencialRota((Integer) element[6]);
				}

				// Número de moradores
				if (element[7] != null) {
					imovelAtualizacaoCadastral
							.setNumeroMorador((Short) element[7]);
				}

				// Código Logradouro
				if (element[8] != null) {
					imovelAtualizacaoCadastral
							.setIdLogradouro((Integer) element[8]);
				} else if (element[9] != null) {
					imovelAtualizacaoCadastral
							.setIdLogradouro((Integer) element[9]);
				}

				// Logradouro
				Collection colecaoEndereco = getControladorEndereco()
						.pesquisarLogradouro(idImovel);
				if (colecaoEndereco != null && !colecaoEndereco.isEmpty()) {

					Iterator enderecoIterator = colecaoEndereco.iterator();

					Object[] arrayEndereco = (Object[]) enderecoIterator.next();

					String nome = (String) arrayEndereco[0];
					imovelAtualizacaoCadastral.setDescricaoLogradouro(nome);

					if (arrayEndereco[3] != null) {
						Integer idTipo = (Integer) arrayEndereco[3];
						imovelAtualizacaoCadastral.setIdLogradouroTipo(idTipo);
						String tipo = (String) arrayEndereco[1];
						imovelAtualizacaoCadastral.setDsLogradouroTipo(tipo);
					}

					if (arrayEndereco[4] != null) {
						Integer idTitulo = (Integer) arrayEndereco[4];
						imovelAtualizacaoCadastral
								.setIdLogradouroTitulo(idTitulo);
						String titulo = (String) arrayEndereco[2];
						imovelAtualizacaoCadastral
								.setDsLogradouroTitulo(titulo);
					}

					if (arrayEndereco[5] != null) {
						Integer idMunicipio = (Integer) arrayEndereco[5];
						imovelAtualizacaoCadastral.setIdMunicipio(idMunicipio);
						String nomeMunicipio = (String) arrayEndereco[6];
						imovelAtualizacaoCadastral
								.setNomeMunicipio(nomeMunicipio);
					}

					if (arrayEndereco[7] != null) {
						Integer idUnidadeFederacao = (Integer) arrayEndereco[7];
						imovelAtualizacaoCadastral
								.setIdUinidadeFederacao(idUnidadeFederacao);
						String dsUnidadeFederacao = (String) arrayEndereco[8];
						imovelAtualizacaoCadastral
								.setDsUFSiglaMunicipio(dsUnidadeFederacao);
					}
				}

				// Cep
				if (element[10] != null) {
					imovelAtualizacaoCadastral
							.setCodigoCep((Integer) element[10]);
				}

				// Bairro
				if (element[11] != null) {
					imovelAtualizacaoCadastral
							.setIdBairro((Integer) element[11]);
				}

				// Descrição do bairro
				if (element[12] != null) {
					imovelAtualizacaoCadastral
							.setNomeBairro((String) element[12]);
				}

				// Código de referência
				if (element[13] != null) {
					imovelAtualizacaoCadastral
							.setIdEnderecoReferencia((Integer) element[13]);
				}

				// Número do imóvel
				imovelAtualizacaoCadastral
						.setNumeroImovel((String) element[14]);

				// Complemento do Imóvel
				String trunk = ((String) element[15]);

				if (trunk != null && trunk.length() > 25) {
					trunk = trunk.substring(0, 24);
				}

				imovelAtualizacaoCadastral.setComplementoEndereco(trunk);

				// Área Construida
				if (element[16] != null) {
					imovelAtualizacaoCadastral
							.setAreaConstruida((BigDecimal) element[16]);
				}

				// Situação de água
				if (element[17] != null) {
					imovelAtualizacaoCadastral
							.setIdLigacaoAguaSituacao((Integer) element[17]);
				}

				// Volume do resevatório inferior
				if (element[18] != null) {
					imovelAtualizacaoCadastral
							.setVolumeReservatorioInferior((BigDecimal) element[18]);
				}

				// Volume do resevatório superior
				if (element[19] != null) {
					imovelAtualizacaoCadastral
							.setVolumeReservatorioSuperior((BigDecimal) element[19]);
				}

				// Volume Piscina
				if (element[20] != null) {
					imovelAtualizacaoCadastral
							.setVolumePiscina((BigDecimal) element[20]);
				}

				// Indicador de Jardim
				if (element[21] != null) {
					imovelAtualizacaoCadastral
							.setIndicadorJardim((Short) element[21]);
				}

				// Pavimento calçada
				if (element[22] != null) {
					imovelAtualizacaoCadastral
							.setIdPavimentoCalcada((Integer) element[22]);
				}

				// Pavimento rua
				if (element[23] != null) {
					imovelAtualizacaoCadastral
							.setIdPavimentoRua((Integer) element[23]);
				}

				// Fonte de abastecimento
				if (element[24] != null) {
					imovelAtualizacaoCadastral
							.setIdFonteAbastecimento((Integer) element[24]);
				}

				// Poço
				if (element[25] != null) {
					imovelAtualizacaoCadastral
							.setIdPocoTipo((Integer) element[25]);
				}

				// Número de pontos
				if (element[26] != null) {
					imovelAtualizacaoCadastral
							.setNumeroPontosUtilizacao((Short) element[26]);
				}

				// Situação da ligação de esgoto
				if (element[27] != null) {
					imovelAtualizacaoCadastral
							.setIdLigacaoEsgotoSituacao((Integer) element[27]);
				}

				// Perfil do Imóvel
				if (element[28] != null) {
					imovelAtualizacaoCadastral
							.setIdImovelPerfil((Integer) element[28]);
				}

				// Tipo despejo
				if (element[29] != null) {
					imovelAtualizacaoCadastral
							.setIdDespejo((Integer) element[29]);
				}

				// Coordenadas UTMX
				if (element[30] != null) {
					imovelAtualizacaoCadastral
							.setCoordenadaX((BigDecimal) element[30]);
				}

				// Coordenadas UTMY
				if (element[31] != null) {
					imovelAtualizacaoCadastral
							.setCoordenadaY((BigDecimal) element[31]);
				}

				// Imóvel Principal
				if (element[32] != null) {
					imovelAtualizacaoCadastral
							.setCodigoImovelPrincipal((Integer) element[32]);
				}

				// Número de IPTU
				if (element[33] != null) {
					imovelAtualizacaoCadastral
							.setNumeroIptu((BigDecimal) element[33]);
				}

				// Contrato de energia
				if (element[34] != null) {
					imovelAtualizacaoCadastral
							.setNumeroContratoEnergia((Long) element[34]);
				}

				// Hidrometro
				Object[] hidrometro = getControladorMicromedicao()
						.obterDadosHidrometroAtualizacaoCadastral(idImovel);

				if (hidrometro != null) {
					// Leitura inicial do Hidrômetro
					if (hidrometro[0] != null) {
						imovelAtualizacaoCadastral
								.setNumeroLeituraInstalacaoHidrometro((Integer) hidrometro[0]);
					}

					// Capacidade do Hidrômetro
					if (hidrometro[1] != null) {
						imovelAtualizacaoCadastral
								.setIdCapacidadeHidrometro((Integer) hidrometro[1]);
					}

					// Marca do Hidrômetro
					if (hidrometro[2] != null) {
						imovelAtualizacaoCadastral
								.setIdMarcaHidrometro((Integer) hidrometro[2]);
					}

					// Local do Hidrômetro
					if (hidrometro[3] != null) {
						imovelAtualizacaoCadastral
								.setIdLocalInstalacaoHidrometro((Integer) hidrometro[3]);
					}

					// Proteção do Hidrômetro
					if (hidrometro[4] != null) {
						imovelAtualizacaoCadastral
								.setIdProtecaoHidrometro((Integer) hidrometro[4]);
					}

					// Cavalte
					if (hidrometro[5] != null) {
						imovelAtualizacaoCadastral
								.setIndicadorCavalete((Short) hidrometro[5]);
					}

					// Número do Hidrômetro
					if (hidrometro[6] != null) {
						imovelAtualizacaoCadastral
								.setNumeroHidrometro((String) hidrometro[6]);
					}

				}
			}
		} catch (ErroRepositorioException e) {
			e.printStackTrace();
			throw new ControladorException("erro.sistema", e);
		}

		return imovelAtualizacaoCadastral;

	}

	/**
	 * [UC0831] Gerar Tabelas para Atualização Cadastral via celular
	 * 
	 * @author Vinicius Medeiros
	 * @date 25/08/2008
	 */
	public void obterImovelClienteProprietarioUsuario(Integer idSetor,
			Integer idFuncionalidadeIniciada,
			ImovelGeracaoTabelasTemporariasCadastroHelper helper)
			throws ControladorException {

		int idUnidadeIniciada = 0;

		try {

			if (helper.getColecaoMatriculas() != null
					&& !helper.getColecaoMatriculas().isEmpty()) {

				idUnidadeIniciada = getControladorBatch()
						.iniciarUnidadeProcessamentoBatch(
								idFuncionalidadeIniciada,
								UnidadeProcessamento.FUNCIONALIDADE, 0);
			} else {
				idUnidadeIniciada = getControladorBatch()
						.iniciarUnidadeProcessamentoBatch(
								idFuncionalidadeIniciada,
								UnidadeProcessamento.SETOR_COMERCIAL, (idSetor));
			}

			Collection colecaoIdsImovel = null;

			if (helper.getColecaoMatriculas() != null
					&& !helper.getColecaoMatriculas().isEmpty()) {

				colecaoIdsImovel = helper.getColecaoMatriculas();
			} else {
				colecaoIdsImovel = repositorioCadastro
						.obterIdsImovelGeracaoTabelasTemporarias(idSetor,
								helper);

				if (helper.getImovelSituacao() != null
						&& new Integer(helper.getImovelSituacao()) == 2) {

					colecaoIdsImovel = repositorioCadastro
							.pesquisarImovelDebitoAtualizacaoCadastral(colecaoIdsImovel);
				}
			}

			this.gerarTabelasTemporarias(colecaoIdsImovel, helper);

			getControladorBatch().encerrarUnidadeProcessamentoBatch(null,
					idUnidadeIniciada, false);

		} catch (Exception ex) {
			ex.printStackTrace();
			getControladorBatch().encerrarUnidadeProcessamentoBatch(ex,
					idUnidadeIniciada, true);
			throw new EJBException(ex);
		}
	}

	/**
	 * [UC0831] Gerar Tabelas para Atualização Cadastral via celular
	 * 
	 * @author Rafael Pinto
	 * @date 21/12/2011
	 */
	public void obterImovelClienteProprietarioUsuario(
			ImovelGeracaoTabelasTemporariasCadastroHelper helper)
			throws ControladorException {

		try {
			// Monta a tabela que contem o filtro usado para geracao das tabelas
			// temporarias
			ParametroTabelaAtualizacaoCadastro parametro = new ParametroTabelaAtualizacaoCadastro();
			parametro.montarParametroTabelaAtualizacaoCadastro(helper);

			Integer idParametro = (Integer) getControladorUtil().inserir(
					parametro);

			parametro.setId(idParametro);

			helper.setParametro(parametro);

			this.gerarTabelasTemporarias(helper.getColecaoMatriculas(), helper);

		} catch (Exception ex) {
			sessionContext.setRollbackOnly();
			throw new ControladorException("erro.sistema", ex);
		}
	}

	/**
	 * [UC0831] Gerar Tabelas para Atualização Cadastral via celular
	 * 
	 * @author Rafael Pinto
	 * @date 27/12/2011
	 */

	public void validarImovelGerarTabelasTemporarias(Integer idImovel)
			throws ControladorException {

		Imovel imovel = this.getControladorImovel().pesquisarImovel(idImovel);

		if (imovel == null) {
			throw new ControladorException("atencao.imovel.inexistente");
		} else {

			if (imovel.getIndicadorExclusao().shortValue() == ConstantesSistema.SIM
					.shortValue()) {
				throw new ControladorException("atencao.imovel.excluido");
			}

			if (imovelJaExisteImovelAtualizacaoCadastral(idImovel)) {
				throw new ControladorException(
						"atencao.imovel.pendente_atualizacao_cadastral");
			}

		}

	}

	/**
	 * [UC0831] Gerar Tabelas para Atualização Cadastral via celular
	 * 
	 * @author Rafael Pinto
	 * @date 21/12/2011
	 */
	private void gerarTabelasTemporarias(Collection colecaoIdsImovel,
			ImovelGeracaoTabelasTemporariasCadastroHelper helper)
			throws ControladorException {

		if (!Util.isVazioOrNulo(colecaoIdsImovel)) {

			ParametroTabelaAtualizacaoCadastro parametro = helper
					.getParametro();

			ClienteAtualizacaoCadastral clienteAtualizacaoCadastralProprietario = null;
			ClienteAtualizacaoCadastral clienteAtualizacaoCadastralUsuario = null;

			Iterator iteratorImovel = colecaoIdsImovel.iterator();
			while (iteratorImovel.hasNext()) {
				Integer idImovel = (Integer) iteratorImovel.next();

				ImovelAtualizacaoCadastral imovelAtualizacaoCadastral = this
						.obterImovelGeracaoTabelasTemporarias(idImovel);

				// Imovel Atualização Cadastral
				if (imovelAtualizacaoCadastral.getImovel() != null) {

					if (!imovelJaExisteImovelAtualizacaoCadastral(imovelAtualizacaoCadastral
							.getImovel().getId())) {
						imovelAtualizacaoCadastral
								.setIdSituacaoAtualizacaoCadastral(SituacaoAtualizacaoCadastral.DISPONIVEL);

						if (helper.getColecaoMatriculas() == null
								|| helper.getColecaoMatriculas().isEmpty()) {
							imovelAtualizacaoCadastral
									.setIdEmpresa(new Integer(helper.getFirma()));
						}
						imovelAtualizacaoCadastral
								.setIndicadorAtualizado(ConstantesSistema.NAO);
						imovelAtualizacaoCadastral
								.setIndicadorHidrometro(ConstantesSistema.NAO);
						imovelAtualizacaoCadastral
								.setParametroTabelaAtualizacaoCadastro(parametro);
						imovelAtualizacaoCadastral
								.setUltimaAlteracao(new Date());

						Integer idImovelAtualizacaoCadastral = (Integer) getControladorUtil()
								.inserir(imovelAtualizacaoCadastral);

						imovelAtualizacaoCadastral
								.setId(idImovelAtualizacaoCadastral);

						// Imovel Subcategoria
						Collection imovelSubcategorias = obterImovelSubcategoriaAtualizacaoCadastral(idImovel);

						Iterator imovelSubcategoriaIter = imovelSubcategorias
								.iterator();

						while (imovelSubcategoriaIter.hasNext()) {
							ImovelSubcategoriaAtualizacaoCadastral imovSubAtual = (ImovelSubcategoriaAtualizacaoCadastral) imovelSubcategoriaIter
									.next();

							imovSubAtual.setUltimaAlteracao(new Date());
							imovSubAtual
									.setImovelAtualizacaoCadastral(imovelAtualizacaoCadastral);

							getControladorUtil().inserir(imovSubAtual);
						}

						// Cliente Usuario
						clienteAtualizacaoCadastralUsuario = getControladorCliente()
								.obterClientetuAlizacaoCadastral(idImovel,
										ClienteRelacaoTipo.USUARIO);

						if (clienteAtualizacaoCadastralUsuario != null) {

							clienteAtualizacaoCadastralUsuario
									.setParametroTabelaAtualizacaoCadastro(parametro);
							clienteAtualizacaoCadastralUsuario
									.setImovelAtualizacaoCadastral(imovelAtualizacaoCadastral);
							clienteAtualizacaoCadastralUsuario
									.setUltimaAlteracao(new Date());

							Integer idClienteAtualizacaoCadastral = (Integer) getControladorUtil()
									.inserir(clienteAtualizacaoCadastralUsuario);

							// Cliente Fone Usuário
							Collection clienteFonesAtualizacaoCadastral = getControladorCliente()
									.obterDadosClienteFone(
											clienteAtualizacaoCadastralUsuario
													.getIdCliente());

							if (clienteFonesAtualizacaoCadastral != null
									&& !clienteFonesAtualizacaoCadastral
											.isEmpty()) {

								Iterator clienteFonesAtualizacaoCadastralIter = clienteFonesAtualizacaoCadastral
										.iterator();

								while (clienteFonesAtualizacaoCadastralIter
										.hasNext()) {

									ClienteFoneAtualizacaoCadastral clienteFoneAtualizacaoCadastral = (ClienteFoneAtualizacaoCadastral) clienteFonesAtualizacaoCadastralIter
											.next();

									ClienteAtualizacaoCadastral clienteAtualizacaoCadastral = new ClienteAtualizacaoCadastral();
									clienteAtualizacaoCadastral
											.setId(idClienteAtualizacaoCadastral);
									clienteFoneAtualizacaoCadastral
											.setClienteAtualizacaoCadastral(clienteAtualizacaoCadastral);
									clienteFoneAtualizacaoCadastral
											.setUltimaAlteracao(new Date());
									getControladorUtil().inserir(
											clienteFoneAtualizacaoCadastral);
								}
							}
						}

						// Cliente Proprietario
						clienteAtualizacaoCadastralProprietario = getControladorCliente()
								.obterClientetuAlizacaoCadastral(idImovel,
										ClienteRelacaoTipo.PROPRIETARIO);

						if (clienteAtualizacaoCadastralProprietario != null) {

							clienteAtualizacaoCadastralProprietario
									.setParametroTabelaAtualizacaoCadastro(parametro);
							clienteAtualizacaoCadastralProprietario
									.setImovelAtualizacaoCadastral(imovelAtualizacaoCadastral);
							clienteAtualizacaoCadastralProprietario
									.setUltimaAlteracao(new Date());

							Integer idClienteAtualizacaoCadastral = (Integer) getControladorUtil()
									.inserir(
											clienteAtualizacaoCadastralProprietario);

							// Cliente Fone Proprietario
							Collection clienteFonesAtualizacaoCadastral = getControladorCliente()
									.obterDadosClienteFone(
											clienteAtualizacaoCadastralProprietario
													.getIdCliente());

							if (clienteFonesAtualizacaoCadastral != null
									&& !clienteFonesAtualizacaoCadastral
											.isEmpty()) {

								Iterator clienteFonesAtualizacaoCadastralIter = clienteFonesAtualizacaoCadastral
										.iterator();

								while (clienteFonesAtualizacaoCadastralIter
										.hasNext()) {

									ClienteFoneAtualizacaoCadastral clienteFoneAtualizacaoCadastral = (ClienteFoneAtualizacaoCadastral) clienteFonesAtualizacaoCadastralIter
											.next();

									ClienteAtualizacaoCadastral clienteAtualizacaoCadastral = new ClienteAtualizacaoCadastral();
									clienteAtualizacaoCadastral
											.setId(idClienteAtualizacaoCadastral);
									clienteFoneAtualizacaoCadastral
											.setClienteAtualizacaoCadastral(clienteAtualizacaoCadastral);
									clienteFoneAtualizacaoCadastral
											.setUltimaAlteracao(new Date());

									getControladorUtil().inserir(
											clienteFoneAtualizacaoCadastral);
								}
							}
						}

						// Atualizar Situacao Atualizacao Cadastral
						getControladorImovel()
								.atualizarImovelSituacaoAtualizacaoCadastral(
										idImovel,
										SituacaoAtualizacaoCadastral.BLOQUEADO);

						Integer idEmpresa = null;
						if (helper.getFirma() != null
								&& !helper
										.getFirma()
										.equals(""
												+ ConstantesSistema.NUMERO_NAO_INFORMADO)) {
							idEmpresa = new Integer(helper.getFirma());
						}

						getControladorImovel()
								.atualizarImovelAtualizacaoCadastralSituacaoAtualizacaoCadastral(
										idImovel,
										SituacaoAtualizacaoCadastral.DISPONIVEL,
										idEmpresa);
					}
				}
			}
		}

	}

	/**
	 * [UC0831] Gerar Tabelas para Atualização Cadastral via celular
	 * 
	 * @author Vinicius Medeiros
	 * @date 18/08/2008
	 */
	public Collection obterImovelSubcategoriaAtualizacaoCadastral(
			Integer idImovel) throws ControladorException {

		try {

			return this.repositorioCadastro
					.obterImovelSubcategoriaAtualizacaoCadastral(idImovel);

		} catch (ErroRepositorioException ex) {
			ex.printStackTrace();
			sessionContext.setRollbackOnly();
			throw new ControladorException("erro.sistema", ex);
		}

	}

	// Método para verificar se já existe o Cliente no banco
	public Boolean clienteJaExisteClienteAtualizacaoCadastral(Integer idCliente)
			throws ControladorException {

		Boolean retorno = false;
		Integer idClienteAtualizacaoCadastral = getControladorCliente()
				.verificaExistenciaClienteAtualizacaoCadastral(idCliente);

		if (idClienteAtualizacaoCadastral != null) {
			retorno = true;
		}

		return retorno;
	}

	// Método para verificar se já existe o Imóvel no banco
	public Boolean imovelJaExisteImovelAtualizacaoCadastral(Integer idImovel)
			throws ControladorException {

		Boolean retorno = false;
		Integer idImovelAtualizacaoCadastral = getControladorImovel()
				.verificaExistenciaImovelAtualizacaoCadastral(idImovel);

		if (idImovelAtualizacaoCadastral != null) {
			retorno = true;
		}

		return retorno;
	}

	/**
	 * Gerar Arquivo Texto da Atualização Cadastral para Dispositivo Móvel
	 * 
	 * @param helper
	 * 
	 * @author Ana Maria
	 * @date 17/09/2008
	 * @exception ControladorException
	 * @throws ErroRepositorioException
	 */

	public void gerarArquivoTextoAtualizacaoCadastralDispositivoMovel(
			Integer idFuncionalidadeIniciada,
			GerarArquivoTextoAtualizacaoCadastralHelper helper)
			throws ControladorException {

		int idUnidadeIniciada = 0;

		idUnidadeIniciada = getControladorBatch()
				.iniciarUnidadeProcessamentoBatch(idFuncionalidadeIniciada,
						UnidadeProcessamento.SETOR_COMERCIAL, 0);

		ArquivoTextoAtualizacaoCadastral arquivoTextoAtualizacaoCadastral = new ArquivoTextoAtualizacaoCadastral();

		// Parâmetros
		if (helper.getIdLocalidade() != null
				&& !helper.getIdLocalidade().equals("")) {
			Localidade localidade = new Localidade();
			localidade.setId(helper.getIdLocalidade());
			arquivoTextoAtualizacaoCadastral.setLocalidade(localidade);
			if (helper.getSetorComercialCD() != null
					&& !helper.getSetorComercialCD().equals("")) {
				arquivoTextoAtualizacaoCadastral.setCodigoSetorComercial(helper
						.getSetorComercialCD());
				if (helper.getNumeroQuadraInicial() != null
						&& !helper.getNumeroQuadraInicial().equals("")) {
					arquivoTextoAtualizacaoCadastral
							.setNumeroQuadraInicial(helper
									.getNumeroQuadraInicial());
					arquivoTextoAtualizacaoCadastral
							.setNumeroQuadraFinal(helper.getNumeroQuadraFinal());
				} else {
					arquivoTextoAtualizacaoCadastral.setCodigoRota(helper
							.getRotaCD());
				}
			}
		}

		// Descrição do Arquivo
		arquivoTextoAtualizacaoCadastral.setDescricaoArquivo(helper
				.getDescricao());

		// Leiturista
		if (helper.getIdLeiturista() != null
				&& !helper.getIdLeiturista().equals("")) {
			Leiturista leiturista = new Leiturista();
			leiturista.setId(helper.getIdLeiturista());
			arquivoTextoAtualizacaoCadastral.setLeiturista(leiturista);
		}

		// Situação do Arquivo
		SituacaoTransmissaoLeitura situacaoTransmissaoLeitura = new SituacaoTransmissaoLeitura();
		situacaoTransmissaoLeitura.setId(helper.getSituacao());
		arquivoTextoAtualizacaoCadastral
				.setSituacaoTransmissaoLeitura(situacaoTransmissaoLeitura);

		// nenhum campo do filtro foi informado
		Collection<Leiturista> colecaoLeiturista = new ArrayList();
		if (helper.getColecaoImovel() == null
				|| helper.getColecaoImovel().isEmpty()) {

			FiltroLeiturista filtroLeiturista = new FiltroLeiturista();
			filtroLeiturista.adicionarParametro(new ParametroSimples(
					FiltroLeiturista.ID, helper.getIdLeiturista()));
			filtroLeiturista
					.adicionarCaminhoParaCarregamentoEntidade("empresa");

			colecaoLeiturista = getControladorUtil().pesquisar(
					filtroLeiturista, Leiturista.class.getName());

			Leiturista leiturista = (Leiturista) Util
					.retonarObjetoDeColecao(colecaoLeiturista);
			Integer idEmpresaLeiturista = leiturista.getEmpresa().getId();

			try {
				Collection<Integer> idsImoveis = repositorioCadastro
						.pesquisarIdsImoveisAtualizacaoCadastral(idEmpresaLeiturista);

				if (idsImoveis == null || idsImoveis.isEmpty()) {
					// Nenhum Imovel cadastrado
					throw new ControladorException(
							"atencao.pesquisa.nenhumresultado");
				}

				helper.setColecaoImovel(idsImoveis);

			} catch (ErroRepositorioException e) {
			}

		}

		// Quatidade Imóvel
		arquivoTextoAtualizacaoCadastral.setQuantidadeImovel(helper
				.getQtdImovel());

		// Arquivo texto
		StringBuilder arquivoTexto = new StringBuilder();

		byte[] arquivoTextoByte = null;

		try {

			arquivoTextoByte = IoUtil.transformarObjetoParaBytes(arquivoTexto);
			arquivoTextoAtualizacaoCadastral.setArquivoTexto(arquivoTextoByte);

			// Data última alteração
			arquivoTextoAtualizacaoCadastral.setUltimaAlteracao(new Date());

			Integer idArquivoTexto = (Integer) getControladorUtil().inserir(
					arquivoTextoAtualizacaoCadastral);
			arquivoTexto = this.gerarArquivoTxt(helper.getColecaoImovel(),
					idArquivoTexto);

			// -------------------------------------------------------------------------
			ZipOutputStream zos = null;
			BufferedWriter out = null;
			File leituraTipo = new File(helper.getDescricao() + ".txt");
			File compactado = new File(helper.getDescricao() + ".zip"); // nomeZip
			zos = new ZipOutputStream(new FileOutputStream(compactado));
			out = new BufferedWriter(new OutputStreamWriter(
					new FileOutputStream(leituraTipo.getAbsolutePath())));
			out.write(arquivoTexto.toString());
			out.flush();
			out.close();
			ZipUtil.adicionarArquivo(zos, leituraTipo);
			zos.close();
			// -------------------------------------------------------------------------

			arquivoTextoByte = IoUtil.transformarObjetoParaBytes(arquivoTexto);
			arquivoTextoAtualizacaoCadastral.setArquivoTexto(arquivoTextoByte);

			getControladorUtil().atualizar(arquivoTextoAtualizacaoCadastral);

			getControladorBatch().encerrarUnidadeProcessamentoBatch(null,
					idUnidadeIniciada, false);

		} catch (Exception ex) {
			ex.printStackTrace();
			getControladorBatch().encerrarUnidadeProcessamentoBatch(ex,
					idUnidadeIniciada, true);
			throw new EJBException(ex);
		}
	}

	/**
	 * Gerar Arquivo Texto para Atualização Cadastral
	 * 
	 * @param colecaoImovelFiltrado
	 * 
	 * @author Ana Maria
	 * @date 17/09/2008
	 * @exception ControladorException
	 */
	private StringBuilder gerarArquivoTxt(Collection colecaoImovelFiltrado,
			Integer idArquivoTexto) throws ControladorException {

		try {

			StringBuilder arquivoTexto = new StringBuilder();
			Iterator imovelFiltradoIterator = colecaoImovelFiltrado.iterator();
			// Header
			arquivoTexto.append(this
					.gerarArquivoTextoRegistroTipoHeader(idArquivoTexto));
			Integer qtdRegistro = 1;

			while (imovelFiltradoIterator.hasNext()) {

				Integer idImovelAtualizacaoCadastral = (Integer) imovelFiltradoIterator
						.next();

				// REGISTRO_TIPO_01(Dados do imóvel)
				arquivoTexto
						.append(this
								.gerarArquivoTextoRegistroTipo01(idImovelAtualizacaoCadastral));
				qtdRegistro = qtdRegistro + 1;

				ImovelAtualizacaoCadastral imov = null;

				imov = getControladorImovel()
						.pesquisarImovelAtualizacaoCadastral(
								idImovelAtualizacaoCadastral);

				Integer idImovel = imov.getImovel().getId();

				Collection colecaoClienteImovel = repositorioClienteImovel
						.pesquisarClienteImovelAtualizacaoCadastral(idImovel);

				Iterator colecaoClienteImovelIterator = colecaoClienteImovel
						.iterator();

				while (colecaoClienteImovelIterator.hasNext()) {
					ClienteAtualizacaoCadastral cliente = (ClienteAtualizacaoCadastral) colecaoClienteImovelIterator
							.next();

					// REGISTRO_TIPO_02(Dados do cliente)
					arquivoTexto.append(this.gerarArquivoTextoRegistroTipo02(
							cliente, idImovel));
					qtdRegistro = qtdRegistro + 1;

					Collection colecaoClienteFone = getControladorCliente()
							.pesquisarClienteFoneAtualizacaoCadastral(
									cliente.getIdCliente(), idImovel, null,
									cliente.getIdClienteRelacaoTipo(), null);
					if (colecaoClienteFone != null
							&& !colecaoClienteFone.isEmpty()) {
						// REGISTRO_TIPO_03(Dados do Telefone)
						arquivoTexto.append(this
								.gerarArquivoTextoRegistroTipo03(
										colecaoClienteFone, idImovel,
										cliente.getIdCliente()));
						qtdRegistro = qtdRegistro + colecaoClienteFone.size();
					}
				}

				Collection colecaoImovelSubcategoria = getControladorImovel()
						.pesquisarImovelSubcategoriaAtualizacaoCadastral(
								idImovel, null, null);
				if (colecaoImovelSubcategoria != null
						&& !colecaoImovelSubcategoria.isEmpty()) {
					// REGISTRO_TIPO_04(Dados Economias e subcategoria)
					arquivoTexto.append(this.gerarArquivoTextoRegistroTipo04(
							colecaoImovelSubcategoria, idImovel));
					qtdRegistro = qtdRegistro
							+ colecaoImovelSubcategoria.size();
				}

				// Seta o imóvel com situação "em campo"
				getControladorImovel()
						.atualizarImovelAtualizacaoCadastralSituacaoAtualizacaoCadastral(
								idImovel,
								SituacaoAtualizacaoCadastral.EM_CAMPO, null);
			}

			// Trailer
			arquivoTexto.append(this
					.gerarArquivoTextoRegistroTipoTrailer(qtdRegistro));

			return arquivoTexto;

		} catch (ErroRepositorioException e) {
			throw new ControladorException("erro.sistema", e);
		}
	}

	public void carregarImovelAtualizacaoCadastral(BufferedReader buffer)
			throws ControladorException {

		Integer matricula = null;
		ParserUtil parserCliente = null;

		try {

			String line = null;

			Integer idArquivoTexto = null;
			RegistradorOperacao registradorOperacao = null;
			Imovel imovel = new Imovel();
			Integer idCliente = null;
			Integer idClienteRelacaoTipo = null;
			Cliente cliente = new Cliente();
			ArquivoTextoAtualizacaoCadastral arquivoTexto = null;
			Interceptador interceptador = Interceptador.getInstancia();
			ImovelAtualizacaoCadastral imovelAtualizacaoCadastralBase = null;
			ImovelAtualizacaoCadastral imovelAtualizacaoCadastralTxt = null;
			boolean indicadorExcluido = false;
			boolean indicadorRepetido = false;
			boolean inserirNovoRegistro = false;
			Integer idClieteUsuario = null;
			Integer idImovelAtualizacaoCadastral = null;
			Integer idClienteAtualizacaoCadastral = null;

			int qtdLinhas = 1;

			registradorOperacao = new RegistradorOperacao(
					Operacao.OPERACAO_CARREGAR_DADOS_ATUALIZACAO_CADASTRAL,
					matricula, matricula, new UsuarioAcaoUsuarioHelper(
							Usuario.USUARIO_BATCH,
							UsuarioAcao.USUARIO_ACAO_EFETUOU_OPERACAO));

			while ((line = buffer.readLine()) != null) {
				ParserUtil parser = new ParserUtil(line);

				String primeiraLetra = parser.obterDadoParserTrim(1);

				if (qtdLinhas++ % 100 == 0) {
					System.out.println(" >>> Gerando diferencas do arquivo: "
							+ qtdLinhas);
				}

				if ("0".equals(primeiraLetra)) {

					String header = line.substring(1);

					ParserUtil parserHeader = new ParserUtil(header);

					parserHeader.obterDadoParser(1);

					parserHeader.obterDadoParser(8);

					idArquivoTexto = Integer.parseInt(parserHeader
							.obterDadoParser(9));

					arquivoTexto = repositorioCadastro
							.pesquisarArquivoTextoAtualizacaoCadastro(
									idArquivoTexto.toString(),
									SituacaoTransmissaoLeitura.EM_CAMPO);

					if (arquivoTexto == null || arquivoTexto.equals("")) {
						throw new ControladorException(
								"atencao.arquivo_txt_ja_realizado");
					}

				} else if ("1".equals(primeiraLetra)) {

					// Pegar a partir do 2º caractere, pois o primeiro é o tipo
					// de registro.
					String imovelLinha = line.substring(1);

					ParserUtil parserImovel = new ParserUtil(imovelLinha);

					String tipoAlteracao = parserImovel.obterDadoParser(1)
							.trim();

					matricula = Integer.parseInt(parserImovel
							.obterDadoParser(9));

					idClieteUsuario = null;
					indicadorRepetido = false;

					imovelAtualizacaoCadastralTxt = null;
					AlteracaoTipo alteracaoTipo = new AlteracaoTipo();

					if (tipoAlteracao == null
							|| tipoAlteracao.trim().equals("")) {
						continue;
					} else if (tipoAlteracao.equals("E")) {
						imovelAtualizacaoCadastralTxt = new ImovelAtualizacaoCadastral();
						imovelAtualizacaoCadastralBase = getControladorImovel()
								.pesquisarImovelAtualizacaoCadastralProcessarArquivoRetorno(
										matricula);
						alteracaoTipo.setId(AlteracaoTipo.EXCLUSAO);
						indicadorExcluido = true;
					} else {
						imovelAtualizacaoCadastralTxt = new ImovelAtualizacaoCadastral();

						if (tipoAlteracao.equals("A")) {
							imovelAtualizacaoCadastralBase = getControladorImovel()
									.pesquisarImovelAtualizacaoCadastralProcessarArquivoRetorno(
											matricula);
							alteracaoTipo.setId(AlteracaoTipo.ALTERACAO);
							indicadorExcluido = false;
						} else if (tipoAlteracao.equals("I")) {
							imovelAtualizacaoCadastralBase = new ImovelAtualizacaoCadastral();
							alteracaoTipo.setId(AlteracaoTipo.INCLUSAO);
							indicadorExcluido = false;
						}

						imovel.setId(matricula);

						// IMOVEL
						if (!String.valueOf(matricula).equals("0")) {
							Imovel imov = new Imovel();
							imov.setId(matricula);

							imovelAtualizacaoCadastralTxt.setImovel(imov);
						} else {
							imovelAtualizacaoCadastralTxt.setImovel(null);
							inserirNovoRegistro = true;
						}

						// LOCALIDADE
						imovelAtualizacaoCadastralTxt.setIdLocalidade(Integer
								.parseInt(parserImovel.obterDadoParser(3)
										.trim()));
						// SETOR COMERCIAL
						imovelAtualizacaoCadastralTxt
								.setCodigoSetorComercial(Integer
										.parseInt(parserImovel.obterDadoParser(
												3).trim()));
						// QUADRA
						imovelAtualizacaoCadastralTxt.setNumeroQuadra(Integer
								.parseInt(parserImovel.obterDadoParser(3)
										.trim()));
						// LOTE
						imovelAtualizacaoCadastralTxt.setLote(Short
								.parseShort(parserImovel.obterDadoParser(4)
										.trim()));
						// SUBLOTE
						imovelAtualizacaoCadastralTxt.setSubLote(Short
								.parseShort(parserImovel.obterDadoParser(3)
										.trim()));
						// SEQUÊNCIA DA ROTA
						String sequenciaRota = parserImovel.obterDadoParser(4);
						if (!sequenciaRota.equals("0000")) {
							imovelAtualizacaoCadastralTxt
									.setNumeroSequencialRota(Integer
											.parseInt(sequenciaRota));
						}
						// NÚMERO MORADOR
						String numeroMorador = parserImovel.obterDadoParser(4);
						if (!numeroMorador.equals("0000")) {
							imovelAtualizacaoCadastralTxt
									.setNumeroMorador(Short
											.parseShort(numeroMorador));
						} else if (imovelAtualizacaoCadastralBase
								.getNumeroMorador() != null) {
							imovelAtualizacaoCadastralTxt
									.setNumeroMorador(new Short("0"));
						}
						// CÓDIGO DO LOGRADOURO
						imovelAtualizacaoCadastralTxt.setIdLogradouro(Integer
								.parseInt(parserImovel.obterDadoParser(9)));
						// TIPO LOGRADOURO
						imovelAtualizacaoCadastralTxt
								.setDsLogradouroTipo(parserImovel
										.obterDadoParser(20).trim());
						// TÍTULO LOGRADOURO
						imovelAtualizacaoCadastralTxt
								.setDsLogradouroTitulo(parserImovel
										.obterDadoParser(25).trim());
						// LOGRADOURO
						imovelAtualizacaoCadastralTxt
								.setDescricaoLogradouro(parserImovel
										.obterDadoParser(40).trim());
						// CEP
						imovelAtualizacaoCadastralTxt.setCodigoCep(Integer
								.parseInt(parserImovel.obterDadoParser(8)
										.trim()));
						// CÓDIGO DO BAIRRO
						imovelAtualizacaoCadastralTxt.setIdBairro(Integer
								.parseInt(parserImovel.obterDadoParser(4)
										.trim()));
						// NOME BAIRRO
						imovelAtualizacaoCadastralTxt
								.setNomeBairro(parserImovel.obterDadoParser(30)
										.trim());
						// CÓDIGO DE REFERÊNCIA
						String enderecoReferencia = parserImovel
								.obterDadoParser(2).trim();
						if (!enderecoReferencia.equals("00")) {
							imovelAtualizacaoCadastralTxt
									.setIdEnderecoReferencia(Integer
											.parseInt(enderecoReferencia));
						}
						// NÚMERO DO IMOVEL
						imovelAtualizacaoCadastralTxt
								.setNumeroImovel(parserImovel
										.obterDadoParser(5).trim());
						// COMPLEMENTO IMÓVEL
						imovelAtualizacaoCadastralTxt
								.setComplementoEndereco(parserImovel
										.obterDadoParser(25).trim());
						// ÁREA CONSTRUÍDA
						String areaConstruida = parserImovel.obterDadoParser(8)
								.trim();
						if (!areaConstruida.equals("00000000")) {
							imovelAtualizacaoCadastralTxt
									.setAreaConstruida(Util
											.formatarMoedaRealparaBigDecimalComUltimos2CamposDecimais(areaConstruida));
						}
						// SITUAÇÃO DA LIGAÇÂO DE ÁGUA
						imovelAtualizacaoCadastralTxt
								.setIdLigacaoAguaSituacao(Integer
										.parseInt(parserImovel
												.obterDadoParser(2)));
						// VOLUME RESERVATÓRIO INFERIOR
						String volumeReservatorioInferior = parserImovel
								.obterDadoParser(5).trim();
						if (!volumeReservatorioInferior.equals("00000")) {
							imovelAtualizacaoCadastralTxt
									.setVolumeReservatorioInferior(Util
											.formatarMoedaRealparaBigDecimalComUltimos2CamposDecimais(volumeReservatorioInferior));
						}
						// VOLUME RESERVATÓRIO SUPERIOR
						String volumeReservatorioSuperior = parserImovel
								.obterDadoParser(5).trim();
						if (!volumeReservatorioSuperior.equals("00000")) {
							imovelAtualizacaoCadastralTxt
									.setVolumeReservatorioSuperior(Util
											.formatarMoedaRealparaBigDecimalComUltimos2CamposDecimais(volumeReservatorioSuperior));
						}
						// VOLUME PISCINA
						String volumePiscina = parserImovel.obterDadoParser(5)
								.trim();
						if (!volumePiscina.equals("00000")) {
							imovelAtualizacaoCadastralTxt
									.setVolumePiscina(Util
											.formatarMoedaRealparaBigDecimalComUltimos2CamposDecimais(volumePiscina));
						}
						// INDICADOR JARDIM
						String indicadoprJardim = parserImovel.obterDadoParser(
								1).trim();
						if (!indicadoprJardim.equals("0")) {
							imovelAtualizacaoCadastralTxt
									.setIndicadorJardim(Short
											.parseShort(indicadoprJardim));
						}
						// CÓDIGO PAVIMENTO CALÇADA
						imovelAtualizacaoCadastralTxt
								.setIdPavimentoCalcada(Integer
										.parseInt(parserImovel.obterDadoParser(
												2).trim()));
						// CÓDIGO PAVIMENTO RUA
						imovelAtualizacaoCadastralTxt.setIdPavimentoRua(Integer
								.parseInt(parserImovel.obterDadoParser(2)
										.trim()));
						// CÓDIGO FONTE DE ABASTECIMENTO
						String fonteAbastecimanto = parserImovel
								.obterDadoParser(2).trim();
						if (!fonteAbastecimanto.equals("00")) {
							imovelAtualizacaoCadastralTxt
									.setIdFonteAbastecimento(Integer
											.parseInt(fonteAbastecimanto));
						} else if (imovelAtualizacaoCadastralBase
								.getIdFonteAbastecimento() != null) {
							imovelAtualizacaoCadastralTxt
									.setIdFonteAbastecimento(0);
						}
						// CÓDIGO POÇO
						String poco = parserImovel.obterDadoParser(2).trim();

						if (!poco.equals("00")) {
							imovelAtualizacaoCadastralTxt.setIdPocoTipo(Integer
									.parseInt(poco));
						} else if (imovelAtualizacaoCadastralBase
								.getIdPocoTipo() != null) {
							imovelAtualizacaoCadastralTxt.setIdPocoTipo(0);
						}
						// NÚMERO DE POMTOS
						String numeroPontos = parserImovel.obterDadoParser(4)
								.trim();
						if (!numeroPontos.equals("0000")) {
							imovelAtualizacaoCadastralTxt
									.setNumeroPontosUtilizacao(Short
											.parseShort(numeroPontos));
						} else if (imovelAtualizacaoCadastralBase
								.getNumeroPontosUtilizacao() != null) {
							imovelAtualizacaoCadastralTxt
									.setNumeroPontosUtilizacao(new Short("0"));
						}
						// SITUAÇÃO DA LIGAÇÃO DE ESGOTO
						imovelAtualizacaoCadastralTxt
								.setIdLigacaoEsgotoSituacao(Integer
										.parseInt(parserImovel.obterDadoParser(
												2).trim()));
						// CÓDIGO PERFIL IMÓVEL
						imovelAtualizacaoCadastralTxt.setIdImovelPerfil(Integer
								.parseInt(parserImovel.obterDadoParser(2)
										.trim()));
						// CÓDIGO TIPO DESPEJO
						imovelAtualizacaoCadastralTxt.setIdDespejo(Integer
								.parseInt(parserImovel.obterDadoParser(1)
										.trim()));
						// COORDENADAS UTMX
						String coordenadaX = parserImovel.obterDadoParser(5)
								.trim();
						if (!coordenadaX.equals("00000")) {
							imovelAtualizacaoCadastralTxt
									.setCoordenadaX(Util
											.formatarMoedaRealparaBigDecimalComUltimos2CamposDecimais(coordenadaX));
						}
						// COORDENADAS UTMY
						String coordenadaY = parserImovel.obterDadoParser(5)
								.trim();
						if (!coordenadaY.equals("00000")) {
							imovelAtualizacaoCadastralTxt
									.setCoordenadaY(Util
											.formatarMoedaRealparaBigDecimalComUltimos2CamposDecimais(coordenadaY));
						}
						// IMÓVEL PRINCIPAL
						String imovelPrincipal = parserImovel
								.obterDadoParser(9).trim();
						if (!imovelPrincipal.equals("000000000")) {
							imovelAtualizacaoCadastralTxt
									.setCodigoImovelPrincipal(Integer
											.parseInt(imovelPrincipal));
						}
						// LEITURA INICIAL DO HIDRÔMETRO
						String numeroLeituraInstalacaoHidrometro = parserImovel
								.obterDadoParser(6).trim();
						if (!numeroLeituraInstalacaoHidrometro.equals("000000")) {
							imovelAtualizacaoCadastralTxt
									.setNumeroLeituraInstalacaoHidrometro(Integer
											.parseInt(numeroLeituraInstalacaoHidrometro));
						} else if (imovelAtualizacaoCadastralBase
								.getNumeroLeituraInstalacaoHidrometro() != null) {
							imovelAtualizacaoCadastralTxt
									.setNumeroLeituraInstalacaoHidrometro(0);
						}
						// CAPACIDADE DO HIDRÔMETRO
						String capacidadeHidrometro = parserImovel
								.obterDadoParser(2).trim();
						if (!capacidadeHidrometro.equals("00")) {
							imovelAtualizacaoCadastralTxt
									.setIdCapacidadeHidrometro(Integer
											.parseInt(capacidadeHidrometro));
						}
						// MARCA DO HIDRÔMETRO
						String marcaHidrometro = parserImovel
								.obterDadoParser(2).trim();
						if (!marcaHidrometro.equals("00")) {
							imovelAtualizacaoCadastralTxt
									.setIdMarcaHidrometro(Integer
											.parseInt(marcaHidrometro));
						}
						// LOCAL DO HIDRÔMETRO
						String localInstalacaoHidrometro = parserImovel
								.obterDadoParser(2).trim();
						if (!localInstalacaoHidrometro.equals("00")) {
							imovelAtualizacaoCadastralTxt
									.setIdLocalInstalacaoHidrometro(Integer
											.parseInt(localInstalacaoHidrometro));
						}
						// PROTEÇÃO DO HIDRÔMETRO
						String protecaoHidrometro = parserImovel
								.obterDadoParser(2).trim();

						if (!protecaoHidrometro.equals("00")
								&& !(protecaoHidrometro.equals(""))) {
							imovelAtualizacaoCadastralTxt
									.setIdProtecaoHidrometro(Integer
											.parseInt(protecaoHidrometro));
						} else if (imovelAtualizacaoCadastralBase
								.getIdProtecaoHidrometro() != null) {
							imovelAtualizacaoCadastralTxt
									.setIdProtecaoHidrometro(0);
						}
						// NÚMERO DO HIDRÔMETRO
						imovelAtualizacaoCadastralTxt
								.setNumeroHidrometro(parserImovel
										.obterDadoParser(10).trim());
						// CAVALETE
						String cavalete = parserImovel.obterDadoParser(1)
								.trim();
						if (!cavalete.equals("0")) {
							imovelAtualizacaoCadastralTxt
									.setIndicadorCavalete(Short
											.parseShort(cavalete));
						}
						// NÚMERO DE IPTU
						String numeroIptu = parserImovel.obterDadoParser(20)
								.trim();
						if (!numeroIptu.equals("00000000000000000000")) {
							imovelAtualizacaoCadastralTxt
									.setNumeroIptu(Util
											.formatarMoedaRealparaBigDecimalComUltimos2CamposDecimais(numeroIptu));
						}
						// CONTRATO COMPANHIA DE ENERGIA
						String numeroContratoEnergia = parserImovel
								.obterDadoParser(10).trim();
						if (!numeroContratoEnergia.equals("0000000000")) {
							imovelAtualizacaoCadastralTxt
									.setNumeroContratoEnergia(Long
											.parseLong(numeroContratoEnergia));
						}
						// NÚMERO MEDIDOR DE ENERGIA
						imovelAtualizacaoCadastralTxt
								.setNumeroMedidirEnergia(parserImovel
										.obterDadoParser(10).trim());

						// OCORRÊNCIA CADASTRO
						String ocorrenciaCadastro = parserImovel
								.obterDadoParser(4).trim();
						if (!ocorrenciaCadastro.equals("0000")) {
							imovelAtualizacaoCadastralTxt
									.setIdCadastroOcorrencia(Integer
											.parseInt(ocorrenciaCadastro));
						}
						// ANORMALIDADE
						parserImovel.obterDadoParser(6).trim();
						// OUTRAS INFORMAÇÕES
						imovelAtualizacaoCadastralTxt
								.setDescricaoOutrasInformacoes(parserImovel
										.obterDadoParser(100).trim());
						// ENTREVISTADO
						imovelAtualizacaoCadastralTxt
								.setNomeEntrevistado(parserImovel
										.obterDadoParser(50).trim());
						// DATA/HORA ENTREVISTA
						parserImovel.obterDadoParser(14).trim();
						// CÓDIGO TIPO LOGRADOURO
						String codigoTipoLogradouro = parserImovel
								.obterDadoParser(3).trim();

						if (!codigoTipoLogradouro.equals("000")
								&& !(codigoTipoLogradouro.equals(""))) {
							imovelAtualizacaoCadastralTxt
									.setIdLogradouroTipo(Integer
											.parseInt(codigoTipoLogradouro));
						}

						// CÓDIGO TÍTULO LOGRADOURO
						String codigoTituloLogradouro = parserImovel
								.obterDadoParser(3).trim();

						if (!codigoTituloLogradouro.equals("000")
								&& !(codigoTituloLogradouro.equals(""))) {
							imovelAtualizacaoCadastralTxt
									.setIdLogradouroTitulo(Integer
											.parseInt(codigoTituloLogradouro));
						}
					}

					// percorrer a coleção de coluansAlteradas e gerar objetos
					// de tabela_coluna_atualizacao_cadastral
					Collection<TabelaLinhaColunaAlteracao> colunasAlteradas = interceptador
							.compareObjetoTransacao(
									imovelAtualizacaoCadastralTxt,
									imovelAtualizacaoCadastralBase, null);

					Collection<TabelaColunaAtualizacaoCadastral> colecaoTabelaColunaAtualizacaoCadastral = new ArrayList<TabelaColunaAtualizacaoCadastral>();

					TabelaAtualizacaoCadastral tabelaAtualizacaoCadastral = null;
					if ((colunasAlteradas != null && !colunasAlteradas
							.isEmpty())
							|| alteracaoTipo.getId().equals(
									AlteracaoTipo.EXCLUSAO)) {
						registradorOperacao
								.registrarOperacao(imovelAtualizacaoCadastralTxt);
						// inserir um objeto de tabela_atualizacao_cadastral
						tabelaAtualizacaoCadastral = new TabelaAtualizacaoCadastral();
						tabelaAtualizacaoCadastral
								.setAlteracaoTipo(alteracaoTipo);
						tabelaAtualizacaoCadastral
								.setIdRegistroAlterado(matricula);
						tabelaAtualizacaoCadastral
								.setIndicadorPrincipal(new Short("1"));
						tabelaAtualizacaoCadastral.setLeiturista(arquivoTexto
								.getLeiturista());
						tabelaAtualizacaoCadastral.setCodigoImovel(matricula);
						tabelaAtualizacaoCadastral
								.setOperacaoEfetuada(imovelAtualizacaoCadastralTxt
										.getOperacaoEfetuada());
						Tabela tabela = new Tabela();
						tabela.setId(Tabela.IMOVEL_ATUALIZACAO_CADASTRAL);
						tabelaAtualizacaoCadastral
								.setArquivoTextoAtualizacaoCadastral(arquivoTexto);
						tabelaAtualizacaoCadastral.setTabela(tabela);
						tabelaAtualizacaoCadastral
								.setIndicadorAutorizado(ConstantesSistema.INDICADOR_REGISTRO_ACEITO);

						if (colunasAlteradas != null
								&& !colunasAlteradas.isEmpty()) {

							Iterator colunasAlteradasIter = colunasAlteradas
									.iterator();
							while (colunasAlteradasIter.hasNext()) {
								TabelaLinhaColunaAlteracao tabelaLinhaColunaAlteracao = (TabelaLinhaColunaAlteracao) colunasAlteradasIter
										.next();
								TabelaColunaAtualizacaoCadastral tabelaColunaAtualizacaoCadastral = new TabelaColunaAtualizacaoCadastral();
								if (tabelaLinhaColunaAlteracao
										.getConteudoColunaAnterior() != null
										&& !tabelaLinhaColunaAlteracao
												.getConteudoColunaAnterior()
												.equals("")) {
									tabelaColunaAtualizacaoCadastral
											.setColunaValorAnterior(tabelaLinhaColunaAlteracao
													.getConteudoColunaAnterior());
								} else {
									tabelaColunaAtualizacaoCadastral
											.setColunaValorAnterior(null);
								}
								if (tabelaLinhaColunaAlteracao
										.getConteudoColunaAtual() != null
										&& !tabelaLinhaColunaAlteracao
												.getConteudoColunaAtual()
												.equals("")) {
									tabelaColunaAtualizacaoCadastral
											.setColunaValorAtual(tabelaLinhaColunaAlteracao
													.getConteudoColunaAtual());
								} else {
									tabelaColunaAtualizacaoCadastral
											.setColunaValorAtual(null);
								}
								tabelaColunaAtualizacaoCadastral
										.setIndicadorAutorizado(ConstantesSistema.INDICADOR_REGISTRO_NAO_ACEITO);
								tabelaColunaAtualizacaoCadastral
										.setTabelaAtualizacaoCadastral(tabelaAtualizacaoCadastral);
								tabelaColunaAtualizacaoCadastral
										.setTabelaColuna(tabelaLinhaColunaAlteracao
												.getTabelaColuna());
								colecaoTabelaColunaAtualizacaoCadastral
										.add(tabelaColunaAtualizacaoCadastral);
							}
						} else {
							// caso o tipo de alteração seja exclusão,
							// então cria um registro na tabela de
							// tabelaColunaAtualizacaoCadastral
							TabelaColunaAtualizacaoCadastral tabelaColunaAtualizacaoCadastral = new TabelaColunaAtualizacaoCadastral();

							tabelaColunaAtualizacaoCadastral
									.setColunaValorAnterior("" + matricula);
							tabelaColunaAtualizacaoCadastral
									.setColunaValorAtual("" + matricula);

							tabelaColunaAtualizacaoCadastral
									.setIndicadorAutorizado(ConstantesSistema.INDICADOR_REGISTRO_NAO_ACEITO);
							tabelaColunaAtualizacaoCadastral
									.setTabelaAtualizacaoCadastral(tabelaAtualizacaoCadastral);
							TabelaColuna tabelaColuna = new TabelaColuna();
							tabelaColuna.setId(TabelaColuna.ID_IMOVEL);
							tabelaColunaAtualizacaoCadastral
									.setTabelaColuna(tabelaColuna);
							colecaoTabelaColunaAtualizacaoCadastral
									.add(tabelaColunaAtualizacaoCadastral);
						}
						getControladorTransacao()
								.inserirOperacaoEfetuadaAtualizacaoCadastral(
										imovelAtualizacaoCadastralTxt
												.getUsuarioAcaoUsuarioHelp(),
										imovelAtualizacaoCadastralTxt
												.getOperacaoEfetuada(),
										tabelaAtualizacaoCadastral,
										colecaoTabelaColunaAtualizacaoCadastral);
					}

					/**
					 * [SB 00005] Inserir Imovel Atualização Cadastral
					 * 
					 * @author Davi Menezes
					 * @date 09/07/2012
					 */
					if (inserirNovoRegistro) {
						imovelAtualizacaoCadastralTxt
								.setUltimaAlteracao(new Date());
						imovelAtualizacaoCadastralTxt
								.setIndicadorAtualizado(ConstantesSistema.NAO);
						imovelAtualizacaoCadastralTxt
								.setIndicadorHidrometro(ConstantesSistema.NAO);
						idImovelAtualizacaoCadastral = (Integer) getControladorUtil()
								.inserir(imovelAtualizacaoCadastralTxt);

						if (tabelaAtualizacaoCadastral != null) {
							tabelaAtualizacaoCadastral
									.setImovelAtualizacaoCadastral(imovelAtualizacaoCadastralTxt);
							tabelaAtualizacaoCadastral
									.setUltimaAlteracao(new Date());

							getControladorUtil().inserirOuAtualizar(
									tabelaAtualizacaoCadastral);
						}

					}

				} else if ("2".equals(primeiraLetra) && !indicadorExcluido) {

					String clienteLinha = line.substring(1);

					parserCliente = new ParserUtil(clienteLinha);

					AlteracaoTipo alteracaoTipo = new AlteracaoTipo();

					ClienteAtualizacaoCadastral clienteAtualizacaoCadastralTxt = null;

					String tipoAlteracao = parserCliente.obterDadoParser(1);

					if (tipoAlteracao == null
							|| tipoAlteracao.trim().equals("")) {
						continue;
					}

					idClienteRelacaoTipo = Integer.parseInt(parserCliente
							.obterDadoParser(1));

					idCliente = Integer.parseInt(parserCliente
							.obterDadoParser(9));
					cliente.setId(idCliente);

					ClienteAtualizacaoCadastral clienteAtualizacaoCadastralBase = null;

					if (idClienteRelacaoTipo
							.equals(ConstantesSistema.CLIENTE_IMOVEL_TIPO_USUARIO)) {
						idClieteUsuario = idCliente;
					} else if (idClieteUsuario != null
							&& idClieteUsuario.equals(idCliente)) {
						getControladorTransacao()
								.atualizarClienteRelacaoTipoAtualizacaoCadastral(
										matricula, idCliente);
						indicadorRepetido = true;
						continue;
					} else {
						indicadorRepetido = false;
					}

					if (tipoAlteracao.equals("E")) {
						clienteAtualizacaoCadastralBase = getControladorCliente()
								.pesquisarClienteAtualizacaoCadastral(
										idCliente, matricula,
										idClienteRelacaoTipo);
						alteracaoTipo.setId(AlteracaoTipo.EXCLUSAO);
						clienteAtualizacaoCadastralTxt = new ClienteAtualizacaoCadastral();
					} else {
						if (tipoAlteracao.equals("I")) {
							clienteAtualizacaoCadastralBase = new ClienteAtualizacaoCadastral();
							alteracaoTipo.setId(AlteracaoTipo.INCLUSAO);
						} else if (tipoAlteracao.equals("A")) {
							clienteAtualizacaoCadastralBase = getControladorCliente()
									.pesquisarClienteAtualizacaoCadastral(
											idCliente, matricula,
											idClienteRelacaoTipo);
							alteracaoTipo.setId(AlteracaoTipo.ALTERACAO);
						}

						clienteAtualizacaoCadastralTxt = new ClienteAtualizacaoCadastral();

						// CÓDIGO DO CLIENTE
						if (!String.valueOf(idCliente).equals("0")) {
							clienteAtualizacaoCadastralTxt
									.setIdCliente(idCliente);
						} else {
							clienteAtualizacaoCadastralTxt.setIdCliente(null);
						}

						// TIPO RELAÇÃO DO CLIENTE
						clienteAtualizacaoCadastralTxt
								.setIdClienteRelacaoTipo(idClienteRelacaoTipo);

						// NOME
						clienteAtualizacaoCadastralTxt
								.setNomeCliente(parserCliente.obterDadoParser(
										50).trim());
						// TIPO DO CLIENTE
						Integer tipoCliente = Integer.parseInt(parserCliente
								.obterDadoParser(4));
						clienteAtualizacaoCadastralTxt
								.setIdClienteTipo(tipoCliente);
						// CPF/CNPJ
						clienteAtualizacaoCadastralTxt.setCpfCnpj(parserCliente
								.obterDadoParser(14).trim());
						// RG
						clienteAtualizacaoCadastralTxt.setRg(parserCliente
								.obterDadoParser(13).trim());
						// DATA DA EMISSÃO
						String dataEmissaoRg = parserCliente.obterDadoParser(8)
								.trim();

						if (!dataEmissaoRg.equals("")
								&& !dataEmissaoRg.equals("00000000")) {
							clienteAtualizacaoCadastralTxt
									.setDataEmissaoRg(Util
											.converteStringSemBarraParaDate(dataEmissaoRg));
						}
						// ORG. EXPEDITOR
						clienteAtualizacaoCadastralTxt
								.setDsAbreviadaOrgaoExpedidorRg(parserCliente
										.obterDadoParser(6).trim());
						// UF
						clienteAtualizacaoCadastralTxt
								.setDsUFSiglaOrgaoExpedidorRg(parserCliente
										.obterDadoParser(2).trim());
						// DATA DE NASCIMENTO
						String dataNascimento = parserCliente
								.obterDadoParser(8).trim();

						if (!dataNascimento.equals("")
								&& !dataNascimento.equals("00000000")) {
							clienteAtualizacaoCadastralTxt
									.setDataNascimento(Util.formatarDataSemHora(Util
											.converteStringSemBarraParaDate(dataNascimento)));
						}
						// PROFISSÃO
						String idProfissaoRamoAtividade = parserCliente
								.obterDadoParser(4);

						Short tipoClienteIndicador = null;
						FiltroClienteTipo filtroClienteTipo = new FiltroClienteTipo();
						filtroClienteTipo
								.adicionarParametro(new ParametroSimples(
										FiltroClienteTipo.ID, tipoCliente));
						Collection pesquisa = getControladorUtil().pesquisar(
								filtroClienteTipo, ClienteTipo.class.getName());
						if (pesquisa != null && !pesquisa.isEmpty()) {
							ClienteTipo clienteTipo = (ClienteTipo) Util
									.retonarObjetoDeColecao(pesquisa);
							tipoClienteIndicador = clienteTipo
									.getIndicadorPessoaFisicaJuridica();
						}
						if (tipoClienteIndicador
								.equals(ClienteTipo.INDICADOR_PESSOA_FISICA)) {
							if (!idProfissaoRamoAtividade.equals("0000")) {
								clienteAtualizacaoCadastralTxt
										.setIdProfissao(Integer
												.parseInt(idProfissaoRamoAtividade));
							} else if (clienteAtualizacaoCadastralBase
									.getIdProfissao() != null) {
								clienteAtualizacaoCadastralTxt
										.setIdProfissao(0);
							}
						} else {
							if (!idProfissaoRamoAtividade.equals("0000")) {
								clienteAtualizacaoCadastralTxt
										.setIdRamoAtividade(Integer
												.parseInt(idProfissaoRamoAtividade));
							} else if (clienteAtualizacaoCadastralBase
									.getIdProfissao() != null) {
								clienteAtualizacaoCadastralTxt
										.setIdRamoAtividade(0);
							}
						}

						// SEXO
						String pessoaSexo = parserCliente.obterDadoParser(1);

						// if(pessoaSexo.equalsIgnoreCase("M")){
						// clienteAtualizacaoCadastralTxt.setIdPessoaSexo(1);
						// } else{
						// if (pessoaSexo.equalsIgnoreCase("F")){
						// clienteAtualizacaoCadastralTxt.setIdPessoaSexo(2);
						// }
						// }

						// o arquivo enviado pela serasa defini o sexo com M e F
						if (!pessoaSexo.equals("1") && !pessoaSexo.equals("2")) {
							clienteAtualizacaoCadastralTxt.setIdPessoaSexo(0);
						} else {
							clienteAtualizacaoCadastralTxt
									.setIdPessoaSexo(Integer
											.parseInt(pessoaSexo));
						}

						// NOME DA MÃE
						clienteAtualizacaoCadastralTxt.setNomeMae(parserCliente
								.obterDadoParser(50).trim());
						// INDICADOR DE USO
						String indicadorUso = parserCliente.obterDadoParser(1)
								.trim();
						if (indicadorUso != null && !indicadorUso.equals("")) {
							clienteAtualizacaoCadastralTxt
									.setIndicadorUso(Short
											.parseShort(indicadorUso));
						} else {
							clienteAtualizacaoCadastralTxt
									.setIndicadorUso(new Short("1"));
						}
						// TIPO DE ENDEREÇO
						String idTipoCliente = parserCliente.obterDadoParser(2)
								.trim();
						if (idTipoCliente != null && !idTipoCliente.equals("")) {
							clienteAtualizacaoCadastralTxt
									.setIdEnderecoTipo(Integer
											.parseInt(idTipoCliente));
						}

						// CÓDIGO DO LOGRADOURO
						String idLogradouro = parserCliente.obterDadoParser(9)
								.trim();
						if (idLogradouro != null && !idLogradouro.equals("")) {
							clienteAtualizacaoCadastralTxt
									.setIdLogradouro(Integer
											.parseInt(idLogradouro));
						}
						// TIPO LOGRADOURO
						clienteAtualizacaoCadastralTxt
								.setDsLogradouroTipo(parserCliente
										.obterDadoParser(20).trim());
						// TÍTULO LOGRADOURO
						clienteAtualizacaoCadastralTxt
								.setDsLogradouroTitulo(parserCliente
										.obterDadoParser(25).trim());
						// LOGRADOURO
						clienteAtualizacaoCadastralTxt
								.setDescricaoLogradouro(parserCliente
										.obterDadoParser(40).trim());
						// CEP
						String codigoCep = parserCliente.obterDadoParser(8)
								.trim();
						if (!codigoCep.equals("")
								&& !codigoCep.equals("00000000")) {
							clienteAtualizacaoCadastralTxt.setCodigoCep(Integer
									.parseInt(codigoCep));
						}
						// CÓDIGO DO BAIRRO
						String idBairro = parserCliente.obterDadoParser(4)
								.trim();
						if (idBairro != null && !idBairro.equals("")) {
							clienteAtualizacaoCadastralTxt.setIdBairro(Integer
									.parseInt(idBairro));

						}

						// DESCRIÇÃO DO BAIRRO
						clienteAtualizacaoCadastralTxt
								.setNomeBairro(parserCliente
										.obterDadoParser(30).trim());
						// CÓDIGO DE REFERÊNCIA
						String enderecoReferencia = parserCliente
								.obterDadoParser(2).trim();
						if (enderecoReferencia != null
								&& !enderecoReferencia.equals("")) {
							clienteAtualizacaoCadastralTxt
									.setIdEnderecoReferencia(Integer
											.parseInt(enderecoReferencia));
						}
						// NÚMERO
						clienteAtualizacaoCadastralTxt
								.setNumeroImovel(parserCliente.obterDadoParser(
										5).trim());
						// COMPLEMENTO
						clienteAtualizacaoCadastralTxt
								.setComplementoEndereco(parserCliente
										.obterDadoParser(25).trim());
						// EMAIL
						clienteAtualizacaoCadastralTxt.setEmail(parserCliente
								.obterDadoParser(40).trim());
						// CNAE
						String cnae = parserCliente.obterDadoParser(7).trim();
						if (!cnae.equals("") && !cnae.equals("0000000")
								&& !cnae.trim().equalsIgnoreCase("")) {
							clienteAtualizacaoCadastralTxt.setCnae(Integer
									.parseInt(cnae));
						}

						parserCliente.obterDadoParser(9).trim();

						// CÓDIGO TIPO LOGRADOURO
						String codigoTipoLogradouro = parserCliente
								.obterDadoParser(3).trim();

						if (!codigoTipoLogradouro.equals("000")
								&& !(codigoTipoLogradouro.equals(""))) {
							clienteAtualizacaoCadastralTxt
									.setIdLogradouroTipo(Integer
											.parseInt(codigoTipoLogradouro));
						}

						// CÓDIGO TÍTULO LOGRADOURO
						String codigoTituloLogradouro = parserCliente
								.obterDadoParser(3).trim();

						if (!codigoTituloLogradouro.equals("000")
								&& !(codigoTituloLogradouro.equals(""))) {
							clienteAtualizacaoCadastralTxt
									.setIdLogradouroTitulo(Integer
											.parseInt(codigoTituloLogradouro));
						}

					}

					// percorrer a coleção de coluansAlteradas e gerar objetos
					// de tabela_coluna_atualizacao_cadastral
					Collection<TabelaLinhaColunaAlteracao> colunasAlteradas = interceptador
							.compareObjetoTransacao(
									clienteAtualizacaoCadastralTxt,
									clienteAtualizacaoCadastralBase, null);

					Collection<TabelaColunaAtualizacaoCadastral> colecaoTabelaColunaAtualizacaoCadastral = new ArrayList<TabelaColunaAtualizacaoCadastral>();

					TabelaAtualizacaoCadastral tabelaAtualizacaoCadastral = null;
					if ((colunasAlteradas != null && !colunasAlteradas
							.isEmpty())
							|| alteracaoTipo.getId().equals(
									AlteracaoTipo.EXCLUSAO)) {

						registradorOperacao
								.registrarOperacao(clienteAtualizacaoCadastralTxt);

						// inserir um objeto de tabela_atualizacao_cadastral
						tabelaAtualizacaoCadastral = new TabelaAtualizacaoCadastral();
						tabelaAtualizacaoCadastral
								.setAlteracaoTipo(alteracaoTipo);
						if (clienteAtualizacaoCadastralBase != null
								&& clienteAtualizacaoCadastralBase.getId() != null) {
							tabelaAtualizacaoCadastral
									.setIdRegistroAlterado(clienteAtualizacaoCadastralBase
											.getId());
						} else {
							tabelaAtualizacaoCadastral
									.setIdRegistroAlterado(idCliente);
						}
						tabelaAtualizacaoCadastral.setCodigoImovel(matricula);
						tabelaAtualizacaoCadastral.setCodigoCliente(idCliente);
						tabelaAtualizacaoCadastral
								.setIndicadorPrincipal(new Short("2"));
						tabelaAtualizacaoCadastral.setLeiturista(arquivoTexto
								.getLeiturista());
						tabelaAtualizacaoCadastral
								.setOperacaoEfetuada(clienteAtualizacaoCadastralTxt
										.getOperacaoEfetuada());
						Tabela tabela = new Tabela();
						tabela.setId(Tabela.CLIENTE_ATUALIZACAO_CADASTRAL);
						tabelaAtualizacaoCadastral
								.setArquivoTextoAtualizacaoCadastral(arquivoTexto);
						tabelaAtualizacaoCadastral.setTabela(tabela);
						tabelaAtualizacaoCadastral
								.setIndicadorAutorizado(ConstantesSistema.INDICADOR_REGISTRO_ACEITO);

						if (colunasAlteradas != null
								&& !colunasAlteradas.isEmpty()) {

							Iterator colunasAlteradasIter = colunasAlteradas
									.iterator();
							while (colunasAlteradasIter.hasNext()) {
								TabelaLinhaColunaAlteracao tabelaLinhaColunaAlteracao = (TabelaLinhaColunaAlteracao) colunasAlteradasIter
										.next();
								TabelaColunaAtualizacaoCadastral tabelaColunaAtualizacaoCadastral = new TabelaColunaAtualizacaoCadastral();
								if (tabelaLinhaColunaAlteracao
										.getConteudoColunaAnterior() != null
										&& !tabelaLinhaColunaAlteracao
												.getConteudoColunaAnterior()
												.equals("")) {
									tabelaColunaAtualizacaoCadastral
											.setColunaValorAnterior(tabelaLinhaColunaAlteracao
													.getConteudoColunaAnterior());
								} else {
									tabelaColunaAtualizacaoCadastral
											.setColunaValorAnterior(null);
								}
								if (tabelaLinhaColunaAlteracao
										.getConteudoColunaAtual() != null
										&& !tabelaLinhaColunaAlteracao
												.getConteudoColunaAtual()
												.equals("")) {
									tabelaColunaAtualizacaoCadastral
											.setColunaValorAtual(tabelaLinhaColunaAlteracao
													.getConteudoColunaAtual());
								} else {
									tabelaColunaAtualizacaoCadastral
											.setColunaValorAtual(null);
								}
								tabelaColunaAtualizacaoCadastral
										.setIndicadorAutorizado(ConstantesSistema.INDICADOR_REGISTRO_NAO_ACEITO);
								tabelaColunaAtualizacaoCadastral
										.setTabelaAtualizacaoCadastral(tabelaAtualizacaoCadastral);
								tabelaColunaAtualizacaoCadastral
										.setTabelaColuna(tabelaLinhaColunaAlteracao
												.getTabelaColuna());
								colecaoTabelaColunaAtualizacaoCadastral
										.add(tabelaColunaAtualizacaoCadastral);
							}
						} else {
							// caso o tipo de alteração seja exclusão,
							// então cria um registro na tabela de
							// tabelaColunaAtualizacaoCadastral
							TabelaColunaAtualizacaoCadastral tabelaColunaAtualizacaoCadastral = new TabelaColunaAtualizacaoCadastral();

							tabelaColunaAtualizacaoCadastral
									.setColunaValorAnterior("" + idCliente);
							tabelaColunaAtualizacaoCadastral
									.setColunaValorAtual("" + idCliente);

							tabelaColunaAtualizacaoCadastral
									.setIndicadorAutorizado(ConstantesSistema.INDICADOR_REGISTRO_NAO_ACEITO);
							tabelaColunaAtualizacaoCadastral
									.setTabelaAtualizacaoCadastral(tabelaAtualizacaoCadastral);
							TabelaColuna tabelaColuna = new TabelaColuna();
							tabelaColuna
									.setId(TabelaColuna.ID_CLIENTE_ATU_CADASTRAL);
							tabelaColunaAtualizacaoCadastral
									.setTabelaColuna(tabelaColuna);
							colecaoTabelaColunaAtualizacaoCadastral
									.add(tabelaColunaAtualizacaoCadastral);
						}
						getControladorTransacao()
								.inserirOperacaoEfetuadaAtualizacaoCadastral(
										clienteAtualizacaoCadastralTxt
												.getUsuarioAcaoUsuarioHelp(),
										clienteAtualizacaoCadastralTxt
												.getOperacaoEfetuada(),
										tabelaAtualizacaoCadastral,
										colecaoTabelaColunaAtualizacaoCadastral);
					}

					/**
					 * [SB 00005] Inserir Cliente Atualização Cadastral
					 * 
					 * @author Davi Menezes
					 * @date 09/07/2012
					 */
					if (inserirNovoRegistro) {
						if (idImovelAtualizacaoCadastral != null) {
							ImovelAtualizacaoCadastral novoImovelAtualizacaoCadastral = new ImovelAtualizacaoCadastral();
							novoImovelAtualizacaoCadastral
									.setId(idImovelAtualizacaoCadastral);
							clienteAtualizacaoCadastralTxt
									.setImovelAtualizacaoCadastral(novoImovelAtualizacaoCadastral);
							clienteAtualizacaoCadastralTxt
									.setUltimaAlteracao(new Date());

							if (String.valueOf(
									clienteAtualizacaoCadastralTxt
											.getIdPessoaSexo()).equals("0")) {
								clienteAtualizacaoCadastralTxt
										.setIdPessoaSexo(null);
							}

							idClienteAtualizacaoCadastral = (Integer) getControladorUtil()
									.inserir(clienteAtualizacaoCadastralTxt);

							if (tabelaAtualizacaoCadastral != null) {
								tabelaAtualizacaoCadastral
										.setImovelAtualizacaoCadastral(novoImovelAtualizacaoCadastral);
								tabelaAtualizacaoCadastral
										.setUltimaAlteracao(new Date());

								getControladorUtil().inserirOuAtualizar(
										tabelaAtualizacaoCadastral);
							}

						}

					}

				} else if ("3".equals(primeiraLetra) && !indicadorExcluido
						&& !indicadorRepetido) {

					String clienteFone = line.substring(1);

					ParserUtil parserClienteFone = new ParserUtil(clienteFone);

					String tipoAlteracao = parserClienteFone.obterDadoParser(1);

					Integer tipoFone = Integer.parseInt(parserClienteFone
							.obterDadoParser(2));

					ClienteFoneAtualizacaoCadastral clienteFoneAtualizacaoCadastralBase = null;

					ClienteFoneAtualizacaoCadastral clienteFoneAtualizacaoCadastralTxt = null;

					clienteFoneAtualizacaoCadastralTxt = new ClienteFoneAtualizacaoCadastral();
					// TIPO DO TELEFONE
					clienteFoneAtualizacaoCadastralTxt.setIdFoneTipo(tipoFone);
					// DDD
					String ddd = parserClienteFone.obterDadoParser(2).trim();
					if (!ddd.equals("00")) {
						clienteFoneAtualizacaoCadastralTxt.setDdd(ddd);
					}
					// NÚMERO DO TELEFONE
					String numeroFone = parserClienteFone.obterDadoParser(8)
							.trim();
					clienteFoneAtualizacaoCadastralTxt.setTelefone(numeroFone);
					// RAMAL
					String ramal = parserClienteFone.obterDadoParser(4).trim();
					if (!ramal.equals("0000")) {
						clienteFoneAtualizacaoCadastralTxt.setRamal(ramal);
					}

					// ID DO CLIENTE
					idCliente = Integer.parseInt(parserClienteFone
							.obterDadoParser(9));

					// INDICADOR FONE PADRÃO
					clienteFoneAtualizacaoCadastralTxt
							.setIndicadorFonePadrao(Short
									.parseShort(parserClienteFone
											.obterDadoParser(1)));

					AlteracaoTipo alteracaoTipo = new AlteracaoTipo();

					if (tipoAlteracao == null
							|| tipoAlteracao.trim().equals("")) {
						continue;
					} else if (tipoAlteracao.equals("E")) {
						Collection colecaoClienteFoneAtualizacaoCadastral = getControladorCliente()
								.pesquisarClienteFoneAtualizacaoCadastral(
										idCliente, matricula, tipoFone, null,
										numeroFone);
						clienteFoneAtualizacaoCadastralBase = (ClienteFoneAtualizacaoCadastral) colecaoClienteFoneAtualizacaoCadastral
								.iterator().next();
						alteracaoTipo.setId(AlteracaoTipo.EXCLUSAO);
					} else {
						if (tipoAlteracao.equals("I")) {
							alteracaoTipo.setId(AlteracaoTipo.INCLUSAO);
						} else if (tipoAlteracao.equals("A")) {
							Collection colecaoClienteFoneAtualizacaoCadastral = getControladorCliente()
									.pesquisarClienteFoneAtualizacaoCadastral(
											idCliente, matricula, tipoFone,
											null, numeroFone);
							clienteFoneAtualizacaoCadastralBase = (ClienteFoneAtualizacaoCadastral) colecaoClienteFoneAtualizacaoCadastral
									.iterator().next();
							alteracaoTipo.setId(AlteracaoTipo.ALTERACAO);
						}
					}

					// percorrer a coleção de coluansAlteradas e gerar objetos
					// de tabela_coluna_atualizacao_cadastral
					Collection<TabelaLinhaColunaAlteracao> colunasAlteradas = interceptador
							.compareObjetoTransacao(
									clienteFoneAtualizacaoCadastralTxt,
									clienteFoneAtualizacaoCadastralBase, null);

					Collection<TabelaColunaAtualizacaoCadastral> colecaoTabelaColunaAtualizacaoCadastral = new ArrayList<TabelaColunaAtualizacaoCadastral>();

					TabelaAtualizacaoCadastral tabelaAtualizacaoCadastral = null;
					if ((colunasAlteradas != null && !colunasAlteradas
							.isEmpty())
							|| alteracaoTipo.getId().equals(
									AlteracaoTipo.EXCLUSAO)) {
						registradorOperacao
								.registrarOperacao(clienteFoneAtualizacaoCadastralTxt);

						// inserir um objeto de tabela_atualizacao_cadastral
						tabelaAtualizacaoCadastral = new TabelaAtualizacaoCadastral();
						tabelaAtualizacaoCadastral
								.setAlteracaoTipo(alteracaoTipo);
						if (clienteFoneAtualizacaoCadastralBase != null
								&& clienteFoneAtualizacaoCadastralBase.getId() != null) {
							tabelaAtualizacaoCadastral
									.setIdRegistroAlterado(clienteFoneAtualizacaoCadastralBase
											.getId());
						} else {
							tabelaAtualizacaoCadastral
									.setIdRegistroAlterado(idCliente);
						}
						tabelaAtualizacaoCadastral.setCodigoImovel(matricula);
						tabelaAtualizacaoCadastral.setCodigoCliente(idCliente);
						tabelaAtualizacaoCadastral
								.setIndicadorPrincipal(new Short("2"));
						tabelaAtualizacaoCadastral.setLeiturista(arquivoTexto
								.getLeiturista());
						tabelaAtualizacaoCadastral
								.setOperacaoEfetuada(clienteFoneAtualizacaoCadastralTxt
										.getOperacaoEfetuada());
						Tabela tabela = new Tabela();
						tabela.setId(Tabela.CLIENTE_FONE_ATUALIZACAO_CADASTRAL);
						tabelaAtualizacaoCadastral
								.setArquivoTextoAtualizacaoCadastral(arquivoTexto);
						tabelaAtualizacaoCadastral.setTabela(tabela);
						tabelaAtualizacaoCadastral
								.setIndicadorAutorizado(ConstantesSistema.INDICADOR_REGISTRO_ACEITO);

						if (colunasAlteradas != null
								&& !colunasAlteradas.isEmpty()) {
							Iterator colunasAlteradasIter = colunasAlteradas
									.iterator();
							while (colunasAlteradasIter.hasNext()) {
								TabelaLinhaColunaAlteracao tabelaLinhaColunaAlteracao = (TabelaLinhaColunaAlteracao) colunasAlteradasIter
										.next();
								TabelaColunaAtualizacaoCadastral tabelaColunaAtualizacaoCadastral = new TabelaColunaAtualizacaoCadastral();
								if (tabelaLinhaColunaAlteracao
										.getConteudoColunaAnterior() != null
										&& !tabelaLinhaColunaAlteracao
												.getConteudoColunaAnterior()
												.equals("")) {
									tabelaColunaAtualizacaoCadastral
											.setColunaValorAnterior(tabelaLinhaColunaAlteracao
													.getConteudoColunaAnterior());
								} else {
									tabelaColunaAtualizacaoCadastral
											.setColunaValorAnterior(null);
								}
								if (tabelaLinhaColunaAlteracao
										.getConteudoColunaAtual() != null
										&& !tabelaLinhaColunaAlteracao
												.getConteudoColunaAtual()
												.equals("")) {
									tabelaColunaAtualizacaoCadastral
											.setColunaValorAtual(tabelaLinhaColunaAlteracao
													.getConteudoColunaAtual());
								} else {
									tabelaColunaAtualizacaoCadastral
											.setColunaValorAtual(null);
								}
								tabelaColunaAtualizacaoCadastral
										.setIndicadorAutorizado(ConstantesSistema.INDICADOR_REGISTRO_NAO_ACEITO);
								tabelaColunaAtualizacaoCadastral
										.setTabelaAtualizacaoCadastral(tabelaAtualizacaoCadastral);
								tabelaColunaAtualizacaoCadastral
										.setTabelaColuna(tabelaLinhaColunaAlteracao
												.getTabelaColuna());
								colecaoTabelaColunaAtualizacaoCadastral
										.add(tabelaColunaAtualizacaoCadastral);
							}
						} else {
							// caso o tipo de alteração seja exclusão,
							// então cria um registro na tabela de
							// tabelaColunaAtualizacaoCadastral
							TabelaColunaAtualizacaoCadastral tabelaColunaAtualizacaoCadastral = new TabelaColunaAtualizacaoCadastral();

							tabelaColunaAtualizacaoCadastral
									.setColunaValorAnterior("" + idCliente);
							tabelaColunaAtualizacaoCadastral
									.setColunaValorAtual("" + idCliente);

							tabelaColunaAtualizacaoCadastral
									.setIndicadorAutorizado(ConstantesSistema.INDICADOR_REGISTRO_NAO_ACEITO);
							tabelaColunaAtualizacaoCadastral
									.setTabelaAtualizacaoCadastral(tabelaAtualizacaoCadastral);
							TabelaColuna tabelaColuna = new TabelaColuna();
							tabelaColuna
									.setId(TabelaColuna.ID_CLIENTE_TELEFONE_ATU_CADASTRAL);
							tabelaColunaAtualizacaoCadastral
									.setTabelaColuna(tabelaColuna);
							colecaoTabelaColunaAtualizacaoCadastral
									.add(tabelaColunaAtualizacaoCadastral);
						}

						getControladorTransacao()
								.inserirOperacaoEfetuadaAtualizacaoCadastral(
										clienteFoneAtualizacaoCadastralTxt
												.getUsuarioAcaoUsuarioHelp(),
										clienteFoneAtualizacaoCadastralTxt
												.getOperacaoEfetuada(),
										tabelaAtualizacaoCadastral,
										colecaoTabelaColunaAtualizacaoCadastral);
					}

					/**
					 * [SB 00005] Inserir Cliente Fone Atualização Cadastral
					 * 
					 * @author Davi Menezes
					 * @date 09/07/2012
					 */
					if (inserirNovoRegistro) {
						if (idClienteAtualizacaoCadastral != null) {
							ClienteAtualizacaoCadastral novoClienteAtualizacaoCadastral = new ClienteAtualizacaoCadastral();
							novoClienteAtualizacaoCadastral
									.setId(idClienteAtualizacaoCadastral);
							clienteFoneAtualizacaoCadastralTxt
									.setClienteAtualizacaoCadastral(novoClienteAtualizacaoCadastral);
							clienteFoneAtualizacaoCadastralTxt
									.setUltimaAlteracao(new Date());

							getControladorUtil().inserir(
									clienteFoneAtualizacaoCadastralTxt);

							if (idImovelAtualizacaoCadastral != null) {
								ImovelAtualizacaoCadastral novoImovelAtualizacaoCadastral = new ImovelAtualizacaoCadastral();
								novoImovelAtualizacaoCadastral
										.setId(idImovelAtualizacaoCadastral);

								if (tabelaAtualizacaoCadastral != null) {
									tabelaAtualizacaoCadastral
											.setImovelAtualizacaoCadastral(novoImovelAtualizacaoCadastral);
									tabelaAtualizacaoCadastral
											.setUltimaAlteracao(new Date());

									getControladorUtil().inserirOuAtualizar(
											tabelaAtualizacaoCadastral);
								}

							}

						}
					}

				} else if ("4".equals(primeiraLetra) && !indicadorExcluido) {

					String imovelSubcategoria = line.substring(1);

					ParserUtil parserImovelSubcategoria = new ParserUtil(
							imovelSubcategoria);

					ImovelSubcategoriaAtualizacaoCadastral imovelSubcategoriaAtualizacaoCadastralTxt = new ImovelSubcategoriaAtualizacaoCadastral();

					String tipoAlteracao = parserImovelSubcategoria
							.obterDadoParser(1);

					ImovelSubcategoriaAtualizacaoCadastral imovelSubcategoriaAtualizacaoCadastralBase = null;
					AlteracaoTipo alteracaoTipo = new AlteracaoTipo();
					Integer idSubcategoria = Integer
							.parseInt(parserImovelSubcategoria
									.obterDadoParser(2));
					String descricaoSubcategoria = parserImovelSubcategoria
							.obterDadoParser(50).trim();

					Short qtdEconomias = Short
							.parseShort(parserImovelSubcategoria
									.obterDadoParser(4));
					Integer idCategoria = Integer
							.parseInt(parserImovelSubcategoria
									.obterDadoParser(2));

					if (tipoAlteracao == null
							|| tipoAlteracao.trim().equals("")) {
						continue;
					} else if (tipoAlteracao.equals("E")) {
						Collection colecaoImovelSubcategoriaAtualizacaoCadastral = getControladorImovel()
								.pesquisarImovelSubcategoriaAtualizacaoCadastral(
										matricula, idSubcategoria, idCategoria);
						imovelSubcategoriaAtualizacaoCadastralBase = (ImovelSubcategoriaAtualizacaoCadastral) colecaoImovelSubcategoriaAtualizacaoCadastral
								.iterator().next();
						alteracaoTipo.setId(AlteracaoTipo.EXCLUSAO);
						imovelSubcategoriaAtualizacaoCadastralTxt = new ImovelSubcategoriaAtualizacaoCadastral();
					} else {
						if (tipoAlteracao.equals("I")) {
							imovelSubcategoriaAtualizacaoCadastralTxt = new ImovelSubcategoriaAtualizacaoCadastral();
							alteracaoTipo.setId(AlteracaoTipo.INCLUSAO);
						} else if (tipoAlteracao.equals("A")) {
							Collection colecaoImovelSubcategoriaAtualizacaoCadastral = getControladorImovel()
									.pesquisarImovelSubcategoriaAtualizacaoCadastral(
											matricula, idSubcategoria,
											idCategoria);
							imovelSubcategoriaAtualizacaoCadastralBase = (ImovelSubcategoriaAtualizacaoCadastral) colecaoImovelSubcategoriaAtualizacaoCadastral
									.iterator().next();
							alteracaoTipo.setId(AlteracaoTipo.ALTERACAO);
						}

					}

					// CÓDIGO DA SUBCATEGORIA
					imovelSubcategoriaAtualizacaoCadastralTxt
							.setIdSubcategoria(idSubcategoria);

					// DESCRIÇÃO SUBCATEGORIA
					imovelSubcategoriaAtualizacaoCadastralTxt
							.setDescricaoSubcategoria(descricaoSubcategoria);
					// QTD. DE ECONOMIAS
					imovelSubcategoriaAtualizacaoCadastralTxt
							.setQuantidadeEconomias(qtdEconomias);
					// CÓDIGO CATEGORIA
					imovelSubcategoriaAtualizacaoCadastralTxt
							.setIdCategoria(idCategoria);
					// DESCRIÇÃO CATEGORIA
					imovelSubcategoriaAtualizacaoCadastralTxt
							.setDescricaoCategoria(parserImovelSubcategoria
									.obterDadoParser(15).trim());

					// percorrer a coleção de coluansAlteradas e gerar objetos
					// de tabela_coluna_atualizacao_cadastral
					Collection<TabelaLinhaColunaAlteracao> colunasAlteradas = interceptador
							.compareObjetoTransacao(
									imovelSubcategoriaAtualizacaoCadastralTxt,
									imovelSubcategoriaAtualizacaoCadastralBase,
									null);

					Collection<TabelaColunaAtualizacaoCadastral> colecaoTabelaColunaAtualizacaoCadastral = new ArrayList<TabelaColunaAtualizacaoCadastral>();

					TabelaAtualizacaoCadastral tabelaAtualizacaoCadastral = null;
					if ((colunasAlteradas != null && !colunasAlteradas
							.isEmpty())
							|| alteracaoTipo.getId().equals(
									AlteracaoTipo.EXCLUSAO)) {

						registradorOperacao
								.registrarOperacao(imovelSubcategoriaAtualizacaoCadastralTxt);

						// inserir um objeto de tabela_atualizacao_cadastral
						tabelaAtualizacaoCadastral = new TabelaAtualizacaoCadastral();
						tabelaAtualizacaoCadastral
								.setAlteracaoTipo(alteracaoTipo);
						if (imovelSubcategoriaAtualizacaoCadastralBase != null
								&& imovelSubcategoriaAtualizacaoCadastralBase
										.getId() != null) {
							tabelaAtualizacaoCadastral
									.setIdRegistroAlterado(imovelSubcategoriaAtualizacaoCadastralBase
											.getId());
						} else {
							tabelaAtualizacaoCadastral
									.setIdRegistroAlterado(idSubcategoria);
						}

						tabelaAtualizacaoCadastral.setCodigoImovel(matricula);
						tabelaAtualizacaoCadastral
								.setIndicadorPrincipal(new Short("2"));
						tabelaAtualizacaoCadastral.setLeiturista(arquivoTexto
								.getLeiturista());
						tabelaAtualizacaoCadastral
								.setOperacaoEfetuada(imovelSubcategoriaAtualizacaoCadastralTxt
										.getOperacaoEfetuada());
						Tabela tabela = new Tabela();
						tabela.setId(Tabela.IMOVEL_SUBCATEGORIA_ATUALIZACAO_CADASTRAL);
						tabelaAtualizacaoCadastral
								.setArquivoTextoAtualizacaoCadastral(arquivoTexto);
						tabelaAtualizacaoCadastral.setTabela(tabela);
						tabelaAtualizacaoCadastral
								.setIndicadorAutorizado(ConstantesSistema.INDICADOR_REGISTRO_ACEITO);

						if (colunasAlteradas != null
								&& !colunasAlteradas.isEmpty()) {
							Iterator colunasAlteradasIter = colunasAlteradas
									.iterator();
							while (colunasAlteradasIter.hasNext()) {
								TabelaLinhaColunaAlteracao tabelaLinhaColunaAlteracao = (TabelaLinhaColunaAlteracao) colunasAlteradasIter
										.next();
								TabelaColunaAtualizacaoCadastral tabelaColunaAtualizacaoCadastral = new TabelaColunaAtualizacaoCadastral();
								if (tabelaLinhaColunaAlteracao
										.getConteudoColunaAnterior() != null
										&& !tabelaLinhaColunaAlteracao
												.getConteudoColunaAnterior()
												.equals("")) {
									tabelaColunaAtualizacaoCadastral
											.setColunaValorAnterior(tabelaLinhaColunaAlteracao
													.getConteudoColunaAnterior());
								} else {
									tabelaColunaAtualizacaoCadastral
											.setColunaValorAnterior(null);
								}
								if (tabelaLinhaColunaAlteracao
										.getConteudoColunaAtual() != null
										&& !tabelaLinhaColunaAlteracao
												.getConteudoColunaAtual()
												.equals("")) {
									tabelaColunaAtualizacaoCadastral
											.setColunaValorAtual(tabelaLinhaColunaAlteracao
													.getConteudoColunaAtual());
								} else {
									tabelaColunaAtualizacaoCadastral
											.setColunaValorAtual(null);
								}
								tabelaColunaAtualizacaoCadastral
										.setIndicadorAutorizado(ConstantesSistema.INDICADOR_REGISTRO_NAO_ACEITO);
								tabelaColunaAtualizacaoCadastral
										.setTabelaAtualizacaoCadastral(tabelaAtualizacaoCadastral);
								tabelaColunaAtualizacaoCadastral
										.setTabelaColuna(tabelaLinhaColunaAlteracao
												.getTabelaColuna());
								colecaoTabelaColunaAtualizacaoCadastral
										.add(tabelaColunaAtualizacaoCadastral);
							}
						} else {
							// caso o tipo de alteração seja exclusão,
							// então cria um registro na tabela de
							// tabelaColunaAtualizacaoCadastral
							TabelaColunaAtualizacaoCadastral tabelaColunaAtualizacaoCadastral = new TabelaColunaAtualizacaoCadastral();

							tabelaColunaAtualizacaoCadastral
									.setColunaValorAnterior("" + idSubcategoria);
							tabelaColunaAtualizacaoCadastral
									.setColunaValorAtual("" + idSubcategoria);

							tabelaColunaAtualizacaoCadastral
									.setIndicadorAutorizado(ConstantesSistema.INDICADOR_REGISTRO_NAO_ACEITO);
							tabelaColunaAtualizacaoCadastral
									.setTabelaAtualizacaoCadastral(tabelaAtualizacaoCadastral);
							TabelaColuna tabelaColuna = new TabelaColuna();
							tabelaColuna
									.setId(TabelaColuna.CODIGO_SUBCATEGORIA_IMOVEL_SUBCATEGORIA_ATU_CADASTRAL);
							tabelaColunaAtualizacaoCadastral
									.setTabelaColuna(tabelaColuna);
							colecaoTabelaColunaAtualizacaoCadastral
									.add(tabelaColunaAtualizacaoCadastral);
						}

						getControladorTransacao()
								.inserirOperacaoEfetuadaAtualizacaoCadastral(
										imovelSubcategoriaAtualizacaoCadastralTxt
												.getUsuarioAcaoUsuarioHelp(),
										imovelSubcategoriaAtualizacaoCadastralTxt
												.getOperacaoEfetuada(),
										tabelaAtualizacaoCadastral,
										colecaoTabelaColunaAtualizacaoCadastral);
					}

					/**
					 * [SB 00005] Inserir Imovel Subcategoria Atualização
					 * Cadastral
					 * 
					 * @author Davi Menezes
					 * @date 09/07/2012
					 */
					if (inserirNovoRegistro) {
						if (idImovelAtualizacaoCadastral != null) {
							ImovelAtualizacaoCadastral novoImovelAtualizacaoCadastral = new ImovelAtualizacaoCadastral();
							novoImovelAtualizacaoCadastral
									.setId(idImovelAtualizacaoCadastral);
							imovelSubcategoriaAtualizacaoCadastralTxt
									.setImovelAtualizacaoCadastral(novoImovelAtualizacaoCadastral);
							imovelSubcategoriaAtualizacaoCadastralTxt
									.setUltimaAlteracao(new Date());

							getControladorUtil().inserir(
									imovelSubcategoriaAtualizacaoCadastralTxt);

							if (tabelaAtualizacaoCadastral != null) {
								tabelaAtualizacaoCadastral
										.setImovelAtualizacaoCadastral(novoImovelAtualizacaoCadastral);
								tabelaAtualizacaoCadastral
										.setUltimaAlteracao(new Date());

								getControladorUtil().inserirOuAtualizar(
										tabelaAtualizacaoCadastral);
							}
						}
					}

				} else if ("5".equals(primeiraLetra) && !indicadorExcluido) {
					// Ligação de Água
					String dadosLigacao = line.substring(1);

					ParserUtil parserDadosLigacao = new ParserUtil(dadosLigacao);

					String tipoAlteracao = parserDadosLigacao
							.obterDadoParser(1);

					if (tipoAlteracao == null || tipoAlteracao.equals("")
							|| !tipoAlteracao.equalsIgnoreCase("I")) {
						continue;
					} else {
						indicadorExcluido = false;
					}

					if (imovelAtualizacaoCadastralTxt != null) {
						// Data da Ligação de Água
						String dataLigacaoAgua = parserDadosLigacao
								.obterDadoParser(8).trim();
						if (!dataLigacaoAgua.equals("")
								&& !dataLigacaoAgua.equals("00000000")) {
							imovelAtualizacaoCadastralTxt
									.setDataLigacaoAgua(Util.formatarDataSemHora(Util
											.converteStringInvertidaSemBarraParaDate(dataLigacaoAgua)));
						}

						// Diâmetro Ligação de Água
						Integer idDiametroLigacaoAgua = Integer
								.parseInt(parserDadosLigacao.obterDadoParser(2)
										.trim());
						if (idDiametroLigacaoAgua != null) {
							LigacaoAguaDiametro ligacaoAguaDiametro = new LigacaoAguaDiametro();
							ligacaoAguaDiametro.setId(idDiametroLigacaoAgua);

							imovelAtualizacaoCadastralTxt
									.setLigacaoAguaDiametro(ligacaoAguaDiametro);
						}

						// Material Ligação de Água
						Integer idMaterialLigacaoAgua = Integer
								.parseInt(parserDadosLigacao.obterDadoParser(2)
										.trim());
						if (idMaterialLigacaoAgua != null) {
							LigacaoAguaMaterial ligacaoAguaMaterial = new LigacaoAguaMaterial();
							ligacaoAguaMaterial.setId(idMaterialLigacaoAgua);

							imovelAtualizacaoCadastralTxt
									.setLigacaoAguaMaterial(ligacaoAguaMaterial);
						}

						// Perfil Ligação de Água
						Integer idPerfilLigacaoAgua = Integer
								.parseInt(parserDadosLigacao.obterDadoParser(2)
										.trim());
						if (idPerfilLigacaoAgua != null) {
							LigacaoAguaPerfil ligacaoAguaPerfil = new LigacaoAguaPerfil();
							ligacaoAguaPerfil.setId(idPerfilLigacaoAgua);

							imovelAtualizacaoCadastralTxt
									.setLigacaoAguaPerfil(ligacaoAguaPerfil);
						}

						// Indicador de Hidrômetro
						Short indicadorHidrometro = Short
								.parseShort(parserDadosLigacao.obterDadoParser(
										1).trim());
						imovelAtualizacaoCadastralTxt
								.setIndicadorHidrometro(indicadorHidrometro);

						// Data Ligação de Esgoto
						String dataLigacaoEsgoto = parserDadosLigacao
								.obterDadoParser(8).trim();
						if (dataLigacaoEsgoto != null
								&& !dataLigacaoAgua.equals("00000000")) {
							imovelAtualizacaoCadastralTxt
									.setDataLigacaoEsgoto(Util.formatarDataSemHora(Util
											.converteStringInvertidaSemBarraParaDate(dataLigacaoEsgoto)));
						}

						// Diâmetro Ligação Esgoto
						Integer idDiametroLigacaoEsgoto = Integer
								.parseInt(parserDadosLigacao.obterDadoParser(2)
										.trim());
						if (idDiametroLigacaoEsgoto != null) {
							LigacaoEsgotoDiametro ligacaoEsgotoDiametro = new LigacaoEsgotoDiametro();
							ligacaoEsgotoDiametro
									.setId(idDiametroLigacaoEsgoto);

							imovelAtualizacaoCadastralTxt
									.setLigacaoEsgotoDiametro(ligacaoEsgotoDiametro);
						}

						// Material Ligação Esgoto
						Integer idMaterialLigacaoEsgoto = Integer
								.parseInt(parserDadosLigacao.obterDadoParser(2)
										.trim());
						if (idMaterialLigacaoEsgoto != null) {
							LigacaoEsgotoMaterial ligacaoEsgotoMaterial = new LigacaoEsgotoMaterial();
							ligacaoEsgotoMaterial
									.setId(idMaterialLigacaoEsgoto);

							imovelAtualizacaoCadastralTxt
									.setLigacaoEsgotoMaterial(ligacaoEsgotoMaterial);
						}

						// Perfil Ligação Esgoto
						Integer idPerfilLigacaoEsgoto = Integer
								.parseInt(parserDadosLigacao.obterDadoParser(2)
										.trim());
						if (idPerfilLigacaoEsgoto != null) {
							LigacaoEsgotoPerfil ligacaoEsgotoPerfil = new LigacaoEsgotoPerfil();
							ligacaoEsgotoPerfil.setId(idPerfilLigacaoEsgoto);

							imovelAtualizacaoCadastralTxt
									.setLigacaoEsgotoPerfil(ligacaoEsgotoPerfil);
						}

						// Percentual Coleta
						String percentualColeta = parserDadosLigacao
								.obterDadoParser(6);
						imovelAtualizacaoCadastralTxt
								.setPercentualColeta(Util
										.formatarMoedaRealparaBigDecimal(percentualColeta));

						this.getControladorUtil().atualizar(
								imovelAtualizacaoCadastralTxt);
					}
				}

				// line = buffer.readLine();
			}

			repositorioCadastro.atualizarArquivoTextoAtualizacaoCadstral(
					idArquivoTexto, SituacaoTransmissaoLeitura.TRANSMITIDO);

		} catch (ControladorException e) {
			sessionContext.setRollbackOnly();
			throw e;
		} catch (Exception ex) {
			ex.printStackTrace();
			System.out.println("Matrícula" + matricula);
			throw new EJBException(ex);
		} finally {
			if (buffer != null) {
				try {
					buffer.close();
				} catch (Exception e) {
				}
			}
		}
	}

	/**
	 * Gerar Arquivo Texto para Atualização Cadastral
	 * 
	 * Registro Tipo Header
	 * 
	 * @author Ana Maria
	 * @date 11/05/2009
	 * 
	 * @param imovel
	 * @throws ControladorException
	 */
	public StringBuilder gerarArquivoTextoRegistroTipoHeader(
			Integer idArquivoTexto) throws ControladorException {

		StringBuilder arquivoTextoRegistroTipoHeader = new StringBuilder();

		// TIPO DO REGISTRO
		arquivoTextoRegistroTipoHeader.append("0");

		// TIPO MOVIMENTO
		arquivoTextoRegistroTipoHeader.append(" ");

		// DATA DA GERAÇÃO
		arquivoTextoRegistroTipoHeader.append(Util
				.formatarDataSemBarraDDMMAAAA(new Date()));

		// ID DO ARQUIVO TEXTO ATUALIZACAO CADASTRAL
		arquivoTextoRegistroTipoHeader.append(Util.adicionarZerosEsquedaNumero(
				9, idArquivoTexto.toString()));

		// VERSÃO DP APLICATIVO
		arquivoTextoRegistroTipoHeader.append("01.00.00.1");

		arquivoTextoRegistroTipoHeader.append(System
				.getProperty("line.separator"));

		return arquivoTextoRegistroTipoHeader;
	}

	/**
	 * Gerar Arquivo Texto para Atualização Cadastral
	 * 
	 * Registro Tipo 01 - Dados do imóvel
	 * 
	 * @author Ana Maria
	 * @date 22/09/2008
	 * 
	 * @param imovel
	 * @throws ControladorException
	 */
	public StringBuilder gerarArquivoTextoRegistroTipo01(Integer imovel)
			throws ControladorException {

		ImovelAtualizacaoCadastral imov = null;

		imov = getControladorImovel().pesquisarImovelAtualizacaoCadastral(
				imovel);

		StringBuilder arquivoTextoRegistroTipo01 = new StringBuilder();

		// TIPO DO REGISTRO (DADOS DO IMÓVEL)
		arquivoTextoRegistroTipo01.append("1");

		// TIPO MOVIMENTO
		arquivoTextoRegistroTipo01.append(" ");

		// MATRÍCULA DO IMÓVEL
		arquivoTextoRegistroTipo01.append(Util.adicionarZerosEsquedaNumero(9,
				imov.getImovel().getId().toString()));

		// LOCALIDADE
		arquivoTextoRegistroTipo01.append(Util.adicionarZerosEsquedaNumero(3,
				imov.getIdLocalidade().toString()));

		// CÓDIGO SETOR COMERCIAL
		arquivoTextoRegistroTipo01.append(Util.adicionarZerosEsquedaNumero(3,
				String.valueOf(imov.getCodigoSetorComercial())));

		// NÚMERO QUADRA
		arquivoTextoRegistroTipo01.append(Util.adicionarZerosEsquedaNumero(3,
				String.valueOf(imov.getNumeroQuadra())));

		// LOTE
		arquivoTextoRegistroTipo01.append(Util.adicionarZerosEsquedaNumero(4,
				String.valueOf(imov.getLote())));

		// SUBLOTE
		arquivoTextoRegistroTipo01.append(Util.adicionarZerosEsquedaNumero(3,
				String.valueOf(imov.getSubLote())));

		// SEQUÊNCIA DA ROTA
		if (imov.getNumeroSequencialRota() != null
				&& !imov.getNumeroSequencialRota().equals("")) {
			arquivoTextoRegistroTipo01.append(Util.adicionarZerosEsquedaNumero(
					4, imov.getNumeroSequencialRota().toString()));
		} else {
			arquivoTextoRegistroTipo01.append(Util.adicionarZerosEsquedaNumero(
					4, ""));
		}

		// NÚMERO DE MORADORES
		if (imov.getNumeroMorador() != null
				&& !imov.getNumeroMorador().equals("")) {
			arquivoTextoRegistroTipo01.append(Util.adicionarZerosEsquedaNumero(
					4, imov.getNumeroMorador().toString()));
		} else {
			arquivoTextoRegistroTipo01.append(Util.adicionarZerosEsquedaNumero(
					4, ""));
		}

		// NOME DA CONTA
		// Foi excluido

		// CÓDIGO DO LOGRADOURO
		arquivoTextoRegistroTipo01.append(Util.adicionarZerosEsquedaNumero(9,
				imov.getIdLogradouro().toString()));

		// TIPO LOGRADOURO
		arquivoTextoRegistroTipo01.append(Util.completaString(
				imov.getDsLogradouroTipo(), 20));

		// TÍTULO LOGRADOURO
		arquivoTextoRegistroTipo01.append(Util.completaString(
				imov.getDsLogradouroTitulo(), 25));

		// NOME LOGRADOURO
		arquivoTextoRegistroTipo01.append(Util.completaString(
				imov.getDescricaoLogradouro(), 40));

		// CEP
		if (imov.getCodigoCep() != null && !imov.getCodigoCep().equals("")) {
			arquivoTextoRegistroTipo01.append(Util.adicionarZerosEsquedaNumero(
					8, imov.getCodigoCep().toString()));
		} else {
			arquivoTextoRegistroTipo01.append(Util.adicionarZerosEsquedaNumero(
					8, ""));
		}

		// BAIRRO
		if (imov.getIdBairro() != null && !imov.getIdBairro().equals("")) {
			arquivoTextoRegistroTipo01.append(Util.adicionarZerosEsquedaNumero(
					4, imov.getIdBairro().toString()));
			arquivoTextoRegistroTipo01.append(Util.completaString(
					imov.getNomeBairro(), 30));
		}

		// REFERÊNCIA
		if (imov.getIdEnderecoReferencia() != null
				&& !imov.getIdEnderecoReferencia().equals("")) {
			arquivoTextoRegistroTipo01.append(Util.adicionarZerosEsquedaNumero(
					2, imov.getIdEnderecoReferencia().toString()));
		} else {
			arquivoTextoRegistroTipo01.append(Util.adicionarZerosEsquedaNumero(
					2, ""));
		}

		// NÚMERO DO IMÓVEL
		arquivoTextoRegistroTipo01.append(Util.completaString(imov
				.getNumeroImovel().trim(), 5));

		// COMPLEMENTO
		if (imov.getComplementoEndereco() != null
				&& !imov.getComplementoEndereco().equals("")) {
			arquivoTextoRegistroTipo01.append(Util.completaString(
					imov.getComplementoEndereco(), 25));
		} else {
			arquivoTextoRegistroTipo01.append(Util.completaString("", 25));
		}

		// ÁREA CONSTRUIDA
		if (imov.getAreaConstruida() != null
				&& !imov.getAreaConstruida().equals("")) {
			arquivoTextoRegistroTipo01
					.append(Util.adicionarZerosEsquedaNumero(8, Util
							.formatarBigDecimalParaString(imov
									.getAreaConstruida())));
		} else {
			arquivoTextoRegistroTipo01.append(Util.adicionarZerosEsquedaNumero(
					8, ""));
		}

		// LIGACAO_SITUACAO_AGUA
		arquivoTextoRegistroTipo01.append(Util.adicionarZerosEsquedaNumero(2,
				imov.getIdLigacaoAguaSituacao().toString()));

		// VOLUME DO RESEVATÓRIO INFERIOR
		if (imov.getVolumeReservatorioInferior() != null
				&& !imov.getVolumeReservatorioInferior().equals("")) {
			arquivoTextoRegistroTipo01.append(Util.adicionarZerosEsquedaNumero(
					5, Util.formatarBigDecimalParaString(imov
							.getVolumeReservatorioInferior())));
		} else {
			arquivoTextoRegistroTipo01.append(Util.adicionarZerosEsquedaNumero(
					5, ""));
		}

		// VOLUME DO RESEVATÓRIO SUPERIOR
		if (imov.getVolumeReservatorioSuperior() != null
				&& !imov.getVolumeReservatorioSuperior().equals("")) {
			arquivoTextoRegistroTipo01.append(Util.adicionarZerosEsquedaNumero(
					5, Util.formatarBigDecimalParaString(imov
							.getVolumeReservatorioSuperior())));
		} else {
			arquivoTextoRegistroTipo01.append(Util.adicionarZerosEsquedaNumero(
					5, ""));
		}

		// VOLUME DA PISCINA
		if (imov.getVolumePiscina() != null) {
			arquivoTextoRegistroTipo01
					.append(Util.adicionarZerosEsquedaNumero(5, Util
							.formatarBigDecimalParaString(imov
									.getVolumePiscina())));
		} else {
			arquivoTextoRegistroTipo01.append(Util.adicionarZerosEsquedaNumero(
					5, ""));
		}

		// INDICADOR DE JARDIM
		if (imov.getIndicadorJardim() != null
				&& !imov.getIndicadorJardim().equals("")) {
			arquivoTextoRegistroTipo01.append(Util.adicionarZerosEsquedaNumero(
					1, imov.getIndicadorJardim().toString()));
		} else {
			arquivoTextoRegistroTipo01.append(Util.adicionarZerosEsquedaNumero(
					1, ""));
		}

		// PAVIMENTAÇÃO CALÇADA
		if (imov.getIdPavimentoCalcada() != null
				&& !imov.getIdPavimentoCalcada().equals("")) {
			arquivoTextoRegistroTipo01.append(Util.adicionarZerosEsquedaNumero(
					2, imov.getIdPavimentoCalcada().toString()));
		} else {
			arquivoTextoRegistroTipo01.append(Util.adicionarZerosEsquedaNumero(
					2, ""));
		}

		// PAVIMENTAÇÃO RUA
		if (imov.getIdPavimentoRua() != null
				&& !imov.getIdPavimentoRua().equals("")) {
			arquivoTextoRegistroTipo01.append(Util.adicionarZerosEsquedaNumero(
					2, imov.getIdPavimentoRua().toString()));
		} else {
			arquivoTextoRegistroTipo01.append(Util.adicionarZerosEsquedaNumero(
					2, ""));
		}

		// FONTE DE ABASTECIMENTO
		if (imov.getIdFonteAbastecimento() != null
				&& !imov.getIdFonteAbastecimento().equals("")) {
			arquivoTextoRegistroTipo01.append(Util.adicionarZerosEsquedaNumero(
					2, imov.getIdFonteAbastecimento().toString()));
		} else {
			arquivoTextoRegistroTipo01.append(Util.adicionarZerosEsquedaNumero(
					2, ""));
		}

		// POÇO
		if (imov.getIdPocoTipo() != null && !imov.getIdPocoTipo().equals("")) {
			arquivoTextoRegistroTipo01.append(Util.adicionarZerosEsquedaNumero(
					2, imov.getIdPocoTipo().toString()));
		} else {
			arquivoTextoRegistroTipo01.append(Util.adicionarZerosEsquedaNumero(
					2, ""));
		}

		// NÚMERO DE PONTOS
		if (imov.getNumeroPontosUtilizacao() != null
				&& !imov.getNumeroPontosUtilizacao().equals("")) {
			arquivoTextoRegistroTipo01.append(Util.adicionarZerosEsquedaNumero(
					4, imov.getNumeroPontosUtilizacao().toString()));
		} else {
			arquivoTextoRegistroTipo01.append(Util.adicionarZerosEsquedaNumero(
					4, ""));
		}

		// LIGACAO_SITUACAO_ESGOTO
		arquivoTextoRegistroTipo01.append(Util.adicionarZerosEsquedaNumero(2,
				imov.getIdLigacaoEsgotoSituacao().toString()));

		// PERFIL DO IMÓVEL
		arquivoTextoRegistroTipo01.append(Util.adicionarZerosEsquedaNumero(2,
				imov.getIdImovelPerfil().toString()));

		// DESPEJO
		if (imov.getIdDespejo() != null && !imov.getIdDespejo().equals("")) {
			arquivoTextoRegistroTipo01.append(Util.adicionarZerosEsquedaNumero(
					1, imov.getIdDespejo().toString()));
		} else {
			arquivoTextoRegistroTipo01.append(Util.adicionarZerosEsquedaNumero(
					1, ""));
		}

		// COORDENADAS UTM X
		if (imov.getCoordenadaX() != null && !imov.getCoordenadaX().equals("")) {
			arquivoTextoRegistroTipo01
					.append(Util.adicionarZerosEsquedaNumero(5,
							Util.formatarBigDecimalParaString(imov
									.getCoordenadaX())));
		} else {
			arquivoTextoRegistroTipo01.append(Util.adicionarZerosEsquedaNumero(
					5, ""));
		}

		// COORDENADAS UTM Y
		if (imov.getCoordenadaY() != null && !imov.getCoordenadaY().equals("")) {
			arquivoTextoRegistroTipo01
					.append(Util.adicionarZerosEsquedaNumero(5,
							Util.formatarBigDecimalParaString(imov
									.getCoordenadaY())));
		} else {
			arquivoTextoRegistroTipo01.append(Util.adicionarZerosEsquedaNumero(
					5, ""));
		}

		// IMÓVEL PRINCIPAL
		if (imov.getCodigoImovelPrincipal() != null
				&& !imov.getCodigoImovelPrincipal().equals("")) {
			arquivoTextoRegistroTipo01.append(Util.adicionarZerosEsquedaNumero(
					9, imov.getCodigoImovelPrincipal().toString()));
		} else {
			arquivoTextoRegistroTipo01.append(Util.adicionarZerosEsquedaNumero(
					9, ""));
		}

		// Leitura inicial hidrômetro
		if (imov.getNumeroLeituraInstalacaoHidrometro() != null) {
			arquivoTextoRegistroTipo01.append(Util.adicionarZerosEsquedaNumero(
					6, imov.getNumeroLeituraInstalacaoHidrometro().toString()));
		} else {
			arquivoTextoRegistroTipo01.append(Util.adicionarZerosEsquedaNumero(
					6, ""));
		}

		// Capacidade hidrômetro
		if (imov.getIdCapacidadeHidrometro() != null) {
			arquivoTextoRegistroTipo01.append(Util.adicionarZerosEsquedaNumero(
					2, imov.getIdCapacidadeHidrometro().toString()));
		} else {
			arquivoTextoRegistroTipo01.append(Util.adicionarZerosEsquedaNumero(
					2, ""));
		}

		// Marca hidrômetro
		if (imov.getIdMarcaHidrometro() != null) {
			arquivoTextoRegistroTipo01.append(Util.adicionarZerosEsquedaNumero(
					2, imov.getIdMarcaHidrometro().toString()));
		} else {
			arquivoTextoRegistroTipo01.append(Util.adicionarZerosEsquedaNumero(
					2, ""));
		}

		// Local hidrômetro
		if (imov.getIdLocalInstalacaoHidrometro() != null) {
			arquivoTextoRegistroTipo01.append(Util.adicionarZerosEsquedaNumero(
					2, imov.getIdLocalInstalacaoHidrometro().toString()));
		} else {
			arquivoTextoRegistroTipo01.append(Util.adicionarZerosEsquedaNumero(
					2, ""));
		}

		// Proteção hidrômetro
		if (imov.getIdProtecaoHidrometro() != null) {
			arquivoTextoRegistroTipo01.append(Util.adicionarZerosEsquedaNumero(
					2, imov.getIdProtecaoHidrometro().toString()));
		} else {
			arquivoTextoRegistroTipo01.append(Util.adicionarZerosEsquedaNumero(
					2, ""));
		}

		// Número hidrômetro
		if (imov.getNumeroHidrometro() != null) {
			arquivoTextoRegistroTipo01.append(Util.completaString(imov
					.getNumeroHidrometro().toString(), 10));
		} else {
			arquivoTextoRegistroTipo01.append(Util.completaString("", 10));
		}

		// Cavalete hidrômetro
		if (imov.getIndicadorCavalete() != null) {
			arquivoTextoRegistroTipo01.append(Util.adicionarZerosEsquedaNumero(
					1, imov.getIndicadorCavalete().toString()));
		} else {
			arquivoTextoRegistroTipo01.append(Util.adicionarZerosEsquedaNumero(
					1, ""));
		}

		// Num. IPTU
		if (imov.getNumeroIptu() != null && !imov.getNumeroIptu().equals("")) {
			arquivoTextoRegistroTipo01.append(Util.adicionarZerosEsquedaNumero(
					20, imov.getNumeroIptu().toString()));
		} else {
			arquivoTextoRegistroTipo01.append(Util.adicionarZerosEsquedaNumero(
					20, ""));
		}

		// Num. Contrato Cia. Eletrecidade
		if (imov.getNumeroContratoEnergia() != null
				&& !imov.getNumeroContratoEnergia().equals("")) {
			arquivoTextoRegistroTipo01.append(Util.adicionarZerosEsquedaNumero(
					10, imov.getNumeroContratoEnergia().toString()));
		} else {
			arquivoTextoRegistroTipo01.append(Util.adicionarZerosEsquedaNumero(
					10, ""));
		}

		// Medidor de Energia
		arquivoTextoRegistroTipo01.append(Util.completaString("", 10));

		// Ocorrência cadastro
		arquivoTextoRegistroTipo01.append(Util.adicionarZerosEsquedaNumero(4,
				""));

		// Anormalidade para o elo
		arquivoTextoRegistroTipo01.append(Util.adicionarZerosEsquedaNumero(6,
				""));

		// Outras informações
		arquivoTextoRegistroTipo01.append(Util.completaString("", 100));

		// Entrevistado
		arquivoTextoRegistroTipo01.append(Util.completaString("", 50));

		// Data/Hora da Entrevista
		arquivoTextoRegistroTipo01.append(Util.adicionarZerosEsquedaNumero(14,
				""));

		// CÓDIGO TIPO LOGRADOURO
		if (imov.getIdLogradouroTipo() != null
				&& !imov.getIdLogradouroTipo().equals("")) {
			arquivoTextoRegistroTipo01.append(Util.adicionarZerosEsquedaNumero(
					3, imov.getIdLogradouroTipo().toString()));
		} else {
			arquivoTextoRegistroTipo01.append(Util.adicionarZerosEsquedaNumero(
					3, ""));
		}

		// CÓDIGO TÍTULO LOGRADOURO
		if (imov.getIdLogradouroTitulo() != null
				&& !imov.getIdLogradouroTitulo().equals("")) {
			arquivoTextoRegistroTipo01.append(Util.adicionarZerosEsquedaNumero(
					3, imov.getIdLogradouroTitulo().toString()));
		} else {
			arquivoTextoRegistroTipo01.append(Util.adicionarZerosEsquedaNumero(
					3, ""));
		}

		// CÓDIGO DO MUNICÍPIO
		arquivoTextoRegistroTipo01.append(Util.adicionarZerosEsquedaNumero(4,
				imov.getIdMunicipio().toString()));

		// NOME MUNICÍPIO
		arquivoTextoRegistroTipo01.append(Util.completaString(
				imov.getNomeMunicipio(), 30));

		// CÓDIGO DA UNIDADE FEDERAÇÃO
		arquivoTextoRegistroTipo01.append(Util.adicionarZerosEsquedaNumero(2,
				imov.getIdUinidadeFederacao().toString()));

		// SIGLA DA UNIDADE FEDERAÇÃO
		arquivoTextoRegistroTipo01.append(Util.completaString(
				imov.getDsUFSiglaMunicipio(), 2));

		arquivoTextoRegistroTipo01.append(System.getProperty("line.separator"));

		return arquivoTextoRegistroTipo01;

	}

	/**
	 * Gerar Arquivo Texto para Atualização Cadastral
	 * 
	 * Registro Tipo 02 - Dados do(s) cliente(s)
	 * 
	 * @author Ana Maria
	 * @date 22/09/2008
	 * 
	 * @param imovel
	 * @throws ControladorException
	 */
	public StringBuilder gerarArquivoTextoRegistroTipo02(
			ClienteAtualizacaoCadastral cliente, Integer idImovel)
			throws ControladorException {

		StringBuilder arquivoTextoRegistroTipo02 = new StringBuilder();

		// TIPO DO REGISTRO (DADOS DO CLIENTE)
		arquivoTextoRegistroTipo02.append("2");

		// TIPO MOVIMENTO
		arquivoTextoRegistroTipo02.append(" ");

		// CLIENTE RELAÇÃO TIPO
		if (cliente.getIdClienteRelacaoTipo() != null
				&& !cliente.getIdClienteRelacaoTipo().equals("")) {
			arquivoTextoRegistroTipo02.append(Util.adicionarZerosEsquedaNumero(
					1, cliente.getIdClienteRelacaoTipo().toString()));
		} else {
			arquivoTextoRegistroTipo02.append(Util.adicionarZerosEsquedaNumero(
					1, ""));
		}

		// CÓDIGO DO CLIENTE
		arquivoTextoRegistroTipo02.append(Util.adicionarZerosEsquedaNumero(9,
				cliente.getIdCliente().toString()));

		// NOME DO CLIENTE
		arquivoTextoRegistroTipo02.append(Util.completaString(
				cliente.getNomeCliente(), 50));

		// CLIENTE TIPO
		arquivoTextoRegistroTipo02.append(Util.adicionarZerosEsquedaNumero(4,
				cliente.getIdClienteTipo().toString()));

		// CPF OU CNPJ
		if (cliente.getCpfCnpj() != null && !cliente.getCpfCnpj().equals("")) {
			arquivoTextoRegistroTipo02.append(Util.completaString(cliente
					.getCpfCnpj().toString(), 14));
		} else {
			arquivoTextoRegistroTipo02.append(Util.completaString("", 14));
		}

		// RG
		if (cliente.getRg() != null && !cliente.getRg().equals("")) {
			arquivoTextoRegistroTipo02.append(Util.completaString(cliente
					.getRg().toString(), 13));
		} else {
			arquivoTextoRegistroTipo02.append(Util.completaString("", 13));
		}

		// DATA DE EMISSÂO
		if (cliente.getDataEmissaoRg() != null
				&& !cliente.getDataEmissaoRg().equals("")) {
			arquivoTextoRegistroTipo02.append(Util.adicionarZerosEsquedaNumero(
					8, Util.formatarDataSemBarraDDMMAAAA(cliente
							.getDataEmissaoRg())));
		} else {
			arquivoTextoRegistroTipo02.append(Util.adicionarZerosEsquedaNumero(
					8, ""));
		}

		// ORG EXPEDITOR
		if (cliente.getDsAbreviadaOrgaoExpedidorRg() != null
				&& !cliente.getDsAbreviadaOrgaoExpedidorRg().equals("")) {
			arquivoTextoRegistroTipo02.append(Util.completaString(
					cliente.getDsAbreviadaOrgaoExpedidorRg(), 6));
		} else {
			arquivoTextoRegistroTipo02.append(Util.completaString("", 6));
		}

		// UF
		if (cliente.getDsUFSiglaOrgaoExpedidorRg() != null
				&& !cliente.getDsUFSiglaOrgaoExpedidorRg().equals("")) {
			arquivoTextoRegistroTipo02.append(Util.completaString(
					cliente.getDsUFSiglaOrgaoExpedidorRg(), 2));
		} else {
			arquivoTextoRegistroTipo02.append(Util.completaString("", 2));
		}

		// DATA DE NASCIMENTO
		if (cliente.getDataNascimento() != null
				&& !cliente.getDataNascimento().equals("")) {
			arquivoTextoRegistroTipo02.append(Util.adicionarZerosEsquedaNumero(
					8, Util.formatarDataSemBarraDDMMAAAA(cliente
							.getDataNascimento())));
		} else {
			arquivoTextoRegistroTipo02.append(Util.adicionarZerosEsquedaNumero(
					8, ""));
		}

		// PROFISSÃO
		if (cliente.getIdProfissao() != null
				&& !cliente.getIdProfissao().equals("")) {
			arquivoTextoRegistroTipo02.append(Util.adicionarZerosEsquedaNumero(
					4, cliente.getIdProfissao().toString()));
		} else if (cliente.getIdRamoAtividade() != null
				&& !cliente.getIdRamoAtividade().equals("")) {
			arquivoTextoRegistroTipo02.append(Util.adicionarZerosEsquedaNumero(
					4, cliente.getIdRamoAtividade().toString()));
		} else {
			arquivoTextoRegistroTipo02.append(Util.adicionarZerosEsquedaNumero(
					4, ""));
		}

		// PESSOA SEXO
		if (cliente.getIdPessoaSexo() != null
				&& !cliente.getIdPessoaSexo().equals("")) {
			arquivoTextoRegistroTipo02.append(Util.adicionarZerosEsquedaNumero(
					1, cliente.getIdPessoaSexo().toString()));
		} else {
			arquivoTextoRegistroTipo02.append(Util.adicionarZerosEsquedaNumero(
					1, ""));
		}

		// NOME DA MÃE
		if (cliente.getNomeMae() != null && !cliente.getNomeMae().equals("")) {
			arquivoTextoRegistroTipo02.append(Util.completaString(
					cliente.getNomeMae(), 50));
		} else {
			arquivoTextoRegistroTipo02.append(Util.completaString("", 50));
		}

		// INDICADOR DE USO
		arquivoTextoRegistroTipo02.append(Util.adicionarZerosEsquedaNumero(1,
				cliente.getIndicadorUso().toString()));

		// TIPO DE ENDEREÇO
		arquivoTextoRegistroTipo02.append(Util.adicionarZerosEsquedaNumero(2,
				cliente.getIdEnderecoTipo().toString()));

		// CÓDIGO DO LOGRADOURO
		arquivoTextoRegistroTipo02.append(Util.adicionarZerosEsquedaNumero(9,
				cliente.getIdLogradouro().toString()));

		// TIPO LOGRADOURO
		arquivoTextoRegistroTipo02.append(Util.completaString(
				cliente.getDsLogradouroTipo(), 20));

		// TÍTULO LOGRADOURO
		arquivoTextoRegistroTipo02.append(Util.completaString(
				cliente.getDsLogradouroTitulo(), 25));

		// NOME LOGRADOURO
		arquivoTextoRegistroTipo02.append(Util.completaString(
				cliente.getDescricaoLogradouro(), 40));

		// CEP
		if (cliente.getCodigoCep() != null
				&& !cliente.getCodigoCep().equals("")) {
			arquivoTextoRegistroTipo02.append(Util.adicionarZerosEsquedaNumero(
					8, cliente.getCodigoCep().toString()));
		} else {
			arquivoTextoRegistroTipo02.append(Util.adicionarZerosEsquedaNumero(
					8, ""));
		}

		// BAIRRO
		if (cliente.getIdBairro() != null && !cliente.getIdBairro().equals("")) {
			arquivoTextoRegistroTipo02.append(Util.adicionarZerosEsquedaNumero(
					4, cliente.getIdBairro().toString()));
			arquivoTextoRegistroTipo02.append(Util.completaString(
					cliente.getNomeBairro(), 30));
		} else {
			arquivoTextoRegistroTipo02.append(Util.adicionarZerosEsquedaNumero(
					4, ""));
			arquivoTextoRegistroTipo02.append(Util.completaString("", 30));
		}

		// REFERÊNCIA
		if (cliente.getIdEnderecoReferencia() != null
				&& !cliente.getIdEnderecoReferencia().equals("")) {
			arquivoTextoRegistroTipo02.append(Util.adicionarZerosEsquedaNumero(
					2, cliente.getIdEnderecoReferencia().toString()));
		} else {
			arquivoTextoRegistroTipo02.append(Util.adicionarZerosEsquedaNumero(
					2, ""));
		}

		// NÚMERO
		if (cliente.getNumeroImovel() != null
				&& !cliente.getNumeroImovel().trim().equals("")) {
			arquivoTextoRegistroTipo02.append(Util.completaString(
					cliente.getNumeroImovel(), 5));
		} else {
			arquivoTextoRegistroTipo02.append(Util.completaString("", 5));
		}

		// COMPLEMENTO
		if (cliente.getComplementoEndereco() != null
				&& !cliente.getComplementoEndereco().equals("")) {
			arquivoTextoRegistroTipo02.append(Util.completaString(
					cliente.getComplementoEndereco(), 25));
		} else {
			arquivoTextoRegistroTipo02.append(Util.completaString("", 25));
		}

		// E_MAIL
		if (cliente.getEmail() != null && !cliente.getEmail().equals("")) {
			arquivoTextoRegistroTipo02.append(Util.completaString(
					cliente.getEmail(), 40));
		} else {
			arquivoTextoRegistroTipo02.append(Util.completaString("", 40));
		}

		// CNAE
		arquivoTextoRegistroTipo02.append(Util.adicionarZerosEsquedaNumero(7,
				""));

		// IMOVEL
		arquivoTextoRegistroTipo02.append(Util.adicionarZerosEsquedaNumero(9,
				idImovel.toString()));

		// CÓDIGO TIPO LOGRADOURO
		if (cliente.getIdLogradouroTipo() != null
				&& !cliente.getIdLogradouroTipo().equals("")) {
			arquivoTextoRegistroTipo02.append(Util.adicionarZerosEsquedaNumero(
					3, cliente.getIdLogradouroTipo().toString()));
		} else {
			arquivoTextoRegistroTipo02.append(Util.adicionarZerosEsquedaNumero(
					3, ""));
		}

		// CÓDIGO TÍTULO LOGRADOURO
		if (cliente.getIdLogradouroTitulo() != null
				&& !cliente.getIdLogradouroTitulo().equals("")) {
			arquivoTextoRegistroTipo02.append(Util.adicionarZerosEsquedaNumero(
					3, cliente.getIdLogradouroTitulo().toString()));
		} else {
			arquivoTextoRegistroTipo02.append(Util.adicionarZerosEsquedaNumero(
					3, ""));
		}

		// CÓDIGO DO MUNICÍPIO
		arquivoTextoRegistroTipo02.append(Util.adicionarZerosEsquedaNumero(4,
				cliente.getIdMunicipio().toString()));

		// NOME MUNICÍPIO
		arquivoTextoRegistroTipo02.append(Util.completaString(
				cliente.getNomeMunicipio(), 30));

		// CÓDIGO DA UNIDADE FEDERAÇÃO
		arquivoTextoRegistroTipo02.append(Util.adicionarZerosEsquedaNumero(2,
				cliente.getIdUinidadeFederacao().toString()));

		// SIGLA DA UNIDADE FEDERAÇÃO
		arquivoTextoRegistroTipo02.append(Util.completaString(
				cliente.getDsUFSiglaMunicipio(), 2));

		arquivoTextoRegistroTipo02.append(System.getProperty("line.separator"));

		return arquivoTextoRegistroTipo02;

	}

	/**
	 * Gerar Arquivo Texto para Atualização Cadastral
	 * 
	 * Registro Tipo 03 - Dados do(s) telefone(s)
	 * 
	 * @author Ana Maria
	 * @date 22/09/2008
	 * 
	 * @param imovel
	 * @throws ControladorException
	 */
	public StringBuilder gerarArquivoTextoRegistroTipo03(
			Collection colecaoClienteFone, Integer idImovel, Integer idCliente)
			throws ControladorException {

		StringBuilder arquivoTextoRegistroTipo03 = new StringBuilder();

		Iterator clienteFoneIterator = colecaoClienteFone.iterator();
		while (clienteFoneIterator.hasNext()) {

			ClienteFoneAtualizacaoCadastral clienteFone = (ClienteFoneAtualizacaoCadastral) clienteFoneIterator
					.next();
			// TIPO DO REGISTRO
			arquivoTextoRegistroTipo03.append("3");

			// TIPO MOVIMENTO
			arquivoTextoRegistroTipo03.append(" ");

			// TIPO DE TELEFONE
			arquivoTextoRegistroTipo03.append(Util.adicionarZerosEsquedaNumero(
					2, clienteFone.getIdFoneTipo().toString()));

			// DDD
			if (clienteFone.getDdd() != null
					&& !clienteFone.getDdd().equals("")) {
				arquivoTextoRegistroTipo03.append(Util
						.adicionarZerosEsquedaNumero(2, clienteFone.getDdd()
								.toString()));
			} else {
				arquivoTextoRegistroTipo03.append(Util
						.adicionarZerosEsquedaNumero(2, ""));
			}

			// NÚMERO DO TELEFONE
			if (clienteFone.getTelefone() != null
					&& !clienteFone.getTelefone().equals("")) {
				arquivoTextoRegistroTipo03.append(Util
						.adicionarZerosEsquedaNumero(8, Util.truncarString(
								clienteFone.getTelefone().toString(), 8)));
			} else {
				arquivoTextoRegistroTipo03.append(Util
						.adicionarZerosEsquedaNumero(8, ""));
			}

			// RAMAL
			if (clienteFone.getRamal() != null
					&& !clienteFone.getRamal().equals("")) {
				arquivoTextoRegistroTipo03.append(Util
						.adicionarZerosEsquedaNumero(4, clienteFone.getRamal()
								.toString()));
			} else {
				arquivoTextoRegistroTipo03.append(Util
						.adicionarZerosEsquedaNumero(4, ""));
			}

			// CLIENTE
			arquivoTextoRegistroTipo03.append(Util.adicionarZerosEsquedaNumero(
					9, idCliente.toString()));

			// INDICADOR FONE PARÃO (1 posição)
			arquivoTextoRegistroTipo03.append(clienteFone
					.getIndicadorFonePadrao() != null ? clienteFone
					.getIndicadorFonePadrao() : 2);

			arquivoTextoRegistroTipo03.append(System
					.getProperty("line.separator"));
		}

		return arquivoTextoRegistroTipo03;

	}

	/**
	 * Gerar Arquivo Texto para Atualização Cadastral
	 * 
	 * Registro Tipo 04 - Dados Economias e subcategoria
	 * 
	 * @author Ana Maria
	 * @date 23/09/2008
	 * 
	 * @param imovel
	 * @throws ControladorException
	 */
	public StringBuilder gerarArquivoTextoRegistroTipo04(
			Collection colecaoImovelSubcategoria, Integer idImovel)
			throws ControladorException {

		StringBuilder arquivoTextoRegistroTipo04 = new StringBuilder();

		Iterator imovelSubcategoriaIterator = colecaoImovelSubcategoria
				.iterator();
		while (imovelSubcategoriaIterator.hasNext()) {

			ImovelSubcategoriaAtualizacaoCadastral imovelSubcategoria = (ImovelSubcategoriaAtualizacaoCadastral) imovelSubcategoriaIterator
					.next();

			// TIPO DO REGISTRO
			arquivoTextoRegistroTipo04.append("4");

			// TIPO MOVIMENTO
			arquivoTextoRegistroTipo04.append(" ");

			// CÓDIGO DA SUBCATEGORIA
			arquivoTextoRegistroTipo04.append(Util.adicionarZerosEsquedaNumero(
					2, imovelSubcategoria.getIdSubcategoria().toString()));

			// DESCRIÇÃO DA SUBCATEGORIA
			arquivoTextoRegistroTipo04.append(Util.completaString(
					imovelSubcategoria.getDescricaoSubcategoria(), 50));

			// QTD DE ECONOMIAS
			arquivoTextoRegistroTipo04.append(Util.adicionarZerosEsquedaNumero(
					4, new Integer(imovelSubcategoria.getQuantidadeEconomias())
							.toString()));

			// CÓDIGO DA CATEGORIA
			arquivoTextoRegistroTipo04.append(Util.adicionarZerosEsquedaNumero(
					2, imovelSubcategoria.getIdCategoria().toString()));

			// DESCRIÇÃO DA CATEGORIA
			arquivoTextoRegistroTipo04.append(Util.completaString(
					imovelSubcategoria.getDescricaoCategoria(), 15));

			// IMOVEL
			arquivoTextoRegistroTipo04.append(Util.adicionarZerosEsquedaNumero(
					9, idImovel.toString()));

			arquivoTextoRegistroTipo04.append(System
					.getProperty("line.separator"));

		}
		return arquivoTextoRegistroTipo04;
	}

	/**
	 * Gerar Arquivo Texto para Atualização Cadastral
	 * 
	 * Registro Tipo Trailer
	 * 
	 * @author Ana Maria
	 * @date 11/05/2009
	 * 
	 * @param imovel
	 * @throws ControladorException
	 */
	public StringBuilder gerarArquivoTextoRegistroTipoTrailer(
			Integer qtdRegistro) throws ControladorException {

		qtdRegistro = qtdRegistro + 1;

		StringBuilder arquivoTextoRegistroTipoHeader = new StringBuilder();

		// TIPO DO REGISTRO
		arquivoTextoRegistroTipoHeader.append("9");

		// TIPO MOVIMENTO
		arquivoTextoRegistroTipoHeader.append(" ");

		// TOTAL DE REGISTROS GRAVADOS
		arquivoTextoRegistroTipoHeader.append(Util.adicionarZerosEsquedaNumero(
				6, qtdRegistro.toString()));

		return arquivoTextoRegistroTipoHeader;
	}

	/**
	 * 
	 * 
	 * @author bruno
	 * @date 12/01/2009
	 * 
	 * @param indicadorTipoFeriado
	 * @param anoOrigemFeriado
	 * @param anoDestinoFeriado
	 */
	public void espelharFeriados(String indicadorTipoFeriado,
			String anoOrigemFeriado, String anoDestinoFeriado)
			throws ControladorException {

		try {
			// Realizamos a pesquisa para os feriados nacionais
			Collection<NacionalFeriado> nacionais = null;

			// Verificamos de o ano de origem e o ano de destino são iguais
			if (Integer.parseInt(anoDestinoFeriado) <= Integer
					.parseInt(anoOrigemFeriado)) {
				throw new ControladorException(
						"atencao.ano_origem_e_destino_iguais");
			}

			if (indicadorTipoFeriado.equals("1")
					|| indicadorTipoFeriado.equals("3")) {
				// Excluimos os feriados
				repositorioCadastro.excluirFeriadosNacionais(anoDestinoFeriado);

				nacionais = repositorioCadastro
						.pesquisarFeriadosNacionais(anoOrigemFeriado);

				for (NacionalFeriado nacional : nacionais) {
					// [FS0003] - Verificar existência do feriado
					FiltroNacionalFeriado filtro = new FiltroNacionalFeriado();

					filtro.adicionarParametro(new ParametroSimples(
							FiltroNacionalFeriado.NOME, nacional.getDescricao()));

					Calendar c = GregorianCalendar.getInstance();
					c.setTime(nacional.getData());
					c.set(Calendar.YEAR, Integer.parseInt(anoDestinoFeriado));

					filtro.adicionarParametro(new ParametroSimples(
							FiltroNacionalFeriado.DATA, c.getTime()));

					Collection<NacionalFeriado> colFeriadoEncontrado = repositorioUtil
							.pesquisar(filtro, NacionalFeriado.class.getName());

					if (colFeriadoEncontrado != null
							&& colFeriadoEncontrado.size() > 0) {
						throw new ControladorException(
								"atencao.nacional_feriado_com_data_existente");
					}

					// Colocamos a data do feriado com 1 ano na frente
					nacional.setData(c.getTime());
					nacional.setUltimaAlteracao(new Date());
				}
			}

			// Realizamos a pesquisa para os feriados Municipais
			Collection<MunicipioFeriado> municipais = null;

			if (indicadorTipoFeriado.equals("2")
					|| indicadorTipoFeriado.equals("3")) {

				// Excluimos os feriados
				repositorioCadastro
						.excluirFeriadosMunicipais(anoDestinoFeriado);

				municipais = repositorioCadastro
						.pesquisarFeriadosMunicipais(anoOrigemFeriado);

				for (MunicipioFeriado municipal : municipais) {
					// [FS0003] - Verificar existência do feriado por descrição
					FiltroMunicipioFeriado filtro = new FiltroMunicipioFeriado();

					filtro.adicionarParametro(new ParametroSimples(
							FiltroMunicipioFeriado.NOME, municipal
									.getDescricaoFeriado()));

					Calendar c = GregorianCalendar.getInstance();
					c.setTime(municipal.getDataFeriado());
					c.set(Calendar.YEAR, Integer.parseInt(anoDestinoFeriado));

					filtro.adicionarParametro(new ParametroSimples(
							FiltroMunicipioFeriado.DATA, c.getTime()));

					Collection<MunicipioFeriado> colFeriadoEncontrado = repositorioUtil
							.pesquisar(filtro, MunicipioFeriado.class.getName());

					if (colFeriadoEncontrado != null
							&& colFeriadoEncontrado.size() > 0) {
						throw new ControladorException(
								"atencao.municipio_feriado_com_data_existente");
					}

					municipal.setDataFeriado(c.getTime());
					municipal.setUltimaAlteracao(new Date());
				}
			}

			// [FS0010] Verificar existencia de feriados para o ano de origem
			if ((indicadorTipoFeriado.equals("1") && (nacionais == null || nacionais
					.size() == 0))
					|| (indicadorTipoFeriado.equals("2") && (municipais == null || municipais
							.size() == 0))
					|| (indicadorTipoFeriado.equals("3") && ((nacionais == null || nacionais
							.size() == 0) || (nacionais == null || nacionais
							.size() == 0)))) {
				throw new ControladorException(
						"atencao.ano_origem_sem_feriados");
			}

			// Inserimos os dados
			if (nacionais != null) {
				for (NacionalFeriado nacional : nacionais) {
					repositorioUtil.inserir(nacional);
				}
			}

			if (municipais != null) {
				for (MunicipioFeriado municipal : municipais) {
					repositorioUtil.inserir(municipal);
				}
			}
		} catch (ErroRepositorioException e) {
			throw new ControladorException("erro.sistema", e);
		}
	}

	/**
	 * [UC0880] - Gerar Movimento de Extensao de Contas em Cobranca por Empresa
	 * 
	 * @author Rômulo Aurélio
	 * @date 09/02/2009
	 * 
	 * @param idRota
	 * @param anoMesReferencia
	 * @return boolean
	 * @throws ControladorException
	 */
	public Collection pesquisarLocalidades() throws ControladorException {

		Collection retorno = null;

		try {
			retorno = repositorioCadastro.pesquisarLocalidades();
		} catch (ErroRepositorioException e) {
			throw new ControladorException("erro.sistema", e);
		}

		return retorno;

	}

	/**
	 * [UC0890]Consultar Arquivo Texto Atualização Cadastral
	 * 
	 * @author Ana Maria
	 * @date 04/03/2009
	 * 
	 * @return Collection
	 * @throws ControladorException
	 */
	public Collection pesquisarArquivoTextoAtualizacaoCadastro(
			String idEmpresa, String idLocalidade, String idAgenteComercial,
			String idSituacaoTransmissao) throws ControladorException {

		Collection retorno = new ArrayList();

		Collection<Object[]> colecaoPesquisa = null;

		try {
			colecaoPesquisa = this.repositorioCadastro
					.pesquisarArquivoTextoAtualizacaoCadastro(idEmpresa,
							idLocalidade, idAgenteComercial,
							idSituacaoTransmissao);
		} catch (ErroRepositorioException e) {
			throw new ControladorException("erro.sistema", e);
		}

		if (colecaoPesquisa != null && !colecaoPesquisa.isEmpty()) {

			Iterator itera = colecaoPesquisa.iterator();

			while (itera.hasNext()) {
				Object[] objeto = (Object[]) itera.next();

				ArquivoTextoAtualizacaoCadastral arquivoTexto = new ArquivoTextoAtualizacaoCadastral();

				arquivoTexto.setId((Integer) objeto[0]);
				if (objeto[1] != null) {
					Localidade loc = new Localidade();
					loc.setId((Integer) objeto[1]);
					arquivoTexto.setLocalidade(loc);
				}
				arquivoTexto.setCodigoSetorComercial((Integer) objeto[2]);
				arquivoTexto.setCodigoRota((Integer) objeto[3]);
				arquivoTexto.setDescricaoArquivo((String) objeto[4]);
				arquivoTexto.setQuantidadeImovel((Integer) objeto[5]);
				Leiturista leit = new Leiturista();
				if (objeto[6] != null) {
					Cliente clie = new Cliente();
					clie.setNome((String) objeto[6]);
					leit.setCliente(clie);
				}
				if (objeto[7] != null) {
					Funcionario funcionario = new Funcionario();
					funcionario.setNome((String) objeto[7]);
					leit.setFuncionario(funcionario);
				}
				SituacaoTransmissaoLeitura situacao = new SituacaoTransmissaoLeitura();
				situacao.setDescricaoSituacao((String) objeto[8]);
				arquivoTexto.setSituacaoTransmissaoLeitura(situacao);
				arquivoTexto.setLeiturista(leit);

				retorno.add(arquivoTexto);
			}
		}

		return retorno;
	}

	/**
	 * [UC0890]Consultar Arquivo Texto Atualização Cadastral
	 * 
	 * @author Ana Maria
	 * @date 04/03/2009
	 * 
	 * @return Collection
	 * @throws ControladorException
	 */
	public ArquivoTextoAtualizacaoCadastral pesquisarArquivoTextoAtualizacaoCadastro(
			String idArquivoTxt) throws ControladorException {

		ArquivoTextoAtualizacaoCadastral retorno = null;

		try {
			retorno = this.repositorioCadastro
					.pesquisarArquivoTextoAtualizacaoCadastro(idArquivoTxt);
		} catch (ErroRepositorioException e) {
			throw new ControladorException("erro.sistema", e);
		}

		return retorno;
	}

	/**
	 * 
	 * [UC0890]Consultar Arquivo Texto Atualização Cadastral
	 * 
	 * @author Ana Maria
	 * @date 05/03/2009
	 * 
	 * @return void
	 * @throws ControladorException
	 */
	public void atualizarArquivoTextoAtualizacaoCadstral(Integer idArquivoTxt)
			throws ControladorException {

		try {
			this.repositorioCadastro.atualizarArquivoTextoAtualizacaoCadstral(
					idArquivoTxt, SituacaoTransmissaoLeitura.EM_CAMPO);
		} catch (ErroRepositorioException e) {
			throw new ControladorException("erro.sistema", e);
		}
	}

	/**
	 * Método para verificar o Cliente é um funcionário
	 * 
	 * @author Vinicius Medeiros
	 * @date 08/04/2009
	 * 
	 * @param idCliente
	 * @return
	 * @throws ControladorException
	 */

	public Integer clienteSelecionadoFuncionario(Integer idCliente)
			throws ControladorException {

		try {
			return this.repositorioCadastro
					.verificarClienteSelecionadoFuncionario(idCliente);
		} catch (ErroRepositorioException e) {
			throw new ControladorException("erro.sistema", e);
		}

	}

	/**
	 * [UC0024] Inserir Quadra
	 * 
	 * @author Raphael Rossiter
	 * @date 03/04/2009
	 * 
	 * @param quadraFaceNova
	 * @param colecaoQuadraFace
	 * @throws ControladorException
	 */
	public void validarQuadraFace(QuadraFace quadraFaceNova,
			Collection colecaoQuadraFace, boolean verificarExistencia)
			throws ControladorException {

		/*
		 * Bacia (Caso o Indicador de Rede de Esgoto seja com rede de esgoto ou
		 * rede de esgoto parcial deve ser informado; caso contrário, não
		 * informar
		 */
		if (quadraFaceNova.getIndicadorRedeEsgoto() != null
				&& (quadraFaceNova.getIndicadorRedeEsgoto().equals(
						QuadraFace.COM_REDE) || quadraFaceNova
						.getIndicadorRedeEsgoto().equals(QuadraFace.PARCIAL))
				&& quadraFaceNova.getBacia() == null) {

			throw new ControladorException("atencao.campo.informada", null,
					"Bacia");
		}

		/*
		 * Distrito Operacional (Caso o Indicador de Rede de Água seja com rede
		 * de água ou rede de água parcial deve ser informado; caso contrário,
		 * não informar).
		 */
		if (quadraFaceNova.getIndicadorRedeAgua() != null
				&& (quadraFaceNova.getIndicadorRedeAgua().equals(
						QuadraFace.COM_REDE) || quadraFaceNova
						.getIndicadorRedeAgua().equals(QuadraFace.PARCIAL))
				&& quadraFaceNova.getDistritoOperacional() == null) {

			throw new ControladorException("atencao.campo.informado", null,
					"Distrito Operacional");
		}

		if (verificarExistencia) {

			// [FS0013] - Verificar existência da face da quadra
			if (colecaoQuadraFace != null && !colecaoQuadraFace.isEmpty()) {

				Iterator it = colecaoQuadraFace.iterator();

				while (it.hasNext()) {

					QuadraFace quadraFaceJaCadastrada = (QuadraFace) it.next();

					if (quadraFaceJaCadastrada.getNumeroQuadraFace().equals(
							quadraFaceNova.getNumeroQuadraFace())) {

						throw new ControladorException(
								"atencao.quadra_face_ja_informada", null,
								quadraFaceNova.getNumeroQuadraFace().toString());
					}
				}
			}
		}
	}

	/**
	 * Pesquisa a Quadra Face atraves da quadra associada
	 * 
	 * Autor: Arthur Carvalho
	 * 
	 * Data: 28/04/2009
	 */
	public Collection<Object[]> pesquisarQuadraFaceAssociadaQuadra(
			Integer idQuadra) throws ControladorException {

		Collection<Object[]> quadraFace = null;

		try {
			quadraFace = repositorioCadastro
					.pesquisarQuadraFaceAssociadaQuadra(idQuadra);
		} catch (ErroRepositorioException e) {
			throw new ControladorException("erro.sistema", e);
		}

		return quadraFace;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see
	 * gsan.cadastro.ControladorCadastroLocal#validarSeClienteEhPessoaJuridica
	 * (Cliente)
	 */
	public void validarSeClienteEhPessoaJuridica(Cliente cliente)
			throws ControladorException {

		if (cliente == null)
			throw new ControladorException("atencao.cliente.inexistente");

		if (cliente.getClienteTipo() == null)
			throw new ControladorException("atencao.cliente.tipo.inexistente");

		if (!cliente.getClienteTipo().getIndicadorPessoaFisicaJuridica()
				.equals(ClienteTipo.INDICADOR_PESSOA_JURIDICA))
			throw new ControladorException(
					"atencao.cliente.tipo.pessoa_juridica");

	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see gsan.cadastro.ControladorCadastroLocal#
	 * validarSeDebitoTipoNaoEhGeradoAutomaticamente(DebitoTipo)
	 */
	public void validarSeDebitoTipoNaoEhGeradoAutomaticamente(
			DebitoTipo debitoTipo) throws ControladorException {

		if (debitoTipo == null)
			throw new ControladorException("atencao.debito_tipo.inexistente");

		if (!debitoTipo.getIndicadorGeracaoAutomatica().equals(
				ConstantesSistema.SIM))
			throw new ControladorException(
					"atencao.debito_tipo.gerado_automaticamente");

	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see gsan.cadastro.ControladorCadastroLocal#
	 * validarPreExistenciaEntidadeBeneficente(EntidadeBeneficente)
	 */
	public void validarPreExistenciaEntidadeBeneficente(
			EntidadeBeneficente entidadeBeneficente)
			throws ControladorException {

		if (entidadeBeneficente == null)
			throw new ControladorException("atencao.debito_tipo.inexistente");

		Cliente cliente = entidadeBeneficente.getCliente();

		if (cliente == null)
			throw new ControladorException("atencao.cliente.inexistente");

		FiltroEntidadeBeneficente filtroEntidadeBeneficente = new FiltroEntidadeBeneficente();
		filtroEntidadeBeneficente.adicionarParametro(new ParametroSimples(
				FiltroEntidadeBeneficente.ID_CLIENTE, cliente.getId()));

		Collection<EntidadeBeneficente> entidadesDoMesmoCliente = getControladorUtil()
				.pesquisar(filtroEntidadeBeneficente,
						EntidadeBeneficente.class.getName());

		if (entidadesDoMesmoCliente != null
				&& !entidadesDoMesmoCliente.isEmpty()) {

			FiltroCliente filtroCliente = new FiltroCliente();
			filtroCliente.adicionarParametro(new ParametroSimples(
					FiltroCliente.ID, cliente.getId()));

			cliente = (Cliente) Util
					.retonarObjetoDeColecao(getControladorUtil().pesquisar(
							filtroCliente, Cliente.class.getName()));

			throw new ControladorException(
					"atencao.entidade_beneficente.cliente.pre_existente", null,
					cliente.getNome());
		}

	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see gsan.cadastro.ControladorCadastroLocal#inserirEntidadeBeneficente(
	 * EntidadeBeneficente)
	 */
	public Integer inserirEntidadeBeneficente(
			EntidadeBeneficente entidadeBeneficente)
			throws ControladorException {
		Integer retorno = null;

		Cliente cliente = entidadeBeneficente.getCliente();

		if (cliente.getId() != null && !new Integer(0).equals(cliente.getId())) {
			FiltroCliente filtroCliente = new FiltroCliente();

			filtroCliente.adicionarParametro(new ParametroSimples(
					FiltroCliente.ID, cliente.getId()));
			filtroCliente
					.adicionarCaminhoParaCarregamentoEntidade("clienteTipo");

			Collection colecaoCliente = getControladorUtil().pesquisar(
					filtroCliente, Cliente.class.getName());

			// [FS0001] - Verificar existência do cliente
			if (colecaoCliente == null || colecaoCliente.isEmpty()) {
				throw new ControladorException("atencao.cliente.inexistente",
						null, "Cliente");
			} else {
				Cliente clienteEncontrado = (Cliente) Util
						.retonarObjetoDeColecao(colecaoCliente);

				// [FS0002] - Verificar se cliente é pessoa jurídica
				validarSeClienteEhPessoaJuridica(clienteEncontrado);

			}
		} else {
			throw new ControladorException("atencao.cliente.inexistente", null,
					"Cliente");
		}

		DebitoTipo debitoTipo = entidadeBeneficente.getDebitoTipo();

		if (debitoTipo.getId() != null
				&& !new Integer(0).equals(debitoTipo.getId())) {

			FiltroDebitoTipo filtroDebitoTipo = new FiltroDebitoTipo();
			filtroDebitoTipo.adicionarParametro(new ParametroSimples(
					FiltroDebitoTipo.ID, debitoTipo.getId()));

			Collection colecaoDebitoTipo = getControladorUtil().pesquisar(
					filtroDebitoTipo, DebitoTipo.class.getName());

			// [FS0003] - Verificar existência do tipo de débito
			if (colecaoDebitoTipo == null || colecaoDebitoTipo.isEmpty()) {
				throw new ControladorException(
						"atencao.debito_tipo.inexistente", null,
						"Tipo de Débito");
			} else {
				DebitoTipo debitoTipoEncontrado = (DebitoTipo) Util
						.retonarObjetoDeColecao(colecaoDebitoTipo);

				// [FS0004] Verificar se tipo de débito não é gerado
				// automaticamente
				validarSeDebitoTipoNaoEhGeradoAutomaticamente(debitoTipoEncontrado);

			}
		} else {
			throw new ControladorException("atencao.debito_tipo.inexistente",
					null, "Tipo de Débito");
		}

		Empresa empresa = entidadeBeneficente.getEmpresa();

		if (empresa == null || empresa.getId() == null
				|| new Integer(0).equals(empresa.getId()))
			throw new ControladorException("atencao.campo_texto.obrigatorio",
					null, "Empresa");

		// [FS0006] - Verificar pré-existência da entidade beneficente
		validarPreExistenciaEntidadeBeneficente(entidadeBeneficente);

		// Toda entidade beneficente é inserida por padrão como ativa
		entidadeBeneficente
				.setIndicadorUso(ConstantesSistema.INDICADOR_USO_ATIVO);

		retorno = (Integer) getControladorUtil().inserir(entidadeBeneficente);

		return retorno;
	}

	/**
	 * [UC0842] Inserir Funcionário
	 * 
	 * @author Raphael Rossiter
	 * @date 17/06/2009
	 * 
	 * @param funcionario
	 * @param acao
	 *            -> INSERIR = TRUE, ATUALIZAR = FALSE
	 * @throws ControladorException
	 */
	public void validarFuncionario(Funcionario funcionario, boolean acao)
			throws ControladorException {

		FiltroFuncionario filtroFuncionario = new FiltroFuncionario();
		Funcionario funcionarioJaCadastrado = null;

		if (acao) {

			// MATRÍCULA
			filtroFuncionario.adicionarParametro(new ParametroSimples(
					FiltroFuncionario.ID, funcionario.getId().toString()));

			// Pesquisa se existe algum funcionario com a matricula informada

			Collection colecaoFuncionarioMatricula = getControladorUtil()
					.pesquisar(filtroFuncionario, Funcionario.class.getName());

			if (colecaoFuncionarioMatricula != null
					&& !colecaoFuncionarioMatricula.isEmpty()) {

				throw new ControladorException(
						"atencao.funcionario_matricula_ja_existente");

			}

		}

		// NOME
		if (funcionario.getNome() == null
				|| funcionario.getNome().equalsIgnoreCase("")) {
			throw new ControladorException("atencao.required", null, "Nome");
		}

		// CPF
		if (funcionario.getNumeroCpf() != null
				&& !funcionario.getNumeroCpf().equals("")) {

			// CPF INVÁLIDO
			if (!Util.validacaoCPF(funcionario.getNumeroCpf())) {

				throw new ControladorException("atencao.cpf_invalido");
			}

			// CPF JÁ CADASTRADO
			filtroFuncionario.limparListaParametros();

			filtroFuncionario.adicionarParametro(new ParametroSimples(
					FiltroFuncionario.NUMERO_CPF, funcionario.getNumeroCpf()));

			Collection colecaoFuncionario = this.getControladorUtil()
					.pesquisar(filtroFuncionario, Funcionario.class.getName());

			if (colecaoFuncionario != null && !colecaoFuncionario.isEmpty()) {

				funcionarioJaCadastrado = (Funcionario) colecaoFuncionario
						.iterator().next();

				if (acao) {

					// VALIDAÇÃO PARA INSERIR FUNCIONÁRIO
					throw new ControladorException(
							"atencao.cpf.funcionario.ja_cadastrado", null, ""
									+ funcionarioJaCadastrado.getId());
				} else if (funcionarioJaCadastrado.getId().intValue() != funcionario
						.getId().intValue()) {

					// VALIDAÇÃO PARA ATUALIZAR FUNCIONÁRIO
					throw new ControladorException(
							"atencao.cpf.funcionario.ja_cadastrado", null, ""
									+ funcionarioJaCadastrado.getId());
				}

			}
		}

		// DATA DE NASCIMENTO
		if (funcionario.getDataNascimento() != null
				&& !funcionario.getDataNascimento().equals("")) {

			int idadeFuncionario = Util.anosEntreDatas(
					funcionario.getDataNascimento(), new Date());

			if (idadeFuncionario < ConstantesSistema.IDADE_MINIMA_FUNCIONARIO) {

				throw new ControladorException(
						"atencao.funcionario_idade_minima");
			}
		}

		// CARGO
		if (funcionario.getFuncionarioCargo() != null
				&& funcionario
						.getFuncionarioCargo()
						.getId()
						.toString()
						.equalsIgnoreCase(
								"" + ConstantesSistema.NUMERO_NAO_INFORMADO)) {

			throw new ControladorException("atencao.required", null, "Cargo");

		}

		// EMPRESA
		if (funcionario.getEmpresa() != null
				&& funcionario
						.getEmpresa()
						.getId()
						.toString()
						.equalsIgnoreCase(
								"" + ConstantesSistema.NUMERO_NAO_INFORMADO)) {

			throw new ControladorException("atencao.required", null, "Empresa");

		}

		// VERIFICANDO SE O USUÁRIO JÁ FOI CADASTRADO
		filtroFuncionario.limparListaParametros();

		filtroFuncionario.adicionarParametro(new ParametroSimples(
				FiltroFuncionario.NOME, funcionario.getNome()));

		filtroFuncionario.adicionarParametro(new ParametroSimples(
				FiltroFuncionario.UNIDADE_EMPRESA, funcionario.getEmpresa()
						.getId().toString()));

		filtroFuncionario.adicionarParametro(new ParametroSimples(
				FiltroFuncionario.UNIDADE_ORGANIZACIONAL_ID, funcionario
						.getUnidadeOrganizacional().getId().toString()));

		Collection colecaoFuncionario = getControladorUtil().pesquisar(
				filtroFuncionario, Funcionario.class.getName());

		if (colecaoFuncionario != null && !colecaoFuncionario.isEmpty()) {

			funcionarioJaCadastrado = (Funcionario) colecaoFuncionario
					.iterator().next();

			if (acao) {

				throw new ControladorException(
						"atencao.funcionario_ja_existente");
			} else if (funcionarioJaCadastrado.getId().intValue() != funcionario
					.getId().intValue()) {

				throw new ControladorException(
						"atencao.funcionario_ja_existente");
			}
		}
	}

	/**
	 * [UC0830] Gerar Tabelas para Atualização Cadastral via celular
	 * 
	 * @author Ana Maria
	 * @date 22/06/2009
	 * 
	 * @return Collection<Object[]>
	 * @throws ErroRepositorioException
	 */

	public Collection<Integer> pesquisarSetorComercialGeracaoTabelasTemporarias(
			ImovelGeracaoTabelasTemporariasCadastroHelper helper)
			throws ControladorException {

		Collection<Integer> idsSetor = null;

		try {
			idsSetor = repositorioCadastro
					.pesquisarSetorComercialGeracaoTabelasTemporarias(helper);
		} catch (ErroRepositorioException e) {
			throw new ControladorException("erro.sistema", e);
		}

		return idsSetor;
	}

	/**
	 * [UC0830] Gerar Tabelas para Atualização Cadastral via celular
	 * 
	 * @author Ana Maria
	 * @date 22/06/2009
	 * 
	 * @return Collection<Object[]>
	 * @throws ErroRepositorioException
	 */

	public Collection<Integer> obterIdsImovelGeracaoTabelasTemporarias(
			ImovelGeracaoTabelasTemporariasCadastroHelper helper)
			throws ControladorException {
		Collection colecaoIdsImovel = new ArrayList();

		try {

			colecaoIdsImovel = repositorioCadastro
					.obterIdsImovelGeracaoTabelasTemporarias(null, helper);

			if (helper.getImovelSituacao() != null
					&& new Integer(helper.getImovelSituacao()) == 2) {
				colecaoIdsImovel = repositorioCadastro
						.pesquisarImovelDebitoAtualizacaoCadastral(colecaoIdsImovel);
			}

		} catch (ErroRepositorioException e) {
			throw new ControladorException("erro.sistema", e);
		}

		return colecaoIdsImovel;
	}

	/**
	 * [UC0912] Gerar Boletim de Custo Atualização Cadastral
	 * 
	 * @author Vivianne Sousa
	 * @date 25/06/2009
	 * 
	 * @param idEmpresa
	 * @param data
	 * @throws ControladorException
	 */
	public Object[] gerarBoletimCustoAtualizacaoCadastral(Empresa empresa,
			Date dataAtualizacaoInicio, Date dataAtualizacaoFim)
			throws ControladorException {

		try {

			Object[] retorno = new Object[2];
			// TreeMap<AtributosBoletimChaveHelper, AtributosBoletimHelper>
			// 3. O sistema obtém os dados do contrato com a empresa
			EmpresaContratoCadastro empresaContratoCadastro = repositorioCadastro
					.pesquisarEmpresaContratoCadastro(empresa.getId());

			// [FS0001 ? Verificar existência de contrato vigente para a
			// empresa].
			if (empresaContratoCadastro == null) {
				throw new ControladorException(
						"atencao.nao_existe_contrato_vigente_empresa", null,
						empresa.getDescricao());
			}

			// 4. O sistema seleciona os atributos que compõem o boletim
			// (a partir da tabela ATRIBUTO ordenando pelo grupo do atributo
			// (ATGR_ID) e pela ordem de emissão (ATRB_NNORDEMEMISSAO)).
			Collection colecaoAtributos = repositorioCadastro
					.pesquisarAtributosBoletim();
			Iterator iterAtributos = colecaoAtributos.iterator();

			// 5. O sistema cria uma Lista de Atributos do Boletim e atribui
			// valores aos campos da lista
			TreeMap<AtributosBoletimChaveHelper, AtributosBoletimHelper> mapAtributosBoletim = new TreeMap();

			// 5.7. Quantidade de Atualizações do Atributo (valor zero).
			Integer quantidadeAtualizacaoAtributo = 0;

			while (iterAtributos.hasNext()) {

				Atributo atributo = (Atributo) iterAtributos.next();

				// 5.6. Valor de Atualização do Atributo
				// (ECCA_VLATUALIZACAO da tabela
				// EMPRESA_CONTRATO_CADASTRO_ATRIBUTO
				// com ATRB_ID=ATRB_ID da tabela ATRIBUTO e ECCD_ID=ECCD_ID da
				// tabela EMPRESA_CONTRATO_CADASTRO);
				BigDecimal valorAtualizacaoAtributo = repositorioCadastro
						.pesquisarValorAtualizacaoAtributo(atributo.getId(),
								empresaContratoCadastro.getId());

				AtributosBoletimChaveHelper chave = new AtributosBoletimChaveHelper(
						atributo.getId(), atributo.getAtributoGrupo().getId(),
						atributo.getNumeroOrdemEmissao());

				AtributosBoletimHelper atributosBoletim = new AtributosBoletimHelper(
						atributo, valorAtualizacaoAtributo,
						quantidadeAtualizacaoAtributo);

				mapAtributosBoletim.put(chave, atributosBoletim);

			}

			// 6. O sistema seleciona as operações efetuadas pela empresa no
			// período informado e com imóvel associado
			// [SB0001 ? Selecionar Operações Efetuadas com Imóvel Associado].
			Collection colecaoOperacoesEfetuadasComImovelAssociado = repositorioCadastro
					.pesquisarOperacoesEfetuadasComImovelAssociado(
							dataAtualizacaoInicio, dataAtualizacaoFim,
							empresa.getId());

			// 7. O sistema seleciona as operações efetuadas pela empresa no
			// período informado e sem imóvel associado
			// [SB0002 ? Selecionar Operações Efetuadas sem Imóvel Associado].
			Collection colecaoOperacoesEfetuadasSemImovelAssociado = repositorioCadastro
					.pesquisarOperacoesEfetuadasSemImovelAssociado(
							dataAtualizacaoInicio, dataAtualizacaoFim,
							empresa.getId());

			// 8. Caso as seleções não retornem nenhum registro,
			// o sistema deverá exibir a mensagem "A pesquisa não retornou
			// nenhum resultado" e retornar para a tela de parâmetros.
			// 9.2. Atribui à lista as operações efetuadas sem imóvel associado.
			// Neste caso, o Conteúdo do Argumento deve corresponder ao conteúdo
			// do segundo argumento (TBLA_ID2).
			if ((colecaoOperacoesEfetuadasComImovelAssociado == null || colecaoOperacoesEfetuadasComImovelAssociado
					.isEmpty())
					&& (colecaoOperacoesEfetuadasSemImovelAssociado == null || colecaoOperacoesEfetuadasSemImovelAssociado
							.isEmpty())) {
				throw new ControladorException(
						"atencao.pesquisa.nenhumresultado");
			}

			// 9. O sistema cria uma Lista de Operações Efetuadas a partir das
			// seleções realizadas:
			// 9.1. Atribui à lista as operações efetuadas com imóvel associado.
			// 9.2. Atribui à lista as operações efetuadas sem imóvel associado.
			Collection colecaoOperacoesEfetuadas = new ArrayList();
			if (colecaoOperacoesEfetuadasComImovelAssociado != null
					&& !colecaoOperacoesEfetuadasComImovelAssociado.isEmpty()) {
				colecaoOperacoesEfetuadas
						.addAll(colecaoOperacoesEfetuadasComImovelAssociado);
			}
			if (colecaoOperacoesEfetuadasSemImovelAssociado != null
					&& !colecaoOperacoesEfetuadasSemImovelAssociado.isEmpty()) {
				colecaoOperacoesEfetuadas
						.addAll(colecaoOperacoesEfetuadasSemImovelAssociado);
			}

			// 10. ordena a Lista de Operações Efetuadas pelos campos Conteúdo
			// do Argumento e Identificador do Atributo (ATRB_ID).
			Collections.sort((List) colecaoOperacoesEfetuadas,
					new Comparator() {

						public int compare(Object a, Object b) {

							int retorno = 0;
							OperacoesEfetuadasHelper helper1 = (OperacoesEfetuadasHelper) a;
							OperacoesEfetuadasHelper helper2 = (OperacoesEfetuadasHelper) b;

							if (helper1.getArgumento().compareTo(
									helper2.getArgumento()) == 0) {

								retorno = helper1
										.getId2TabelaLinhaAlteracao()
										.compareTo(
												helper2.getId2TabelaLinhaAlteracao());

							} else {
								retorno = helper1.getArgumento().compareTo(
										helper2.getArgumento());
							}
							return retorno;

						}
					});

			BigDecimal valorVisita = empresaContratoCadastro.getValorVisita();
			Integer argumentoAnterior = null;
			Integer argumento = null;

			Collection colecaoOperacoesEfetuadasArgumento = new ArrayList();

			Integer numeroImoveisAtualizados = 0;

			// 11.4. Enquanto houver operações na Lista de Operações Efetuadas
			// para serem processadas:
			Iterator iterOperacoesEfetuadas = colecaoOperacoesEfetuadas
					.iterator();
			while (iterOperacoesEfetuadas.hasNext()) {

				OperacoesEfetuadasHelper operacoesEfetuadas = (OperacoesEfetuadasHelper) iterOperacoesEfetuadas
						.next();

				// quando for a primeira vez
				if (argumentoAnterior == null) {
					argumentoAnterior = operacoesEfetuadas.getArgumento();
				}
				argumento = operacoesEfetuadas.getArgumento();

				// mudou o argumento
				if (argumentoAnterior.compareTo(argumento) != 0) {

					// cria uma Lista de Atributos por Argumento e acumula os
					// valores na Lista de Atributos do Boletim
					processaAtributosArgumentoEAcumulaValores(
							colecaoOperacoesEfetuadasArgumento,
							mapAtributosBoletim, valorVisita);

					// 11.4.1. Número de Imóveis Atualizados = Número de Imóveis
					// Atualizados mais um.
					numeroImoveisAtualizados++;

					argumentoAnterior = operacoesEfetuadas.getArgumento();
					colecaoOperacoesEfetuadasArgumento.clear();
				}

				colecaoOperacoesEfetuadasArgumento.add(operacoesEfetuadas);
			}
			// ultimo argumento
			// cria uma Lista de Atributos por Argumento e acumula os valores na
			// Lista de Atributos do Boletim
			processaAtributosArgumentoEAcumulaValores(
					colecaoOperacoesEfetuadasArgumento, mapAtributosBoletim,
					valorVisita);
			numeroImoveisAtualizados++;

			retorno[0] = mapAtributosBoletim;
			retorno[1] = numeroImoveisAtualizados;

			return retorno;

		} catch (ErroRepositorioException ex) {
			throw new ControladorException("erro.sistema", ex);
		}

	}

	/**
	 * [UC0912] Gerar Boletim de Custo Atualização Cadastral
	 * 
	 * cria uma Lista de Atributos por Argumento e acumula os valores na Lista
	 * de Atributos do Boletim
	 * 
	 * @author Vivianne Sousa
	 * @date 25/06/2009
	 */
	public void processaAtributosArgumentoEAcumulaValores(
			Collection colecaoOperacoesEfetuadasArgumento,
			TreeMap<AtributosBoletimChaveHelper, AtributosBoletimHelper> mapAtributosBoletim,
			BigDecimal valorVisita) {

		AtributosBoletimHelper atributosArgumento = null;
		BigDecimal valorAtualizacoesArgumento = BigDecimal.ZERO;
		Collection<AtributosBoletimHelper> colecaoAtributosPorArgumento = new ArrayList();
		Iterator iterOperacoesEfetuadasArgumento = colecaoOperacoesEfetuadasArgumento
				.iterator();

		while (iterOperacoesEfetuadasArgumento.hasNext()) {
			OperacoesEfetuadasHelper operacoesEfetuadasArgumento = (OperacoesEfetuadasHelper) iterOperacoesEfetuadasArgumento
					.next();
			// System.out.println("-----" +
			// operacoesEfetuadasArgumento.getArgumento());

			// 11.3.4. Para cada atributo da Lista de Atributos por Argumento, o
			// sistema obtém o valor da atualização por atributo
			BigDecimal valorAtualizacaoAtributo = operacoesEfetuadasArgumento
					.getValorAtualizacaoAtributo();

			// 11.3.5. Valor das Atualizações Efetuadas para o Argumento =
			// somatório de Valor de Atualização do Atributo do Argumento.
			valorAtualizacoesArgumento = valorAtualizacoesArgumento
					.add(valorAtualizacaoAtributo);

			// 11.3.2.1. Identificador do Atributo do Argumento = ATRB_ID;
			// 11.3.2.2. Quantidade de Atualizações do Atributo do Argumento =
			// um (1).
			atributosArgumento = new AtributosBoletimHelper(
					operacoesEfetuadasArgumento
							.getAtributosBoletimChaveHelper().getIdAtributo(),
					valorAtualizacaoAtributo, 1,
					operacoesEfetuadasArgumento
							.getAtributosBoletimChaveHelper());

			colecaoAtributosPorArgumento.add(atributosArgumento);

		}

		AtributosBoletimChaveHelper chave = null;
		// 11.3.6.1. Caso o Valor das Atualizações Efetuadas para o Argumento
		// não atinja o valor mínimo
		// (Valor das Atualizações Efetuadas para o Argumento menor que
		// ECCD_VLVISITA da tabela EMPRESA_CONTRATO_CADASTRO)
		// if(valorAtualizacoesArgumento.compareTo(valorVisita) < 0){
		// //11.3.6.1.1. Quantidade de Atualizações do Atributo da Lista
		// //de Atributos do Boletim para o atributo de visita
		// //(Identificador do Atributo da Lista de Atributos do Boletim com
		// Indicador de Visita=1)
		// //= Quantidade de Atualizações do Atributo da Lista de Atributos do
		// Boletim para o atributo de visita
		// //(Identificador do Atributo da Lista de Atributos do Boletim com
		// Indicador de Visita=1) mais um (1).
		// chave = AtributosBoletimChaveHelper.NOTIFICACAO_VISITA;
		//
		// AtributosBoletimHelper AtributosBoletimAlterar =
		// mapAtributosBoletim.get(chave);
		//
		// int quantidade =
		// AtributosBoletimAlterar.getQuantidadeAtualizacaoAtributo().intValue()
		// + 1;
		//
		// AtributosBoletimAlterar.setQuantidadeAtualizacaoAtributo(quantidade);
		//
		// }else{
		// 11.3.6.2. Caso contrário, para cada atributo da Lista de Atributos
		// por Argumento:
		// 11.3.6.2.1. Quantidade de Atualizações do Atributo da Lista
		// de Atributos do Boletim para o atributo (Identificador do Atributo do
		// Argumento)
		// = Quantidade de Atualizações do Atributo da Lista de Atributos do
		// Boletim para o atributo
		// (Identificador do Atributo do Argumento) mais Quantidade de
		// Atualizações do Atributo do Argumento

		Iterator iterAtributosPorArgumento = colecaoAtributosPorArgumento
				.iterator();
		while (iterAtributosPorArgumento.hasNext()) {
			AtributosBoletimHelper atribBoletim = (AtributosBoletimHelper) iterAtributosPorArgumento
					.next();
			chave = atribBoletim.getAtributosBoletimChaveHelper();

			AtributosBoletimHelper AtributosBoletimAlterar = mapAtributosBoletim
					.get(chave);

			int quantidade = AtributosBoletimAlterar
					.getQuantidadeAtualizacaoAtributo().intValue()
					+ atribBoletim.getQuantidadeAtualizacaoAtributo()
							.intValue();

			AtributosBoletimAlterar
					.setQuantidadeAtualizacaoAtributo(quantidade);

		}
		// }

	}

	/**
	 * [UC0925] Emitir Boletos
	 * 
	 * @author Rômulo Aurélio / Analista: Rafael Pinto
	 * @date 25/11/2009
	 */
	public void emitirBoletos(Integer idFuncionalidadeIniciada, Integer grupo,
			Integer entidadeBeneficente) throws ControladorException {

		int idUnidadeIniciada = 0;

		try {
			/*
			 * Registrar o início do processamento da Unidade de Processamento
			 * do Batch
			 */
			idUnidadeIniciada = getControladorBatch()
					.iniciarUnidadeProcessamentoBatch(idFuncionalidadeIniciada,
							UnidadeProcessamento.FUNCIONALIDADE, 0);

			boolean flagFimPesquisa = false;
			final int quantidadeCobrancaDocumento = 1000;
			int quantidadeInicio = 0;
			StringBuilder boletoTxt = new StringBuilder();

			System.out.println("***************************************");
			System.out.println("EMITIR BOLETOS");
			System.out.println("***************************************");

			SistemaParametro sistemaParametro = getControladorUtil()
					.pesquisarParametrosDoSistema();

			FiltroEntidadeBeneficente filtroEntidadeBeneficente = new FiltroEntidadeBeneficente();
			filtroEntidadeBeneficente
					.adicionarCaminhoParaCarregamentoEntidade(FiltroEntidadeBeneficente.DEBITO_TIPO);
			filtroEntidadeBeneficente
					.adicionarCaminhoParaCarregamentoEntidade(FiltroEntidadeBeneficente.CLIENTE);

			Collection colecaoEntidadeBeneficente = this.getControladorUtil()
					.pesquisar(filtroEntidadeBeneficente,
							EntidadeBeneficente.class.getName());

			EntidadeBeneficente entidadeBeneficenteObjeto = (EntidadeBeneficente) Util
					.retonarObjetoDeColecao(colecaoEntidadeBeneficente);

			while (!flagFimPesquisa) {
				Collection dadosBoleto = repositorioCadastro
						.pesquisarDadosBoleto(quantidadeInicio, grupo,
								sistemaParametro.getNomeAbreviadoEmpresa());

				if (dadosBoleto != null && !dadosBoleto.isEmpty()) {

					Iterator iterDadosBoleto = dadosBoleto.iterator();

					if (dadosBoleto.size() < quantidadeCobrancaDocumento) {
						flagFimPesquisa = true;
					} else {
						quantidadeInicio = quantidadeInicio + 1000;
					}

					System.out
							.println("***************************************");
					System.out.println("QUANTIDADE :" + dadosBoleto.size());
					System.out
							.println("***************************************");

					while (iterDadosBoleto.hasNext()) {
						DadosBoletoHelper helper = (DadosBoletoHelper) iterDadosBoleto
								.next();

						// 1.1 Inscrição
						boletoTxt.append(Util.completaString(helper.getImovel()
								.getInscricaoFormatada(), 20));

						// 1.2 Matrícula Imóvel
						String matriculaStr = Util.adicionarZerosEsquedaNumero(
								9, "" + helper.getImovel().getId());
						boletoTxt.append(matriculaStr.substring(0, 8) + "."
								+ matriculaStr.substring(8, 9));

						// 1.3 Nome Cliente Usuário
						boletoTxt.append(Util.completaString(
								helper.getNomeCliente(), 40));

						// 1.4 Endereço do Imóvel
						String endereco = getControladorEndereco()
								.pesquisarEnderecoFormatado(
										helper.getImovel().getId());
						boletoTxt.append(Util.completaString(endereco, 60));

						// 1.5 Grupo de Faturamento
						boletoTxt.append(Util.adicionarZerosEsquedaNumero(2,
								helper.getIdGrupoFaturamento().toString()));

						// 1.6 Empresa
						boletoTxt.append(helper.getIdEmpresa().toString());

						// 1.7 Representação Numérica do Código de Barras
						// 1.8 Código de Barras

						BigDecimal valorCodigoBarras = pesquisarValorSugeridoDebitoTipo(entidadeBeneficenteObjeto
								.getDebitoTipo().getId());

						String representacaoNumericaCodBarra = "";

						// Obtém a representação numérica do código de barra
						representacaoNumericaCodBarra = this
								.getControladorArrecadacao()
								.obterRepresentacaoNumericaCodigoBarra(
										4,
										valorCodigoBarras,
										helper.getImovel().getLocalidade()
												.getId(),
										helper.getImovel().getId(),
										null,
										null,
										entidadeBeneficenteObjeto
												.getDebitoTipo().getId(),
										"" + Util.getAno(new Date()), null,
										null, null, null, null);

						// Formata a representação númerica do código de barras
						String representacaoNumericaCodBarraFormatada = representacaoNumericaCodBarra
								.substring(0, 11)
								+ " "
								+ representacaoNumericaCodBarra.substring(11,
										12)
								+ " "
								+ representacaoNumericaCodBarra.substring(12,
										23)
								+ " "
								+ representacaoNumericaCodBarra.substring(23,
										24)
								+ " "
								+ representacaoNumericaCodBarra.substring(24,
										35)
								+ " "
								+ representacaoNumericaCodBarra.substring(35,
										36)
								+ " "
								+ representacaoNumericaCodBarra.substring(36,
										47)
								+ " "
								+ representacaoNumericaCodBarra.substring(47,
										48);

						boletoTxt
								.append(representacaoNumericaCodBarraFormatada);

						// Cria o objeto para gerar o código de barras no padrão
						// intercalado 2 de 5
						Interleaved2of5 codigoBarraIntercalado2de5 = new Interleaved2of5();

						// Recupera a representação númerica do código de barras
						// sem os dígitos verificadores
						String representacaoCodigoBarrasSemDigitoVerificador = representacaoNumericaCodBarra
								.substring(0, 11)
								+ representacaoNumericaCodBarra.substring(12,
										23)
								+ representacaoNumericaCodBarra.substring(24,
										35)
								+ representacaoNumericaCodBarra.substring(36,
										47);

						boletoTxt
								.append(codigoBarraIntercalado2de5
										.encodeValue(representacaoCodigoBarrasSemDigitoVerificador));
						// Codigo da Rota tam (02)
						boletoTxt.append(Util
								.adicionarZerosEsquedaNumeroTruncando(2, helper
										.getCodigoRota().toString()));
						// Sequencial da Rota Tam (04)
						boletoTxt.append("."
								+ Util.adicionarZerosEsquedaNumeroTruncando(4,
										helper.getSequencialRota().toString()));

						boletoTxt.append(System.getProperty("line.separator"));

					}

				} else {
					flagFimPesquisa = true;
				}

			}

			Date dataAtual = new Date();

			String nomeEntidade = null;
			String nomeZip = null;

			nomeEntidade = entidadeBeneficenteObjeto.getCliente().getNome()
					.replace(" ", "_");
			nomeZip = "BOLETO_" + nomeEntidade + "_GRUPO_" + grupo + "_"
					+ Util.formatarData(dataAtual)
					+ Util.formatarHoraSemDataSemDoisPontos(dataAtual);
			nomeZip = nomeZip.replace("/", "_");

			// pegar o arquivo, zipar pasta e arquivo e escrever no stream
			try {

				System.out.println("***************************************");
				System.out.println("INICO DA CRIACAO DO ARQUIVO");
				System.out.println("***************************************");

				if (boletoTxt != null && boletoTxt.length() != 0) {

					// criar o arquivo zip
					File compactado = new File(nomeZip + ".zip"); // nomeZip
					ZipOutputStream zos = new ZipOutputStream(
							new FileOutputStream(compactado));

					File leitura = new File(nomeZip + ".txt");
					BufferedWriter out = new BufferedWriter(
							new OutputStreamWriter(new FileOutputStream(
									leitura.getAbsolutePath())));
					out.write(boletoTxt.toString());
					out.close();
					ZipUtil.adicionarArquivo(zos, leitura);

					// close the stream
					zos.close();
					leitura.delete();
				}
				System.out.println("***************************************");
				System.out.println("FIM DA CRIACAO DO ARQUIVO");
				System.out.println("***************************************");

			} catch (IOException e) {
				e.printStackTrace();
				throw new ControladorException("erro.sistema", e);
			} catch (Exception e) {
				e.printStackTrace();
				throw new ControladorException("erro.sistema", e);
			}

			getControladorBatch().encerrarUnidadeProcessamentoBatch(null,
					idUnidadeIniciada, false);
			System.out.println("******* FIM **********");
		} catch (Exception ex) {
			ex.printStackTrace();
			getControladorBatch().encerrarUnidadeProcessamentoBatch(ex,
					idUnidadeIniciada, true);
			throw new EJBException(ex);
		}

	}

	/**
	 * [UC0925] Emitir Boletos
	 * 
	 * retrona DBTP_VLLIMITE para DBTP_ID = idDebitoTipo
	 * 
	 * @author Vivianne Sousa
	 * @date 09/07/2009
	 * 
	 * @throws ErroRepositorioException
	 */
	public BigDecimal pesquisarValorLimiteDebitoTipo(Integer idDebitoTipo)
			throws ControladorException {
		try {
			return repositorioCadastro
					.pesquisarValorLimiteDebitoTipo(idDebitoTipo);
		} catch (ErroRepositorioException e) {
			throw new ControladorException("erro.sistema", e);
		}

	}

	/**
	 * Obtém a quantidade de economias da categoria, levando em consideração o
	 * fator de economias
	 * 
	 * @author Rafael Corrêa
	 * @date 09/08/2009
	 * 
	 * @throws ControladorException
	 */
	public int obterQuantidadeEconomiasCategoria(Categoria categoria)
			throws ControladorException {
		int qtd = 0;

		// Caso a categoria tenha fator de economias diferente de NULO
		if (categoria.getFatorEconomias() != null) {
			qtd = categoria.getFatorEconomias().intValue();
		} else {
			qtd = categoria.getQuantidadeEconomiasCategoria();
		}

		return qtd;
	}

	/**
	 * Obtém a quantidade de economias da subcategoria, levando em consideração
	 * o fator de economias
	 * 
	 * @author Rafael Corrêa
	 * @date 09/08/2009
	 * 
	 * @throws ControladorException
	 */
	public int obterQuantidadeEconomiasSubcategoria(Subcategoria subcategoria)
			throws ControladorException {
		int qtd = 0;

		// Caso a categoria tenha fator de economias diferente de NULO
		if (subcategoria.getCategoria().getFatorEconomias() != null) {
			qtd = subcategoria.getCategoria().getFatorEconomias().intValue();
		} else {
			qtd = subcategoria.getQuantidadeEconomias();
		}

		return qtd;
	}

	/**
	 * [UC0407]-Filtrar Imóveis para Inserir ou Manter Conta [FS0011]-Verificar
	 * a abrangência do código do usuário
	 * 
	 * @author Vivianne Sousa
	 * @date 31/07/2009
	 * 
	 * @throws ErroRepositorioException
	 */
	public UnidadeNegocio pesquisarUnidadeNegocioUsuario(Integer idUsuario)
			throws ControladorException {
		try {
			return repositorioCadastro
					.pesquisarUnidadeNegocioUsuario(idUsuario);
		} catch (ErroRepositorioException e) {
			throw new ControladorException("erro.sistema", e);
		}

	}

	/**
	 * [UC0928]-Manter Situação Especial de Faturamento [FS0003]-Verificar a
	 * existência do setor
	 * 
	 * @author Marlon Patrick
	 * @date 11/08/2009
	 * 
	 * @throws ErroRepositorioException
	 */
	public boolean verificarExistenciaSetorComercial(Integer idSetorComercial)
			throws ControladorException {
		try {
			Integer qtdSetores = this.repositorioSetorComercial
					.verificarExistenciaSetorComercial(idSetorComercial);
			return (qtdSetores > 0);

		} catch (ErroRepositorioException ex) {
			ex.printStackTrace();
			throw new ControladorException("erro.sistema", ex);
		}
	}

	/**
	 * [UCXXXX] Excluir Imoveis Da Tarifa Social CRC - 2113
	 * 
	 * @author Genival Barbosa
	 * @date 15/09/2009
	 */
	public void excluirImoveisDaTarifaSocial(Integer idSetor,
			Integer idFuncionalidadeIniciada, Integer anoMesFaturamento)
			throws ControladorException {

		int idUnidadeIniciada = 0;

		try {

			Object[] dados = null;
			Object obj = null;

			idUnidadeIniciada = getControladorBatch()
					.iniciarUnidadeProcessamentoBatch(idFuncionalidadeIniciada,
							UnidadeProcessamento.SETOR_COMERCIAL, (idSetor));

			List colecao = repositorioCadastro
					.pesquisarImoveisExcluirDaTarifaSocial(idSetor,
							anoMesFaturamento);
			String idImovel = "";
			String quantidadeEconomias = "";
			String consumoMedio = "";

			if (colecao != null && !colecao.isEmpty()) {
				for (int i = 0; i < colecao.size(); i++) {
					obj = colecao.get(i);
					if (obj != null) {
						if (obj instanceof Object[]) {
							dados = (Object[]) obj;

							idImovel = dados[0].toString();
							quantidadeEconomias = dados[1].toString();
							consumoMedio = dados[2].toString();
						}
						Double quantidadeEconomiasPORConsumoMedio = Double
								.parseDouble(consumoMedio)
								/ Double.parseDouble(quantidadeEconomias);
						if (quantidadeEconomiasPORConsumoMedio > 19) {
							repositorioCadastro
									.atualizarExcluirDaTarifaSocialTabelaDadoEconomia(idImovel);
							repositorioCadastro
									.atualizarExcluirDaTarifaSocialTabelaImovel(idImovel);
						}
					}
				}
			}

			getControladorBatch().encerrarUnidadeProcessamentoBatch(null,
					idUnidadeIniciada, false);

		} catch (Exception ex) {
			ex.printStackTrace();
			getControladorBatch().encerrarUnidadeProcessamentoBatch(ex,
					idUnidadeIniciada, true);
			throw new EJBException(ex);
		}
	}

	/**
	 * Pesquisa a quantidade de imoveis para o relatorio de imoveis por consumo
	 * medio
	 * 
	 * @author Arthur Carvalho
	 * @data 02/10/2009
	 * 
	 * @param filtro
	 * @return quantidade de imoveis
	 * @throws FachadaException
	 */
	public Integer pesquisarRelatorioImoveisConsumoMedioCount(
			FiltrarRelatorioImoveisConsumoMedioHelper filtro)
			throws ControladorException {

		SistemaParametro sistemaParametro = this.getControladorUtil()
				.pesquisarParametrosDoSistema();

		try {

			return repositorioCadastro
					.pesquisarRelatorioImoveisConsumoMedioCount(filtro,
							sistemaParametro.getAnoMesFaturamento());

		} catch (ErroRepositorioException e) {
			throw new ControladorException("erro.sistema", e);
		}
	}

	/**
	 * Pesquisa a quantidade de imoveis na tabela imovel atualizacao cadastral
	 * 
	 * @author Arthur Carvalho
	 * @data 02/10/2009
	 * 
	 * @param filtro
	 * @return quantidade de imoveis
	 * @throws FachadaException
	 */
	public Integer pesquisarImovelAtualizacaoCadastralComIndicadorExclusaoCount()
			throws ControladorException {

		try {

			return repositorioCadastro
					.pesquisarImovelAtualizacaoCadastralComIndicadorExclusaoCount();

		} catch (ErroRepositorioException e) {
			throw new ControladorException("erro.sistema", e);
		}
	}

	/**
	 * [UC0969] Importar arquivo de atualização cadastral simplificado
	 * 
	 * @author Samuel Valerio, Higor Gondim
	 * @date 22/10/2009, 21/05/2010, 27/04/2011
	 * 
	 * @param arquivo
	 *            Arquivo texto a ser importado
	 * @return Id do arquivo texto recém-inserido
	 * @throws ControladorException
	 */
	public Integer inserirArquivoTextoAtualizacaoCadastralSimplificado(
			AtualizacaoCadastralSimplificado arquivo,
			AtualizacaoCadastralSimplificadoBinario arquivoBinario,
			Collection<AtualizacaoCadastralSimplificadoLinha> linhas)
			throws ControladorException {

		Integer retorno = null;

		int qtdeImoveisComHidrometro = 0;
		int qtdeImoveisComHidrometroAtualizados = 0;
		int qtdeImoveisComEconomiasAtualizados = 0;
		int qtdeImoveisComMedidorEnergiaAtualizados = 0;
		int qtdeImoveisComClienteAtualizados = 0;
		int numeroDaLinha = 0;

		// buscando todas as críticas de uma vez para armazená-las em memória
		// e depois percorrê-las visando não pesquisar a mesma crítica várias
		// vezes (otimização)
		FiltroAtualizacaoCadastralSimplificadoCritica filtro = new FiltroAtualizacaoCadastralSimplificadoCritica();
		Collection<AtualizacaoCadastralSimplificadoCritica> criticas = getControladorUtil()
				.pesquisar(filtro,
						AtualizacaoCadastralSimplificadoCritica.class.getName());

		// percore todas as linhas do arquivo
		for (AtualizacaoCadastralSimplificadoLinha linha : linhas) {
			numeroDaLinha++;
			try {
				// se há hidrômetro no imóvel
				if (linha.getNumeroMedidor() != null
						&& !"".equals(linha.getNumeroMedidor().trim())) {
					qtdeImoveisComHidrometro++;

					// código do retorno da validação e atualização do
					// hidrômetro
					final Integer validouEAtualizouHidrometro = validarEAtualizarHidrometro(linha);

					// se o retorno for nulo, é pq atualizou com sucesso
					if (validouEAtualizouHidrometro == null)
						qtdeImoveisComHidrometroAtualizados++;
					else if (validouEAtualizouHidrometro != -1) // -1 indica que
																// o hidrômetro
																// já está
																// atualizado no
																// sistema
						adicionarCritica(criticas, linha,
								validouEAtualizouHidrometro);
				} else { // caso não tenha hidrômetro no imóvel
					final boolean haHidrometroNoImovel = verificarAusenciaHidrometro(linha);
					// caso não exista hidrômetro no imóvel
					if (!haHidrometroNoImovel)
						adicionarCritica(
								criticas,
								linha,
								AtualizacaoCadastralSimplificadoCritica.IMOVEL_COM_HIDROMETRO);
				}
			} catch (ParseException pe) {
				throw new ControladorException("erro.sistema", pe);
			} catch (ErroRepositorioException ere) {
				throw new ControladorException("erro.sistema", ere);
			}

			// código do retorno da validação e atualização de subcategorias e
			// economias
			final Integer validouEAtualizouEconomias = validarEAtualizarEconomias(linha);

			// se o retorno for nulo, é pq atualizou com sucesso
			if (validouEAtualizouEconomias == null) {
				qtdeImoveisComEconomiasAtualizados++;
			} else if (validouEAtualizouEconomias != -1) { // -1 indica que as
															// economias já
															// estão atualizadas
															// no sistema
				adicionarCritica(criticas, linha, validouEAtualizouEconomias);
			}

			// [SB0004] Validar e atualizar numero do medidor de energia do
			// imovel
			if (linha.getNumeroMedidorEnergia() != null
					&& !"".equals(linha.getNumeroMedidorEnergia().trim())) {

				// codigo do retorno da validacao e atualizacao do numero do
				// medidor de energia
				final Integer validouEAtualizouMedidorEnergia = validarEAtualizarMedidorEnergia(linha);

				// se o retorno for nulo, e pq atualizou com sucesso
				if (validouEAtualizouMedidorEnergia == null) {
					qtdeImoveisComMedidorEnergiaAtualizados++;
				} else if (validouEAtualizouMedidorEnergia != -1) { // -1 indica
																	// que o
					// numero do medidor ja
					// esta atualizado
					// no sistema
					adicionarCritica(criticas, linha,
							validouEAtualizouMedidorEnergia);
				}
			}

			// [SB0005] Validar e atualizar informações de cliente
			if (linha.getNumeroCPF() != null
					&& !"".equals(linha.getNumeroCPF().trim())) {

				// codigo do retorno da validacao e atualizacao dos dados do
				// cliente
				final Integer validouEAtualizouCliente = validarEAtualizarCliente(linha);

				// se o retorno for nulo, e pq atualizou com sucesso
				if (validouEAtualizouCliente == null) {

					qtdeImoveisComClienteAtualizados++;

				} else if (validouEAtualizouCliente != -1) { // -1 indica que o
																// numero do
																// medidor ja
																// esta
																// atualizado no
																// sistema

					adicionarCritica(criticas, linha, validouEAtualizouCliente);

				}
			}

		}

		// considera-se que há um imóvel por linha no arquivo
		Integer qtdeTotalImoveis = linhas.size();

		arquivo.setQtdeImoveisComEconomiasAtualizados(qtdeImoveisComEconomiasAtualizados);
		arquivo.setQtdeImoveisComHidrometro(qtdeImoveisComHidrometro);
		arquivo.setQtdeImoveisComHidrometroAtualizados(qtdeImoveisComHidrometroAtualizados);
		arquivo.setQtdeImoveisSemHidrometro(qtdeTotalImoveis
				- qtdeImoveisComHidrometro);
		arquivo.setQtdeImoveisComMedidorEnergiaAtualizados(qtdeImoveisComMedidorEnergiaAtualizados);
		arquivo.setQtdeImoveisComClienteAtualizados(qtdeImoveisComClienteAtualizados);
		arquivo.setQtdeTotalImoveis(qtdeTotalImoveis);

		retorno = (Integer) getControladorUtil().inserir(arquivo);

		arquivoBinario.setArquivo(arquivo);

		getControladorUtil().inserir(arquivoBinario);

		for (AtualizacaoCadastralSimplificadoLinha linha : linhas)
			getControladorUtil().inserir(linha);

		return retorno;

	}

	/**
	 * Verifica se há hidrômetro no imóvel.
	 * 
	 * [SB0002] Validar ausência de hidrômetro no imóvel [UC0969] Importar
	 * arquivo de atualização cadastral simplificado
	 * 
	 * @author Samuel Valerio
	 * @date 22/10/2009
	 * 
	 * @param linha
	 *            Linha com o imóvel a ser verificado.
	 * @return true se existir hidrômetro no imóvel, false caso contrário
	 * @throws ErroRepositorioException
	 * @throws ControladorException
	 */
	private boolean verificarAusenciaHidrometro(
			AtualizacaoCadastralSimplificadoLinha linha)
			throws ErroRepositorioException, ControladorException {
		Hidrometro hidrometro = obterHidrometroAtualmenteInstalado(linha
				.getNumeroLigacao());
		if (hidrometro != null)
			return false;
		else
			return true;
	}

	/**
	 * Adiciona crítica à linha passada como parâmetro.
	 * 
	 * [UC0969] Importar arquivo de atualização cadastral simplificado
	 * 
	 * @author Samuel Valerio
	 * @date 22/10/2009
	 * 
	 * @param criticas
	 *            Críticas existentes na base de dados
	 * @param linha
	 *            Linha para a qual será adicionada a crítica.
	 * @param idCritica
	 * @throws ControladorException
	 */
	private void adicionarCritica(
			Collection<AtualizacaoCadastralSimplificadoCritica> criticas,
			AtualizacaoCadastralSimplificadoLinha linha, Integer idCritica)
			throws ControladorException {
		// inicializando a coleção de críticas (se necessário)
		if (linha.getCriticas() == null)
			linha.setCriticas(new HashSet<AtualizacaoCadastralSimplificadoCritica>());

		// percorrendo as críticas existentes até encontrar a crítica a ser
		// adicionada
		for (AtualizacaoCadastralSimplificadoCritica critica : criticas) {
			// se o id foi igual, esta crítica deve ser adicionada
			if (critica.getId().equals(idCritica)) {
				linha.getCriticas().add(critica);
				return;
			}
		}

		// caso percorra todas as críticas e não encontre a correpondente, lança
		// exceção
		throw new ControladorException(
				"erro.atualizacao_cadastral_simplificado.critica_inexistente");

	}

	/**
	 * Valida o número do hidrômetro que vem no arquivo. Bem como verifica se
	 * seu fabricante e capacidade estão cadastrados na base de dados.
	 * 
	 * [SB0001] Validar e atualizar Hidrômetro [UC0969] Importar arquivo de
	 * atualização cadastral simplificado
	 * 
	 * @author Samuel Valerio
	 * @date 22/10/2009
	 * 
	 * @param linha
	 * @return Código indicativo da validação: nulo se foi atualizado com
	 *         sucesso, -1 se já estava atualizado e um número maior que zero se
	 *         houve crítica.
	 * @throws ParseException
	 * @throws ErroRepositorioException
	 * @throws ControladorException
	 */
	public Integer validarEAtualizarHidrometro(
			AtualizacaoCadastralSimplificadoLinha linha) throws ParseException,
			ErroRepositorioException, ControladorException {
		Integer retorno = null; // por padrão, retorna nulo que indica a
								// atualização com sucesso

		final int TAMANHO_PADRAO_ABNT = 10;

		// valida se o tamanho do número do hidrômetro segue o padrão ABNT
		if (linha.getNumeroMedidor() != null
				&& linha.getNumeroMedidor().trim().length() != TAMANHO_PADRAO_ABNT)
			return AtualizacaoCadastralSimplificadoCritica.HIDROMETRO_FORA_TAMANHO_PADRAO_ABNT;

		final String COMPOSICAO_PADRAO_ABNT = "[A-Z]\\d\\d[A-Z]\\d\\d\\d\\d\\d\\d";
		Pattern p = Pattern.compile(COMPOSICAO_PADRAO_ABNT);
		Matcher m = p.matcher(linha.getNumeroMedidor());
		// valida se o número do hidrômetro segue o padrão ABNT
		if (linha.getNumeroMedidor() != null && !m.find())
			return AtualizacaoCadastralSimplificadoCritica.HIDROMETRO_FORA_PADRAO_ABNT;

		Hidrometro hidrometro = obterHidrometroAtualmenteInstalado(linha
				.getNumeroLigacao());
		// valida se tem hidrômetro atualmente instalado no imóvel
		if (hidrometro == null)
			return AtualizacaoCadastralSimplificadoCritica.IMOVEL_SEM_HIDROMETRO;
		else if (hidrometro.getNumero().equals(linha.getNumeroMedidor()))
			return -1; // retornar -1 quando o hidrômetro já está atualizado no
						// imóvel

		FiltroHidrometro filtroHidrometro = new FiltroHidrometro();
		filtroHidrometro.adicionarParametro(new ParametroSimples(
				FiltroHidrometro.NUMERO_HIDROMETRO, linha.getNumeroMedidor()
						.trim()));
		Hidrometro hidrometroInstaladoEmOutroImovel = (Hidrometro) Util
				.retonarObjetoDeColecao(getControladorUtil().pesquisar(
						filtroHidrometro, Hidrometro.class.getName()));
		// valida se o hidrômetro deste número já não está cadastrado
		if (hidrometroInstaladoEmOutroImovel != null
				&& hidrometro != null
				&& !hidrometroInstaladoEmOutroImovel.getNumero().equals(
						hidrometro.getNumero()))
			return AtualizacaoCadastralSimplificadoCritica.HIDROMETRO_INSTALADO_OUTRO_IMOVEL;

		String codigoDaCapacidade = linha.getNumeroMedidor().substring(0, 1);
		FiltroHidrometroCapacidade filtroHidrometroCapacidade = new FiltroHidrometroCapacidade();
		filtroHidrometroCapacidade.adicionarParametro(new ParametroSimples(
				FiltroHidrometroCapacidade.CODIGO_HIDROMETRO_CAPACIDADE,
				codigoDaCapacidade));
		HidrometroCapacidade hidrometroCapacidade = (HidrometroCapacidade) Util
				.retonarObjetoDeColecao(getControladorUtil().pesquisar(
						filtroHidrometroCapacidade,
						HidrometroCapacidade.class.getName()));
		// valida se a capacidade está cadastrada no sistema
		if (hidrometroCapacidade == null)
			return AtualizacaoCadastralSimplificadoCritica.HIDROMETRO_CAPACIDADE_INEXISTENTE;
		else
			hidrometro.setHidrometroCapacidade(hidrometroCapacidade);

		String terminacaoDoAnoDeFabricacao = linha.getNumeroMedidor()
				.substring(1, 3);

		// valida se a terminação do ano de fabricação é composta apenas por
		// números
		try {
			Integer.parseInt(terminacaoDoAnoDeFabricacao);
		} catch (NumberFormatException nfe) {
			return AtualizacaoCadastralSimplificadoCritica.HIDROMETRO_ANO_FABRICACAO_INVALIDO;
		}

		// complementa e atribui o ano de fabricação
		if (Integer.parseInt(terminacaoDoAnoDeFabricacao) >= 80)
			hidrometro.setAnoFabricacao(Short.parseShort("19"
					+ terminacaoDoAnoDeFabricacao));
		else
			hidrometro.setAnoFabricacao(Short.parseShort("20"
					+ terminacaoDoAnoDeFabricacao));

		Integer anoDataAquisicao = Util.getAno(hidrometro.getDataAquisicao());
		SimpleDateFormat formatoData = new SimpleDateFormat("dd/MM/yyyy");

		// Se o ano de aquisição for menor que o ano de fabricação ou maior que
		// o ano de fabricação mais 3
		// A data de aquisição é considerada inválida e é atribuído o valor
		// padrão de 1 de janeiro do ano de fabricação
		// Regra definida por Márcio e Joab da Comercial
		// exemplo: para o ano de fabricação 2005 o ano de aquisição deve estar
		// entre 2005 e 2008. Caso não esteja
		// é atribuída a data de aquisição 01/01/2005.
		// atribui a data de aquisição
		if (anoDataAquisicao < hidrometro.getAnoFabricacao()
				|| anoDataAquisicao > hidrometro.getAnoFabricacao() + 3)
			hidrometro.setDataAquisicao(formatoData.parse("01/01/"
					+ hidrometro.getAnoFabricacao()));

		String codigoDoFabricante = linha.getNumeroMedidor().substring(3, 4);
		FiltroHidrometroMarca filtroHidrometroMarca = new FiltroHidrometroMarca();
		filtroHidrometroMarca.adicionarParametro(new ParametroSimples(
				FiltroHidrometroMarca.CODIGO, codigoDoFabricante));
		HidrometroMarca hidrometroMarca = (HidrometroMarca) Util
				.retonarObjetoDeColecao(getControladorUtil().pesquisar(
						filtroHidrometroMarca, HidrometroMarca.class.getName()));
		// atribui a marca (fabricante) do hidrômetro
		if (hidrometroMarca == null)
			return AtualizacaoCadastralSimplificadoCritica.HIDROMETRO_FABRICANTE_INEXISTENTE;
		else
			hidrometro.setHidrometroMarca(hidrometroMarca);

		String numerosSequenciaisDoFabricante = linha.getNumeroMedidor()
				.substring(4);
		// valida de os sequenciais do fabricante sao apenas numeros
		try {
			Integer.parseInt(numerosSequenciaisDoFabricante);
		} catch (NumberFormatException nfe) {
			return AtualizacaoCadastralSimplificadoCritica.HIDROMETRO_SEQUENCIAIS_FABRICANTE_INVALIDOS;
		}

		// atribui o número do hidrômetro que veio do arquivo
		hidrometro.setNumero(linha.getNumeroMedidor());

		getControladorUtil().atualizar(hidrometro);

		return retorno;
	}

	/**
	 * Obtém o hidrômetro atualmente instalado para o imóvel passado como
	 * parâmetro.
	 * 
	 * [UC0969] Importar arquivo de atualização cadastral simplificado
	 * 
	 * @author Samuel Valerio
	 * @date 22/10/2009
	 * 
	 * @param idImovel
	 *            Id do imóvel para o qual se quer obter o hidrômetro instalado.
	 * @return O hidrômetro atualmente instalado no imóvel
	 * @throws ErroRepositorioException
	 */
	public Hidrometro obterHidrometroAtualmenteInstalado(Integer idImovel)
			throws ErroRepositorioException {
		Integer idHidrometroInstalacaoHistorico;
		idHidrometroInstalacaoHistorico = repositorioMicromedicao
				.verificarExistenciaHidrometroInstalacaoHistoricoTipoAgua(idImovel);
		if (idHidrometroInstalacaoHistorico == null
				|| 0 == idHidrometroInstalacaoHistorico)
			idHidrometroInstalacaoHistorico = repositorioMicromedicao
					.verificarExistenciaHidrometroInstalacaoHistoricoTipoPoco(idImovel);

		if (idHidrometroInstalacaoHistorico != null
				&& 0 != idHidrometroInstalacaoHistorico) {
			FiltroHidrometroInstalacaoHistorico filtroHidrometroInstalacaoHistorico = new FiltroHidrometroInstalacaoHistorico();
			filtroHidrometroInstalacaoHistorico
					.adicionarParametro(new ParametroSimples(
							FiltroHidrometroInstalacaoHistorico.ID,
							idHidrometroInstalacaoHistorico));
			filtroHidrometroInstalacaoHistorico
					.adicionarCaminhoParaCarregamentoEntidade(FiltroHidrometroInstalacaoHistorico.HIDROMETRO);
			return ((HidrometroInstalacaoHistorico) Util
					.retonarObjetoDeColecao(repositorioUtil.pesquisar(
							filtroHidrometroInstalacaoHistorico,
							HidrometroInstalacaoHistorico.class.getName())))
					.getHidrometro();
		} else {
			return null;
		}

	}

	/**
	 * Busca as críticas existentes para o arquivo passado como parâmetro.
	 * 
	 * [UC0969] Importar arquivo de atualização cadastral simplificado
	 * 
	 * @author Samuel Valerio
	 * @date 22/10/2009
	 * 
	 * @param idArquivo
	 *            Id do arquivo texto importado
	 * @return Críticas existentes para o arquivo.
	 * @throws ControladorException
	 */
	public Collection<AtualizacaoCadastralSimplificadoCritica> pesquisarAtualizacaoCadastralSimplificadoCritica(
			int idArquivo) throws ControladorException {
		try {
			return repositorioCadastro
					.pesquisarAtualizacaoCadastralSimplificadoCritica(idArquivo);
		} catch (ErroRepositorioException e) {
			throw new ControladorException("erro.sistema", e);
		}
	}

	/**
	 * Valida se as subcategorias a serem atualizadas existem na base de dados.
	 * Se não existirem, gera uma crítica e aborta a atualização.
	 * 
	 * [SB0003] Validar e atualizar subcategorias e economias do imóvel [UC0969]
	 * Importar arquivo de atualização cadastral simplificado
	 * 
	 * @author Samuel Valerio
	 * @date 22/10/2009
	 * 
	 * @param linha
	 *            Linha contendo a matrícula do imóvel bem como as subcategorias
	 *            e economias vindas da pesquisa de campo
	 * @return Código indicativo da validação: nulo se foi atualizado com
	 *         sucesso, -1 se já estava atualizado e um número maior que zero se
	 *         houve crítica.
	 * @throws ControladorException
	 */
	public Integer validarEAtualizarEconomias(
			AtualizacaoCadastralSimplificadoLinha linha)
			throws ControladorException {
		Integer retorno = null; // por padrão, retorna nulo que indica a
								// atualização com sucesso

		// obtendo as subcategorias do imóvel do BD
		Collection<ImovelSubcategoria> subcategorias = getControladorImovel()
				.obterColecaoImovelSubcategorias(
						new Imovel(linha.getNumeroLigacao()), 1);

		// em princípio, deve-se remover do BD todas as subcategorias do imóvel
		// e adicionar todas as subcategorias vindas no arquivo
		Collection<ImovelSubcategoria> subcategoriasARemover = new ArrayList<ImovelSubcategoria>(
				subcategorias);

		// percorre todas as subcategorias do imóvel existentes na base para
		// comparar com as subcategorias vindas do arquivo
		for (ImovelSubcategoria imovelSubcategoria : subcategorias) {
			for (int i = 0; i < linha.getCategorias().size(); i++) {
				Integer categoria = Integer.parseInt(linha.getCategorias().get(
						i));
				// se encontrar uma subcategoria que coincida e tenha o mesmo
				// número de economias
				if (imovelSubcategoria.getComp_id().getSubcategoria()
						.getCodigo() == categoria
						&& imovelSubcategoria.getQuantidadeEconomias() == Integer
								.parseInt(linha.getEconomias().get(i))) {
					// esta subcategoria não deve ser mais removida da base
					subcategoriasARemover.remove(imovelSubcategoria);

					// esta subcategoria não deve ser adicionada na base
					linha.getCategorias().remove(i);
					linha.getEconomias().remove(i);
				}
			}
		}

		// caso existam subcategorias a serem removidas do BD
		if (subcategoriasARemover.size() > 0) {
			// remove-as uma a uma, registrando a transação para possibilitar
			// auditoria futura
			for (ImovelSubcategoria imovelSubcategoria : subcategoriasARemover) {
				Imovel imovel = imovelSubcategoria.getComp_id().getImovel();
				RegistradorOperacao registradorOperacao = new RegistradorOperacao(
						Operacao.OPERACAO_IMOVEL_ATUALIZAR, imovel.getId(),
						imovel.getId(), new UsuarioAcaoUsuarioHelper(linha
								.getArquivo().getUsuario(),
								UsuarioAcao.USUARIO_ACAO_EFETUOU_OPERACAO));

				registradorOperacao.registrarOperacao(imovel);
				registradorOperacao.registrarOperacao(imovelSubcategoria);
				getControladorUtil().remover(imovelSubcategoria);
			}
		}

		// caso existam subcategorias a serem adicionadas no BD (vindas do
		// arquivo)
		if (linha.getCategorias().size() > 0) {
			// adiciona uma a uma, registrando a transação para possibilitar
			// auditoria futura
			for (int i = 0; i < linha.getCategorias().size(); i++) {
				String cat = linha.getCategorias().get(i);

				FiltroImovel filtroImovel = new FiltroImovel();
				filtroImovel.adicionarParametro(new ParametroSimples(
						FiltroImovel.ID, linha.getNumeroLigacao()));
				// carregando entidades necessárias para não dar LazyException
				filtroImovel
						.adicionarCaminhoParaCarregamentoEntidade("setorComercial");
				filtroImovel
						.adicionarCaminhoParaCarregamentoEntidade("areaConstruidaFaixa");
				filtroImovel
						.adicionarCaminhoParaCarregamentoEntidade("pavimentoCalcada");
				filtroImovel
						.adicionarCaminhoParaCarregamentoEntidade("imovelPerfil");
				filtroImovel
						.adicionarCaminhoParaCarregamentoEntidade("reservatorioVolumeFaixaSuperior");
				filtroImovel
						.adicionarCaminhoParaCarregamentoEntidade("reservatorioVolumeFaixaInferior");
				filtroImovel
						.adicionarCaminhoParaCarregamentoEntidade("localidade");
				filtroImovel.adicionarCaminhoParaCarregamentoEntidade("quadra");
				filtroImovel
						.adicionarCaminhoParaCarregamentoEntidade("pavimentoRua");
				filtroImovel
						.adicionarCaminhoParaCarregamentoEntidade("enderecoReferencia");
				filtroImovel
						.adicionarCaminhoParaCarregamentoEntidade("pavimentoRua");
				filtroImovel
						.adicionarCaminhoParaCarregamentoEntidade("pocoTipo");
				filtroImovel
						.adicionarCaminhoParaCarregamentoEntidade("despejo");
				filtroImovel
						.adicionarCaminhoParaCarregamentoEntidade("fonteAbastecimento");
				filtroImovel
						.adicionarCaminhoParaCarregamentoEntidade("piscinaVolumeFaixa");
				filtroImovel
						.adicionarCaminhoParaCarregamentoEntidade("imovelTipoHabitacao");
				filtroImovel
						.adicionarCaminhoParaCarregamentoEntidade("imovelTipoPropriedade");
				filtroImovel
						.adicionarCaminhoParaCarregamentoEntidade("imovelTipoPropriedade");
				filtroImovel
						.adicionarCaminhoParaCarregamentoEntidade("imovelTipoCobertura");
				filtroImovel
						.adicionarCaminhoParaCarregamentoEntidade("logradouroBairro");
				filtroImovel
						.adicionarCaminhoParaCarregamentoEntidade("logradouroBairro.bairro");
				filtroImovel
						.adicionarCaminhoParaCarregamentoEntidade("logradouroCep");
				filtroImovel
						.adicionarCaminhoParaCarregamentoEntidade("logradouroCep.cep");
				filtroImovel
						.adicionarCaminhoParaCarregamentoEntidade("logradouroCep.logradouro");
				filtroImovel
						.adicionarCaminhoParaCarregamentoEntidade("logradouroCep.logradouro.logradouroTipo");
				filtroImovel
						.adicionarCaminhoParaCarregamentoEntidade("logradouroCep.logradouro.logradouroTitulo");
				filtroImovel
						.adicionarCaminhoParaCarregamentoEntidade("rotaEntrega");
				filtroImovel
						.adicionarCaminhoParaCarregamentoEntidade("funcionario");
				filtroImovel
						.adicionarCaminhoParaCarregamentoEntidade("imovelSubcategorias");

				Imovel imovel = (Imovel) Util
						.retonarObjetoDeColecao(getControladorUtil().pesquisar(
								filtroImovel, Imovel.class.getName()));
				FiltroSubCategoria filtroSubcategoria = new FiltroSubCategoria();
				filtroSubcategoria.adicionarParametro(new ParametroSimples(
						FiltroSubCategoria.CODIGO, cat));
				filtroSubcategoria
						.adicionarCaminhoParaCarregamentoEntidade("categoria");
				Subcategoria subcategoria = (Subcategoria) Util
						.retonarObjetoDeColecao(getControladorUtil().pesquisar(
								filtroSubcategoria,
								Subcategoria.class.getName()));
				// caso venha uma subcategoria no arquivo que não exista no BD
				// deve-se gerar uma crítica e abortar a atualização das
				// economias
				if (subcategoria == null)
					return AtualizacaoCadastralSimplificadoCritica.IMOVEL_SUBCATEGORIA_INEXISTENTE;

				// Criando um ImovelSubcategoria para a sub categoria do arquivo
				// ---
				// Associando um imovel a uma subcategoria
				ImovelSubcategoriaPK ispk = new ImovelSubcategoriaPK(imovel,
						subcategoria);
				ImovelSubcategoria imovelSubcategoria = new ImovelSubcategoria(
						ispk, new Short(linha.getEconomias().get(i)));
				// Colocando data da atualização individualmete no
				// imovelSubcategoria
				imovelSubcategoria.setUltimaAlteracao(new Date());

				RegistradorOperacao registradorOperacao = new RegistradorOperacao(
						Operacao.OPERACAO_IMOVEL_ATUALIZAR, imovel.getId(),
						imovel.getId(), new UsuarioAcaoUsuarioHelper(linha
								.getArquivo().getUsuario(),
								UsuarioAcao.USUARIO_ACAO_EFETUOU_OPERACAO));

				registradorOperacao.registrarOperacao(imovel);
				registradorOperacao.registrarOperacao(imovelSubcategoria);
				getControladorUtil().inserir(imovelSubcategoria);
			}
		}

		// se removeu (subcategoriasARemover.size() > 0) ou adicionou
		// (linha.getCategorias.size()>0)
		// economias, retorna nulo
		if (subcategoriasARemover.size() > 0
				|| linha.getCategorias().size() > 0) {
			return retorno; // retorna nulo indicando que as
							// subcategorias/economias do imóvel fora
							// atualizadas com sucesso
		} else {
			return -1; // retorna -1 se as economias do imóvel já estão
						// atualizadas
		}

	}

	/**
	 * Busca o imovel atraves do identificador unico (id). Caso o numero do
	 * medidor de energia seja nulo ou diferente das informacoes vindas na
	 * atualizacao, atualiza o numero do medidor de energia
	 * 
	 * [SB0004] Validar e atualizar numero do medidor de energia do imovel
	 * [UC0969] Importar arquivo de atualizacao cadastral simplificado
	 * 
	 * @author Higor Gondim
	 * @date 21/05/2010
	 * 
	 * @param linha
	 *            Linha contendo a matricula do imovel bem como o numero do
	 *            medidor de energia que vem de campo
	 * @return Codigo indicativo da validacao: nulo se foi atualizado com
	 *         sucesso, -1 se ja estava atualizado e um numero maior que zero se
	 *         houve critica.
	 * @throws ControladorException
	 */
	public Integer validarEAtualizarMedidorEnergia(
			AtualizacaoCadastralSimplificadoLinha linha)
			throws ControladorException {
		Integer retorno = null; // por padrao, retorna nulo que indica a
		// atualizacao com sucesso

		// obtendo o imovel a partir da matricula
		FiltroImovel filtroImovel = new FiltroImovel();
		filtroImovel.adicionarParametro(new ParametroSimples(FiltroImovel.ID,
				linha.getImovel().getId()));

		// Pesquisa o imovel
		Imovel imovel = (Imovel) Util
				.retonarObjetoDeColecao(getControladorUtil().pesquisar(
						filtroImovel, Imovel.class.getName()));

		// Atualiza imovel com o numero do medidor caso nao esteja atualizado
		if (imovel.getNumeroMedidorEnergia() == null
				|| !imovel.getNumeroMedidorEnergia().equals(
						linha.getNumeroMedidorEnergia().trim())) {
			imovel.setNumeroMedidorEnergia(linha.getNumeroMedidorEnergia()
					.trim());
			getControladorUtil().atualizar(imovel);
		} else {
			retorno = -1;// retorna -1 se o medidor de energia do imovel ja esta
			// atualizada
		}

		return retorno;
	}

	/**
	 * Efetua atualizacao de cliente com base nas regras de negocio definidas em
	 * [UC0969][SB0005]
	 * 
	 * [SB0005] Validar e atualizar informações de cliente [UC0969] Importar
	 * arquivo de atualizacao cadastral simplificado
	 * 
	 * @author Higor Gondim
	 * @date 27/04/2011
	 * 
	 * @param linha
	 *            Linha contendo a matricula do imovel bem como os dados do
	 *            cliente que vem de campo
	 * @return Codigo indicativo da validacao: nulo se foi atualizado com
	 *         sucesso, -1 se ja estava atualizado e um numero maior que zero se
	 *         houve critica.
	 * @throws ControladorException
	 */
	public Integer validarEAtualizarCliente(
			AtualizacaoCadastralSimplificadoLinha linha)
			throws ControladorException {
		Integer retorno = null; // por padrao, retorna nulo que indica a
								// atualizacao com sucesso

		if (linha.getNumeroCPF() != null
				&& !"".equals(linha.getNumeroCPF().trim())) {

			// Validando CPF
			if (!Util.validacaoCPF(linha.getNumeroCPF())) {
				return AtualizacaoCadastralSimplificadoCritica.CPF_INVALIDO;
			}

			// Buscando imovel e cliente usuario associado
			FiltroClienteImovel filtroClienteImovel = new FiltroClienteImovel();
			filtroClienteImovel.adicionarParametro(new ParametroSimples(
					FiltroClienteImovel.IMOVEL, linha.getImovel()));
			filtroClienteImovel.adicionarParametro(new ParametroSimples(
					FiltroClienteImovel.CLIENTE_RELACAO_TIPO,
					ClienteRelacaoTipo.USUARIO));
			filtroClienteImovel.adicionarParametro(new ParametroNulo(
					FiltroClienteImovel.DATA_FIM_RELACAO));
			filtroClienteImovel
					.adicionarCaminhoParaCarregamentoEntidade(FiltroClienteImovel.CLIENTE);
			filtroClienteImovel
					.adicionarCaminhoParaCarregamentoEntidade(FiltroClienteImovel.IMOVEL);

			ClienteImovel atualClienteImovel = (ClienteImovel) Util
					.retonarObjetoDeColecao(getControladorUtil().pesquisar(
							filtroClienteImovel, ClienteImovel.class.getName()));

			Imovel imovel = atualClienteImovel.getImovel();

			// Pesquisando cliente com CPF informado
			FiltroCliente filtroCliente = new FiltroCliente();
			filtroCliente.adicionarParametro(new ParametroSimples(
					FiltroCliente.CPF, linha.getNumeroCPF()));

			Cliente cliente = (Cliente) Util
					.retonarObjetoDeColecao(getControladorUtil().pesquisar(
							filtroCliente, Cliente.class.getName()));

			if (cliente != null) {
				if (cliente.getRg() != null
						&& !cliente.getRg().trim().equals("")) {
					if ((linha.getNumeroRG() != null && !linha.getNumeroRG()
							.trim().equals(""))
							&& cliente.getRg().trim()
									.equals(linha.getNumeroRG().trim())) {
						atualizarDadosClienteAtual(linha, cliente,
								atualClienteImovel);
					} else {
						return AtualizacaoCadastralSimplificadoCritica.INFORMACOES_DE_USUARIOS_CONFLITANTES;
					}
				} else {
					atualizarDadosClienteAtual(linha, cliente,
							atualClienteImovel);
				}
			} else {
				// Criar um novo cliente com dados de campo e associalo ao
				// imovel
				ClienteImovelFimRelacaoMotivo clienteImovelFimRelacaoMotivo = new ClienteImovelFimRelacaoMotivo();
				clienteImovelFimRelacaoMotivo
						.setId(ClienteImovelFimRelacaoMotivo.ATUALIZACAO_CADASTRAL_SIMPLIFICADA);
				atualClienteImovel
						.setClienteImovelFimRelacaoMotivo(clienteImovelFimRelacaoMotivo);
				atualClienteImovel.setDataFimRelacao(new Date());

				// Criando o novo cliente
				Cliente novoCliente = new Cliente();

				// Setando identificacao e documentos
				novoCliente.setNome(linha.getNomeCliente().trim());
				if (linha.getNumeroRG() != null) {
					novoCliente.setRg(linha.getNumeroRG());
				}
				novoCliente.setCpf(linha.getNumeroCPF());

				novoCliente.setIndicadorUso(new Short("1"));
				novoCliente.setClienteTipo(atualClienteImovel.getCliente()
						.getClienteTipo());

				// Setando endereco
				ClienteEndereco clienteEndereco = new ClienteEndereco();
				EnderecoTipo enderecoTipo = new EnderecoTipo();
				enderecoTipo.setId(1);// Residencial
				clienteEndereco.setEnderecoTipo(enderecoTipo);
				clienteEndereco.setCliente(novoCliente);
				clienteEndereco.setLogradouroBairro(imovel
						.getLogradouroBairro());
				clienteEndereco.setLogradouroCep(imovel.getLogradouroCep());
				clienteEndereco.setNumero(imovel.getNumeroImovel());
				clienteEndereco.setComplemento(imovel.getComplementoEndereco());
				clienteEndereco.setIndicadorEnderecoCorrespondencia(new Short(
						"1"));
				clienteEndereco.setUltimaAlteracao(new Date());

				Set<ClienteEndereco> clienteEnderecos = new HashSet<ClienteEndereco>();
				clienteEnderecos.add(clienteEndereco);

				novoCliente.setClienteEnderecos(clienteEnderecos);

				// Setando o sexo
				PessoaSexo pessoaSexo = new PessoaSexo();
				if (linha.getSexoCliente().equals("M")) {
					pessoaSexo.setId(1);
				} else if (linha.getSexoCliente().equals("F")) {
					pessoaSexo.setId(2);
				} else {
					pessoaSexo.setId(0);
				}
				novoCliente.setPessoaSexo(pessoaSexo);

				// Setando telefone
				ClienteFone clienteFone = null;
				if (linha.getNumeroTelefone() != null) {
					if (linha.getNumeroTelefone().startsWith("3")
							|| linha.getNumeroTelefone().startsWith("4")
							|| linha.getNumeroTelefone().startsWith("8")
							|| linha.getNumeroTelefone().startsWith("9")) {
						clienteFone = new ClienteFone();
						clienteFone.setCliente(novoCliente);
						FoneTipo foneTipo = new FoneTipo();
						if (linha.getNumeroTelefone().startsWith("3")
								|| linha.getNumeroTelefone().startsWith("4")) {
							foneTipo.setId(FoneTipo.RESIDENCIAL);
						} else if (linha.getNumeroTelefone().startsWith("8")
								|| linha.getNumeroTelefone().startsWith("9")) {
							foneTipo.setId(FoneTipo.CELULAR);
						}
						clienteFone.setFoneTipo(foneTipo);
						clienteFone.setTelefone(linha.getNumeroTelefone());
						clienteFone.setIndicadorTelefonePadrao(new Short("1"));
						clienteFone.setUltimaAlteracao(new Date());

						Set clienteFones = new HashSet();
						clienteFones.add(clienteFone);
						novoCliente.setClienteFones(clienteFones);
					}
				}

				// Setando itens obrigatorios
				novoCliente.setIndicadorAcrescimos(atualClienteImovel
						.getCliente().getIndicadorAcrescimos());
				novoCliente.setIndicadorGeraArquivoTexto(atualClienteImovel
						.getCliente().getIndicadorGeraArquivoTexto());
				novoCliente
						.setIndicadorVencimentoMesSeguinte(atualClienteImovel
								.getCliente()
								.getIndicadorVencimentoMesSeguinte());
				novoCliente.setIndicadorGeraFaturaAntecipada(atualClienteImovel
						.getCliente().getIndicadorGeraFaturaAntecipada());
				novoCliente.setIndicadorUsoNomeFantasiaConta(atualClienteImovel
						.getCliente().getIndicadorUsoNomeFantasiaConta());
				novoCliente.setIndicadorPermiteNegativacao(atualClienteImovel
						.getCliente().getIndicadorPermiteNegativacao());
				novoCliente.setIndicadorNegativacaoPeriodo(atualClienteImovel
						.getCliente().getIndicadorNegativacaoPeriodo());
				novoCliente.setUltimaAlteracao(new Date());

				// Associando novo cliente como imovel
				ClienteRelacaoTipo novoClienteRelacaoTipo = new ClienteRelacaoTipo();
				novoClienteRelacaoTipo.setId(new Integer(
						ClienteRelacaoTipo.USUARIO));

				ClienteImovel novoClienteImovel = new ClienteImovel();
				novoClienteImovel.setCliente(novoCliente);
				novoClienteImovel.setClienteRelacaoTipo(novoClienteRelacaoTipo);
				novoClienteImovel.setImovel(imovel);
				novoClienteImovel.setIndicadorNomeConta(atualClienteImovel
						.getIndicadorNomeConta());
				novoClienteImovel.setDataInicioRelacao(new Date());
				novoClienteImovel.setUltimaAlteracao(new Date());

				getControladorUtil().atualizar(atualClienteImovel);
				getControladorUtil().inserir(novoCliente);
				getControladorUtil().inserir(clienteEndereco);
				if (clienteFone != null) {
					getControladorUtil().inserir(clienteFone);
				}
				getControladorUtil().inserir(novoClienteImovel);
			}

		}

		return retorno;
	}

	/**
	 * Efetua atualizacao de cliente encontrado com o cpf informado e associa ao
	 * imovel em questao
	 * 
	 * [SB0005] Validar e atualizar informações de cliente [UC0969] Importar
	 * arquivo de atualizacao cadastral simplificado
	 * 
	 * @author Higor Gondim
	 * @date 18/10/2011
	 * 
	 * @param linha
	 *            Linha do arquivo de atualizacao cadastral
	 * @param cliente
	 *            Cliente encontrado no banco de dados com o cpf informado
	 * @param atualClienteImovel
	 *            Associacao de cliente imovel (USUARIO) valida para o imovel
	 * 
	 * @throws ControladorException
	 */
	public void atualizarDadosClienteAtual(
			AtualizacaoCadastralSimplificadoLinha linha, Cliente cliente,
			ClienteImovel atualClienteImovel) throws ControladorException {
		// Setando nome
		cliente.setNome(linha.getNomeCliente().trim());

		// Setando RG
		if (linha.getNumeroRG() != null) {
			cliente.setRg(linha.getNumeroRG());
		}

		// Setando o sexo
		PessoaSexo pessoaSexo = new PessoaSexo();
		if (linha.getSexoCliente().equals("M")) {
			pessoaSexo.setId(1);
		} else if (linha.getSexoCliente().equals("F")) {
			pessoaSexo.setId(2);
		} else {
			pessoaSexo.setId(0);
		}
		cliente.setPessoaSexo(pessoaSexo);

		// Setando telefone
		ClienteFone clienteFone = null;
		if (linha.getNumeroTelefone() != null) {
			if (linha.getNumeroTelefone().startsWith("3")
					|| linha.getNumeroTelefone().startsWith("4")
					|| linha.getNumeroTelefone().startsWith("8")
					|| linha.getNumeroTelefone().startsWith("9")) {
				clienteFone = new ClienteFone();
				clienteFone.setCliente(cliente);
				FoneTipo foneTipo = new FoneTipo();
				if (linha.getNumeroTelefone().startsWith("3")
						|| linha.getNumeroTelefone().startsWith("4")) {
					foneTipo.setId(FoneTipo.RESIDENCIAL);
				} else if (linha.getNumeroTelefone().startsWith("8")
						|| linha.getNumeroTelefone().startsWith("9")) {
					foneTipo.setId(FoneTipo.CELULAR);
				}
				clienteFone.setFoneTipo(foneTipo);
				clienteFone.setTelefone(linha.getNumeroTelefone());
				clienteFone.setIndicadorTelefonePadrao(new Short("2"));
				clienteFone.setUltimaAlteracao(new Date());

				Set clienteFones = new HashSet();
				clienteFones.add(clienteFone);
				cliente.setClienteFones(clienteFones);

				getControladorUtil().inserir(clienteFone);
			}
		}

		if (!atualClienteImovel.getCliente().getId().equals(cliente.getId())) {
			// Atualizar cliente do imovel vindo da pesquisa cadastral com o
			// cliente buscado!
			ClienteImovelFimRelacaoMotivo clienteImovelFimRelacaoMotivo = new ClienteImovelFimRelacaoMotivo();
			clienteImovelFimRelacaoMotivo
					.setId(ClienteImovelFimRelacaoMotivo.ATUALIZACAO_CADASTRAL_SIMPLIFICADA);
			atualClienteImovel
					.setClienteImovelFimRelacaoMotivo(clienteImovelFimRelacaoMotivo);
			atualClienteImovel.setDataFimRelacao(new Date());

			// Associando cliente buscado com o imovel
			ClienteRelacaoTipo novoClienteRelacaoTipo = new ClienteRelacaoTipo();
			novoClienteRelacaoTipo
					.setId(new Integer(ClienteRelacaoTipo.USUARIO));

			ClienteImovel novoClienteImovel = new ClienteImovel();
			novoClienteImovel.setCliente(cliente);
			novoClienteImovel.setClienteRelacaoTipo(novoClienteRelacaoTipo);
			novoClienteImovel.setImovel(atualClienteImovel.getImovel());
			novoClienteImovel.setIndicadorNomeConta(atualClienteImovel
					.getIndicadorNomeConta());
			novoClienteImovel.setDataInicioRelacao(new Date());
			novoClienteImovel.setUltimaAlteracao(new Date());

			getControladorUtil().atualizar(atualClienteImovel);
			getControladorUtil().inserir(novoClienteImovel);
		}

		getControladorUtil().atualizar(cliente);
	}

	/**
	 * 
	 * [UC0973] Inserir Imóvel em Programa Especial [FS0004] Validar dados do
	 * imóvel no programa especial
	 * 
	 * @author Hugo Amorim
	 * @since 17/12/2009
	 * 
	 */
	public void validarDadosInserirImovelProgramaEspecial(
			ImovelProgramaEspecial imovelProgramaEspecial)
			throws ControladorException {

		// Obter Parametros do sistema
		SistemaParametro sistemaParametro = this.getControladorUtil()
				.pesquisarParametrosDoSistema();

		if (imovelProgramaEspecial.getImovel().getLigacaoAguaSituacao() != null) {
			if (imovelProgramaEspecial.getImovel().getLigacaoAguaSituacao()
					.getId().compareTo(LigacaoAguaSituacao.LIGADO) != 0) {
				throw new ControladorException("atencao.situacao.agua.invalido");
			}
		}

		// [FS0004] Validar dados do imóvel no programa especial
		// Verifica se categoria do imovel
		// e igual a residencial
		Collection colecaoSubcategoriasImovel = this.getControladorImovel()
				.obterColecaoImovelSubcategorias(
						imovelProgramaEspecial.getImovel(), new Integer(0));

		if (colecaoSubcategoriasImovel != null
				&& !colecaoSubcategoriasImovel.isEmpty()) {
			for (Iterator iterator = colecaoSubcategoriasImovel.iterator(); iterator
					.hasNext();) {
				ImovelSubcategoria imovelSubcategoria = (ImovelSubcategoria) iterator
						.next();

				if (imovelSubcategoria.getComp_id().getSubcategoria()
						.getCategoria().getId().compareTo(new Integer(1)) != 0) {
					throw new ControladorException(
							"atencao.categoria.nao.permite.incluir.programa");
				}
			}
		}

		// [FS0004] Validar dados do imóvel no programa especial
		// Verifica se immóvel não possui hidrometro
		// e tem área construída superior a 100m2

		// Obtém o indicador de existência de hidrômetro para o imóvel, caso
		// exista
		// retorna 1(um) indicando SIM caso contrário retorna 2(dois) indicando
		// NÃO
		Integer possuiHidrometro = this.getControladorImovel()
				.obterIndicadorExistenciaHidrometroImovel(
						imovelProgramaEspecial.getImovel().getId());

		if (possuiHidrometro.compareTo(new Integer(2)) == 0
				&& imovelProgramaEspecial.getImovel().getAreaConstruida()
						.compareTo(new BigDecimal("100")) > 0) {
			throw new ControladorException("atencao.area.maior.permitida");
		}

		// [FS0004] Validar dados do imóvel no programa especial
		// Verifica consumo de água do mês atual se não houver no mês atual
		// é maior que 25m3

		Integer mesAnoFaturamento = sistemaParametro.getAnoMesFaturamento();
		Integer mesAnoAnteriorFaturamento = Util
				.subtraiAteSeisMesesAnoMesReferencia(mesAnoFaturamento, 1);

		Integer consumoFaturado = null;

		consumoFaturado = this.getControladorImovel()
				.obterConsumoFaturadoImovelNoMes(
						imovelProgramaEspecial.getImovel().getId(),
						mesAnoFaturamento);
		if (consumoFaturado == null) {

			consumoFaturado = this.getControladorImovel()
					.obterConsumoFaturadoImovelNoMes(
							imovelProgramaEspecial.getImovel().getId(),
							mesAnoAnteriorFaturamento);
		}

		if (consumoFaturado != null
				&& possuiHidrometro.compareTo(new Integer(1)) == 0
				&& consumoFaturado.compareTo(new Integer(25)) > 0) {
			throw new ControladorException("atencao.consumo.anterior.invalido");
		}

		// [FS0004] Validar dados do imóvel no programa especial
		// Verifica se cliente reponsável pelo imóvel
		// é diferente do responsável pelo programa especial
		FiltroClienteImovel filtroClienteImovel = new FiltroClienteImovel();
		filtroClienteImovel.adicionarCaminhoParaCarregamentoEntidade("cliente");
		filtroClienteImovel
				.adicionarCaminhoParaCarregamentoEntidade("clienteRelacaoTipo");

		filtroClienteImovel.adicionarParametro(new ParametroSimples(
				FiltroClienteImovel.IMOVEL_ID, imovelProgramaEspecial
						.getImovel().getId()));
		filtroClienteImovel.adicionarParametro(new ParametroSimples(
				FiltroClienteImovel.CLIENTE_RELACAO_TIPO_ID,
				ClienteRelacaoTipo.RESPONSAVEL));
		filtroClienteImovel.adicionarParametro(new ParametroNulo(
				FiltroClienteImovel.DATA_FIM_RELACAO));

		Collection clientesImovel = getControladorUtil().pesquisar(
				filtroClienteImovel, ClienteImovel.class.getName());

		ClienteImovel clienteImovel = (ClienteImovel) Util
				.retonarObjetoDeColecao(clientesImovel);

		if (sistemaParametro.getClienteResponsavelProgramaEspecial() != null) {
			if (clienteImovel != null
					&& clienteImovel
							.getCliente()
							.getId()
							.compareTo(
									sistemaParametro
											.getClienteResponsavelProgramaEspecial()
											.getId()) != 0) {

				throw new ControladorException(
						"atencao.cliente.diferente.responsavel.programa", null,
						clienteImovel.getCliente().getId().toString());
			}
		}

		/*
		 * Erivan Sousa Verificação retirada em 04/09/2012 por solicitação da
		 * CAEMA apartir da RM4560
		 */
		// Valida se imovel está em processo de suspensão.
		// FiltroImovelProgramaEspecial filtroImovelProgramaEspecial = new
		// FiltroImovelProgramaEspecial();
		//
		// filtroImovelProgramaEspecial
		// .adicionarParametro(new ParametroSimples(
		// FiltroImovelProgramaEspecial.IMOVEL_ID,
		// imovelProgramaEspecial.getImovel().getId()));
		// filtroImovelProgramaEspecial
		// .adicionarParametro(new ParametroSimples(
		// FiltroImovelProgramaEspecial.FORMA_SUSPENSAO,
		// ImovelProgramaEspecial.FORMA_SUSPENSAO_OPERADOR));
		//
		// Collection<ImovelProgramaEspecial> colecaoImovelProgramaEspecial =
		// this.getControladorUtil().pesquisar(filtroImovelProgramaEspecial,
		// ImovelProgramaEspecial.class.getName());
		//
		// ImovelProgramaEspecial imovelProgramaEspecialEmProcessoDeSuspensao =
		// (ImovelProgramaEspecial)
		// Util.retonarObjetoDeColecao(colecaoImovelProgramaEspecial);
		//
		// if(imovelProgramaEspecialEmProcessoDeSuspensao!=null){
		// throw new
		// ControladorException("atencao.imovel_em_processo_de_suspensao");
		// }

	}

	/**
	 * [UC0925] Emitir Boletos
	 * 
	 * retrona DBTP_VLLIMITE para DBTP_ID = idDebitoTipo
	 * 
	 * @author Rômulo Aurélio
	 * @date 22/12/2009
	 * 
	 * @throws ErroRepositorioException
	 */
	public BigDecimal pesquisarValorSugeridoDebitoTipo(Integer idDebitoTipo)
			throws ControladorException {
		try {
			return repositorioCadastro
					.pesquisarValorSugeridoDebitoTipo(idDebitoTipo);
		} catch (ErroRepositorioException e) {
			throw new ControladorException("erro.sistema", e);
		}
	}

	/**
	 * 
	 * [UC0976] Suspender Imóvel em Programa Especial [FS0004] Validar dados da
	 * suspensão imóvel no programa especial
	 * 
	 * @author Hugo Amorim
	 * @since 21/12/2009
	 * 
	 */
	public void validarDadosSuspensaoImovelProgramaEspecial(
			ImovelProgramaEspecial imovelProgramaEspecial)
			throws ControladorException {

		Pagamento pagamento = null;
		Conta conta = null;
		ClienteConta clienteConta = null;

		SistemaParametro sistemaParametro = this.getControladorUtil()
				.pesquisarParametrosDoSistema();

		FiltroConta filtroConta = new FiltroConta();

		filtroConta.adicionarParametro(new ParametroSimples(
				FiltroConta.IMOVEL_ID, imovelProgramaEspecial.getImovel()
						.getId()));
		filtroConta
				.adicionarParametro(new ParametroSimples(
						FiltroConta.REFERENCIA, sistemaParametro
								.getAnoMesFaturamento()));

		Collection<Conta> colecaoContas = this.getControladorUtil().pesquisar(
				filtroConta, Conta.class.getName());

		conta = (Conta) Util.retonarObjetoDeColecao(colecaoContas);

		if (conta != null) {

			FiltroClienteConta filtroClienteConta = new FiltroClienteConta();

			filtroClienteConta.adicionarParametro(new ParametroSimples(
					FiltroClienteConta.CONTA_ID, conta.getId()));
			filtroClienteConta.adicionarParametro(new ParametroSimples(
					FiltroClienteConta.CLIENTE_ID, sistemaParametro
							.getClienteResponsavelProgramaEspecial().getId()));

			filtroClienteConta
					.adicionarCaminhoParaCarregamentoEntidade(FiltroClienteConta.CONTA);
			filtroClienteConta
					.adicionarCaminhoParaCarregamentoEntidade(FiltroClienteConta.CLIENTE);

			Collection<ClienteConta> colecaoClienteConta = this
					.getControladorUtil().pesquisar(filtroClienteConta,
							ClienteConta.class.getName());

			clienteConta = (ClienteConta) Util
					.retonarObjetoDeColecao(colecaoClienteConta);

			if (clienteConta != null) {

				FiltroPagamento filtroPagamento = new FiltroPagamento();

				filtroPagamento.adicionarParametro(new ParametroSimples(
						FiltroPagamento.CONTA_ID, clienteConta.getConta()
								.getId()));

				Collection<Pagamento> colecaoPagamento = this
						.getControladorUtil().pesquisar(filtroPagamento,
								Pagamento.class.getName());

				pagamento = (Pagamento) Util
						.retonarObjetoDeColecao(colecaoPagamento);

			}

		}

		if (conta != null && clienteConta != null && pagamento == null) {

			throw new ControladorException(
					"atencao.suspensao.so.possivel.depois.faturamento");

		}

	}

	/**
	 * 
	 * [UC0976] Suspender Imóvel em Programa Especial Forma Online Suspende
	 * Imóvel em Programa Especial forma Online
	 * 
	 * @author Hugo Amorim
	 * @since 13/01/2010
	 * 
	 */
	public void suspenderImovelEmProgramaEspecialOnline(
			ImovelProgramaEspecial imovelProgramaEspecial,
			Usuario usuarioLogado, Short formaSuspensao)
			throws ControladorException {

		Date dataAtual = new Date();

		Imovel imovel = imovelProgramaEspecial.getImovel();
		ImovelPerfil imovelPerfil = new ImovelPerfil();
		imovelPerfil.setId(ImovelPerfil.NORMAL);
		imovel.setImovelPerfil(imovelPerfil);
		imovel.setUltimaAlteracao(dataAtual);

		this.getControladorUtil().atualizar(imovel);

		imovelProgramaEspecial.setUltimaAlteracao(dataAtual);
		imovelProgramaEspecial.setMesAnoSaidaPrograma(imovel.getQuadra()
				.getRota().getFaturamentoGrupo().getAnoMesReferencia());
		imovelProgramaEspecial.setUsuarioSuspensao(usuarioLogado);
		imovelProgramaEspecial.setFormaSuspensao(formaSuspensao);
		imovelProgramaEspecial.setDataSuspensao(dataAtual);
		imovelProgramaEspecial.setUltimaAlteracao(dataAtual);

		this.getControladorUtil().atualizar(imovelProgramaEspecial);

	}

	/**
	 * 
	 * [UC0973] Inserir Imóvel em Programa Especial Inseri Imóvel em Programa
	 * Especial
	 * 
	 * @author Hugo Amorim
	 * @since 13/01/2010
	 * 
	 */
	public Integer inserirImovelEmProgramaEspecial(
			ImovelProgramaEspecial imovelProgramaEspecial, Usuario usuarioLogado)
			throws ControladorException {

		SistemaParametro sistemaParametro = this.getControladorUtil()
				.pesquisarParametrosDoSistema();

		Date dataAtual = new Date();

		ImovelPerfil imovelPerfil = new ImovelPerfil();
		imovelPerfil
				.setId(sistemaParametro.getPerfilProgramaEspecial().getId());

		Imovel imovel = imovelProgramaEspecial.getImovel();
		imovel.setImovelPerfil(imovelPerfil);
		imovel.setUltimaAlteracao(dataAtual);

		/**
		 * Comentado por Rafael Corrêa, solicitado por Eduardo Borges RM7806
		 */
		// CobrancaSituacaoTipo cobrancaSituacaoTipo = new
		// CobrancaSituacaoTipo();
		// //Constante = 1
		// cobrancaSituacaoTipo.setId(CobrancaSituacaoTipo.COBRANCA_EMPRESA_TERCEIRIZADA);
		// imovel.setCobrancaSituacaoTipo(cobrancaSituacaoTipo);

		this.getControladorUtil().atualizar(imovel);

		/**
		 * Inserir Situacao de cobranca historico
		 * 
		 * @author Arthur Carvalho
		 * @date 02/08/2011
		 */

		/**
		 * Comentado por Rafael Corrêa, solicitado por Eduardo Borges RM7806
		 */
		// CobrancaSituacaoMotivo cobrancaSituacaoMotivo = new
		// CobrancaSituacaoMotivo();
		// cobrancaSituacaoMotivo.setId(CobrancaSituacaoMotivo.IMOVEL_CADASTRADO_VIVA_AGUA);
		//
		// CobrancaSituacaoHistorico cobrancaSituacaoHistorico = new
		// CobrancaSituacaoHistorico();
		// cobrancaSituacaoHistorico.setImovel(imovel);
		// cobrancaSituacaoHistorico.setCobrancaSituacaoMotivo(cobrancaSituacaoMotivo);
		// cobrancaSituacaoHistorico.setCobrancaSituacaoTipo(cobrancaSituacaoTipo);
		// cobrancaSituacaoHistorico.setAnoMesCobrancaSituacaoInicio(imovelProgramaEspecial.getImovel().getQuadra().getRota().getFaturamentoGrupo().getAnoMesReferencia());
		// cobrancaSituacaoHistorico.setAnoMesCobrancaSituacaoFim(new
		// Integer(201512));
		// cobrancaSituacaoHistorico.setUsuario(usuarioLogado);
		// cobrancaSituacaoHistorico.setUltimaAlteracao(new Date());
		//
		// this.getControladorUtil().inserir(cobrancaSituacaoHistorico);

		imovelProgramaEspecial.setDataInclusao(dataAtual);
		imovelProgramaEspecial.setMesAnoInicioPrograma(imovelProgramaEspecial
				.getImovel().getQuadra().getRota().getFaturamentoGrupo()
				.getAnoMesReferencia());
		imovelProgramaEspecial.setUltimaAlteracao(dataAtual);
		imovelProgramaEspecial.setUsuarioResponsavel(usuarioLogado);
		imovelProgramaEspecial.setImovelPerfil(imovelPerfil);

		Integer idImovelInserido = (Integer) this.getControladorUtil().inserir(
				imovelProgramaEspecial);

		return idImovelInserido;

	}

	/**
	 * 
	 * [UC0976] Suspender Imóvel em Programa Especial Batch Suspende Imóveis
	 * ativos no Programa Especial
	 * 
	 * @author Hugo Amorim
	 * @since 13/01/2010
	 * 
	 */
	public void suspenderImovelEmProgramaEspecialBatch(
			int idFuncionalidadeIniciada, Usuario usuarioLogado, Rota rota)
			throws ControladorException {

		Short formaSuspensao = ImovelProgramaEspecial.FORMA_SUSPENSAO_BATCH;

		int idUnidadeIniciada = 0;

		boolean imovelParaSuspender = false;

		int quantidadeImoveisLidos = 0;
		int quantidadeImoveisSuspensos = 0;

		SistemaParametro sistemaParametro = this.getControladorUtil()
				.pesquisarParametrosDoSistema();

		idUnidadeIniciada = getControladorBatch()
				.iniciarUnidadeProcessamentoBatch(idFuncionalidadeIniciada,
						UnidadeProcessamento.ROTA, rota.getId());

		// Variáveis para a paginação da pesquisa de Imovel por Grupo
		// Faturamento
		// ========================================================================
		boolean flagTerminou = false;
		final int quantidadeRegistros = 5000;
		int numeroIndice = 0;
		// ========================================================================

		try {

			if (sistemaParametro.getPerfilProgramaEspecial() == null) {
				throw new ControladorException(
						"atencao.nao.existe.perfil.programa.cadastrado");
			}

			while (!flagTerminou) {

				Collection imoveisProgramaEspecial = repositorioCadastro
						.pesquisarImovelEmProgramaEspecial(sistemaParametro
								.getPerfilProgramaEspecial().getId(), rota,
								numeroIndice, quantidadeRegistros);

				if (imoveisProgramaEspecial != null
						&& !imoveisProgramaEspecial.isEmpty()) {

					Iterator imoveisProgramaEspecialIterator = imoveisProgramaEspecial
							.iterator();

					while (imoveisProgramaEspecialIterator.hasNext()) {

						Object[] dados = (Object[]) imoveisProgramaEspecialIterator
								.next();
						quantidadeImoveisLidos += 1;

						ImovelProgramaEspecial imovelProgramaEspecial = (ImovelProgramaEspecial) dados[0];

						Imovel imovel = (Imovel) dados[1];

						Quadra quadra = new Quadra();
						quadra.setId(new Integer(dados[2].toString()));

						FaturamentoGrupo faturamentoGrupo = new FaturamentoGrupo();
						faturamentoGrupo
								.setId(new Integer(dados[4].toString()));
						faturamentoGrupo.setAnoMesReferencia(new Integer(
								dados[5].toString()));

						rota.setFaturamentoGrupo(faturamentoGrupo);
						quadra.setRota(rota);
						imovel.setQuadra(quadra);
						imovelProgramaEspecial.setImovel(imovel);

						/*
						 * 2.2.1. Caso a data de suspensão não esteja informada;
						 * [FS0007] Verifica dados do imóvel no programa
						 * especial 2.2.2. Ou caso o indicador de forma de
						 * suspensão igual a 1; [FS0008] Verifica dados do
						 * imóvel no programa especial suspenso
						 */

						if (imovelProgramaEspecial.getFormaSuspensao() != null
								&& imovelProgramaEspecial
										.getFormaSuspensao()
										.compareTo(
												ImovelProgramaEspecial.FORMA_SUSPENSAO_OPERADOR) == 0) {

							boolean suspender = false;
							// [FS0008] Verifica dados do imóvel no programa
							// especial suspenso
							suspender = this
									.verificarRemocaoRelacaoClienteComImovel(
											imovelProgramaEspecial,
											sistemaParametro);

							if (suspender) {
								imovelParaSuspender = true;
								quantidadeImoveisSuspensos += 1;
							}

						} else {
							// [FS0007] Verifica dados do imóvel no programa
							// especial
							imovelParaSuspender = validarDadosSuspenderImovelProgramaEspecial(
									imovelProgramaEspecial, sistemaParametro);

						}

						if (imovelParaSuspender) {

							this.efetuarSuspensaoImovelEmProgramaEspecial(
									imovelProgramaEspecial, usuarioLogado,
									formaSuspensao);

							quantidadeImoveisSuspensos += 1;

						} else {
							continue;
						}
					}
				}

				/**
				 * Incrementa o nº do indice da páginação
				 */
				numeroIndice = numeroIndice + quantidadeRegistros;

				/**
				 * Caso a coleção de imoveis retornados for menor que a
				 * quantidade de registros seta a flag indicando que a paginação
				 * terminou.
				 */
				if (imoveisProgramaEspecial == null
						|| imoveisProgramaEspecial.size() < quantidadeRegistros) {

					flagTerminou = true;
				}

				if (imoveisProgramaEspecial != null) {
					imoveisProgramaEspecial.clear();
					imoveisProgramaEspecial = null;
				}
			}// FIM DO LOOP DA PAGINAÇÃO

			getControladorBatch().encerrarUnidadeProcessamentoBatch(null,
					idUnidadeIniciada, false);

		} catch (Exception e) {
			// Este catch serve para interceptar
			// qualquer exceção que o processo batch
			// venha a lançar e garantir que a unidade
			// de processamento do batch será atualizada
			// com o erro ocorrido

			EnvioEmail envioEmail = this
					.pesquisarEnvioEmail(EnvioEmail.SUSPENDER_IMOVEL_EM_PROGRAMA_ESPECIAL_EMAIL);

			String emailRemetente = envioEmail.getEmailReceptor();

			String tituloMensagem = envioEmail.getTituloMensagem();

			String emailReceptor = envioEmail.getEmailReceptor();

			String mensagem = envioEmail.getCorpoMensagem();

			mensagem = mensagem + " Quantidades de imóveis lidos "
					+ quantidadeImoveisLidos
					+ " ,  quantidades de imóveis suspensos "
					+ quantidadeImoveisSuspensos + " . Log Erro -> "
					+ e.getMessage();

			try {
				ServicosEmail.enviarMensagem(emailRemetente, emailReceptor,
						tituloMensagem, mensagem);
			} catch (ErroEmailException erroEnviarEmail) {

			}

			getControladorBatch().encerrarUnidadeProcessamentoBatch(e,
					idUnidadeIniciada, true);
		}

		// EnvioEmail envioEmail =
		// this.pesquisarEnvioEmail(
		// EnvioEmail.SUSPENDER_IMOVEL_EM_PROGRAMA_ESPECIAL_EMAIL);
		//
		// String emailRemetente = envioEmail.getEmailReceptor();
		//
		// String tituloMensagem = envioEmail.getTituloMensagem();
		//
		// String emailReceptor = envioEmail.getEmailReceptor();
		//
		// String mensagem = envioEmail.getCorpoMensagem();
		//
		// mensagem = mensagem + " Quantidades de imóveis lidos " +
		// quantidadeImoveisLidos
		// + " ,  quantidades de imóveis suspensos " +
		// quantidadeImoveisSuspensos + " .";
		//
		//
		//
		// try {
		// ServicosEmail.enviarMensagem(emailRemetente, emailReceptor,
		// tituloMensagem, mensagem);
		// } catch (ErroEmailException erroEnviarEmail) {
		//
		// }
	}

	/**
	 * 
	 * [UC0973] Inserir Imóvel em Programa Especial [FS0007] Validar dados do
	 * imóvel no programa especial
	 * 
	 * @author Hugo Amorim
	 * @since 17/12/2009
	 * 
	 */
	private boolean validarDadosSuspenderImovelProgramaEspecial(
			ImovelProgramaEspecial imovelProgramaEspecial,
			SistemaParametro sistemaParametro) throws ControladorException {

		boolean retorno = false;

		if (imovelProgramaEspecial.getImovel().getIndicadorDebitoConta() != null
				&& imovelProgramaEspecial.getImovel().getIndicadorDebitoConta() == 1) {

			return true;
		}

		if (imovelProgramaEspecial.getImovel().getQuantidadeEconomias() != null
				&& imovelProgramaEspecial.getImovel().getQuantidadeEconomias() > 1) {

			return true;
		}

		FiltroDebitoACobrar filtroDebitoACobrar = new FiltroDebitoACobrar();

		filtroDebitoACobrar.adicionarParametro(new ParametroSimples(
				FiltroDebitoACobrar.IMOVEL_ID, imovelProgramaEspecial
						.getImovel().getId()));

		Collection<DebitoACobrar> colecaoDebitoACobrar = this
				.getControladorUtil().pesquisar(filtroDebitoACobrar,
						DebitoACobrar.class.getName());

		Iterator iColecaoDebitoACobrar = colecaoDebitoACobrar.iterator();

		BigDecimal somaDebitos = new BigDecimal("0.0");

		while (iColecaoDebitoACobrar.hasNext()) {

			DebitoACobrar debitoACobrar = (DebitoACobrar) iColecaoDebitoACobrar
					.next();

			if (debitoACobrar.getNumeroPrestacaoRestante() > 0) {

				somaDebitos = somaDebitos.add(debitoACobrar.getValorDebito());
			}

		}

		// Alterado por Tiago Moreno em 24/10/12
		// RM 4857 - Solicitado por Manoel Paulo
		/*
		 * if (somaDebitos.compareTo(sistemaParametro.getValorSegundaVia()) >
		 * 0){
		 * 
		 * return true; }
		 */
		if (somaDebitos.compareTo(BigDecimal.ZERO) > 0) {

			return true;
		}
		// Fim da alteração

		Integer clienteTipoId = this.obterClienteTipoId(imovelProgramaEspecial
				.getImovel().getId());

		if (clienteTipoId == new Integer("101")) {

			return true;
		}

		// Verifica Situação
		// de agua.
		if (imovelProgramaEspecial.getImovel().getLigacaoAguaSituacao() != null) {
			if (imovelProgramaEspecial.getImovel().getLigacaoAguaSituacao()
					.getId().compareTo(LigacaoAguaSituacao.LIGADO) != 0) {

				return true;

			}
		}

		// Verifica se categoria do imovel
		// e igual a residencial
		Collection colecaoSubcategoriasImovel = this.getControladorImovel()
				.obterColecaoImovelSubcategorias(
						imovelProgramaEspecial.getImovel(), new Integer(0));

		if (colecaoSubcategoriasImovel != null
				&& !colecaoSubcategoriasImovel.isEmpty()) {
			for (Iterator iterator = colecaoSubcategoriasImovel.iterator(); iterator
					.hasNext();) {
				ImovelSubcategoria imovelSubcategoria = (ImovelSubcategoria) iterator
						.next();

				if (imovelSubcategoria.getComp_id().getSubcategoria()
						.getCategoria().getId()
						.compareTo(Categoria.RESIDENCIAL) != 0) {

					return true;
				}
			}
		}

		// Verifica se immóvel não possui hidrometro
		// e tem área construída superior a 100m2

		// Obtém o indicador de existência de hidrômetro para o imóvel, caso
		// exista
		// retorna 1(um) indicando SIM caso contrário retorna 2(dois) indicando
		// NÃO
		Integer possuiHidrometro = this.getControladorImovel()
				.obterIndicadorExistenciaHidrometroImovel(
						imovelProgramaEspecial.getImovel().getId());

		if (possuiHidrometro.compareTo(new Integer(2)) == 0
				&& imovelProgramaEspecial.getImovel().getAreaConstruida()
						.compareTo(new BigDecimal("100")) > 0) {

			return true;
		}

		// [FS0005] Validar dados do imóvel no programa especial
		// Verifica consumo de água do mês atual
		// é maior que 25m3

		FaturamentoGrupo faturamentoGrupo = Fachada.getInstancia()
				.recuperaGrupoFaturamentoDoImovel(
						imovelProgramaEspecial.getImovel().getId());

		Integer mesAnoFaturamento = faturamentoGrupo.getAnoMesReferencia();
		Integer mesAnoAnteriorFaturamento = Util
				.subtraiAteSeisMesesAnoMesReferencia(mesAnoFaturamento, 1);

		Integer consumoFaturado = null;

		consumoFaturado = this.getControladorImovel()
				.obterConsumoFaturadoImovelNoMes(
						imovelProgramaEspecial.getImovel().getId(),
						mesAnoFaturamento);
		if (consumoFaturado == null) {

			consumoFaturado = this.getControladorImovel()
					.obterConsumoFaturadoImovelNoMes(
							imovelProgramaEspecial.getImovel().getId(),
							mesAnoAnteriorFaturamento);
		}

		if (consumoFaturado != null
				&& possuiHidrometro.compareTo(new Integer(1)) == 0
				&& consumoFaturado.compareTo(new Integer(25)) > 0) {

			return true;
		}

		/*
		 * FiltroClienteImovel filtroClienteImovel = new FiltroClienteImovel();
		 * 
		 * filtroClienteImovel.adicionarParametro(new ParametroSimples(
		 * FiltroClienteImovel.IMOVEL_ID,
		 * imovelProgramaEspecial.getImovel().getId()));
		 * filtroClienteImovel.adicionarParametro(new ParametroSimples(
		 * FiltroClienteImovel.CLIENTE_RELACAO_TIPO_ID,
		 * ClienteRelacaoTipo.RESPONSAVEL));
		 * filtroClienteImovel.adicionarParametro(new ParametroNulo(
		 * FiltroClienteImovel.DATA_FIM_RELACAO));
		 * filtroClienteImovel.adicionarParametro(new ParametroSimples(
		 * FiltroClienteImovel.CLIENTE_ID,
		 * sistemaParametro.getClienteResponsavelProgramaEspecial().getId()));
		 * 
		 * Collection clientesImovel = this.getControladorUtil().pesquisar(
		 * filtroClienteImovel, ClienteImovel.class.getName());
		 * 
		 * ClienteImovel clienteImovel = (ClienteImovel)
		 * Util.retonarObjetoDeColecao(clientesImovel);
		 * 
		 * if(clienteImovel==null){
		 * 
		 * return true; }
		 */

		return retorno;

	}

	/**
	 * [UC0979] Gerar Relatório de Imóveis em Programas Especiais Analitico
	 * 
	 * @author Hugo Leonardo
	 * @date 18/01/2010
	 * 
	 * @param RelatorioImoveisProgramasEspeciaisHelper
	 * 
	 * @return Collection<RelatorioImoveisProgramasEspeciaisHelper>
	 * @throws FachadaException
	 */
	public Collection pesquisarRelatorioImoveisProgramasEspeciaisAnalitico(
			FiltrarRelatorioImoveisProgramasEspeciaisHelper helper)
			throws ControladorException {

		Collection colecaoRetorno = new ArrayList();
		try {

			Collection imovelProgramaEspecial = repositorioCadastro
					.pesquisarRelatorioImoveisProgramasEspeciaisAnalitico(helper);

			Iterator iteratorImovelPrograma = imovelProgramaEspecial.iterator();

			while (iteratorImovelPrograma.hasNext()) {

				RelatorioImoveisProgramasEspeciaisHelper relatorioHelper = new RelatorioImoveisProgramasEspeciaisHelper();

				Object[] objeto = (Object[]) iteratorImovelPrograma.next();

				// Id do Imovel
				if (objeto[0] != null) {
					String idImovel = objeto[0].toString();
					Imovel imovel = new Imovel();
					relatorioHelper.setEndereco(getControladorEndereco()
							.obterEnderecoAbreviadoImovel((Integer) objeto[0]));
					imovel.setId(Integer.parseInt(idImovel));

					idImovel = imovel.getMatriculaFormatada();

					relatorioHelper.setIdImovel(idImovel);
				}

				// Id Regiao de Desenvolvimento
				if (objeto[1] != null) {
					Integer idRegiaoDesenvolvimento = (Integer) objeto[1];

					relatorioHelper
							.setIdRegiaoDesenvolvimento(idRegiaoDesenvolvimento);
				}

				// Nome da Regiao de Desenvolvimento
				if (objeto[2] != null) {
					relatorioHelper
							.setNomeRegiaoDesenvolvimento((String) objeto[2]);
				}

				/*
				 * //Id da unidade de negocio if ( objeto[1] != null ) { Integer
				 * idUnidadeNegocio = (Integer) objeto[1];
				 * 
				 * relatorioHelper.setIdUnidadeNegocio( idUnidadeNegocio); }
				 * 
				 * //Nome da unidade de negocio if ( objeto[2] != null ) {
				 * relatorioHelper.setNomeUnidadeNegocio( (String) objeto[2]); }
				 */

				// Id da localidade
				if (objeto[3] != null) {
					Integer idLocalidade = (Integer) objeto[3];

					relatorioHelper.setIdLocalidade(idLocalidade);
				}

				// nome da localidade
				if (objeto[4] != null) {
					relatorioHelper.setNomeLocalidade((String) objeto[4]);
				}

				// nome do cliente
				if (objeto[5] != null) {
					relatorioHelper.setNomeUsuario((String) objeto[5]);
				}

				// situacao medicao
				if (objeto[6] != null) {
					relatorioHelper.setSituacaoMedicao((String) objeto[6]);
				}

				// consumo agua
				if (objeto[7] != null) {
					Integer consumoAgua = (Integer) objeto[7];

					relatorioHelper.setConsumoAgua(consumoAgua);
				}

				// valor conta
				if (objeto[8] != null) {
					BigDecimal valorConta = (BigDecimal) objeto[8];

					relatorioHelper.setValorConta(valorConta);
				}

				colecaoRetorno.add(relatorioHelper);
			}

		} catch (ErroRepositorioException e) {
			throw new ControladorException("erro.sistema", e);
		}
		return colecaoRetorno;
	}

	/**
	 * [UC0979] Gerar Relatório de Imóveis em Programas Especiais
	 * 
	 * @author Hugo Leonardo
	 * @date 19/01/2010
	 * 
	 * @param RelatorioImoveisProgramasEspeciaisHelper
	 * 
	 * @return Collection<RelatorioImoveisProgramasEspeciaisHelper>
	 * @throws FachadaException
	 */
	public Integer pesquisarTotalRegistroRelatorioImoveisProgramaEspecial(
			FiltrarRelatorioImoveisProgramasEspeciaisHelper filtro)
			throws ControladorException {

		try {
			return this.repositorioCadastro
					.pesquisarTotalRegistroRelatorioImoveisProgramaEspecial(filtro);

		} catch (ErroRepositorioException ex) {
			throw new ControladorException("erro.sistema", ex);
		}

	}

	/**
	 * [UC0979] Gerar Relatório de Imóveis em Programas Especiais Sintetico
	 * 
	 * @author Hugo Leonardo
	 * @date 25/01/2010
	 * 
	 * @param RelatorioImoveisProgramasEspeciaisHelper
	 * 
	 * @return Collection<RelatorioImoveisProgramasEspeciaisHelper>
	 * @throws FachadaException
	 */
	public Collection pesquisarRelatorioImoveisProgramasEspeciaisSintetico(
			FiltrarRelatorioImoveisProgramasEspeciaisHelper helper)
			throws ControladorException {

		Collection colecaoRetorno = new ArrayList();
		try {

			Collection imovelProgramaEspecialSemHidr = repositorioCadastro
					.pesquisarRelatorioImoveisProgramasEspeciaisSintetico(helper);

			Iterator iteratorImovelPrograma = imovelProgramaEspecialSemHidr
					.iterator();

			while (iteratorImovelPrograma.hasNext()) {

				RelatorioImoveisProgramasEspeciaisHelper relatorioHelper = new RelatorioImoveisProgramasEspeciaisHelper();

				Object[] objeto = (Object[]) iteratorImovelPrograma.next();

				// Id Região de Desenvolvimento
				if (objeto[0] != null) {
					Integer idRegiaoDesenvolvimento = (Integer) objeto[0];

					relatorioHelper
							.setIdRegiaoDesenvolvimento(idRegiaoDesenvolvimento);
				}

				// Nome da unidade de negocio
				if (objeto[1] != null) {
					relatorioHelper
							.setNomeRegiaoDesenvolvimento((String) objeto[1]);
				}

				/*
				 * //Id da unidade de negocio if ( objeto[0] != null ) { Integer
				 * idUnidadeNegocio = (Integer) objeto[0];
				 * 
				 * relatorioHelper.setIdUnidadeNegocio( idUnidadeNegocio); }
				 * 
				 * //Nome da unidade de negocio if ( objeto[1] != null ) {
				 * relatorioHelper.setNomeUnidadeNegocio( (String) objeto[1]); }
				 */

				// Id da localidade
				if (objeto[2] != null) {
					Integer idLocalidade = (Integer) objeto[2];

					relatorioHelper.setIdLocalidade(idLocalidade);
				}

				// nome da localidade
				if (objeto[3] != null) {
					relatorioHelper.setNomeLocalidade((String) objeto[3]);
				}

				// QTD Imoveis Sem HIDR.
				if (objeto[4] != null) {
					Integer qtdImoveisSemHidr = (Integer) objeto[4];

					relatorioHelper.setQtdImoveisSemHidr(qtdImoveisSemHidr);
				}

				// Valor Contas de Imoveis Sem HIDR.
				if (objeto[5] != null) {
					BigDecimal valorContasSemHidr = (BigDecimal) objeto[5];

					relatorioHelper.setValorContasSemHidr(valorContasSemHidr);
				}

				// QTD de Imoveis com Hidro
				if (objeto[6] != null) {
					Integer qtdImoveisComHidr = (Integer) objeto[6];

					relatorioHelper.setQtdImoveisComHidr(qtdImoveisComHidr);
				}

				// valor Contas de Imoveis com HIDR
				if (objeto[7] != null) {
					BigDecimal valorContasComHidr = (BigDecimal) objeto[7];

					relatorioHelper.setValorContasComHidr(valorContasComHidr);
				}

				colecaoRetorno.add(relatorioHelper);
			}

		} catch (ErroRepositorioException e) {
			throw new ControladorException("erro.sistema", e);
		}
		return colecaoRetorno;
	}

	/**
	 * 
	 * [UC0976] Suspender Imóvel em Programa Especial Batch Suspende Imóvel em
	 * Programa Especial Forma Batch
	 * 
	 * @author Hugo Amorim
	 * @since 29/01/2010
	 * 
	 */
	private void efetuarSuspensaoImovelEmProgramaEspecial(
			ImovelProgramaEspecial imovelProgramaEspecial,
			Usuario usuarioLogado, Short formaSuspensao)
			throws ControladorException {

		SistemaParametro sistemaParametro = this.getControladorUtil()
				.pesquisarParametrosDoSistema();

		Date dataAtual = new Date();

		Imovel imovel = imovelProgramaEspecial.getImovel();
		ImovelPerfil imovelPerfil = new ImovelPerfil();
		imovelPerfil.setId(ImovelPerfil.NORMAL);
		imovel.setImovelPerfil(imovelPerfil);
		imovel.setUltimaAlteracao(dataAtual);

		this.getControladorUtil().atualizar(imovel);

		imovelProgramaEspecial.setUltimaAlteracao(dataAtual);
		imovelProgramaEspecial.setMesAnoSaidaPrograma(imovel.getQuadra()
				.getRota().getFaturamentoGrupo().getAnoMesReferencia());
		imovelProgramaEspecial.setUsuarioSuspensao(Usuario.USUARIO_BATCH);
		imovelProgramaEspecial.setFormaSuspensao(formaSuspensao);
		imovelProgramaEspecial.setDataSuspensao(dataAtual);
		imovelProgramaEspecial.setUltimaAlteracao(dataAtual);
		imovelProgramaEspecial
				.setObservacao("IMÓVEL RETIRADO DO PROGRAMA ESPECIAL PELO BATCH SUSPENDER IMÓVEL EM PROGRAMA ESPECIAL");
		this.getControladorUtil().atualizar(imovelProgramaEspecial);

	}

	/**
	 * 
	 * [UC0976] Suspender Imóvel em Programa Especial Batch
	 * 
	 * Remover somente Relação caso tenha sido suspenso de forma online.
	 * 
	 * @author Hugo Amorim
	 * @throws ControladorException
	 * @since 29/01/2010
	 * 
	 */
	private boolean verificarRemocaoRelacaoClienteComImovel(
			ImovelProgramaEspecial imovelProgramaEspecial,
			SistemaParametro sistemaParametro) throws ControladorException {

		boolean retorno = false;

		// Date dataAtual = new Date();

		FiltroClienteImovel filtroClienteImovel = new FiltroClienteImovel();

		filtroClienteImovel.adicionarCaminhoParaCarregamentoEntidade("cliente");
		filtroClienteImovel
				.adicionarCaminhoParaCarregamentoEntidade("clienteRelacaoTipo");

		filtroClienteImovel.adicionarParametro(new ParametroSimples(
				FiltroClienteImovel.IMOVEL_ID, imovelProgramaEspecial
						.getImovel().getId()));

		filtroClienteImovel.adicionarParametro(new ParametroNulo(
				FiltroClienteImovel.DATA_FIM_RELACAO));

		filtroClienteImovel.adicionarParametro(new ParametroSimples(
				FiltroClienteImovel.CLIENTE_RELACAO_TIPO_ID,
				ClienteRelacaoTipo.RESPONSAVEL));

		filtroClienteImovel.adicionarParametro(new ParametroSimples(
				FiltroClienteImovel.CLIENTE_ID, sistemaParametro
						.getClienteResponsavelProgramaEspecial().getId()));

		Collection clientesImovel = this.getControladorUtil().pesquisar(
				filtroClienteImovel, ClienteImovel.class.getName());

		ClienteImovel clienteImovelAtulizar = (ClienteImovel) Util
				.retonarObjetoDeColecao(clientesImovel);

		if (clienteImovelAtulizar != null) {
			/*
			 * clienteImovelAtulizar.setDataFimRelacao(dataAtual);
			 * ClienteImovelFimRelacaoMotivo clienteImovelFimRelacaoMotivo = new
			 * ClienteImovelFimRelacaoMotivo(); clienteImovelFimRelacaoMotivo
			 * .setId(ClienteImovelFimRelacaoMotivo.EXCLUSAO_PROGRAMA_ESPECIAL);
			 * clienteImovelAtulizar
			 * .setClienteImovelFimRelacaoMotivo(clienteImovelFimRelacaoMotivo);
			 * clienteImovelAtulizar.setUltimaAlteracao(dataAtual);
			 * 
			 * this.getControladorUtil().atualizar(clienteImovelAtulizar);
			 */

			retorno = true;
		}
		return retorno;
	}

	/**
	 * 
	 * [UC0973] Inserir Imóvel em Programa Especial
	 * 
	 * Verificar se existe parcelamento para o Imovel em Programa Especial.
	 * 
	 * @author Hugo Leonardo
	 * @throws ControladorException
	 * @date 10/02/2010
	 * 
	 */

	public Boolean verificarExistenciaParcelamentoImovel(Integer idImovel)
			throws ControladorException {

		try {
			Integer qtdSetores = this.repositorioCadastro
					.verificarExistenciaParcelamentoImovel(idImovel);
			return (qtdSetores > 0);

		} catch (ErroRepositorioException ex) {
			ex.printStackTrace();
			throw new ControladorException("erro.sistema", ex);
		}
	}

	/**
	 * [UC0999] Gerar Relatório de Coleta de Medidor de Energia.
	 * 
	 * @author Hugo Leonardo
	 * @date 09/03/2010
	 * 
	 * @param FiltrarRelatorioColetaMedidorEnergiaHelper
	 * 
	 * @return Collection<RelatorioColetaMedidorEnergiaHelper>
	 * @throws ControladorException
	 */
	public Collection<RelatorioColetaMedidorEnergiaHelper> pesquisarRelatorioColetaMedidorEnergia(
			FiltrarRelatorioColetaMedidorEnergiaHelper helper)
			throws ControladorException {

		Collection colecaoRetorno = new ArrayList();
		try {

			Collection coletaMedidorEnergia = repositorioCadastro
					.pesquisarRelatorioColetaMedidorEnergia(helper
							.getIdFaturamentoGrupo() != null ? helper
							.getIdFaturamentoGrupo().toString() : null, helper
							.getIdLocalidadeInicial() != null ? helper
							.getIdLocalidadeInicial().toString() : null, helper
							.getIdLocalidadeFinal() != null ? helper
							.getIdLocalidadeFinal().toString() : null, helper
							.getIdSetorComercialInicial() != null ? helper
							.getIdSetorComercialInicial().toString() : null,
							helper.getIdSetorComercialFinal() != null ? helper
									.getIdSetorComercialFinal().toString()
									: null,
							helper.getRotaInicial() != null ? helper
									.getRotaInicial().toString() : null, helper
									.getRotaFinal() != null ? helper
									.getRotaFinal().toString() : null,
							helper.getSequencialRotaInicial() != null ? helper
									.getSequencialRotaInicial().toString()
									: null,
							helper.getSequencialRotaFinal() != null ? helper
									.getSequencialRotaFinal().toString() : null);

			Iterator iteratorColetaMedidorEnergia = coletaMedidorEnergia
					.iterator();

			while (iteratorColetaMedidorEnergia.hasNext()) {

				RelatorioColetaMedidorEnergiaHelper relatorioHelper = new RelatorioColetaMedidorEnergiaHelper();

				Object[] objeto = (Object[]) iteratorColetaMedidorEnergia
						.next();

				// Id do faturamentoGrupo
				if (objeto[0] != null) {
					Integer faturamentoGrupo = (Integer) objeto[0];

					relatorioHelper.setIdFaturamentoGrupo(faturamentoGrupo
							.toString());
				}

				// Descrição do faturamentoGrupo
				if (objeto[1] != null) {
					String descricaoFaturamentoGrupo = (String) objeto[1];
					relatorioHelper
							.setDescricaoFaturamentoGrupo(descricaoFaturamentoGrupo);
				}

				// Id localidade
				if (objeto[2] != null) {
					Integer idLocalidade = (Integer) objeto[2];
					relatorioHelper.setIdLocalidade(idLocalidade.toString());
				}

				// Descrição localidade
				if (objeto[3] != null) {
					String descricaoLocalidade = (String) objeto[3];
					relatorioHelper.setDescricaoLocalidade(descricaoLocalidade);
				}

				// Codigo Rota
				if (objeto[4] != null) {
					Short codigoRota = (Short) objeto[4];
					relatorioHelper.setRota(codigoRota.toString());
				}

				// Nome Cliente
				if (objeto[5] != null) {
					String nomeCliente = (String) objeto[5];
					relatorioHelper.setNomeCliente(nomeCliente);
				}

				// Id Imovel
				if (objeto[6] != null) {
					Integer idImovel = (Integer) objeto[6];
					relatorioHelper.setMatriculaImovel(idImovel.toString());
				}

				colecaoRetorno.add(relatorioHelper);
			}

		} catch (ErroRepositorioException e) {
			throw new ControladorException("erro.sistema", e);
		}
		return colecaoRetorno;

	}

	/**
	 * [UC0999] Gerar Relatório de Coleta de Medidor de Energia.
	 * 
	 * Obtém a quantidade de imoveis de acordo com o filtro.
	 * 
	 * @author Hugo Leonardo
	 * @date 09/03/2010
	 * 
	 * @param FiltrarRelatorioColetaMedidorEnergiaHelper
	 * 
	 * @return Integer
	 * @throws ControladorException
	 */
	public Integer countRelatorioColetaMedidorEnergia(
			FiltrarRelatorioColetaMedidorEnergiaHelper helper)
			throws ControladorException {

		try {
			return this.repositorioCadastro
					.pesquisarTotalRegistroRelatorioColetaMedidorEnergia(helper
							.getIdFaturamentoGrupo() != null ? helper
							.getIdFaturamentoGrupo().toString() : null, helper
							.getIdLocalidadeInicial() != null ? helper
							.getIdLocalidadeInicial().toString() : null, helper
							.getIdLocalidadeFinal() != null ? helper
							.getIdLocalidadeFinal().toString() : null, helper
							.getIdSetorComercialInicial() != null ? helper
							.getIdSetorComercialInicial().toString() : null,
							helper.getIdSetorComercialFinal() != null ? helper
									.getIdSetorComercialFinal().toString()
									: null,
							helper.getRotaInicial() != null ? helper
									.getRotaInicial().toString() : null, helper
									.getRotaFinal() != null ? helper
									.getRotaFinal().toString() : null,
							helper.getSequencialRotaInicial() != null ? helper
									.getSequencialRotaInicial().toString()
									: null,
							helper.getSequencialRotaFinal() != null ? helper
									.getSequencialRotaFinal().toString() : null);

		} catch (ErroRepositorioException ex) {
			throw new ControladorException("erro.sistema", ex);
		}
	}

	/**
	 * [UC1011] Emitir Boletim de Cadastro Individual.
	 * 
	 * Criar Dados para Relatório de Boletim de Cadastro Individual
	 * 
	 * @author Hugo Leonardo
	 * @date 24/03/2010
	 * 
	 * @param idImovel
	 * 
	 * @return RelatorioBoletimCadastroIndividualBean
	 * @throws ControladorException
	 */
	public RelatorioBoletimCadastroIndividualBean criarDadosRelatorioBoletimCadastroIndividual(
			Integer idImovel) throws ControladorException {

		RelatorioBoletimCadastroIndividualBean bean = new RelatorioBoletimCadastroIndividualBean();

		ClienteEmitirBoletimCadastroHelper clienteProprietario = null;
		ClienteEmitirBoletimCadastroHelper clienteUsuario = null;

		clienteProprietario = getControladorCliente()
				.pesquisarClienteEmitirBoletimCadastro(idImovel,
						ClienteRelacaoTipo.PROPRIETARIO);

		clienteUsuario = getControladorCliente()
				.pesquisarClienteEmitirBoletimCadastro(idImovel,
						ClienteRelacaoTipo.USUARIO);

		// Início do processo de geração do arquivo txt

		// Dados do Cliente Proprietário
		if (clienteProprietario != null) {

			// Nome Proprietario
			String nomeProprietario = "";
			if (clienteProprietario.getCliente().getNome() != null) {
				nomeProprietario = clienteProprietario.getCliente().getNome();
			}
			bean.setNomeProprietario(nomeProprietario);

			// sexo Proprietario
			String sexoProprietario = "";
			if (clienteProprietario.getCliente().getPessoaSexo() != null) {
				sexoProprietario = clienteProprietario.getCliente()
						.getPessoaSexo().getId().toString();
			}
			bean.setSexoProprietario(sexoProprietario);

			// cpf Proprietario
			String cpfProprietario = "";
			if (clienteProprietario.getCliente().getCpf() != null) {
				cpfProprietario = clienteProprietario.getCliente()
						.getCpfFormatado();
			}
			bean.setCpfProprietario(cpfProprietario);

			// cnpj Proprietario
			String cnpjProprietario = "";
			if (clienteProprietario.getCliente().getCnpjFormatado() != null) {
				cnpjProprietario = clienteProprietario.getCliente()
						.getCnpjFormatado();
			}
			bean.setCnpjProprietario(cnpjProprietario);

			// rg Proprietario
			String rgProprietario = "";
			if (clienteProprietario.getCliente().getRg() != null) {
				rgProprietario = clienteProprietario.getCliente().getRg();

				// Órgão Expedidor RG
				String orgaoExpedidorRG = "";

				if (clienteProprietario.getCliente().getOrgaoExpedidorRg() != null) {
					orgaoExpedidorRG = clienteProprietario.getCliente()
							.getOrgaoExpedidorRg().getDescricaoAbreviada();
				}
				rgProprietario += " " + orgaoExpedidorRG;
			}
			bean.setRgProprietario(rgProprietario);

			// uf Proprietario
			String ufProprietario = "";
			if (clienteProprietario.getCliente().getUnidadeFederacao() != null
					&& clienteProprietario.getCliente().getUnidadeFederacao()
							.getSigla() != null) {
				ufProprietario = clienteProprietario.getCliente()
						.getUnidadeFederacao().getSigla();
			}
			bean.setUfProprietario(ufProprietario);

			// fone Tipo Proprietario
			// Número fone Proprietario
			Collection clientesFone = clienteProprietario.getClientesFone();

			if (clientesFone != null && !clientesFone.isEmpty()) {

				Iterator clientesFoneIterator = clientesFone.iterator();

				while (clientesFoneIterator.hasNext()) {

					ClienteFone clienteFone = (ClienteFone) clientesFoneIterator
							.next();

					// fone Tipo Proprietario
					String foneTipoProprietario = "";
					if (clienteFone.getFoneTipo() != null) {
						foneTipoProprietario = clienteFone.getFoneTipo()
								.getId().toString();
					}
					bean.setFoneTipoProprietario(foneTipoProprietario);

					// Número fone Proprietario
					String foneProprietario = "";

					if (clienteFone.getTelefone() != null) {
						foneProprietario = clienteFone.getDddTelefone();
					}

					// Ramal
					String ramal = "";

					if (clienteFone.getRamal() != null) {
						ramal = clienteFone.getRamal();
						foneProprietario += "-" + ramal;
					}
					bean.setFoneProprietario(foneProprietario);
				}
			}

			// endereco Proprietario
			String enderecoProprietario = "";

			// Logradouro
			String logradouro = "";
			if (clienteProprietario.getClienteEndereco().getLogradouroCep() != null
					&& clienteProprietario.getClienteEndereco()
							.getLogradouroCep().getLogradouro() != null) {

				logradouro = Util.adicionarZerosEsquedaNumero(9,
						clienteProprietario.getClienteEndereco()
								.getLogradouroCep().getLogradouro().getId()
								.toString());
			}
			// Endereço Abreviado
			String endereco = "";
			if (clienteProprietario.getEnderecoFormatado() != null) {
				endereco = clienteProprietario.getEnderecoFormatado();
			}
			enderecoProprietario += logradouro + " " + endereco;
			bean.setEnderecoProprietario(enderecoProprietario);

			// endereco Ref. Proprietario
			String enderecoRefProprietario = "";
			if (clienteProprietario.getClienteEndereco()
					.getEnderecoReferencia() != null
					&& clienteProprietario.getClienteEndereco()
							.getEnderecoReferencia().getDescricao() != null) {
				enderecoRefProprietario = clienteProprietario
						.getClienteEndereco().getEnderecoReferencia()
						.getDescricao();
			}
			bean.setEnderecoRefProprietario(enderecoRefProprietario);

			// Id Endereco Ref. Proprietario
			String idEnderecoRefProprietario = "";
			if (clienteProprietario.getClienteEndereco()
					.getEnderecoReferencia() != null) {

				idEnderecoRefProprietario = clienteProprietario
						.getClienteEndereco().getEnderecoReferencia().getId()
						.toString();
			}
			bean.setIdEnderecoRefProprietario(idEnderecoRefProprietario);

			// enderecoComplementoProprietario
			String enderecoComplementoProprietario = "";
			if (clienteProprietario.getClienteEndereco().getComplemento() != null) {
				enderecoComplementoProprietario = clienteProprietario
						.getClienteEndereco().getComplemento();
			}
			bean.setEnderecoComplementoProprietario(enderecoComplementoProprietario);

			// bairro Proprietario
			String bairroProprietario = "";
			if (clienteProprietario.getClienteEndereco().getLogradouroBairro()
					.getBairro() != null
					&& clienteProprietario.getClienteEndereco()
							.getLogradouroBairro().getBairro().getNome() != null) {
				bairroProprietario = clienteProprietario.getClienteEndereco()
						.getLogradouroBairro().getBairro().getNome();
			}
			bean.setBairroProprietario(bairroProprietario);

			// municipio Proprietario
			String municipioProprietario = "";
			if (clienteProprietario.getClienteEndereco().getLogradouroBairro()
					.getBairro() != null
					&& clienteProprietario.getClienteEndereco()
							.getLogradouroBairro().getBairro().getMunicipio()
							.getNome() != null) {
				municipioProprietario = clienteProprietario
						.getClienteEndereco().getLogradouroBairro().getBairro()
						.getMunicipio().getNome();
			}
			bean.setMunicipioProprietario(municipioProprietario);

			// cep Proprietario
			String cepProprietario = "";
			if (clienteProprietario.getClienteEndereco().getLogradouroCep()
					.getCep() != null) {
				cepProprietario = clienteProprietario.getClienteEndereco()
						.getLogradouroCep().getCep().getCepFormatado();
			}
			bean.setCepProprietario(cepProprietario);

			// endereco Tipo Proprietario
			String enderecoTipoProprietario = "";
			if (clienteProprietario.getClienteEndereco().getEnderecoTipo() != null) {
				enderecoTipoProprietario = clienteProprietario
						.getClienteEndereco().getEnderecoTipo().getId()
						.toString();
			}
			bean.setEnderecoTipoProprietario(enderecoTipoProprietario);

			//
			// USUÁRIO
			//

			// nome Usuario
			String nomeUsuario = "";
			if (clienteUsuario.getCliente().getNome() != null) {
				nomeUsuario = clienteUsuario.getCliente().getNome();
			}
			bean.setNomeUsuario(nomeUsuario);

			// sexo Usuario
			String sexoUsuario = "";
			if (clienteUsuario.getCliente() != null
					&& clienteUsuario.getCliente().getPessoaSexo() != null) {
				sexoUsuario = clienteUsuario.getCliente().getPessoaSexo()
						.getId().toString();
			}
			bean.setSexoUsuario(sexoUsuario);

			// cpf Usuario
			String cpfUsuario = "";
			if (clienteUsuario.getCliente().getCpf() != null) {
				cpfUsuario = clienteUsuario.getCliente().getCpfFormatado();
			}
			bean.setCpfUsuario(cpfUsuario);

			// cnpj Usuario
			String cnpjUsuario = "";
			if (clienteUsuario.getCliente().getCnpjFormatado() != null) {
				cnpjUsuario = clienteUsuario.getCliente().getCnpjFormatado();
			}
			bean.setCnpjUsuario(cnpjUsuario);

			// rg Usuario
			String rgUsuario = "";
			if (clienteUsuario.getCliente().getRg() != null) {
				rgUsuario = clienteUsuario.getCliente().getRg();

				// Órgão Expedidor RG
				String orgaoExpedidorRG = "";

				if (clienteUsuario.getCliente().getOrgaoExpedidorRg() != null) {
					orgaoExpedidorRG = clienteUsuario.getCliente()
							.getOrgaoExpedidorRg().getDescricaoAbreviada();
				}
				rgUsuario += " " + orgaoExpedidorRG;
			}
			bean.setRgUsuario(rgUsuario);

			// uf Usuario
			String ufUsuario = "";
			if (clienteUsuario.getCliente().getUnidadeFederacao() != null
					&& clienteUsuario.getCliente().getUnidadeFederacao()
							.getSigla() != null) {
				ufUsuario = clienteUsuario.getCliente().getUnidadeFederacao()
						.getSigla();
			}
			bean.setUfUsuario(ufUsuario);

			// fone Tipo Usuario
			// Número fone Usuario
			Collection clientesFoneUsuario = clienteUsuario.getClientesFone();

			if (clientesFoneUsuario != null && !clientesFoneUsuario.isEmpty()) {

				Iterator clientesFoneIterator = clientesFoneUsuario.iterator();

				while (clientesFoneIterator.hasNext()) {

					ClienteFone clienteFone = (ClienteFone) clientesFoneIterator
							.next();

					// fone Tipo Usuario
					String foneTipoUsuario = "";
					if (clienteFone.getFoneTipo() != null) {
						foneTipoUsuario = clienteFone.getFoneTipo().getId()
								.toString();
					}
					bean.setFoneTipoUsuario(foneTipoUsuario);

					// Número fone Proprietario
					String foneUsuario = "";

					if (clienteFone.getTelefone() != null) {
						foneUsuario = clienteFone.getDddTelefone();
					}

					// Ramal
					String ramal = "";

					if (clienteFone.getRamal() != null) {
						ramal = clienteFone.getRamal();
						foneUsuario += "-" + ramal;
					}
					bean.setFoneUsuario(foneUsuario);
				}
			}

			// Carregar Imovel
			FiltroImovel filtroImovel = new FiltroImovel();
			filtroImovel.adicionarParametro(new ParametroSimples(
					FiltroImovel.ID, idImovel));
			filtroImovel
					.adicionarCaminhoParaCarregamentoEntidade(FiltroImovel.IMOVEL_PERFIL);
			filtroImovel
					.adicionarCaminhoParaCarregamentoEntidade(FiltroImovel.ENDERECO_REFERENCIA);
			filtroImovel
					.adicionarCaminhoParaCarregamentoEntidade(FiltroImovel.CEP);
			filtroImovel
					.adicionarCaminhoParaCarregamentoEntidade(FiltroImovel.BAIRRO);
			filtroImovel
					.adicionarCaminhoParaCarregamentoEntidade(FiltroImovel.MUNICIPIO);
			filtroImovel
					.adicionarCaminhoParaCarregamentoEntidade(FiltroImovel.PAVIMENTO_RUA);
			filtroImovel
					.adicionarCaminhoParaCarregamentoEntidade(FiltroImovel.PAVIMENTO_CALCADA);
			filtroImovel
					.adicionarCaminhoParaCarregamentoEntidade(FiltroImovel.CADASTRO_OCORRENCIA);

			Collection<Imovel> imovelPesquisado = this.getControladorUtil()
					.pesquisar(filtroImovel, Imovel.class.getName());

			Imovel imovel = null;

			if (imovelPesquisado != null && !imovelPesquisado.isEmpty()) {
				imovel = (Imovel) Util.retonarObjetoDeColecao(imovelPesquisado);
			}

			// inscricao
			String inscricao = "";
			inscricao = this.getControladorImovel().pesquisarInscricaoImovel(
					idImovel);
			bean.setInscricao(inscricao);

			// matricula
			String matricula = "";
			matricula = Util.retornaMatriculaImovelFormatada(idImovel);
			bean.setMatricula(matricula);

			// perfil Imovel
			String perfilImovel = "";
			if (imovel.getImovelPerfil() != null) {
				perfilImovel = imovel.getImovelPerfil().getId().toString();
			}
			bean.setPerfilImovel(perfilImovel);

			// endereco Imovel
			String enderecoImovel = "";
			enderecoImovel = getControladorEndereco().pesquisarEndereco(
					idImovel);
			bean.setEnderecoImovel(enderecoImovel);

			// endereco Ref. Imovel
			String enderecoRefImovel = "";
			if (imovel.getEnderecoReferencia() != null
					&& imovel.getEnderecoReferencia().getDescricao() != null) {
				enderecoRefImovel = imovel.getEnderecoReferencia()
						.getDescricao().toString();
			}
			bean.setEnderecoRefImovel(enderecoRefImovel);

			// Id Endereco Ref. Imovel
			String idEnderecoRefImovel = "";
			if (imovel.getEnderecoReferencia() != null) {

				idEnderecoRefImovel = imovel.getEnderecoReferencia().getId()
						.toString();
			}
			bean.setIdEnderecoRefImovel(idEnderecoRefImovel);

			// endereco Complemento Imovel
			String enderecoComplementoImovel = "";
			if (imovel.getComplementoEndereco() != null) {
				enderecoComplementoImovel = imovel.getComplementoEndereco();
			}
			bean.setEnderecoComplementoImovel(enderecoComplementoImovel);

			// bairro Imovel
			String bairroImovel = "";
			if (imovel.getLogradouroBairro().getBairro() != null
					&& imovel.getLogradouroBairro().getBairro().getNome() != null) {
				bairroImovel = imovel.getLogradouroBairro().getBairro()
						.getNome();
			}
			bean.setBairroImovel(bairroImovel);

			// municipio Imovel
			String municipioImovel = "";
			if (imovel.getLogradouroBairro().getBairro() != null
					&& imovel.getLogradouroBairro().getBairro().getMunicipio()
							.getNome() != null) {
				municipioImovel = imovel.getLogradouroBairro().getBairro()
						.getMunicipio().getNome();
			}
			bean.setMunicipioImovel(municipioImovel);

			// cep Imovel
			String cepImovel = "";
			if (imovel.getLogradouroCep() != null
					&& imovel.getLogradouroCep().getCep().getCodigo() != null) {
				cepImovel = imovel.getLogradouroCep().getCep().getCodigo()
						.toString();
			}
			bean.setCepImovel(cepImovel);

			// numero Moradores
			String numeroMoradores = "";
			if (imovel.getNumeroMorador() != null) {
				numeroMoradores = imovel.getNumeroMorador().toString();
			}
			bean.setNumeroMoradores(numeroMoradores);

			// numero Medidor Celpe
			String numeroMedidorCelpe = "";
			if (imovel.getNumeroMedidorEnergia() != null) {
				numeroMedidorCelpe = imovel.getNumeroMedidorEnergia();
			}
			bean.setNumeroMedidorCelpe(numeroMedidorCelpe);

			// pavimento Tipo Rua
			String pavimentoTipoRua = "";
			if (imovel.getPavimentoRua() != null) {
				pavimentoTipoRua = imovel.getPavimentoRua().getId().toString();
			}
			bean.setPavimentoTipoRua(pavimentoTipoRua);

			// Pavimento Tipo Calcada
			String pavimentoTipoCalcada = "";
			if (imovel.getPavimentoCalcada().getId() != null) {
				pavimentoTipoCalcada = imovel.getPavimentoCalcada().getId()
						.toString();
			}
			bean.setPavimentoTipoCalcada(pavimentoTipoCalcada);

			// abastecimento Fonte
			String abastecimentoFonte = "";
			if (imovel.getFonteAbastecimento().getId() != null) {
				abastecimentoFonte = imovel.getFonteAbastecimento().getId()
						.toString();
			}

			bean.setAbastecimentoFonte(abastecimentoFonte);

			// esgoto Situacao
			String esgotoSituacao = "";
			if (imovel.getLigacaoEsgotoSituacao() != null) {
				esgotoSituacao = imovel.getLigacaoEsgotoSituacao().getId()
						.toString();
			}
			bean.setEsgotoSituacao(esgotoSituacao);

			// agua Situacao
			String aguaSituacao = "";
			if (imovel.getLigacaoAguaSituacao() != null) {
				aguaSituacao = imovel.getLigacaoAguaSituacao().getId()
						.toString();
			}
			bean.setAguaSituacao(aguaSituacao);

			// Obtém os dados das ligações de água e esgoto
			DadosLigacoesBoletimCadastroHelper dadosLigacoesBoletimCadastroHelper = getControladorAtendimentoPublico()
					.obterDadosLigacaoAguaEsgoto(idImovel);

			// hidrometro
			// se igual a 0 - NÃO
			// se igual a 1 - SIM
			String hidrometro = "0";

			// hidrometro Numero
			String hidrometroNumero = "";
			if (dadosLigacoesBoletimCadastroHelper.getLigacaoAgua() != null
					&& dadosLigacoesBoletimCadastroHelper.getLigacaoAgua()
							.getHidrometroInstalacaoHistorico() != null) {

				hidrometro = "1";
				hidrometroNumero = dadosLigacoesBoletimCadastroHelper
						.getLigacaoAgua().getHidrometroInstalacaoHistorico()
						.getHidrometro().getNumero();
			}
			bean.setHidrometro(hidrometro);
			bean.setHidrometroNumero(hidrometroNumero);

			// hidrometro Capacidade
			String hidrometroCapacidade = "";
			if (dadosLigacoesBoletimCadastroHelper.getLigacaoAgua() != null
					&& dadosLigacoesBoletimCadastroHelper.getLigacaoAgua()
							.getHidrometroInstalacaoHistorico() != null
					&& dadosLigacoesBoletimCadastroHelper.getLigacaoAgua()
							.getHidrometroInstalacaoHistorico().getHidrometro()
							.getHidrometroCapacidade() != null) {

				hidrometroCapacidade = Util.adicionarZerosEsquedaNumero(2,
						dadosLigacoesBoletimCadastroHelper.getLigacaoAgua()
								.getHidrometroInstalacaoHistorico()
								.getHidrometro().getHidrometroCapacidade()
								.getId().toString());

			}
			bean.setHidrometroCapacidade(hidrometroCapacidade);

			// hidrometro Marca
			String hidrometroMarca = "";
			if (dadosLigacoesBoletimCadastroHelper.getLigacaoAgua() != null
					&& dadosLigacoesBoletimCadastroHelper.getLigacaoAgua()
							.getHidrometroInstalacaoHistorico() != null
					&& dadosLigacoesBoletimCadastroHelper.getLigacaoAgua()
							.getHidrometroInstalacaoHistorico().getHidrometro()
							.getHidrometroMarca() != null) {

				hidrometroMarca = Util.adicionarZerosEsquedaNumero(2,
						dadosLigacoesBoletimCadastroHelper.getLigacaoAgua()
								.getHidrometroInstalacaoHistorico()
								.getHidrometro().getHidrometroMarca().getId()
								.toString());

			}
			bean.setHidrometroMarca(hidrometroMarca);

			// Local de Instalação do Hidrômetro
			String localInstalacao = "";
			if (dadosLigacoesBoletimCadastroHelper.getLigacaoAgua() != null
					&& dadosLigacoesBoletimCadastroHelper.getLigacaoAgua()
							.getHidrometroInstalacaoHistorico() != null
					&& dadosLigacoesBoletimCadastroHelper.getLigacaoAgua()
							.getHidrometroInstalacaoHistorico()
							.getHidrometroLocalInstalacao() != null) {

				localInstalacao = Util.adicionarZerosEsquedaNumero(2,
						dadosLigacoesBoletimCadastroHelper.getLigacaoAgua()
								.getHidrometroInstalacaoHistorico()
								.getHidrometroLocalInstalacao().getId()
								.toString());

			}
			bean.setLocalInstalacao(localInstalacao);

			// protecao Tipo
			String protecaoTipo = "";
			if (dadosLigacoesBoletimCadastroHelper.getLigacaoAgua() != null
					&& dadosLigacoesBoletimCadastroHelper.getLigacaoAgua()
							.getHidrometroInstalacaoHistorico() != null
					&& dadosLigacoesBoletimCadastroHelper.getLigacaoAgua()
							.getHidrometroInstalacaoHistorico()
							.getHidrometroProtecao() != null) {

				protecaoTipo = dadosLigacoesBoletimCadastroHelper
						.getLigacaoAgua().getHidrometroInstalacaoHistorico()
						.getHidrometroProtecao().getId().toString();

			}
			bean.setProtecaoTipo(protecaoTipo);

			// Indicador Cavalete
			String cavalete = "";
			if (dadosLigacoesBoletimCadastroHelper.getLigacaoAgua() != null
					&& dadosLigacoesBoletimCadastroHelper.getLigacaoAgua()
							.getHidrometroInstalacaoHistorico() != null
					&& dadosLigacoesBoletimCadastroHelper.getLigacaoAgua()
							.getHidrometroInstalacaoHistorico()
							.getIndicadorExistenciaCavalete() != null) {

				cavalete = dadosLigacoesBoletimCadastroHelper.getLigacaoAgua()
						.getHidrometroInstalacaoHistorico()
						.getIndicadorExistenciaCavalete().toString();

			}
			bean.setCavalete(cavalete);

			// ocorrenciaCadastro
			String ocorrenciaCadastro = "";
			if (imovel.getCadastroOcorrencia() != null) {
				ocorrenciaCadastro = imovel.getCadastroOcorrencia().getId()
						.toString();
			}
			bean.setOcorrenciaCadastro(ocorrenciaCadastro);

			// categoriaPrincipal
			String categoriaPrincipal = "";

			// Descrição Abreviada da Principal Categoria do imovel
			Categoria categoria = this.getControladorImovel()
					.obterPrincipalCategoriaImovel(idImovel);

			if (categoria != null) {
				categoriaPrincipal = categoria.getId().toString();
			}
			bean.setCategoriaPrincipal(categoriaPrincipal);

		}

		// Dados das Subcategorias
		Collection colecaoSubcategorias = getControladorImovel()
				.obterQuantidadeEconomiasSubCategoria(idImovel);

		String subcategorias = "";
		String numeroEconomias = "";

		if (colecaoSubcategorias != null && !colecaoSubcategorias.isEmpty()) {

			Iterator colecaoSubcategoriasIterator = colecaoSubcategorias
					.iterator();

			for (int i = 0; i < 6; i++) {

				if (colecaoSubcategoriasIterator.hasNext()) {

					Subcategoria subcategoria = (Subcategoria) colecaoSubcategoriasIterator
							.next();

					subcategorias += Util.adicionarZerosEsquedaNumero(2,
							subcategoria.getId().toString() + "        ");

					numeroEconomias += Util.adicionarZerosEsquedaNumero(4,
							subcategoria.getQuantidadeEconomias().toString()
									+ "        ");
				} else {
					break;
				}
			}
		}
		bean.setSubcategorias(subcategorias);
		bean.setNumeroEconomias(numeroEconomias);

		return bean;
	}

	/**
	 * 
	 * Batch criado para atualização da coluna codigo debito automatico do
	 * imovel.
	 * 
	 * @author Hugo Amorim
	 * @date 30/03/2010
	 */
	public void atualizarCodigoDebitoAutomatico(
			Integer idFuncionalidadeIniciada, SetorComercial setorComercial)
			throws ControladorException {

		int idUnidadeIniciada = 0;

		try {

			// -------------------------
			// Registrar o início do processamento da Unidade de
			// Processamento do Batch
			// -------------------------

			idUnidadeIniciada = getControladorBatch()
					.iniciarUnidadeProcessamentoBatch(idFuncionalidadeIniciada,
							UnidadeProcessamento.SETOR_COMERCIAL,
							setorComercial.getId());

			// Variáveis para a paginação da pesquisa
			// ========================================================================
			boolean flagTerminou = false;
			final int quantidadeMaxima = 300;
			int quantidadeInicio = 0;
			// ========================================================================

			// Variaveis
			String matriculaSemDigito = null;
			Integer codigoDebitoAutomatico = null;

			while (!flagTerminou) {

				Collection<Integer> colecaoDados = this.repositorioCadastro
						.pesquisarIdsImoveisDoSetorComercial(
								setorComercial.getId(), quantidadeInicio,
								quantidadeMaxima);

				for (Integer idImovel : colecaoDados) {

					matriculaSemDigito = Util
							.obterMatriculaSemDigitoVerificador(idImovel
									.toString());
					Integer digitoVerificadorModulo11 = Util
							.obterDigitoVerificadorModulo11(matriculaSemDigito);

					codigoDebitoAutomatico = new Integer(matriculaSemDigito
							+ digitoVerificadorModulo11.toString());

					this.repositorioCadastro.atualizarCodigoDebitoAutomatico(
							idImovel, codigoDebitoAutomatico);

				}

				// Incrementa o nº do indice da páginação
				quantidadeInicio = quantidadeInicio + quantidadeMaxima;

				/**
				 * Caso a coleção de dados retornados for menor que a quantidade
				 * de registros seta a flag indicando que a paginação terminou.
				 */
				if (colecaoDados == null
						|| colecaoDados.size() < quantidadeMaxima) {

					flagTerminou = true;
				}

				if (colecaoDados != null) {
					colecaoDados.clear();
					colecaoDados = null;
				}
			}

			getControladorBatch().encerrarUnidadeProcessamentoBatch(null,
					idUnidadeIniciada, false);

		} catch (Exception e) {
			e.printStackTrace();
			getControladorBatch().encerrarUnidadeProcessamentoBatch(e,
					idUnidadeIniciada, true);
			throw new EJBException(e);
		}

	}

	/**
	 * [UC0811] Processar Requisições do Dispositivo Móvel Impressao Simultanea.
	 * 
	 * Método que baixa a nova versão do JAD do mobile para o celular
	 * 
	 * @author Bruno Barros
	 * @date 08/06/2010
	 * 
	 * @param
	 * @throws IOException
	 */
	public byte[] baixarNovaVersaoJad() throws ControladorException {
		try {
			return this.repositorioCadastro.baixarNovaVersaoJad();
		} catch (ErroRepositorioException e) {
			sessionContext.setRollbackOnly();
			throw new ControladorException("erro.sistema", e);
		}

	}

	/**
	 * [UC0811] Processar Requisições do Dispositivo Móvel Impressao Simultanea.
	 * 
	 * Método que baixa a nova versão do JAR do mobile para o celular
	 * 
	 * @author Bruno Barros
	 * @date 08/06/2010
	 * 
	 * @param
	 * @throws IOException
	 */
	public byte[] baixarNovaVersaoJar() throws ControladorException {
		try {
			return this.repositorioCadastro.baixarNovaVersaoJar();
		} catch (ErroRepositorioException e) {
			sessionContext.setRollbackOnly();
			throw new ControladorException("erro.sistema", e);
		}

	}

	/**
	 * 
	 * @author Fernando Fontelles
	 * @date 07/07/2010
	 * 
	 * @param idImovel
	 * @return
	 * @throws ControladorException
	 */
	public boolean verificarSituacaoImovelCobrancaJudicial(Integer idImovel)
			throws ControladorException {

		try {

			return this.repositorioCadastro
					.verificarSituacaoImovelCobrancaJudicial(idImovel);

		} catch (ErroRepositorioException e) {

			sessionContext.setRollbackOnly();
			throw new ControladorException("erro.sistema", e);

		}

	}

	/**
	 * 
	 * @author Fernando Fontelles
	 * @date 07/07/2010
	 * 
	 * @param idImovel
	 * @return
	 * @throws ControladorException
	 */
	public boolean verificarSituacaoImovelNegativacao(Integer idImovel)
			throws ControladorException {

		try {

			return this.repositorioCadastro
					.verificarSituacaoImovelNegativacao(idImovel);

		} catch (ErroRepositorioException e) {

			sessionContext.setRollbackOnly();
			throw new ControladorException("erro.sistema", e);

		}

	}

	/**
	 * 
	 * [UC1036] - Inserir Cadastro de Email do Cliente
	 * 
	 * @author Fernando Fontelles
	 * @date 09/07/2010
	 * 
	 * @param idCliente
	 * @param nomeClienteAnterior
	 * @param cpfAnterior
	 * @param cnpjAnterior
	 * @param emailAnterior
	 * @param nomeSolicitante
	 * @param cpfSolicitante
	 * @param nomeClienteAtual
	 * @param cpfClienteAtual
	 * @param cnpjClienteAtual
	 * @param emailAtual
	 * @return
	 */
	public Integer inserirCadastroEmailCliente(Integer idCliente,
			String nomeClienteAnterior, String cpfAnterior,
			String cnpjAnterior, String emailAnterior, String nomeSolicitante,
			String cpfSolicitante, String nomeClienteAtual,
			String cpfClienteAtual, String cnpjClienteAtual, String emailAtual)
			throws ControladorException {

		try {

			return this.repositorioCadastro.inserirCadastroEmailCliente(
					idCliente, nomeClienteAnterior, cpfAnterior, cnpjAnterior,
					emailAnterior, nomeSolicitante, cpfSolicitante,
					nomeClienteAtual, cpfClienteAtual, cnpjClienteAtual,
					emailAtual);

		} catch (ErroRepositorioException e) {

			sessionContext.setRollbackOnly();
			throw new ControladorException("erro.sistema", e);

		}

	}

	/**
	 * [UC1074] Gerar Relatório Alterações no Sistema por Coluna
	 * 
	 * @author Hugo Amorim
	 * @date 08/09/2010
	 */
	public Collection<Object[]> pesquisarDadosRelatorioAlteracoesSistemaColuna(
			GerarRelatorioAlteracoesSistemaColunaHelper helper)
			throws ControladorException {

		Collection<Object[]> retorno = null;

		try {

			// POR USUARIO
			if (helper.getTipoRelatorio().equals("1")) {
				retorno = this.repositorioCadastro
						.pesquisarDadosRelatorioAlteracoesSistemaColunaPorUsuario(helper);
			}
			// POR LOCALIDADE
			else if (helper.getTipoRelatorio().equals("2")) {
				retorno = this.repositorioCadastro
						.pesquisarDadosRelatorioAlteracoesSistemaColunaPorLocalidade(helper);
			}

		} catch (ErroRepositorioException e) {
			throw new ControladorException("erro.sistema", e);
		}

		return retorno;
	}

	/**
	 * [UC1074] Gerar Relatório Alterações no Sistema por Coluna
	 * 
	 * [FS0007]
	 * 
	 * @author Hugo Amorim
	 * @date 08/09/2010
	 */
	public boolean verificarRelacaoColuna(Integer idColuna)
			throws ControladorException {
		try {

			return this.repositorioCadastro.verificarRelacaoColuna(idColuna);

		} catch (ErroRepositorioException ex) {
			ex.printStackTrace();
			throw new ControladorException("erro.sistema", ex);
		}
	}

	/**
	 * [UC1076] Gerar Relatório Atualizações Cadastrais Via Internet.
	 * 
	 * @author Daniel Alves
	 * @date 28/09/2010 Consulta do Relatório Analítico
	 */
	public Collection pesquisarDadosRelatorioAtualizacaoCadastralViaInternet(
			GerarRelatorioAtualizacaoCadastralViaInternetHelper filtro)
			throws ControladorException {

		try {
			return this.repositorioCadastro
					.pesquisarDadosRelatorioAtualizacaoCadastralViaInternet(filtro);
		} catch (ErroRepositorioException e) {
			throw new ControladorException("erro.sistema", e);
		}

	}

	/**
	 * [UC1076] Gerar Relatório Atualizações Cadastrais Via Internet.
	 * 
	 * @author Daniel Alves
	 * @date 28/09/2010 Consulta do Relatório Resumo
	 */
	public Collection pesquisarDadosRelatorioResumoAtualizacaoCadastralViaInternet(
			GerarRelatorioAtualizacaoCadastralViaInternetHelper filtro)
			throws ControladorException {

		try {
			return this.repositorioCadastro
					.pesquisarDadosRelatorioResumoAtualizacaoCadastralViaInternet(filtro);
		} catch (ErroRepositorioException e) {
			throw new ControladorException("erro.sistema", e);
		}

	}

	/**
	 * [UC1076] Gerar Relatório Atualizações Cadastrais Via Internet.
	 * 
	 * @author Hugo Amorim de Lyra
	 * @date 06/10/2010
	 */
	public Integer countRelatorioAtualizacaoCadastralViaInternet(
			GerarRelatorioAtualizacaoCadastralViaInternetHelper helper)
			throws ControladorException {
		try {
			return this.repositorioCadastro
					.countRelatorioAtualizacaoCadastralViaInternet(helper);
		} catch (ErroRepositorioException e) {
			throw new ControladorException("erro.sistema", e);
		}
	}

	/**
	 * 
	 * [UC0113] - Faturar Grupo de Faturamento
	 * 
	 * @author Rômulo Aurélio
	 * @date 28/09/2010
	 * 
	 * @return
	 */
	public ClienteImovel pesquisarClienteResponsavelComEsferaPoderPublico(
			Integer idImovel) throws ControladorException {

		try {

			return this.repositorioCadastro
					.pesquisarClienteResponsavelComEsferaPoderPublico(idImovel);

		} catch (ErroRepositorioException e) {

			sessionContext.setRollbackOnly();
			throw new ControladorException("erro.sistema", e);

		}

	}

	/**
	 * [UC1121] Gerar Relatório de Imóveis com Alteração de Inscrição Via Batch
	 * 
	 * @author Hugo Leonardo
	 * @date 19/01/2011
	 * 
	 * @throws ErroRepositorioException
	 */
	public Collection<ImovelInscricaoAlterada> pesquisarRelatorioImoveisAlteracaoInscricaoViaBatch(
			FiltrarRelatorioImoveisAlteracaoInscricaoViaBatchHelper relatorioHelper)
			throws ControladorException {

		try {

			return this.repositorioCadastro
					.pesquisarRelatorioImoveisAlteracaoInscricaoViaBatch(relatorioHelper);

		} catch (ErroRepositorioException ex) {
			ex.printStackTrace();
			throw new ControladorException("erro.sistema", ex);
		}

	}

	/**
	 * [UC1121] Gerar Relatório de Imóveis com Alteração de Inscrição Via Batch
	 * 
	 * @author Hugo Leonardo
	 * @date 19/01/2011
	 * 
	 * @throws ErroRepositorioException
	 */
	public Integer countTotalRelatorioImoveisAlteracaoInscricaoViaBatch(
			FiltrarRelatorioImoveisAlteracaoInscricaoViaBatchHelper relatorioHelper)
			throws ControladorException {

		try {

			return this.repositorioCadastro
					.countTotalRelatorioImoveisAlteracaoInscricaoViaBatch(relatorioHelper);

		} catch (ErroRepositorioException ex) {
			ex.printStackTrace();
			throw new ControladorException("erro.sistema", ex);
		}

	}

	/**
	 * [UC1124] Gerar Relatório de Alterações de CPF/CNPJ
	 * 
	 * @author Mariana Victor
	 * @date 16/02/2011
	 */
	public Collection<Object[]> pesquisarDadosRelatorioAlteracoesCpfCnpj(
			GerarRelatorioAlteracoesCpfCnpjHelper helper)
			throws ControladorException {

		Collection<Object[]> retorno = null;

		try {

			// POR USUARIO
			if (helper.getTipoRelatorio().equals("1")) {
				retorno = this.repositorioCadastro
						.pesquisarDadosRelatorioAlteracoesCpfCnpjPorUsuario(helper);
			}
			// POR LOCALIDADE
			else if (helper.getTipoRelatorio().equals("2")) {
				retorno = this.repositorioCadastro
						.pesquisarDadosRelatorioAlteracoesCpfCnpjPorLocalidade(helper);
			}
			// POR MEIO
			else if (helper.getTipoRelatorio().equals("3")) {
				retorno = this.repositorioCadastro
						.pesquisarDadosRelatorioAlteracoesCpfCnpjPorMeio(helper);
			}

		} catch (ErroRepositorioException e) {
			throw new ControladorException("erro.sistema", e);
		}

		return retorno;
	}

	/**
	 * Solicitar Conta em Braile.
	 * 
	 * [UC1128] Solicitar Conta Braile
	 * 
	 * @author Hugo Leonardo
	 * @date 04/03/2011
	 * 
	 */
	public Integer inserirSolicitacaoContaBraile(
			ContaBraileHelper contaBraileHelper) throws ControladorException {

		Integer idRA = null;

		try {

			ContaBraile contaBraile = null;

			contaBraile = this
					.montarContaBraile(contaBraile, contaBraileHelper);

			Integer idContaBraile = (Integer) this.getControladorUtil()
					.inserir(contaBraile);

			idRA = this.montarRA(contaBraile,
					contaBraileHelper.getProtocoloAtendimento());

			FiltroContaBraile filtroContaBraile = new FiltroContaBraile();
			filtroContaBraile.adicionarParametro(new ParametroSimples(
					FiltroContaBraile.ID, idContaBraile));

			Collection colecaoContaBraile = this.getControladorUtil()
					.pesquisar(filtroContaBraile, ContaBraile.class.getName());

			ContaBraile contaBraileAtu = (ContaBraile) Util
					.retonarObjetoDeColecao(colecaoContaBraile);

			RegistroAtendimento rA = new RegistroAtendimento();
			rA.setId(idRA);
			contaBraileAtu.setRegistroAtendimento(rA);
			contaBraileAtu.setUltimaAlteracao(new Date());

			this.getControladorUtil().atualizar(contaBraileAtu);

		} catch (ControladorException e) {

			sessionContext.setRollbackOnly();

			String p = "";
			List<String> parametros = e.getParametroMensagem();
			if (parametros != null && !parametros.isEmpty()) {
				p = parametros.get(0);
			}

			throw new ControladorException(e.getMessage(), null, p);
		}

		return idRA;
	}

	/**
	 * Solicitar Conta em Braile.
	 * 
	 * [UC1128] Solicitar Conta Braile
	 * 
	 * @author Hugo Leonardo
	 * @date 04/03/2011
	 * 
	 */
	private ContaBraile montarContaBraile(ContaBraile contaBraile,
			ContaBraileHelper contaBraileHelper) throws ControladorException {

		// Preparar dados para armazenar na tabela
		String idImovel = "";
		if (contaBraileHelper.getMatricula() != null
				&& !contaBraileHelper.getMatricula().equals("")) {

			idImovel = contaBraileHelper.getMatricula().trim();
		} else {

			throw new ControladorException("atencao.informe.matricula_imovel");
		}

		Imovel imovel = new Imovel();
		imovel.setId(new Integer(idImovel));

		FiltroContaBraile filtroContaBraile = new FiltroContaBraile();
		filtroContaBraile.adicionarParametro(new ParametroSimples(
				FiltroContaBraile.IMOVEL_ID, imovel.getId()));

		Collection colecaoContaBraile = Fachada.getInstancia().pesquisar(
				filtroContaBraile, ContaBraile.class.getName());

		if (!Util.isVazioOrNulo(colecaoContaBraile)) {

			ContaBraile contaBraileAtu = (ContaBraile) Util
					.retonarObjetoDeColecao(colecaoContaBraile);

			if (contaBraileAtu != null) {

				throw new ControladorException(
						"atencao.solicitacao_conta_braile.existente", null,
						imovel.getId().toString());
			}
		}

		String nomeCliente = "";
		if (contaBraileHelper.getNomeCliente() != null
				&& !contaBraileHelper.getNomeCliente().equals("")) {

			nomeCliente = contaBraileHelper.getNomeCliente().toUpperCase();
		} else {

			throw new ControladorException(
					"atencao.necessario.confirmar.nome.cliente");
		}

		String cpfCliente = "";
		String cnpjCliente = "";
		if (contaBraileHelper.isIndicadorCpf()) {

			cpfCliente = contaBraileHelper.getCpfCnpjCliente();
		} else if (contaBraileHelper.isIndicadorCnpj()) {

			cnpjCliente = contaBraileHelper.getCpfCnpjCliente();
		}

		String email = contaBraileHelper.getEmail();

		String nomeSolicitante = "";
		if (contaBraileHelper.getNomeSolicitante() != null
				&& !contaBraileHelper.getNomeSolicitante().equals("")) {

			nomeSolicitante = contaBraileHelper.getNomeSolicitante()
					.toUpperCase();
		} else {

			throw new ControladorException("atencao.informar_nome_solicitante");
		}

		String cpfSolicitante = contaBraileHelper.getCpfSolicitante();

		String telefone = "";
		if (contaBraileHelper.getTelefoneContato() != null
				&& !contaBraileHelper.getTelefoneContato().equals("")) {

			telefone = contaBraileHelper.getTelefoneContato();
		}

		String rg = "";
		OrgaoExpedidorRg orgaoExpedidorRg = null;
		UnidadeFederacao unidadeFederacao = null;
		if (contaBraileHelper.getRg() != null
				&& !contaBraileHelper.getRg().equals("")
				&& contaBraileHelper.getOrgaoExpeditor() != null
				&& !contaBraileHelper.getOrgaoExpeditor().equals("-1")
				&& contaBraileHelper.getUnidadeFederacao() != null
				&& !contaBraileHelper.getUnidadeFederacao().equals("-1")) {

			rg = contaBraileHelper.getRg();

			orgaoExpedidorRg = new OrgaoExpedidorRg();
			orgaoExpedidorRg.setId(new Integer(contaBraileHelper
					.getOrgaoExpeditor()));

			unidadeFederacao = new UnidadeFederacao();
			unidadeFederacao.setId(new Integer(contaBraileHelper
					.getUnidadeFederacao()));

		} else {

			throw new ControladorException(
					"atencao.rg_campos_relacionados.nao_preenchidos");
		}

		contaBraile = new ContaBraile(imovel, nomeCliente, cpfCliente,
				cnpjCliente, email, nomeSolicitante, cpfSolicitante, rg,
				orgaoExpedidorRg, unidadeFederacao, new Date());

		if (!telefone.equals("")) {

			contaBraile.setTelefoneContato(telefone);
		}

		contaBraile.setUltimaAlteracao(new Date());

		return contaBraile;

	}

	/**
	 * Solicitar Conta em Braile.
	 * 
	 * [UC1128] Solicitar Conta Braile
	 * 
	 * @author Hugo Leonardo
	 * @date 04/03/2011
	 * 
	 */
	private Integer montarRA(ContaBraile contaBraile,
			String protocoloAtendimento) throws ControladorException {

		Integer idMeioSolicitacao = MeioSolicitacao.INTERNET;
		Integer idSolicitacaoTipo = new Integer("1"); // ALTERACAO CADASTRAL

		FiltroSolicitacaoTipoEspecificacao filtro = new FiltroSolicitacaoTipoEspecificacao();
		filtro.adicionarParametro(new ParametroSimples(
				FiltroSolicitacaoTipoEspecificacao.CODIGO_CONSTANTE, 1));

		Collection colecaoSolTipEspec = this.getControladorUtil().pesquisar(
				filtro, SolicitacaoTipoEspecificacao.class.getName());

		SolicitacaoTipoEspecificacao solTipEspec = (SolicitacaoTipoEspecificacao) Util
				.retonarObjetoDeColecao(colecaoSolTipEspec);

		if (solTipEspec == null) {
			throw new ControladorException(
					"atencao.inexistente.solicitacao_tipo_especificacao.conta_braile");
		}

		FiltroUnidadeOrganizacional filtroUnidadeOrganizacional = new FiltroUnidadeOrganizacional();
		filtroUnidadeOrganizacional.adicionarParametro(new ParametroSimples(
				FiltroUnidadeOrganizacional.CODIGO_CONSTANTE, new Short("1")));
		Collection colecaoUnidadeOrganizacional = this.getControladorUtil()
				.pesquisar(filtroUnidadeOrganizacional,
						UnidadeOrganizacional.class.getName());

		UnidadeOrganizacional unidadeOrganizacional = (UnidadeOrganizacional) Util
				.retonarObjetoDeColecao(colecaoUnidadeOrganizacional);

		if (unidadeOrganizacional == null) {

			throw new ControladorException(
					"pesquisa.unidade_organizacional_internet.inexistente");
		}

		Integer idSolicitacaoTipoEspecificacao = solTipEspec.getId(); // CONTA
																		// BRAILE

		Integer idUnidadeAtendimento = unidadeOrganizacional.getId();
		// Integer idUnidadeDestino = new Integer("9048");
		Date dataAtual = new Date();

		DefinirDataPrevistaUnidadeDestinoEspecificacaoHelper definirDataPrevistaUnidadeDestinoEspecificacaoHelper = this
				.getControladorRegistroAtendimento()
				.definirDataPrevistaUnidadeDestinoEspecificacao(new Date(),
						idSolicitacaoTipoEspecificacao);

		String dataAtendimento = Util.formatarData(dataAtual);
		String horaAtendimento = Util.formatarHoraSemData(dataAtual);

		FiltroOrgaoExpedidorRg filtroOrgaoExpedidor = new FiltroOrgaoExpedidorRg();

		filtroOrgaoExpedidor.adicionarParametro(new ParametroSimples(
				FiltroOrgaoExpedidorRg.ID, contaBraile.getOrgaoExpeditor()
						.getId()));

		Collection orgaosExpedidores = this.getControladorUtil().pesquisar(
				filtroOrgaoExpedidor, OrgaoExpedidorRg.class.getName());

		OrgaoExpedidorRg orgaoExpedidorRg = (OrgaoExpedidorRg) Util
				.retonarObjetoDeColecao(orgaosExpedidores);

		FiltroUnidadeFederacao filtroUnidadeFederacao = new FiltroUnidadeFederacao();

		filtroUnidadeFederacao.adicionarParametro(new ParametroSimples(
				FiltroUnidadeFederacao.ID, contaBraile.getUnidadeFederacao()
						.getId()));

		Collection unidadesFederacao = this.getControladorUtil().pesquisar(
				filtroUnidadeFederacao, UnidadeFederacao.class.getName());

		UnidadeFederacao unidadeFederacao = (UnidadeFederacao) Util
				.retonarObjetoDeColecao(unidadesFederacao);

		String observacao = contaBraile.getCpfSolicitante() + ";"
				+ contaBraile.getRg() + ";"
				+ orgaoExpedidorRg.getDescricaoAbreviada() + ";"
				+ unidadeFederacao.getSigla() + ";"
				+ contaBraile.getTelefoneContato() + ";"
				+ contaBraile.getEmail();

		String parecer = "Tramite automático da internet.";

		String nomeSolicitante = contaBraile.getNomeSolicitante();

		FiltroImovel filtroImovel = new FiltroImovel();
		filtroImovel.adicionarParametro(new ParametroSimples(FiltroImovel.ID,
				contaBraile.getImovel().getId()));
		filtroImovel
				.adicionarCaminhoParaCarregamentoEntidade(FiltroImovel.LOCALIDADE);
		filtroImovel
				.adicionarCaminhoParaCarregamentoEntidade(FiltroImovel.SETOR_COMERCIAL);
		filtroImovel
				.adicionarCaminhoParaCarregamentoEntidade(FiltroImovel.QUADRA);
		filtroImovel
				.adicionarCaminhoParaCarregamentoEntidade(FiltroImovel.PAVIMENTO_RUA);
		filtroImovel
				.adicionarCaminhoParaCarregamentoEntidade(FiltroImovel.PAVIMENTO_CALCADA);

		Collection colecaoImovel = this.getControladorUtil().pesquisar(
				filtroImovel, Imovel.class.getName());

		Imovel imovel = (Imovel) Util.retonarObjetoDeColecao(colecaoImovel);

		Collection colecaoEnderecos = new ArrayList();
		Imovel imovelEndereco = this.getControladorEndereco()
				.pesquisarImovelParaEndereco(imovel.getId());
		colecaoEnderecos.add(imovelEndereco);

		FiltroUsuario filtroUsuario = new FiltroUsuario();
		filtroUsuario.adicionarParametro(new ParametroSimples(
				FiltroUsuario.INDICADOR_USUARIO_INTERNET, new Integer("1")));
		Collection colecaoUsuario = this.getControladorUtil().pesquisar(
				filtroUsuario, Usuario.class.getName());

		Usuario usuarioLogado = (Usuario) Util
				.retonarObjetoDeColecao(colecaoUsuario);

		if (usuarioLogado == null) {

			throw new ControladorException(
					"pesquisa.usuario_internet.inexistente");
		}

		// Endereço
		FiltroClienteEndereco filtroClienteEndereco = new FiltroClienteEndereco();

		if (!contaBraile.getCpfCliente().equals("")) {

			filtroClienteEndereco.adicionarParametro(new ParametroSimples(
					FiltroClienteEndereco.CPF, contaBraile.getCpfCliente()));

		} else if (!contaBraile.getCnpjCliente().equals("")) {

			filtroClienteEndereco.adicionarParametro(new ParametroSimples(
					FiltroClienteEndereco.CNPJ, contaBraile.getCnpjCliente()));
		}

		Collection colecaoEndereco = null;

		if (!contaBraile.getCpfCliente().equals("")
				|| !contaBraile.getCnpjCliente().equals("")) {

			Collection colecaoClienteEndereco = this.getControladorUtil()
					.pesquisar(filtroClienteEndereco,
							ClienteEndereco.class.getName());

			ClienteEndereco clienteEndereco = (ClienteEndereco) Util
					.retonarObjetoDeColecao(colecaoClienteEndereco);

			colecaoEndereco = new ArrayList();
			colecaoEndereco.add(clienteEndereco);
		}

		Integer[] idRA = this
				.getControladorRegistroAtendimento()
				.inserirRegistroAtendimento(

						// Indicador Atendimento OnLine
						new Short("1"),

						// Data Atendimento / Hora Atendimento
						dataAtendimento,
						horaAtendimento,

						// Tempo Espera Inicial / Final
						null,
						null,

						// Meio Solicitação / Solicitação Tipo Especificação
						idMeioSolicitacao,
						idSolicitacaoTipoEspecificacao,

						// Data Prevista / Observação
						Util.formatarData(definirDataPrevistaUnidadeDestinoEspecificacaoHelper
								.getDataPrevista()),
						observacao,

						// Imóvel / Descrição do Local da Ocorrência /
						// Solicitação Tipo
						contaBraile.getImovel().getId(),
						null,
						idSolicitacaoTipo,

						// Coleção de Endereços / Ponto Referência Local
						// Ocorrência
						colecaoEnderecos,
						null,

						// Bairro Área
						null,

						// Localidade
						imovel.getLocalidade().getId(),

						// Setor Comercial
						imovel.getSetorComercial().getId(),

						// Quadra
						imovel.getQuadra().getId(),

						// Divisão Esgoto / Local Ocorrência
						null,
						null,

						// Pavimento Rua / Pavimento Calçada
						imovel.getPavimentoRua().getId(),
						imovel.getPavimentoCalcada().getId(),

						// Unidade Atendimento / Usuário Logado
						idUnidadeAtendimento,
						usuarioLogado.getId(),

						// Cliente / Ponto Referência Solicitante
						null,
						null,

						// Nome Solicitante / Novo Solicitante
						nomeSolicitante,
						false,

						// Unidade Solicitante / Funcionário
						null,
						null,

						// Coleção Telefones / Coleção Endereços Solicitante
						null,
						colecaoEndereco,

						// Unidade Destino / Parecer Unidade Destino
						idUnidadeAtendimento,
						parecer,

						// Serviço Tipo / Número RA Manual / RA Gerado
						null, null, null, null, null, ConstantesSistema.NAO,
						null,

						protocoloAtendimento, null, null, null, null, null,
						null, null);

		return idRA[0];

	}

	/**
	 * UC1162  AUTORIZAR ALTERACAO INSCRICAO IMOVEL
	 * 
	 * @author Rodrigo Cabral
	 * @date 05/06/2011
	 */
	public Collection pesquisaImovelInscricaoAlterada(
			ImovelInscricaoAlteradaHelper helper) throws ControladorException {
		try {

			Collection colecaoRetorno = null;
			Collection colecaoImovelInscricaoAlterada = repositorioCadastro
					.pesquisaImovelInscricaoAlterada(helper);
			Integer totalImoveis = null;
			Integer idQuadra = null;
			Integer indicadorAutorizar = null;

			if (colecaoImovelInscricaoAlterada != null
					&& !colecaoImovelInscricaoAlterada.isEmpty()) {

				Iterator iterImovelInscricaoAlterada = colecaoImovelInscricaoAlterada
						.iterator();
				colecaoRetorno = new ArrayList();
				ImovelInscricaoAlteradaHelper retorno = null;
				while (iterImovelInscricaoAlterada.hasNext()) {

					Object[] imovelIA = (Object[]) iterImovelInscricaoAlterada
							.next();

					totalImoveis = (Integer) imovelIA[0];
					idQuadra = (Integer) imovelIA[1];
					indicadorAutorizar = 0;

					FiltroQuadra filtro = new FiltroQuadra();
					filtro.adicionarParametro(new ParametroSimples(
							FiltroQuadra.ID, idQuadra));

					Collection colecaoQuadra = this.getControladorUtil()
							.pesquisar(filtro, Quadra.class.getName());

					Quadra quadra = (Quadra) Util
							.retonarObjetoDeColecao(colecaoQuadra);

					retorno = new ImovelInscricaoAlteradaHelper(
							indicadorAutorizar, totalImoveis, idQuadra);

					retorno.setNumeroQuadra(quadra.getNumeroQuadra());

					colecaoRetorno.add(retorno);

				}
			}
			return colecaoRetorno;
		} catch (Exception e) {
			throw new EJBException(e);
		}
	}

	/**
	 * [UC1160] Processar Comando Gerado Carta Tarifa Social
	 * 
	 * @author: Vivianne Sousa
	 * @date: 24/03/2011
	 */
	public void processarComandoGerado(Integer idLocalidade,
			Integer idFuncionalidadeIniciada,
			TarifaSocialComandoCarta tarifaSocialComandoCarta)
			throws ControladorException {

		int idUnidadeIniciada = 0;

		try {
			/*
			 * Registrar o início do processamento da Unidade de Processamento
			 * do Batch
			 */
			idUnidadeIniciada = getControladorBatch()
					.iniciarUnidadeProcessamentoBatch(idFuncionalidadeIniciada,
							UnidadeProcessamento.LOCALIDADE, (idLocalidade));

			if (tarifaSocialComandoCarta.getDataProcessamento() == null) {
				// [SB0008]-Verificar carta para o comando
				verificarCartaParaComando(idLocalidade,
						tarifaSocialComandoCarta);

				Integer idGerencia = null;
				if (tarifaSocialComandoCarta.getGerenciaRegional() != null
						&& tarifaSocialComandoCarta.getGerenciaRegional()
								.getId() != null) {
					idGerencia = tarifaSocialComandoCarta.getGerenciaRegional()
							.getId();
				}

				Integer idUnidade = null;
				if (tarifaSocialComandoCarta.getUnidadeNegocio() != null
						&& tarifaSocialComandoCarta.getUnidadeNegocio().getId() != null) {
					idUnidade = tarifaSocialComandoCarta.getUnidadeNegocio()
							.getId();
				}

				Collection colecaoImoveis = null;

				if (tarifaSocialComandoCarta.getCodigoTipoCarta().equals(
						new Integer(1))) {
					// CADASTRO
					colecaoImoveis = getControladorImovel()
							.consultarImovelCadastro(
									idLocalidade,
									idGerencia,
									idUnidade,
									tarifaSocialComandoCarta
											.getAnoMesInicialImplantacao(),
									tarifaSocialComandoCarta
											.getAnoMesFinalImplantacao());
					if (colecaoImoveis != null && !colecaoImoveis.isEmpty()) {
						Iterator iterImovel = colecaoImoveis.iterator();
						while (iterImovel.hasNext()) {
							Imovel imovel = (Imovel) iterImovel.next();
							// [SB0002]Verifica Critério Recadastramento

							Integer criterio = verificaCriterioRecadastramento(
									imovel, tarifaSocialComandoCarta);
							if (criterio != null) {

								if (verificaValidadeCarta(imovel,
										tarifaSocialComandoCarta)) {
									// [SB0005]Gera Cartas Tarifa Social
									gerarCartasTarifaSocial(imovel,
											tarifaSocialComandoCarta, criterio,
											null);

								}
							}
						}
					}

				} else {
					// COBRANÇA
					colecaoImoveis = getControladorImovel().consultarImovel(
							idLocalidade, idGerencia, idUnidade);

					if (colecaoImoveis != null && !colecaoImoveis.isEmpty()) {
						Iterator iterImovel = colecaoImoveis.iterator();
						while (iterImovel.hasNext()) {
							Imovel imovel = (Imovel) iterImovel.next();

							// [SB0003]Verifica Critério Cobrança
							Collection colecaoContas = verificaCriterioCobranca(
									imovel, tarifaSocialComandoCarta);
							if (colecaoContas != null) {

								if (verificaValidadeCarta(imovel,
										tarifaSocialComandoCarta)) {
									// [SB0005]Gera Cartas Tarifa Social
									gerarCartasTarifaSocial(imovel,
											tarifaSocialComandoCarta, null,
											colecaoContas);
								}

							}
						}
					}
				}

				// O sistema atualiza a data de processamento e quantidade de
				// imóveis do comando processado
				// na tabela TAR_SOCIAL_COMANDO_CARTA com TSCC_ID = TSCC_ID
				// recebido
				Integer qtdeImoveis = getControladorImovel()
						.pesquisarQuantidadeImoveisTarifaSocialCarta(
								tarifaSocialComandoCarta.getId());
				getControladorImovel().atualizarTarifaSocialComandoCarta(
						tarifaSocialComandoCarta.getId(), qtdeImoveis);

			}

			getControladorBatch().encerrarUnidadeProcessamentoBatch(null,
					idUnidadeIniciada, false);

		} catch (Exception ex) {
			ex.printStackTrace();
			getControladorBatch().encerrarUnidadeProcessamentoBatch(ex,
					idUnidadeIniciada, true);
			throw new EJBException(ex);
		}

	}

	/**
	 * [UC1160] Processar Comando Gerado Carta Tarifa Social
	 * 
	 * @author Vivianne Sousa
	 * @date 24/03/2011
	 * 
	 * @throws ControladorException
	 */
	public Collection pesquisarLocalidadesPorGerencia(Integer idGerenciaRegional)
			throws ControladorException {

		try {

			return this.repositorioCadastro
					.pesquisarLocalidadesPorGerencia(idGerenciaRegional);

		} catch (ErroRepositorioException ex) {
			ex.printStackTrace();
			throw new ControladorException("erro.sistema", ex);
		}

	}

	/**
	 * [UC1160] Processar Comando Gerado Carta Tarifa Social
	 * 
	 * @author Vivianne Sousa
	 * @date 24/03/2011
	 * 
	 * @throws ControladorException
	 */
	public Collection pesquisarLocalidadesPorUnidadeNegocio(
			Integer idUnidadeNegocio) throws ControladorException {

		try {

			return this.repositorioCadastro
					.pesquisarLocalidadesPorUnidadeNegocio(idUnidadeNegocio);

		} catch (ErroRepositorioException ex) {
			ex.printStackTrace();
			throw new ControladorException("erro.sistema", ex);
		}

	}

	/**
	 * [UC1160] Processar Comando Gerado Carta Tarifa Social
	 * 
	 * @author Vivianne Sousa
	 * @date 24/03/2011
	 * 
	 * @throws ControladorException
	 */
	public Collection pesquisarLocalidade() throws ControladorException {

		try {

			return this.repositorioCadastro.pesquisarLocalidade();

		} catch (ErroRepositorioException ex) {
			ex.printStackTrace();
			throw new ControladorException("erro.sistema", ex);
		}

	}

	/**
	 * [UC1160] Processar Comando Gerado Carta Tarifa Social [SB0002]Verifica
	 * Critério Recadastramento
	 * 
	 * @author Vivianne Sousa
	 * @date 24/03/2011
	 * 
	 * @throws ControladorException
	 */
	public Integer verificaCriterioRecadastramento(Imovel imovel,
			TarifaSocialComandoCarta tscc) throws ControladorException {

		Integer codigoCriterio = null;

		Cliente clienteUsuario = getControladorCliente()
				.pesquisarClienteUsuarioDoImovel(imovel.getId());

		// Caso TSCC_ICCRITERIOCPF = 1
		if (tscc.getIndicadorCriterioCpf().equals(ConstantesSistema.SIM)) {
			if (clienteUsuario.getCpf() == null) {
				return 1;
			}
		}
		// Caso TSCC_ICCRITERIOIDENTIDADE = 1
		if (tscc.getIndicadorCriterioIdentidade().equals(ConstantesSistema.SIM)) {
			if (clienteUsuario.getRg() == null) {
				return 2;
			}
		}
		// Caso TSCC_ICCRITERIOCONTRATOENERGIA = 1
		if (tscc.getIndicadorCriterioContratoEnergia().equals(
				ConstantesSistema.SIM)) {
			if (imovel.getQuantidadeEconomias().equals(new Short("1"))) {
				if (imovel.getNumeroCelpe() == null) {
					return 3;
				}
			} else if (imovel.getQuantidadeEconomias()
					.compareTo(new Short("1")) == 1) {
				Collection colecaoImovelEconomia = getControladorImovel()
						.pesquisarImovelEconomia(imovel.getId());
				if (colecaoImovelEconomia == null
						|| colecaoImovelEconomia.isEmpty()) {
					return 3;
				}
			}
		}
		TarifaSocialDadoEconomia tarifaSocialDadoEconomia = getControladorImovel()
				.pesquisarTarifaSocialDadoEconomia(imovel.getId());
		// Caso TSCC_ICCRITERIODADOSENERGIA = 1
		if (tscc.getIndicadorCriterioDadosEnergia().equals(
				ConstantesSistema.SIM)) {
			if (tarifaSocialDadoEconomia != null
					&& tarifaSocialDadoEconomia.getTarifaSocialRevisaoMotivo() != null
					&& tarifaSocialDadoEconomia.getTarifaSocialRevisaoMotivo()
							.getId().equals(new Integer(46))) {
				return 4;
			}
		}
		// Caso TSCC_ICCRITERIOPROGRAMASOCIAL = 1
		if (tscc.getIndicadorCriterioProgramaSocial().equals(
				ConstantesSistema.SIM)) {
			if (tarifaSocialDadoEconomia != null
					&& tarifaSocialDadoEconomia.getTarifaSocialCartaoTipo() != null
					&& tarifaSocialDadoEconomia.getTarifaSocialCartaoTipo()
							.getDescricaoAbreviada().equals("BF")) {
				return 5;
			}
		}
		// Caso TSCC_ICCRITERIOSEGDESEMPREGO = 1
		if (tscc.getIndicadorCriterioSeguroDesemprego().equals(
				ConstantesSistema.SIM)) {
			if (tarifaSocialDadoEconomia != null
					&& tarifaSocialDadoEconomia.getTarifaSocialCartaoTipo() != null
					&& tarifaSocialDadoEconomia.getTarifaSocialCartaoTipo()
							.getId().equals(new Integer(49))
					&& tarifaSocialDadoEconomia.getDataValidadeCartao() != null
					&& tarifaSocialDadoEconomia.getDataValidadeCartao()
							.compareTo(new Date()) == -1) {
				return 6;
			}
		}
		// Caso TSCC_ICCRITERIORENDACOMPROVAD = 1
		if (tscc.getIndicadorCriterioRendaComprovada().equals(
				ConstantesSistema.SIM)) {
			if (tarifaSocialDadoEconomia != null
					&& tarifaSocialDadoEconomia.getRendaTipo() != null
					&& tarifaSocialDadoEconomia.getRendaTipo().getId()
							.equals(new Integer(1))) {
				return 7;
			}
		}
		// Caso TSCC_ICCRITERIORENDADECLARADA = 1
		if (tscc.getIndicadorCriterioRendaDeclarada().equals(
				ConstantesSistema.SIM)) {
			if (tarifaSocialDadoEconomia != null
					&& tarifaSocialDadoEconomia.getRendaTipo() != null
					&& tarifaSocialDadoEconomia.getRendaTipo().getId()
							.equals(new Integer(2))) {
				return 8;
			}
		}
		// Caso TSCC_ICCRITERIOQTECONOMIA = 1
		if (tscc.getIndicadorCriterioQtdeEconomia().equals(
				ConstantesSistema.SIM)) {
			if (imovel.getQuantidadeEconomias().compareTo(new Short("1")) == 1) {
				return 9;
			}
		}
		// Caso TSCC_ICCRITERIORECADASTRAMENTO = 1
		if (tscc.getIndicadorCriterioRecadastramento().equals(
				ConstantesSistema.SIM)
				&& tarifaSocialDadoEconomia != null) {
			Date dataRecadastramento = tarifaSocialDadoEconomia
					.getDataRecadastramento();

			if (dataRecadastramento != null) {
				dataRecadastramento = Util.subtrairNumeroAnosDeUmaData(
						dataRecadastramento, 2);

				if (dataRecadastramento.compareTo(new Date()) == -1) {
					return 10;
				}
			}
		}

		return codigoCriterio;
	}

	/**
	 * [UC1160] Processar Comando Gerado Carta Tarifa Social [SB0004]-Verifica
	 * Validade Carta
	 * 
	 * @author Vivianne Sousa
	 * @date 25/03/2011
	 * 
	 * @throws ControladorException
	 */
	public boolean verificaValidadeCarta(Imovel imovel,
			TarifaSocialComandoCarta tscc) throws ControladorException {

		boolean retorno = true;
		TarifaSocialCarta tarifaSocialCarta = getControladorImovel()
				.pesquisarTarifaSocialCarta(imovel.getId(),
						tscc.getCodigoTipoCarta());

		if (tarifaSocialCarta != null
				&& tarifaSocialCarta.getTarifaSocialComandoCarta() != null) {

			Date dataGeracao = tarifaSocialCarta.getTarifaSocialComandoCarta()
					.getDataGeracao();
			Integer qtdeDiasComparecimento = tarifaSocialCarta
					.getTarifaSocialComandoCarta()
					.getQuantidadeDiasComparecimento();

			if ((Util.adicionarNumeroDiasDeUmaData(dataGeracao,
					qtdeDiasComparecimento)).compareTo(new Date()) == -1) {
				retorno = false;
			}
		}

		return retorno;
	}

	/**
	 * [UC1160] Processar Comando Gerado Carta Tarifa Social [SB0003]Verifica
	 * Critério Cobrança
	 * 
	 * @author Vivianne Sousa
	 * @date 28/03/2011
	 * 
	 * @throws ControladorException
	 */
	public Collection verificaCriterioCobranca(Imovel imovel,
			TarifaSocialComandoCarta tscc) throws ControladorException {

		Collection retorno = null;

		Date dataVencimentoInicial = Util.criarData(1, 1, 0001);
		Date dataVencimentoFinal = Util.subtrairNumeroDiasDeUmaData(new Date(),
				tscc.getQuantidadeDiasDebitoVencimento().intValue());
		// Util.criarData(31, 12, 9999);

		// [UC0067] Obter Débito do Imóvel ou Cliente
		ObterDebitoImovelOuClienteHelper imovelDebitoCredito = Fachada
				.getInstancia().obterDebitoImovelOuCliente(1, // indicadorDebito
						imovel.getId().toString(), // idImovel
						null, // codigoCliente
						null, // clienteRelacaoTipo
						"000101", // anoMesInicialReferenciaDebito
						"999912", // anoMesFinalReferenciaDebito
						dataVencimentoInicial, // anoMesInicialVencimentoDebito
						dataVencimentoFinal, // anoMesFinalVencimentoDebito
						1, // indicadorPagamento
						1, // indicadorConta
						2, // indicadorDebitoACobrar
						2, // indicadorCreditoARealizar
						2, // indicadorNotasPromissorias
						2, // indicadorGuiasPagamento
						2, // indicadorCalcularAcrescimoImpontualidade
						true, 2);// indicadorContas

		// CONTA
		if (imovelDebitoCredito.getColecaoContasValoresImovel() != null
				&& !imovelDebitoCredito.getColecaoContasValoresImovel()
						.isEmpty()) {
			return imovelDebitoCredito.getColecaoContasValoresImovel();
		}
		return retorno;
	}

	/**
	 * [UC1160] Processar Comando Gerado Carta Tarifa Social [SB0005]Gera
	 * Cartas Tarifa Social
	 * 
	 * @author Vivianne Sousa
	 * @date 28/03/2011
	 * 
	 * @throws ControladorException
	 */
	public void gerarCartasTarifaSocial(Imovel imovel,
			TarifaSocialComandoCarta tscc, Integer criterio,
			Collection colecaoContas) throws ControladorException {

		try {

			TarifaSocialCarta tarifaSocialCarta = new TarifaSocialCarta();

			TarifaSocialCartaPK tarifaSocialCartaPK = new TarifaSocialCartaPK();
			Cliente clienteUsuario = getControladorCliente()
					.pesquisarClienteUsuarioDoImovel(imovel.getId());
			tarifaSocialCartaPK.setClienteId(clienteUsuario.getId());
			tarifaSocialCartaPK.setTarifaSocialComandoCartaID(tscc.getId());
			tarifaSocialCartaPK.setImovelId(imovel.getId());
			tarifaSocialCarta.setComp_id(tarifaSocialCartaPK);

			tarifaSocialCarta.setImovel(imovel);
			tarifaSocialCarta.setTarifaSocialComandoCarta(tscc);
			tarifaSocialCarta.setCliente(clienteUsuario);
			tarifaSocialCarta
					.setIndicadorExcluidoTarifaSocial(ConstantesSistema.NAO);

			tarifaSocialCarta.setLocalidade(imovel.getLocalidade());
			tarifaSocialCarta.setGerenciaRegional(imovel.getLocalidade()
					.getGerenciaRegional());
			tarifaSocialCarta.setUnidadeNegocio(imovel.getLocalidade()
					.getUnidadeNegocio());

			if (tscc.getCodigoTipoCarta().equals(new Integer(2))) {
				// correspondente a FATURAS VENCIDAS
				tarifaSocialCarta.setCodigoMotivo(new Integer(11));

				// [SB0006]Gera Dados Débito da Carta
				gerardadosDebitoCarta(imovel, tscc, colecaoContas);

			} else {
				TarifaSocialMotivoCarta tsmc = repositorioCadastro
						.pesquisarTarifaSocialMotivoCarta(criterio);
				tarifaSocialCarta.setCodigoMotivo(tsmc.getId());
			}
			tarifaSocialCarta.setUltimaAlteracao(new Date());
			getControladorUtil().inserir(tarifaSocialCarta);

		} catch (ErroRepositorioException ex) {
			ex.printStackTrace();
			throw new ControladorException("erro.sistema", ex);
		}
	}

	/**
	 * [UC1160] Processar Comando Gerado Carta Tarifa Social [SB0006]Gera Dados
	 * Débito da Carta
	 * 
	 * @author Vivianne Sousa
	 * @date 28/03/2011
	 * 
	 * @throws ControladorException
	 */
	public void gerardadosDebitoCarta(Imovel imovel,
			TarifaSocialComandoCarta tscc, Collection colecaoContas)
			throws ControladorException {

		if (colecaoContas != null && !colecaoContas.isEmpty()) {

			Iterator iterContas = colecaoContas.iterator();

			while (iterContas.hasNext()) {
				ContaValoresHelper helper = (ContaValoresHelper) iterContas
						.next();
				Conta conta = helper.getConta();
				TarifaSocialCartaDebito tarifaSocialCartaDebito = new TarifaSocialCartaDebito();

				TarifaSocialCartaDebitoPK tarifaSocialCartaDebitoPK = new TarifaSocialCartaDebitoPK();
				tarifaSocialCartaDebitoPK.setContaId(conta.getId());
				tarifaSocialCartaDebitoPK.setImovelId(imovel.getId());
				tarifaSocialCartaDebitoPK.setTarifaSocialComandoCartaID(tscc
						.getId());
				tarifaSocialCartaDebito.setComp_id(tarifaSocialCartaDebitoPK);

				tarifaSocialCartaDebito.setImovel(imovel);
				tarifaSocialCartaDebito.setConta(conta);
				tarifaSocialCartaDebito.setTarifaSocialComandoCarta(tscc);

				tarifaSocialCartaDebito.setDataVencimentoConta(conta
						.getDataVencimentoConta());
				tarifaSocialCartaDebito.setReferenciaConta(conta
						.getReferencia());
				tarifaSocialCartaDebito.setValorConta(conta
						.getValorTotalContaBigDecimal());
				tarifaSocialCartaDebito.setUltimaAlteracao(new Date());

				getControladorUtil().inserir(tarifaSocialCartaDebito);
			}
		}
	}

	/**
	 * [UC1160] Processar Comando Gerado Carta Tarifa Social [SB0007]-Gera
	 * Arquivo TXT das Cartas
	 * 
	 * @author Vivianne Sousa
	 * @date 29/03/2011
	 * 
	 * @throws ControladorException
	 */
	public void gerarCartaTarifaSocial(TarifaSocialComandoCarta tscc,
			Integer idFuncionalidadeIniciada) throws ControladorException {

		BufferedWriter out = null;
		ZipOutputStream zos = null;
		File leitura = null;
		Date dataAtual = new Date();
		String nomeZip = null;
		int idUnidadeIniciada = 0;

		try {
			idUnidadeIniciada = getControladorBatch()
					.iniciarUnidadeProcessamentoBatch(idFuncionalidadeIniciada,
							UnidadeProcessamento.LOCALIDADE, 0);

			if (tscc.getDataProcessamento() != null
					&& !tscc.getQuantidadeCartasGeradas().equals(0)) {

				if (tscc.getCodigoTipoCarta().equals(new Integer(1))) {
					nomeZip = "CARTAS_RECADASTRAMENTO_"
							+ Util.formatarData(dataAtual)
							+ Util.formatarHoraSemDataSemDoisPontos(dataAtual);
				} else {
					nomeZip = "CARTAS_COBRANCA_" + Util.formatarData(dataAtual)
							+ Util.formatarHoraSemDataSemDoisPontos(dataAtual);
				}

				// Definindo arquivo para escrita
				nomeZip = nomeZip.replace("/", "_");
				File compactado = new File(nomeZip + ".zip");
				leitura = new File(nomeZip + ".txt");

				zos = new ZipOutputStream(new FileOutputStream(compactado));
				out = new BufferedWriter(new OutputStreamWriter(
						new FileOutputStream(leitura.getAbsolutePath())));

				// pegar o arquivo, zipar pasta e arquivo e escrever no stream
				System.out.println("***************************************");
				System.out.println("INICO DA CRIACAO DO ARQUIVO");
				System.out.println("***************************************");

				Collection colecaoTarifaSocialCarta = getControladorImovel()
						.pesquisarTarifaSocialCarta(tscc.getId());

				System.out.println("***************************************");
				System.out.println("QTD DE CARTAS:"
						+ colecaoTarifaSocialCarta.size());
				System.out.println("***************************************");

				// HEADER
				StringBuilder headerTxt = new StringBuilder();
				if (tscc.getCodigoTipoCarta().equals(new Integer(1))) {
					headerTxt
							.append(Util
									.completaStringComEspacoAEsquerda(
											"Carta de Recadastramento Imóvel com Tarifa Social",
											50));
				} else {
					headerTxt.append(Util.completaStringComEspacoAEsquerda(
							"Carta de Cobrança Imóvel com Tarifa Social", 50));
				}

				headerTxt.append(Util.completaStringComEspacoAEsquerda(tscc
						.getId().toString(), 10));
				headerTxt.append(Util.completaStringComEspacoAEsquerda(
						Util.formatarData(tscc.getDataGeracao()), 10));
				headerTxt.append(Util.completaStringComEspacoAEsquerda(tscc
						.getQuantidadeCartasGeradas().toString(), 10));
				headerTxt.append(Util.completaStringComEspacoAEsquerda(tscc
						.getUsuario().getId().toString(), 10));
				headerTxt.append(Util.completaStringComEspacoAEsquerda(tscc
						.getQuantidadeDiasComparecimento().toString(), 10));
				headerTxt.append(System.getProperty("line.separator"));
				out.write(headerTxt.toString());

				Iterator iterTSCR = colecaoTarifaSocialCarta.iterator();
				while (iterTSCR.hasNext()) {
					TarifaSocialCarta tarifaSocialCarta = (TarifaSocialCarta) iterTSCR
							.next();

					Integer idImovel = tarifaSocialCarta.getImovel().getId();

					String matriculaImovelFormatada = Util
							.adicionarZerosEsquedaNumero(8, idImovel.toString());
					matriculaImovelFormatada = matriculaImovelFormatada
							.substring(0, 7)
							+ "."
							+ matriculaImovelFormatada.substring(7, 8);
					String inscricao = getControladorImovel()
							.pesquisarInscricaoImovel(idImovel);
					String enderecoImovel = this.getControladorEndereco()
							.pesquisarEnderecoFormatado(idImovel);
					String nomeCliente = tarifaSocialCarta.getCliente()
							.getNome();

					BigDecimal valorContas = ConstantesSistema.VALOR_ZERO;
					if (tscc.getCodigoTipoCarta().equals(new Integer(2))) {
						valorContas = getControladorImovel()
								.pesquisarValorContaTarifaSocialCartaDebito(
										tscc.getId(), idImovel);
					}

					StringBuilder cartaTxt = new StringBuilder();
					cartaTxt.append(matriculaImovelFormatada);
					cartaTxt.append(Util
							.completaStringComEspacoADireitaCondicaoTamanhoMaximoTruncando(
									inscricao, 20));
					cartaTxt.append(Util
							.completaStringComEspacoADireitaCondicaoTamanhoMaximoTruncando(
									enderecoImovel, 70));
					cartaTxt.append(Util
							.completaStringComEspacoADireitaCondicaoTamanhoMaximoTruncando(
									nomeCliente, 50));
					cartaTxt.append(Util
							.completaStringComEspacoAEsquerdaTruncandoAoTamanhoMaximoInformado(
									Util.formatarMoedaReal(valorContas), 20));

					cartaTxt.append(System.getProperty("line.separator"));
					out.write(cartaTxt.toString());

				}

				out.flush();

			}

			getControladorBatch().encerrarUnidadeProcessamentoBatch(null,
					idUnidadeIniciada, false);
			System.out.println("***************************************");
			System.out.println("FIM DA CRIACAO DO ARQUIVO");
			System.out.println("***************************************");

		} catch (IOException ex) {
			ex.printStackTrace();
			getControladorBatch().encerrarUnidadeProcessamentoBatch(ex,
					idUnidadeIniciada, true);
			throw new EJBException(ex);
		} catch (Exception ex) {
			ex.printStackTrace();
			getControladorBatch().encerrarUnidadeProcessamentoBatch(ex,
					idUnidadeIniciada, true);
			throw new EJBException(ex);
		} finally {
			try {
				out.close();
				ZipUtil.adicionarArquivo(zos, leitura);

				// close the stream
				zos.close();
				leitura.delete();
			} catch (IOException e) {
				getControladorBatch().encerrarUnidadeProcessamentoBatch(e,
						idUnidadeIniciada, true);
				throw new EJBException(e);
			}
		}

	}

	/**
	 * [UC1161]Retirar Imóvel da Tarifa Social
	 * 
	 * @author Vivianne Sousa
	 * @date 01/04/2011
	 * 
	 * @throws ControladorException
	 */
	public void retirarImovelTarifaSocial(TarifaSocialComandoCarta tscc,
			int idFuncionalidadeIniciada) throws ControladorException {

		int idUnidadeIniciada = 0;
		Integer qtdeImoveisExcluidos = 0;
		try {
			idUnidadeIniciada = getControladorBatch()
					.iniciarUnidadeProcessamentoBatch(idFuncionalidadeIniciada,
							UnidadeProcessamento.LOCALIDADE, 0);

			Collection colecaoImoveis = getControladorImovel()
					.pesquisarImoveisTarifaSocialCarta(tscc.getId(),
							tscc.getCodigoTipoCarta());
			if (colecaoImoveis != null && !colecaoImoveis.isEmpty()) {
				Iterator iterImoveis = colecaoImoveis.iterator();

				if (tscc.getCodigoTipoCarta().equals(new Integer(1))) {

					while (iterImoveis.hasNext()) {
						Imovel imovel = (Imovel) iterImoveis.next();

						// [SB0004]Retirar Imóvel Tarifa Social
						retirarImovelTarifaSocial(imovel, tscc);
						qtdeImoveisExcluidos = qtdeImoveisExcluidos + 1;
					}

				} else {
					while (iterImoveis.hasNext()) {
						Imovel imovel = (Imovel) iterImoveis.next();

						// [SB0003]Verifica Situação dos Débitos
						Integer qtdeContas = verificaSituacaoDebitos(imovel,
								tscc);

						if (qtdeContas.compareTo(new Integer(0)) == 1) {
							// [SB0004]Retirar Imóvel Tarifa Social
							retirarImovelTarifaSocial(imovel, tscc);
							qtdeImoveisExcluidos = qtdeImoveisExcluidos + 1;
						}

					}

				}

			}

			getControladorImovel()
					.atualizarDataExecucaoTarifaSocialComandoCarta(tscc.getId());

			try {
				String emailReceptor = "";
				// Envia de Arquivo por email
				EnvioEmail envioEmail = this
						.pesquisarEnvioEmail(EnvioEmail.RETIRAR_IMOVEL_TARIFA_SOCIAL);

				String emailRemetente = envioEmail.getEmailRemetente();
				String tituloMensagem = envioEmail.getTituloMensagem();
				String corpoMensagem = obterConteudoEmail(qtdeImoveisExcluidos,
						tscc);

				ServicosEmail.enviarMensagem(emailRemetente, emailReceptor,
						tituloMensagem, corpoMensagem);

			} catch (Exception e) {
				System.out.println("Erro ao enviar email.");
			}

			getControladorBatch().encerrarUnidadeProcessamentoBatch(null,
					idUnidadeIniciada, false);

		} catch (Exception e) {

			getControladorBatch().encerrarUnidadeProcessamentoBatch(e,
					idUnidadeIniciada, true);
			throw new EJBException(e);
		}

	}

	/**
	 * [UC1161]Retirar Imóvel da Tarifa Social [SB0003]Verifica Situação dos
	 * Débitos
	 * 
	 * @author Vivianne Sousa
	 * @date 01/04/2011
	 * 
	 * @throws ControladorException
	 */
	public Integer verificaSituacaoDebitos(Imovel imovel,
			TarifaSocialComandoCarta tscc) throws ControladorException {

		Collection colecaoContasTarifaSocialCartaDebito = getControladorImovel()
				.pesquisarContasTarifaSocialCartaDebito(tscc.getId(),
						imovel.getId());

		Integer qtdeContas = getControladorFaturamento()
				.pesquisarQtdeContaNaoPaga(colecaoContasTarifaSocialCartaDebito);

		return qtdeContas;
	}

	/**
	 * [UC1161]Retirar Imóvel da Tarifa Social [SB0002]Verifica Média de
	 * Consumo
	 * 
	 * @author Vivianne Sousa
	 * @date 04/04/2011
	 * 
	 * @throws ControladorException
	 */
	public boolean verificaMediaConsumo(Imovel imovel)
			throws ControladorException {

		boolean retorno = false;
		Integer consumoMedio = getControladorMicromedicao()
				.obterConsumoMedioEmConsumoHistorico(imovel.getId(),
						LigacaoTipo.LIGACAO_AGUA);

		if (consumoMedio != null) {
			FiltroCategoria filtroCategoria = new FiltroCategoria();
			filtroCategoria.adicionarParametro(new ParametroSimples(
					FiltroCategoria.CODIGO, Categoria.RESIDENCIAL));
			Collection<Categoria> collCategoria = Fachada.getInstancia()
					.pesquisar(filtroCategoria, Categoria.class.getName());
			Categoria categoria = collCategoria.iterator().next();

			Integer consumoMinimoCategoria = categoria.getConsumoMinimo();
			int qtdeEconomias = getControladorImovel()
					.obterQuantidadeEconomias(imovel);

			int consumoMinimo = ((consumoMinimoCategoria.intValue()) * qtdeEconomias);

			if (consumoMedio.intValue() > consumoMinimo) {
				retorno = true;
			}
		}

		return retorno;
	}

	/**
	 * [UC1161]Retirar Imóvel da Tarifa Social [SB0004]Retirar Imóvel tarifa
	 * Social
	 * 
	 * @author Vivianne Sousa
	 * @date 04/04/2011
	 * 
	 * @throws ControladorException
	 */
	public void retirarImovelTarifaSocial(Imovel imovel,
			TarifaSocialComandoCarta tscc) throws ControladorException {

		Integer motivoExclusao = null;
		String observacaoRetira = "";
		if (tscc == null) {
			motivoExclusao = new Integer(17);
			observacaoRetira = "Imóvel retirado da situação de faturamento através de "
					+ "processo batch executado para verificação de imóvel da tarifa social com média de consumo superior a 10m3";
		} else {
			observacaoRetira = "Imóvel retirado da situação de faturamento através de "
					+ "processo batch executado por comando de carta de tarifa social com número "
					+ tscc.getId();
			if (tscc.getCodigoTipoCarta().equals(new Integer(1))) {
				motivoExclusao = new Integer(22);
			} else {
				motivoExclusao = new Integer(24);
			}
		}

		getControladorImovel().retirarImovelTarifaSocial(motivoExclusao,
				imovel, observacaoRetira);

	}

	/**
	 * [UC1161]Retirar Imóvel da Tarifa Social
	 * 
	 * @author Vivianne Sousa
	 * @date 04/04/2011
	 * 
	 * @throws ControladorException
	 */
	public String obterConteudoEmail(Integer qtdeImoveisExcluidos,
			TarifaSocialComandoCarta tscc) throws ControladorException {

		String conteudoEmail = "Processo para exclusão dos imóveis com perfil de TARIFA SOCIAL";

		if (tscc == null) {
			// mensal
			conteudoEmail = conteudoEmail
					+ " e que apresentaram média de consumo dos ultimos 6 meses superior a 10m, ";

		} else {

			if (tscc.getCodigoTipoCarta().equals(new Integer(1))) {
				// recadastramento
				conteudoEmail = conteudoEmail
						+ ", que recebeu carta de recadastramento do comando "
						+ tscc.getId()
						+ " ,mas não compareceu para atualização dos dados cadsatrais no prazo estabelecido, ";

			} else {
				// cobrança
				conteudoEmail = conteudoEmail
						+ ", que recebeu carta de cobrança do comando "
						+ tscc.getId()
						+ " ,mas não compareceu para regularização do(s) débito(s) no prazo estabelecido, ";

			}
		}

		conteudoEmail = conteudoEmail + "foi executado com sucesso e retirou "
				+ qtdeImoveisExcluidos
				+ " imóveis do perfil correspondente a TARIFA SOCIAL.";

		return conteudoEmail;
	}

	/**
	 * [UC1161]Retirar Imóvel da Tarifa Social
	 * 
	 * @author Vivianne Sousa
	 * @date 04/04/2011
	 * 
	 * @throws ControladorException
	 */
	public void retirarImovelTarifaSocial(Integer idLocalidade,
			int idFuncionalidadeIniciada) throws ControladorException {

		int idUnidadeIniciada = 0;

		try {
			idUnidadeIniciada = getControladorBatch()
					.iniciarUnidadeProcessamentoBatch(idFuncionalidadeIniciada,
							UnidadeProcessamento.LOCALIDADE, (idLocalidade));

			Collection colecaoImoveis = getControladorImovel()
					.pesquisarImoveisTarifaSocial(idLocalidade);
			if (colecaoImoveis != null && !colecaoImoveis.isEmpty()) {
				Iterator iterImoveis = colecaoImoveis.iterator();

				while (iterImoveis.hasNext()) {
					Imovel imovel = (Imovel) iterImoveis.next();

					if (verificaMediaConsumo(imovel)) {
						// [SB0004]Retirar Imóvel Tarifa Social
						retirarImovelTarifaSocial(imovel, null);
					}
				}
			}

			getControladorBatch().encerrarUnidadeProcessamentoBatch(null,
					idUnidadeIniciada, false);

		} catch (Exception e) {

			getControladorBatch().encerrarUnidadeProcessamentoBatch(e,
					idUnidadeIniciada, true);
			throw new EJBException(e);
		}

	}

	/**
	 * [UC1160] Processar Comando Gerado Carta Tarifa Social [SB0008]-Verificar
	 * carta para o comando
	 * 
	 * @author Vivianne Sousa
	 * @date 19/04/2011
	 * 
	 * @throws ControladorException
	 */
	public void verificarCartaParaComando(Integer idLocalidade,
			TarifaSocialComandoCarta tscc) throws ControladorException {

		getControladorImovel().removerCartasComando(tscc.getId(), idLocalidade,
				tscc.getCodigoTipoCarta());

	}

	/**
	 * [UC1160] Processar Comando Gerado Carta Tarifa Social
	 * 
	 * @author Vivianne Sousa
	 * @date 02/05/2011
	 * 
	 * @throws ControladorException
	 */
	public Collection pesquisarLocalidadesPorGerenciaEUnidade(
			Integer idGerenciaRegional, Integer idUnidadeNegocio)
			throws ControladorException {

		try {

			return this.repositorioCadastro
					.pesquisarLocalidadesPorGerenciaEUnidade(
							idGerenciaRegional, idUnidadeNegocio);

		} catch (ErroRepositorioException ex) {
			ex.printStackTrace();
			throw new ControladorException("erro.sistema", ex);
		}

	}

	/**
	 * [UC1170] Gerar Relatório Acesso ao SPC
	 * 
	 * @author: Diogo Peixoto
	 * @date: 06/05/2011
	 * 
	 * @param FiltrarRelatorioAcessoSPCHelper
	 * @return Collection<RelatorioAcessoSPCBean>
	 * @throws ControladorException
	 */
	public Collection<RelatorioAcessoSPCBean> filtrarRelatorioAcessoSPC(
			FiltrarRelatorioAcessoSPCHelper filtro) throws ControladorException {
		Collection<Object[]> colecaoAcessoSPC = new ArrayList();
		Collection<RelatorioAcessoSPCBean> beans = new ArrayList();
		RelatorioAcessoSPCBean bean = null;

		try {

			colecaoAcessoSPC = this.repositorioCadastro
					.filtrarRelatorioAcessoSPC(filtro);

			if (colecaoAcessoSPC != null && colecaoAcessoSPC.size() > 0) {

				Iterator iteAcessoSPC = colecaoAcessoSPC.iterator();

				while (iteAcessoSPC.hasNext()) {

					Object[] linha = (Object[]) iteAcessoSPC.next();

					String strUnidade = null;
					if (linha[0] != null) {
						strUnidade = String.valueOf((Integer) linha[0]);
					}
					if (linha[1] != null) {
						strUnidade += " - " + (String) linha[1];
					}

					String strUsuario = null;
					if (linha[2] != null) {
						strUsuario = (String) linha[2];
					}

					String cpfCliente = null;
					if (linha[3] != null) {
						cpfCliente = (String) linha[3];
						cpfCliente = Util.formatarCpf(cpfCliente);
					}

					String cnpjCliente = null;
					if (linha[4] != null) {
						cnpjCliente = (String) linha[4];
						cnpjCliente = Util.formatarCnpj(cnpjCliente);
					}

					// Define se o cliente é Pessoa Física ou Pessoa Jurídica,
					// dependendo seta o cpf ou cnpj
					String cpfCnpjCliente = null;
					if (cpfCliente != null) {
						cpfCnpjCliente = cpfCliente;
					} else if (cnpjCliente != null) {
						cpfCnpjCliente = cnpjCliente;
					}

					String razaoSocial = null;
					if (linha[5] != null) {
						razaoSocial = (String) linha[5];
					}

					String strDataAcesso = null;
					if (linha[6] != null) {
						Date dataAacesso = (Date) linha[6];
						SimpleDateFormat sdf = new SimpleDateFormat(
								"dd/MM/yyyy");
						strDataAcesso = sdf.format(dataAacesso);
					}

					bean = new RelatorioAcessoSPCBean(strUnidade, strUsuario,
							strDataAcesso, cpfCnpjCliente, razaoSocial);
					beans.add(bean);
				}
			}
		} catch (ErroRepositorioException ex) {
			sessionContext.setRollbackOnly();
			ex.printStackTrace();
			throw new ControladorException("erro.sistema", ex);
		}
		return beans;
	}

	/**
	 * [UC0925] Emitir Boletos
	 * 
	 * retrona DBTP_VLLIMITE para DBTP_ID = idDebitoTipo
	 * 
	 * @author Rômulo Aurélio
	 * @date 22/12/2009
	 * 
	 * @throws ErroRepositorioException
	 */
	public void atualizarGrauImportancia(LogradouroBairro logradouroBairro,
			Integer grauImportancia, Usuario usuario)
			throws ControladorException {
		try {

			// ------------ REGISTRAR TRANSAÇÃO----------------------------

			RegistradorOperacao registradorOperacao = new RegistradorOperacao(
					Operacao.ATUALIZAR_IMPORTANCIA_LOGRADOURO_BAIRRO,
					logradouroBairro.getId(), logradouroBairro.getId(),
					new UsuarioAcaoUsuarioHelper(usuario,
							UsuarioAcao.USUARIO_ACAO_EFETUOU_OPERACAO));
			registradorOperacao.registrarOperacao(logradouroBairro);

			registradorOperacao.registrarOperacao(logradouroBairro
					.getProgramaCalibragem());
			getControladorTransacao().registrarTransacao(logradouroBairro);
			// ------------ REGISTRAR TRANSAÇÃO----------------------------

			repositorioCadastro.atualizarGrauImportancia(logradouroBairro,
					grauImportancia);
		} catch (ErroRepositorioException e) {
			throw new ControladorException("erro.sistema", e);
		}
	}

	/**
	 * Obtém a coleção de categorias.
	 * 
	 * @author Hugo Azevedo
	 * @date 22/06/2011
	 * 
	 * @throws ControladorException
	 */

	public Collection obterCategorias() throws ControladorException {
		Collection retornoQuery = null;

		try {
			retornoQuery = this.repositorioCadastro.obterCategorias();
		} catch (ErroRepositorioException e) {
			e.printStackTrace();
		}

		Collection retorno = null;
		Object[] obj = null;
		Categoria categoria = null;
		retorno = new ArrayList();
		Iterator it = retornoQuery.iterator();
		while (it.hasNext()) {

			obj = (Object[]) it.next();
			Integer id = (Integer) obj[0];
			String descricao = (String) obj[1];

			categoria = new Categoria();
			categoria.setId(id);
			categoria.setDescricao(descricao);

			retorno.add(categoria);
		}

		return retorno;

	}

	/**
	 * Obtém a coleção de perfis de imóveis.
	 * 
	 * @author Hugo Azevedo
	 * @date 22/06/2011
	 * 
	 * @throws ControladorException
	 */

	public Collection obterPerfisImoveis() throws ControladorException {
		Collection retornoQuery = null;

		try {
			retornoQuery = this.repositorioCadastro.obterPerfisImoveis();
		} catch (ErroRepositorioException e) {
			e.printStackTrace();
		}

		Collection retorno = new ArrayList();
		Object[] obj = null;

		ImovelPerfil perfil = null;
		Iterator it = retornoQuery.iterator();

		while (it.hasNext()) {
			obj = (Object[]) it.next();

			perfil = new ImovelPerfil();
			perfil.setId((Integer) obj[0]);
			perfil.setDescricao((String) obj[1]);

			retorno.add(perfil);

		}

		return retorno;
	}

	/**
	 * [UC0060] Inserir Parametros do Sistema Validar documentos da loja virtual
	 * 
	 * @author Erivan Sousa
	 * @date 15/07/2011
	 * 
	 * @param byte[], String
	 * @throws ControladorException
	 */
	public void validarSistemaParametroLojaVirtual(byte[] fileData,
			String extensao) throws ControladorException {
		if (fileData.length == 0) {
			throw new ControladorException("atencao.campo.informado", null,
					"Arquivo");
		}

		if (!extensao.equalsIgnoreCase("PDF")) {
			throw new ControladorException("atencao.arquivo_invalido");
		}

	}

	/**
	 * [MA2011061013]
	 * 
	 * @author Paulo Diniz
	 * @date 02/07/2011
	 * 
	 * @param idImovel
	 * 
	 * @return HidrometroMovimentado
	 * @throws ErroRepositorioException
	 */
	public List<HidrometroInstalacaoHistorico> pesquisarHidrometroPeloIdImovel(
			Integer idImovel) throws ControladorException {

		try {
			return repositorioCadastro
					.pesquisarHidrometroPeloIdImovel(idImovel);
		} catch (ErroRepositorioException ex) {
			throw new ControladorException("erro.sistema", ex);
		}
	}

	/**
	 * [UC0588 / UC0589] Verifica existência do DDD
	 * 
	 * @author Nathalia Santos
	 * @data 23/09/2011
	 */
	public Boolean verificarDdd(Short Ddd) throws ControladorException {

		try {
			return repositorioCadastro.verificarDdd(Ddd);
		} catch (ErroRepositorioException ex) {
			throw new ControladorException("erro.sistema", ex);
		}
	}

	/**
	 * [UC0588 / UC0589] Verifica existência do funcionáriio ou do cliente
	 * 
	 * @author Nathalia Santos
	 * @data 03/10/2011
	 */
	public Boolean pesquisarFuncionarioOuCliente(Integer IdFuncionario,
			Integer IdCliente) throws ControladorException {

		try {
			return repositorioCadastro.pesquisarFuncionarioOuCliente(
					IdFuncionario, IdCliente);
		} catch (ErroRepositorioException ex) {
			throw new ControladorException("erro.sistema", ex);
		}
	}

	/**
	 * [UC0032] Inserir Logradouro - [UC0033] Manter Logradouro
	 * 
	 * Proposta: 05/10/2011 - Tiago Moreno - PE2011065447 - Verificar existência
	 * de Logradouro com mesmo nome
	 * 
	 * [FS0012] - Verificar existência de Logradouro com mesmo nome
	 * 
	 * @author Thúlio Araújo
	 * @since 10/10/2011
	 * @param logradouroNome
	 * @return Collection<Logradouro>
	 * @throws ControladorException
	 */
	public Collection<Logradouro> pesquisarLogradouroMesmoNome(
			String logradouroNome, Integer idMunicipio)
			throws ControladorException {
		try {
			return repositorioCadastro.pesquisarLogradouroMesmoNome(
					logradouroNome, idMunicipio);
		} catch (ErroRepositorioException ex) {
			throw new ControladorException("erro.sistema", ex);
		}
	}

	/**
	 * [UC0032] Inserir Logradouro - [UC0033] Manter Logradouro
	 * 
	 * Proposta: 05/10/2011 - Tiago Moreno - PE2011065447 - Verificar existência
	 * de Logradouro com mesmo nome
	 * 
	 * [FS0012] - Verificar existência de Logradouro com mesmo nome
	 * 
	 * @author Thúlio Araújo
	 * @since 10/10/2011
	 * @param logradouroNome
	 * @return Collection<Logradouro>
	 * @throws ErroRepositorioException
	 */
	public Collection<ExibirFiltrarLogradouroHelper> filtrarLogradouroMesmoNome(
			String logradouroNome, Integer numeroPagina, Integer idMunicipio)
			throws ControladorException {

		Collection<ExibirFiltrarLogradouroHelper> colExibirFiltrarLogradouroHelper = new ArrayList();

		try {
			Collection<Logradouro> colecaoDados = repositorioCadastro
					.filtrarLogradouroMesmoNome(logradouroNome, numeroPagina,
							idMunicipio);
			if (colecaoDados != null && !colecaoDados.isEmpty()) {
				Iterator itDados = colecaoDados.iterator();
				Object[] dados = null;
				while (itDados.hasNext()) {
					ExibirFiltrarLogradouroHelper exibirFiltrarLogradouroHelper = new ExibirFiltrarLogradouroHelper();
					dados = (Object[]) itDados.next();
					if (dados != null) {
						exibirFiltrarLogradouroHelper.setId(Integer
								.toString((Integer) dados[0]));
						exibirFiltrarLogradouroHelper
								.setNome((String) dados[1]);
						exibirFiltrarLogradouroHelper
								.setBairro((String) dados[2]);
						exibirFiltrarLogradouroHelper
								.setMunicipio((String) dados[3]);
						if (dados[4] != null) {
							exibirFiltrarLogradouroHelper.setCep(Integer
									.toString((Integer) dados[4]));
						}
					}
					colExibirFiltrarLogradouroHelper
							.add(exibirFiltrarLogradouroHelper);
				}
			}
		} catch (ErroRepositorioException ex) {
			throw new ControladorException("erro.sistema", ex);
		}
		return colExibirFiltrarLogradouroHelper;
	}

	/**
	 * [UC0032] Inserir Logradouro - [UC0033] Manter Logradouro
	 * 
	 * Proposta: 05/10/2011 - Tiago Moreno - PE2011065447 - Verificar existência
	 * de Logradouro com mesmo nome
	 * 
	 * [FS0012] - Verificar existência de Logradouro com mesmo nome
	 * 
	 * Método usado para retornar a quantidade de logradouros com o mesmo nome
	 * 
	 * @author Thúlio Araújo
	 * @since 10/10/2011
	 * @param logradouroNome
	 * @return Collection<Logradouro>
	 * @throws ErroRepositorioException
	 */
	public Integer pesquisarQuantidadeLogradouroMesmoNome(
			String logradouroNome, Integer idMunicipio)
			throws ControladorException {
		try {
			return repositorioCadastro.pesquisarQuantidadeLogradouroMesmoNome(
					logradouroNome, idMunicipio);
		} catch (ErroRepositorioException ex) {
			throw new ControladorException("erro.sistema", ex);
		}
	}

	/**
	 * Método que pesquisa uma EmpresaCobrancaFaixa pelo id
	 * 
	 * @author Raimundo Martins
	 * @date 24/10/2011
	 * */
	public EmpresaCobrancaFaixa pesquisarEmpresaCobrancaFaixa(
			Integer idCobrancaFaixa) throws ControladorException {
		try {
			return repositorioCadastro
					.pesquisarEmpresaCobrancaFaixa(idCobrancaFaixa);
		} catch (ErroRepositorioException ex) {
			throw new ControladorException("erro.sistema", ex);
		}
	}

	/**
	 * Pesquisa se o Imovel teve a inscricao alterada para excluido.
	 * 
	 * @author Arthur Carvalho
	 * @date 31/10/11
	 * @param idImovel
	 * @return
	 */
	public boolean verificaImovelExcluidoFinalFaturamento(Integer idImovel)
			throws ControladorException {

		boolean retorno = false;

		FiltroImovelInscricaoAlterada filtroAlterada = new FiltroImovelInscricaoAlterada();
		filtroAlterada.adicionarParametro(new ParametroSimples(
				FiltroImovelInscricaoAlterada.INDICADOR_ATUALIZADO,
				ConstantesSistema.NAO));
		filtroAlterada.adicionarParametro(new ParametroSimples(
				FiltroImovelInscricaoAlterada.INDICADOR_ALTERACAO_EXCLUIDA,
				ConstantesSistema.NAO));
		filtroAlterada.adicionarParametro(new ParametroNulo(
				FiltroImovelInscricaoAlterada.INDICADOR_ERRO_ALTERACAO));
		filtroAlterada.adicionarParametro(new ParametroSimples(
				FiltroImovelInscricaoAlterada.INDICADOR_AUTORIZADO,
				ConstantesSistema.SIM));
		filtroAlterada.adicionarParametro(new ParametroSimples(
				FiltroImovelInscricaoAlterada.INDICADOR_IMOVEL_EXCLUIDO,
				ConstantesSistema.SIM));
		filtroAlterada.adicionarParametro(new ParametroSimples(
				FiltroImovelInscricaoAlterada.IMOVEL_ID, idImovel));

		Collection<ImovelInscricaoAlterada> colecaoImovelInscricaoAlterada = getControladorUtil()
				.pesquisar(filtroAlterada,
						ImovelInscricaoAlterada.class.getName());

		if (colecaoImovelInscricaoAlterada != null
				&& colecaoImovelInscricaoAlterada.size() > 0) {
			retorno = true;
		}

		return retorno;
	}

	/**
	 * Atualizar nome do usuario com id de funcionario igual ao informado
	 * 
	 * @author Erivan Sousa
	 * @date 06/12/2011
	 * 
	 * @param idFuncionario
	 * @param nomeFuncionario
	 * 
	 * @throws ControladorException
	 */

	public void atualizarNomeUsuarioComIdFuncionario(Integer idFuncionario,
			String nomeFuncionario) throws ControladorException {
		try {
			repositorioCadastro.atualizarNomeUsuarioComIdFuncionario(
					idFuncionario, nomeFuncionario);
		} catch (ErroRepositorioException ex) {
			throw new ControladorException("erro.sistema", ex);
		}
	}

	/**
	 * Verifica se a esfera do poder permite gerar certidao negativa
	 * 
	 * @param matricula
	 * @return
	 * @throws ControladorException
	 */
	public boolean esferaPoderPermiteGerarCertidaoNegativa(Integer matricula)
			throws ControladorException {

		boolean retorno = true;
		FiltroClienteImovel filtroClieImov = new FiltroClienteImovel();
		filtroClieImov.adicionarParametro(new ParametroSimples(
				FiltroClienteImovel.IMOVEL_ID, matricula));
		filtroClieImov.adicionarParametro(new ParametroSimples(
				FiltroClienteImovel.CLIENTE_RELACAO_TIPO_ID,
				ClienteRelacaoTipo.RESPONSAVEL));
		filtroClieImov.adicionarParametro(new ParametroNulo(
				FiltroClienteImovel.DATA_FIM_RELACAO));
		filtroClieImov
				.adicionarCaminhoParaCarregamentoEntidade("cliente.clienteTipo.esferaPoder");

		Collection colecaoClieImov = getControladorUtil().pesquisar(
				filtroClieImov, ClienteImovel.class.getName());

		if (colecaoClieImov != null && !colecaoClieImov.isEmpty()) {
			ClienteImovel clieImov = (ClienteImovel) Util
					.retonarObjetoDeColecao(colecaoClieImov);

			if (clieImov.getCliente().getClienteTipo().getEsferaPoder()
					.getIndicadorPermiteCertidaoNegativaDebitosParaImovel()
					.equals(ConstantesSistema.NAO)) {
				retorno = false;
			}
		}
		return retorno;
	}

	/**
	 * Pega o id do Tipo de Cliente, através do id do imóvel
	 * 
	 * @author Rodrigo Cabral
	 * @date 08/06/2012
	 * 
	 */

	public Integer obterClienteTipoId(Integer idImovel)
			throws ControladorException {

		Integer retorno = null;
		try {

			retorno = repositorioCadastro.obterClienteTipoId(idImovel);
		} catch (ErroRepositorioException ex) {
			throw new ControladorException("erro.sistema", ex);
		}

		return retorno;
	}

	/**
	 * 
	 * [UC1367] Registrar Movimento do Programa Especial [SB0002] Inserir
	 * Imóveis em Programa Especial
	 * 
	 * @author Hugo Azevedo
	 * @date 20/08/2012
	 * 
	 */
	public Integer inserirImoveisProgramaEspecial(
			Collection<Integer> colecaoIdsImovel, String acao,
			String anoMesReferencia, String cancelarItensFatura,
			String retirarContasProgEspecial, String sitEspecialCobranca,
			String observacao, String nomeArquivo, byte[] dadosArquivo,
			Usuario usuario) throws ControladorException {

		try {

			// 1. O sistema insere o movimento e os itens
			// [SB0004] - Inserir Movimento e Itens do Programa Especial
			Integer idMovimento = inserirMovimentoItensProgramaEspecial(
					colecaoIdsImovel, acao, anoMesReferencia,
					cancelarItensFatura, retirarContasProgEspecial,
					sitEspecialCobranca, observacao, nomeArquivo, dadosArquivo,
					usuario);

			// 2. Para cada imóvel selecionado do arquivo, o sistema
			Iterator it = colecaoIdsImovel.iterator();
			SistemaParametro sistemaParametro = this.getControladorUtil()
					.pesquisarParametrosDoSistema();

			while (it.hasNext()) {

				Integer idImovel = (Integer) it.next();

				// 2.1. Verifica perfila do imóvel
				ImovelPerfil perfilImovel = this.getControladorImovel()
						.obterImovelPerfil(idImovel);
				Imovel imovel = new Imovel();
				imovel.setId(idImovel);

				/**
				 * @author Thúlio Araújo
				 * @since 14/10/2011 - Colocado por Raphael Rossiter em
				 *        21/12/2012
				 * 
				 *        Verificar se o imovel tem situacao especial de
				 *        cobranca (cbsp_id <> null DA TABELA IMOVEL ) , caso
				 *        tenha informar a mensagem:
				 *        "Imovel está em situação especial de cobrança, não é possível colocar no programa especial."
				 */
				boolean cobrancaSituacaoImovel = this.getControladorImovel()
						.confirmarImovelTemSituacaoEspecialCobranca(idImovel);

				// 2.1.1. Caso o imóvel não se encontra no programa especial
				if (perfilImovel.getId().compareTo(
						sistemaParametro.getPerfilProgramaEspecial().getId()) != 0
						&& !cobrancaSituacaoImovel) {

					// 2.1.1. atualizar a situação do item
					ItemMovimentoProgramaEspecial item = repositorioCadastro
							.pesquisarItemMovimentoProgramaEspecial(idImovel,
									idMovimento);
					if (item != null) {
						item.setIndicadorAtualizacao(ConstantesSistema.SIM);
						item.setUltimaAlteracao(new Date());

						this.getControladorUtil().atualizar(item);

						// 2.1.2. E insere o imóvel em programa especial
						FiltroImovel filtroImovel = new FiltroImovel();
						filtroImovel.adicionarParametro(new ParametroSimples(
								FiltroImovel.ID, idImovel));

						filtroImovel
								.adicionarCaminhoParaCarregamentoEntidade(FiltroImovel.FATURAMENTO_GRUPO);
						filtroImovel
								.adicionarCaminhoParaCarregamentoEntidade(FiltroImovel.LIGACAO_AGUA_SITUACAO);

						Collection<Imovel> colecaoImovel = this
								.getControladorUtil().pesquisar(filtroImovel,
										Imovel.class.getName());
						imovel = (Imovel) Util
								.retonarObjetoDeColecao(colecaoImovel);

						ImovelProgramaEspecial imovelProgramaEspecial = new ImovelProgramaEspecial();

						imovelProgramaEspecial.setImovel(imovel); // Imóvel
						imovelProgramaEspecial
								.setDescricaoDocumentos("Inserido via movimento");
						imovelProgramaEspecial
								.setDataApresentacaoDocumentos(new Date()); // Data
																			// e
																			// Hora
																			// corrente
						imovelProgramaEspecial.setUltimaAlteracao(new Date()); // Data
																				// corrente
						imovelProgramaEspecial.setUsuarioResponsavel(usuario); // Id
																				// do
																				// usuário
																				// logado
						imovelProgramaEspecial.setNumeroBolsaFamilia(null); // Nulo

						// <<Inclui>> [UC0973] - Inserir Imóvel em programa
						// Especial
						this.inserirImovelEmProgramaEspecial(
								imovelProgramaEspecial, usuario);
					}
				}
			}

			return idMovimento;

		} catch (Exception ex) {
			ex.printStackTrace();
			throw new ControladorException("erro.sistema", ex);
		}
	}

	/**
	 * 
	 * [UC1367] Registrar Movimento do Programa Especial [SB0003] Suspender
	 * Imóveis em Programa Especial
	 * 
	 * @author Hugo Azevedo
	 * @date 20/08/2012
	 * 
	 */
	public Integer suspenderImoveisProgramaEspecial(
			Collection<Integer> colecaoIdsImovel, String acao,
			String anoMesReferencia, String cancelarItensFatura,
			String retirarContasProgEspecial, String sitEspecialCobranca,
			String observacao, String nomeArquivo, byte[] dadosArquivo,
			Usuario usuario) throws ControladorException {

		try {
			// 1. O sistema insere o movimento e os itens
			// [SB0004] - Inserir Movimento e Itens do Programa Especial
			Integer idMovimento = inserirMovimentoItensProgramaEspecial(
					colecaoIdsImovel, acao, anoMesReferencia,
					cancelarItensFatura, retirarContasProgEspecial,
					sitEspecialCobranca, observacao, nomeArquivo, dadosArquivo,
					usuario);

			// 2. Para cada imóvel selecionado do arquivo, o sistema
			Iterator it = colecaoIdsImovel.iterator();
			SistemaParametro sistemaParametro = this.getControladorUtil()
					.pesquisarParametrosDoSistema();

			while (it.hasNext()) {

				Integer idImovel = (Integer) it.next();

				// 2.1. Caso o imóvel se encontra no programa especial
				ImovelProgramaEspecial imovelProgramaEspecial = repositorioCadastro
						.obterImovelProgramaEspecial(idImovel);
				if (imovelProgramaEspecial != null) {

					// 2.1.1. Atualizar a situação do item
					ItemMovimentoProgramaEspecial item = repositorioCadastro
							.pesquisarItemMovimentoProgramaEspecial(idImovel,
									idMovimento);
					if (item != null) {
						item.setIndicadorAtualizacao(ConstantesSistema.SIM);
						item.setUltimaAlteracao(new Date());

						this.getControladorUtil().atualizar(item);

						// 2.1.2. Suspende o imóvel do programa especial
						FiltroImovel filtroImovel = new FiltroImovel();
						filtroImovel.adicionarParametro(new ParametroSimples(
								FiltroImovel.ID, idImovel));

						filtroImovel
								.adicionarCaminhoParaCarregamentoEntidade(FiltroImovel.FATURAMENTO_GRUPO);
						filtroImovel
								.adicionarCaminhoParaCarregamentoEntidade(FiltroImovel.LIGACAO_AGUA_SITUACAO);

						Collection<Imovel> colecaoImovel = this
								.getControladorUtil().pesquisar(filtroImovel,
										Imovel.class.getName());
						Imovel imovel = (Imovel) Util
								.retonarObjetoDeColecao(colecaoImovel);

						imovelProgramaEspecial.setImovel(imovel); // Imóvel
						imovelProgramaEspecial.setUsuarioSuspensao(usuario); // Id
																				// do
																				// usuário
																				// logado
						imovelProgramaEspecial
								.setFormaSuspensao(ConstantesSistema.NAO); // 2
																			// (Dois)
						imovelProgramaEspecial.setObservacao(observacao);

						// <<Inclui>> [UC0976] - Suspender Imóvel em programa
						// Especial
						this.suspenderImovelEmProgramaEspecialOnline(
								imovelProgramaEspecial, usuario,
								ConstantesSistema.NAO);

						// 2.1.3. Caso o campo "Cancelar Itens da Fatura?"
						// esteja com a opção "Sim"
						// =========================================================================
						if (cancelarItensFatura != null
								&& cancelarItensFatura
										.equals(ConstantesSistema.SIM
												.toString())) {

							// 2.1.3.1. Seleciona a conta do imóvel para o
							// mês/ano de faturamento
							Conta conta = this
									.getControladorFaturamento()
									.obterContaImovelAnoMesFaturamento(
											idImovel,
											Util.formatarMesAnoComBarraParaAnoMes(anoMesReferencia));

							// 2.1.3.1.1. Caso exista conta
							if (conta != null) {

								// 2.1.3.1.1.1. Seleciona a fatura e o valor do
								// item da fatura
								FaturaItem faturaItem = this
										.getControladorFaturamento()
										.obterFaturaItemImovelAnoMesFaturamento(
												idImovel,
												Util.formatarMesAnoComBarraParaAnoMes(anoMesReferencia));

								if (faturaItem != null) {

									Fatura fatura = faturaItem.getFatura();
									BigDecimal valorItemFatura = faturaItem
											.getValorConta();

									// 2.1.3.1.1.1.1. Seleciona a fatura da
									// conta
									// e atualiza o valor total da fatura
									// diminuído o valor do item selecionado
									fatura.setDebito(Util.subtrairBigDecimal(
											fatura.getDebito(), valorItemFatura));
									this.getControladorUtil().atualizar(fatura);

									// 2.1.3.1.1.1.2. Excluir o item da fatura
									this.getControladorUtil().remover(
											faturaItem);
								}
							}

						}
						// =================================================================================

						// 2.1.4. Caso o campo
						// "Retirar Contas do Programa Especial?" esteja com a
						// opção "Sim"
						// ===================================================================================
						if (retirarContasProgEspecial != null
								&& retirarContasProgEspecial
										.equals(ConstantesSistema.SIM
												.toString())) {

							// 2.1.4.1. Seleciona a conta do imóvel para o
							// mês/ano de faturamento
							Conta conta = this
									.getControladorFaturamento()
									.obterContaImovelAnoMesFaturamento(
											idImovel,
											Util.formatarMesAnoComBarraParaAnoMes(anoMesReferencia));

							// 2.1.4.1.1. Caso exista conta
							if (conta != null) {

								// 2.1.4.1.1.1. Atualiza na tabela CONTA o
								// perfil
								ImovelPerfil imovelPerfil = new ImovelPerfil();
								imovelPerfil.setId(ImovelPerfil.NORMAL);

								conta.setImovelPerfil(imovelPerfil); // Normal

								this.getControladorUtil().atualizar(conta);
							}
						}
						// ====================================================================================

						// 2.1.5. Caso o campo
						// "Retirar Situação Especial de Cobrança?" esteja com a
						// opção "Sim"
						// ====================================================================================
						if (sitEspecialCobranca != null
								&& sitEspecialCobranca
										.equals(ConstantesSistema.SIM
												.toString())) {

							// 2.1.5.1. Atualiza na tabela IMOVEL a coluna
							// CBSP_ID para o valor nulo;
							imovel.setCobrancaSituacaoTipo(null);

							this.getControladorUtil().atualizar(imovel);

							// 2.1.5.2. Seleciona a situação especial de
							// cobrança
							// e atualiza o ano/mês de cobrança da retirada da
							// situação especial de cobrança
							CobrancaSituacaoHistorico cobrancaSitHistorico = this
									.getControladorCobranca()
									.obterSituacaoEspecialCobrancaHistorico(
											idImovel);

							if (cobrancaSitHistorico != null) {
								cobrancaSitHistorico
										.setAnoMesCobrancaRetirada(sistemaParametro
												.getAnoMesFaturamento());
								this.getControladorUtil().atualizar(
										cobrancaSitHistorico);
							}
						}
						// ====================================================================================
					}
				}
			}

			return idMovimento;

		} catch (Exception ex) {
			ex.printStackTrace();
			throw new ControladorException("erro.sistema", ex);
		}

	}

	/**
	 * 
	 * [UC1367] Registrar Movimento do Programa Especial [SB0004] Inserir
	 * Movimento e Itens do Programa Especial
	 * 
	 * @author Hugo Azevedo
	 * @date 20/08/2012
	 * 
	 * @return idMovimento - Id do movimento inserido
	 */
	private Integer inserirMovimentoItensProgramaEspecial(
			Collection<Integer> colecaoIdsImovel, String acao,
			String anoMesReferencia, String cancelarItensFatura,
			String retirarContasProgEspecial, String sitEspecialCobranca,
			String observacao, String nomeArquivo, byte[] dadosArquivo,
			Usuario usuario) throws FileNotFoundException, IOException,
			ControladorException {

		// 1. Insere o movimento na tabela cadastro.PROGR_ESPECIAL_MOVIMENTO
		MovimentoProgramaEspecial mov = new MovimentoProgramaEspecial();

		mov.setNomeArquivo(nomeArquivo); // Nome do arquivo selecionado
		mov.setObservacao(observacao); // Observação informada

		// Caso o campo "Cancelar Itens da Fatura?" esteja com a opção "Sim"
		// selecionada
		if (cancelarItensFatura != null
				&& cancelarItensFatura.equals(ConstantesSistema.SIM.toString())) {

			// atribuir o valor 1 (um)
			mov.setIndicadorCancelamentoItensFatura(new Short(
					cancelarItensFatura));
		} else {
			// caso contrário, atribuir o valor 2 (dois)
			mov.setIndicadorCancelamentoItensFatura(ConstantesSistema.NAO);
		}

		// Caso o campo "Retirar Contas do Programa Especial?" esteja com a
		// opção "Sim" selecionada
		if (retirarContasProgEspecial != null
				&& retirarContasProgEspecial.equals(ConstantesSistema.SIM
						.toString())) {

			// atribuir o valor 1 (um)
			mov.setIndicadorRetirarContasProgramaEspecial(new Short(
					retirarContasProgEspecial));
		}

		else {
			// caso contrário, atribuir o valor 2 (dois)
			mov.setIndicadorRetirarContasProgramaEspecial(ConstantesSistema.NAO);
		}

		// Caso o campo "Retirar Situação Especial de Cobrança?" esteja com a
		// opção "Sim" selecionada
		if (sitEspecialCobranca != null
				&& sitEspecialCobranca.equals(ConstantesSistema.SIM.toString())) {

			// atribuir o valor 1 (um)
			mov.setIndicadorRetiradaSitEspecialCobranca(new Short(
					sitEspecialCobranca));
		} else {
			// caso contrário, atribuir o valor 2 (dois)
			mov.setIndicadorRetiradaSitEspecialCobranca(ConstantesSistema.NAO);
		}

		mov.setUsuario(usuario); // usuário logado
		mov.setBytesArquivo(dadosArquivo); // Arquivo texto informado

		// Identificador do movimento seja igual a I
		if (acao != null && acao.equals("I")) {

			// atribuir o valor 1 (um)
			mov.setIndicadorTipoMovimento(new Short("1"));

		} else {
			// atribuir o valor 2 (dois)
			mov.setIndicadorTipoMovimento(new Short("2"));
		}

		mov.setDataProcessamento(new Date()); // Data e Hora corrente

		// Caso informado mês/ano de faturamento
		if (anoMesReferencia != null && !anoMesReferencia.equals("")) {

			// inserir no formato AAAAMM
			mov.setAnoMesFaturamento(Util
					.formatarMesAnoComBarraParaAnoMes(anoMesReferencia));
		} else {
			// Caso contrário, nulo
			mov.setAnoMesFaturamento(null);
		}

		mov.setUltimaAlteracao(new Date());

		Integer idMovimento = (Integer) this.getControladorUtil().inserir(mov);
		mov.setId(idMovimento);

		// 2. E insere os Itens do movimento na tabela
		// cadastro.PROGR_ESPECIAL_MOV_ITEM
		Iterator it = colecaoIdsImovel.iterator();
		while (it.hasNext()) {

			Integer idImovel = (Integer) it.next();

			ItemMovimentoProgramaEspecial item = new ItemMovimentoProgramaEspecial();
			Imovel imovel = new Imovel();
			imovel.setId(idImovel);
			item.setMovimentoProgramaEspecial(mov); // movimento inserido
													// anteriormente
			item.setImovel(imovel); // Imóvel selecionado
			item.setIndicadorAtualizacao(ConstantesSistema.NAO); // 2 (dois)
			item.setUltimaAlteracao(new Date()); // Data e Hora corrente

			this.getControladorUtil().inserir(item);

		}
		return idMovimento;
	}

	/**
	 * 
	 * [UC1367] Registrar Movimento do Programa Especial [SB0005] Gerar
	 * Relatório do Movimento do Programa Especial
	 * 
	 * @author Hugo Azevedo
	 * @param form
	 * @date 21/08/2012
	 * 
	 */
	public Collection obterDadosRelatorioMovimentoProgramaEspecial(
			Integer idMovimento) throws ControladorException {
		try {

			return repositorioCadastro
					.obterDadosRelatorioMovimentoProgramaEspecial(idMovimento);

		} catch (Exception ex) {
			ex.printStackTrace();
			throw new ControladorException("erro.sistema", ex);
		}
	}

	/**
	 * 
	 * [UC1367] Registrar Movimento do Programa Especial [FS0006] Verificar
	 * Arquivo Processado
	 * 
	 * @author Hugo Azevedo
	 * @param form
	 * @date 21/08/2012
	 * 
	 */
	public boolean verificarProcessamentoArquivoMovimentoProgramaEspecial(
			String fileName) throws ControladorException {

		try {

			Integer arquivosProcessados = repositorioCadastro
					.verificarProcessamentoArquivoMovimentoProgramaEspecial(fileName);

			if (arquivosProcessados != null
					&& arquivosProcessados.compareTo(new Integer(0)) > 0) {
				return true;
			} else {
				return false;
			}

		} catch (Exception ex) {
			ex.printStackTrace();
			throw new ControladorException("erro.sistema", ex);
		}

	}

	/**
	 * @author Carlos Chaves
	 * @date 01/09/2012
	 * 
	 * @param
	 * @throws IOException
	 */
	public Object[] baixarNovaVersaoApk(Integer idSistemaAndroid)
			throws ControladorException {
		try {

			return this.repositorioCadastro
					.baixarNovaVersaoApk(idSistemaAndroid);

		} catch (ErroRepositorioException ex) {
			ex.printStackTrace();
			throw new ControladorException("erro.sistema", ex);
		}
	}

	/**
	 * [UC1373] Gerar Relatorio Histórico Imóveis Programa Especial.
	 * 
	 * @author Jonathan Marcos
	 * @date 02/05/2013
	 * 
	 * @throws ErroControladorException
	 */
	public Collection<RelatorioHistoriocoImoveisProgramaEspecialHelper> pesquisarRelatorioHistoriocoImoveisProgramaEspecial(
			FiltrarRelatorioHistoricoImoveisProgramaEspecialHelper filtro)
			throws ControladorException {

		Collection colecaoRetorno = new ArrayList();

		try {

			Collection colecaoAnormalidadeImoveisCorrigidos = this.repositorioCadastro
					.pesquisarRelatorioHistoriocoImoveisProgramaEspecial(filtro);

			Iterator iterator = colecaoAnormalidadeImoveisCorrigidos.iterator();

			while (iterator.hasNext()) {

				RelatorioHistoriocoImoveisProgramaEspecialHelper helper = new RelatorioHistoriocoImoveisProgramaEspecialHelper();

				Object[] objeto = (Object[]) iterator.next();

				if (objeto[0] == null || objeto[0].equals("")) {
					helper.setMatricula("");
				} else {
					helper.setMatricula((String) objeto[0].toString());
				}

				if ((objeto[1] == null || objeto[1].equals(""))
						&& (objeto[2] == null || objeto[2].equals(""))
						&& (objeto[3] == null || objeto[3].equals(""))
						&& (objeto[4] == null || objeto[4].equals(""))
						&& (objeto[5] == null || objeto[5].equals(""))) {
					helper.setInscricao("");
				} else {
					String inscricao = (String) objeto[1] + (String) objeto[2]
							+ (String) objeto[3] + (String) objeto[4]
							+ (String) objeto[5];
					helper.setInscricao(inscricao);
				}

				if (objeto[6] == null || objeto[6].equals("")) {
					helper.setNome("");
				} else {
					helper.setNome((String) objeto[6].toString());
				}

				if (objeto[7] == null || objeto[7].equals("")) {
					helper.setDataApresentacao("");
				} else {
					helper.setDataApresentacao((String) Util.formatarData(
							(Date) objeto[7]).toString());
				}

				if (objeto[8] == null || objeto[8].equals("")) {
					helper.setDataInicio("");
				} else {
					String data = "";
					String dataInicio = "";
					data = (String) objeto[8];

					for (int a = data.length(); a != 0; a--) {
						if (a == data.length() || a == data.length() - 1) {
							if (a == data.length()) {
								dataInicio += data.charAt(a - 2);
							}

							if (a == data.length() - 1) {
								dataInicio += data.charAt(a);
							}
						} else {
							dataInicio += data.charAt(4 - a);
						}

						if (a == 5) {
							dataInicio += "/";
						}
					}

					helper.setDataInicio(dataInicio);
				}

				if (objeto[9] == null || objeto[9].equals("")) {
					helper.setDataInclusao("");
				} else {
					helper.setDataInclusao((String) Util.formatarData(
							(Date) objeto[9]).toString());
				}

				if (objeto[10] == null || objeto[10].equals("")) {
					helper.setUsuarioInclusao("");
				} else {
					helper.setUsuarioInclusao((String) objeto[10].toString());
				}

				if (objeto[11] == null || objeto[11].equals("")) {
					helper.setDataSaida("");
				} else {
					String data2 = "";
					String dataSaida = "";
					data2 = (String) objeto[8];

					for (int a = data2.length(); a != 0; a--) {
						if (a == data2.length() || a == data2.length() - 1) {
							if (a == data2.length()) {
								dataSaida += data2.charAt(a - 2);
							}

							if (a == data2.length() - 1) {
								dataSaida += data2.charAt(a);
							}
						} else {
							dataSaida += data2.charAt(4 - a);
						}

						if (a == 5) {
							dataSaida += "/";
						}
					}

					helper.setDataSaida(dataSaida);
				}

				if (objeto[12] == null || objeto[12].equals("")) {
					helper.setDataSuspensao("");
				} else {
					helper.setDataSuspensao((String) Util.formatarData(
							(Date) objeto[12]).toString());
				}

				if (objeto[13] == null || objeto[13].equals("")) {
					helper.setUsuarioSuspensao("");
				} else {
					helper.setUsuarioSuspensao((String) objeto[13].toString());
				}

				if (objeto[14] == null || objeto[14].equals("")) {
					helper.setFormaSuspensao("");
				} else {
					helper.setFormaSuspensao((String) objeto[14].toString());
				}

				if (objeto[15] == null || objeto[15].equals("")) {
					helper.setNumero("");
				} else {
					helper.setNumero((String) objeto[15].toString());
				}

				colecaoRetorno.add(helper);

			}

		} catch (ErroRepositorioException e) {
			throw new ControladorException("erro.sistema", e);
		}

		return colecaoRetorno;
	}

	/**
	 * Valida se o valor informado no form é um bigdecimal
	 * 
	 * @author Fernanda
	 * @param valor
	 * @param dff
	 * @param campo
	 * @return
	 * @throws ControladorException
	 */
	public String validaBigDecimal(String valor, DecimalFormat dff, String campo)
			throws ControladorException {
		try {
			BigDecimal v = new BigDecimal(valor.replace(",", "."));
			// BigDecimal v = (BigDecimal) dff.parse(valor);
			valor = dff.format(v).toString();
			return valor;
		} catch (Exception e) {
			throw new ControladorException("atencao.bigdecimal_invalido", null,
					campo);
		}
	}

	/**
	 * [UC1527] - Inserir Ocorrencia Operacional
	 * 
	 * @author Rômulo Aurélio
	 * @date 12/07/2013
	 * 
	 */
	public Collection<Localidade> obterLocalidadesdoMunicipio(
			Integer idMunicipio) throws ControladorException {

		Collection colecaoObject = new ArrayList();

		Collection colecaoLocalidade = new ArrayList();

		try {
			colecaoObject = repositorioCadastro
					.obterLocalidadesdoMunicipio(idMunicipio);

			Iterator iteratorObject = colecaoObject.iterator();

			while (iteratorObject.hasNext()) {

				Object[] arrayObject = (Object[]) iteratorObject.next();

				if (arrayObject != null) {

					Localidade localidade = new Localidade();
					// id
					if (arrayObject[0] != null) {
						localidade.setId((Integer) arrayObject[0]);
					}
					// descricao
					if (arrayObject[1] != null) {
						localidade.setDescricao((String) arrayObject[1]);
					}

					colecaoLocalidade.add(localidade);
				}
			}

		} catch (ErroRepositorioException e) {
			throw new ControladorException("erro.sistema", e);
		}

		return colecaoLocalidade;
	}

	/**
	 * 
	 * [UC0738] Gerar Certidão Negativa por Imóvel [FS0006] Validar CPF/CNPJ
	 * 
	 * @author Hugo Azevedo
	 * @date 07/03/2014
	 * 
	 */
	public boolean verificarClienteImovelCpfCnpjValidos(Integer idImovel)
			throws ControladorException {

		boolean retorno = true;
		try {

			ClienteImovel clie = this.repositorioCadastro
					.obterClienteImovel(idImovel);

			if (clie != null
					&& clie.getCliente().getIndicadorValidaCpfCnpj().intValue() == 2)
				retorno = false;

		} catch (ErroRepositorioException e) {
			throw new ControladorException("erro.sistema", e);
		}

		return retorno;
	}

	/**
	 * @author Jonathan Marcos
	 * @date 11/02/2014 RM10044
	 */
	public Short verificarClienteTipoProgramaEspecial(Integer idImovel)
			throws ControladorException {

		try {

			return this.repositorioCadastro
					.verificarClienteTipoProgramaEspecial(idImovel);

		} catch (ErroRepositorioException ex) {
			ex.printStackTrace();
			throw new ControladorException("erro.sistema", ex);
		}
	}

	/**
	 * @author Jonathan Marcos
	 * @date 06/08/2014
	 * @param colecaoRetorno
	 * @return Integer[]
	 */
	private Integer[] obterIdsCobrancaAcaoAtividadeComando(
			Collection<Object> colecaoRetorno) {
		Integer[] colecaoIntegerFormatada = null;
		if (colecaoRetorno != null) {
			colecaoIntegerFormatada = new Integer[colecaoRetorno.size()];
			Iterator iterator = colecaoRetorno.iterator();
			for (int posicao = 0; iterator.hasNext(); posicao++) {
				colecaoIntegerFormatada[posicao] = (Integer) iterator.next();
			}
		}
		return colecaoIntegerFormatada;
	}

	/**
	 * @author Jonathan Marcos
	 * @date 06/08/2014
	 * @param colecaoParametrosMSGSMSEmail
	 * @param idParametro
	 * @return Integer
	 */
	private Integer obterQuantidadeTentativasObjetoParametrosMSGSMSEmail(
			Collection colecaoParametrosMSGSMSEmail, Integer idParametro) {
		Integer quantidadeTentativas = null;
		Iterator iterator = colecaoParametrosMSGSMSEmail.iterator();
		ParametrosMSGSMSEmail parametrosMSGSMSEmail = null;
		while (iterator.hasNext()) {
			parametrosMSGSMSEmail = (ParametrosMSGSMSEmail) iterator.next();
			if (idParametro.compareTo(parametrosMSGSMSEmail.getId()) == 0) {
				quantidadeTentativas = parametrosMSGSMSEmail
						.getQuantidadeTentativasEnvio();
				break;
			}
		}
		return quantidadeTentativas;
	}

	/**
	 * @author Jonathan Marcos
	 * @date 06/08/2014
	 * @param colecaoCobrancaAcao
	 * @param idAcaoCobranca
	 * @return Integer
	 */
	private Integer obterQuantidadeTentativasObjetoCobrancaAcao(
			Collection colecaoCobrancaAcao, Integer idAcaoCobranca) {
		Integer quantidadeTentativas = null;
		Iterator iterator = colecaoCobrancaAcao.iterator();
		CobrancaAcao cobrancaAcao = null;
		while (iterator.hasNext()) {
			cobrancaAcao = (CobrancaAcao) iterator.next();
			if (idAcaoCobranca.compareTo(cobrancaAcao.getId()) == 0) {
				quantidadeTentativas = cobrancaAcao
						.getNumeroMaximoTentativoEnvio();
			}
		}
		return quantidadeTentativas;
	}

	/**
	 * @author Jonathan Marcos
	 * @date 06/08/2014
	 * @param objeto
	 * @return MensagemEmailFaturamentoCobranca
	 */
	private MensagemEmailFaturamentoCobranca montarObjetoMensagemEmailFaturamentoCobranca(
			Object[] objeto) {

		Cliente cliente = null;
		ParametrosMSGSMSEmail parametrosMSGSMSEmail = null;
		CobrancaAcao cobrancaAcao = null;
		Conta conta = null;
		FaturamentoGrupo faturamentoGrupo = null;
		CobrancaAcaoAtividadeComando cobrancaAcaoAtividadeComando = null;
		CobrancaDocumento cobrancaDocumento = null;

		MensagemEmailFaturamentoCobranca mensagemEmailFaturamentoCobranca = new MensagemEmailFaturamentoCobranca();

		mensagemEmailFaturamentoCobranca.setId((Integer) (objeto[0]));

		cliente = new Cliente();
		cliente.setId((Integer) objeto[1]);
		mensagemEmailFaturamentoCobranca.setCliente(cliente);

		parametrosMSGSMSEmail = new ParametrosMSGSMSEmail();
		parametrosMSGSMSEmail.setId((Integer) objeto[2]);
		mensagemEmailFaturamentoCobranca
				.setParametroMensagemSMSEmail(parametrosMSGSMSEmail);

		if (objeto[3] != null) {
			cobrancaAcao = new CobrancaAcao();
			cobrancaAcao.setId((Integer) objeto[3]);
		}
		mensagemEmailFaturamentoCobranca.setAcaoCobranca(cobrancaAcao);

		mensagemEmailFaturamentoCobranca
				.setDescricaoMensagem((String) objeto[4]);
		mensagemEmailFaturamentoCobranca.setEmailDestino((String) objeto[5]);
		mensagemEmailFaturamentoCobranca.setDataPrevisaoEnvio((Date) objeto[6]);
		mensagemEmailFaturamentoCobranca.setDataLimiteEnvio((Date) objeto[7]);
		mensagemEmailFaturamentoCobranca.setDataEnvio((Date) objeto[8]);
		mensagemEmailFaturamentoCobranca
				.setQuantidadeTentativasEnvio((Integer) objeto[9] + 1);
		mensagemEmailFaturamentoCobranca.setUltimaAlteracao((Date) objeto[10]);

		if (objeto[11] != null) {
			conta = new Conta();
			conta.setId((Integer) objeto[11]);
		}
		mensagemEmailFaturamentoCobranca.setConta(conta);

		mensagemEmailFaturamentoCobranca
				.setAnoMesReferenciaConta((Integer) objeto[12]);

		faturamentoGrupo = null;
		if (objeto[13] != null) {
			faturamentoGrupo = new FaturamentoGrupo();
			faturamentoGrupo.setId((Integer) objeto[13]);
		}
		mensagemEmailFaturamentoCobranca.setGrupoFaturamento(faturamentoGrupo);

		if (objeto[14] != null) {
			cobrancaAcaoAtividadeComando = new CobrancaAcaoAtividadeComando();
			cobrancaAcaoAtividadeComando.setId((Integer) objeto[14]);
		}
		mensagemEmailFaturamentoCobranca
				.setCobrancaAcaoAtividadeComando(cobrancaAcaoAtividadeComando);

		if (objeto[15] != null) {
			cobrancaDocumento = new CobrancaDocumento();
			cobrancaDocumento.setId((Integer) objeto[15]);
		}
		mensagemEmailFaturamentoCobranca
				.setCobrancaDocumento(cobrancaDocumento);

		return mensagemEmailFaturamentoCobranca;
	}

	/**
	 * @author Jonathan Marcos
	 * @date 06/08/2014
	 * @param mensagemEmailFaturamentoCobranca
	 * @return MensagemEmailHistorico
	 */
	private MensagemEmailHistorico preencherObjetoMensagemEmailHistorico(
			MensagemEmailFaturamentoCobranca mensagemEmailFaturamentoCobranca) {
		MensagemEmailHistorico mensagemEmailHistorico = new MensagemEmailHistorico();
		mensagemEmailHistorico.setId(mensagemEmailFaturamentoCobranca.getId());
		mensagemEmailHistorico
				.setDescricaoMensagem(mensagemEmailFaturamentoCobranca
						.getDescricaoMensagem());
		mensagemEmailHistorico.setEmailDestino(mensagemEmailFaturamentoCobranca
				.getEmailDestino());
		mensagemEmailHistorico
				.setDataPrevisaoEnvio(mensagemEmailFaturamentoCobranca
						.getDataPrevisaoEnvio());
		mensagemEmailHistorico
				.setDataLimiteEnvio(mensagemEmailFaturamentoCobranca
						.getDataLimiteEnvio());
		mensagemEmailHistorico.setDataEnvio(mensagemEmailFaturamentoCobranca
				.getDataEnvio());
		mensagemEmailHistorico
				.setQuantidadeTentativasEnvio(mensagemEmailFaturamentoCobranca
						.getQuantidadeTentativasEnvio());
		mensagemEmailHistorico
				.setUltimaAlteracao(mensagemEmailFaturamentoCobranca
						.getUltimaAlteracao());
		mensagemEmailHistorico
				.setAnoMesReferenciaConta(mensagemEmailFaturamentoCobranca
						.getAnoMesReferenciaConta());
		mensagemEmailHistorico.setCliente(mensagemEmailFaturamentoCobranca
				.getCliente());
		mensagemEmailHistorico
				.setParametroMensagemSMSEmail(mensagemEmailFaturamentoCobranca
						.getParametroMensagemSMSEmail());
		mensagemEmailHistorico.setAcaoCobranca(mensagemEmailFaturamentoCobranca
				.getAcaoCobranca());
		mensagemEmailHistorico.setConta(mensagemEmailFaturamentoCobranca
				.getConta());
		mensagemEmailHistorico
				.setGrupoFaturamento(mensagemEmailFaturamentoCobranca
						.getGrupoFaturamento());
		mensagemEmailHistorico
				.setCobrancaAcaoAtividadeComando(mensagemEmailFaturamentoCobranca
						.getCobrancaAcaoAtividadeComando());
		mensagemEmailHistorico
				.setCobrancaDocumento(mensagemEmailFaturamentoCobranca
						.getCobrancaDocumento());

		return mensagemEmailHistorico;
	}

	/**
	 * @author Jonathan Marcos
	 * @date 06/08/2014
	 * @param idFuncionalidadeIniciada
	 * @throws ControladorException
	 */
	public void batchEnviarEMAILCobrancaFaturamento(
			Integer idFuncionalidadeIniciada) throws ControladorException {
		int idUnidadeIniciada = 0;

		/*
		 * Registrar o início do processamento da Unidade de Processamento do
		 * Batch
		 */
		idUnidadeIniciada = getControladorBatch()
				.iniciarUnidadeProcessamentoBatch(idFuncionalidadeIniciada,
						UnidadeProcessamento.FUNCIONALIDADE, 0);

		try {

			// Inicializa a dataCorrente
			SimpleDateFormat simpleDateFormat = new SimpleDateFormat(
					"yyyy-MM-dd");
			Date dataCorrente = new Date();

			Object[] objeto = null;
			Integer[] arrayCobrancaAcaoAtividadeComando = null;
			Integer[] arrayComplementararrayCobrancaAcaoAtividadeComando = null;

			Iterator iterator = null;

			/*
			 * Pesquisa Todas as CobrancaAcaoAtividadeComando relacionas a
			 * pesquisar [FS0002] Gerar selecao de EMAIL para enviar
			 */
			Collection<Object> colecaoRetornoCobrancaAcaoAtividadeComando = repositorioCadastro
					.obterCobrancaAcaoAtividadeComandoEmail(simpleDateFormat
							.format(dataCorrente));

			// Obter os ids da pesquisa anterior
			arrayCobrancaAcaoAtividadeComando = obterIdsCobrancaAcaoAtividadeComando(colecaoRetornoCobrancaAcaoAtividadeComando);
			if (arrayCobrancaAcaoAtividadeComando != null) {
				arrayComplementararrayCobrancaAcaoAtividadeComando = new Integer[arrayCobrancaAcaoAtividadeComando.length];
			}

			// [FS0002] Gerar selecao de EMAIL para enviar
			Collection<Object[]> colecaoMensagemEmailFaturamentoCobranca = repositorioCadastro
					.obterMensagemEmailFaturamentoCobrancaParaEnviar(
							simpleDateFormat.format(dataCorrente),
							simpleDateFormat.format(dataCorrente));

			MensagemEmailFaturamentoCobranca mensagemEmailFaturamentoCobranca = null;
			MensagemEmailHistorico mensagemEmailHistorico = null;

			iterator = colecaoMensagemEmailFaturamentoCobranca.iterator();

			String emailRemetente = null;
			String tituloMensagem = null;
			String emailReceptor = null;
			String mensagem = null;

			FiltroParametrosMSGSMSEmail filtroParametrosMSGSMSEmail = new FiltroParametrosMSGSMSEmail();
			filtroParametrosMSGSMSEmail
					.adicionarParametro(new ParametroNaoNulo(
							FiltroParametrosMSGSMSEmail.ID));

			Collection colecaoParametrosMSGSMSEmail = Fachada.getInstancia()
					.pesquisar(filtroParametrosMSGSMSEmail,
							ParametrosMSGSMSEmail.class.getName());

			FiltroCobrancaAcao filtroCobrancaAcao = new FiltroCobrancaAcao();
			filtroCobrancaAcao.adicionarParametro(new ParametroNaoNulo(
					FiltroCobrancaAcao.NUMERO_MAXIMO_TENTATIVAS_ENVIO));

			Collection colecaoCobrancaAcao = Fachada.getInstancia().pesquisar(
					filtroCobrancaAcao, CobrancaAcao.class.getName());

			EnvioEmail envioEmail = repositorioCadastro
					.pesquisarEnvioEmail(EnvioEmail.ENVIAR_EMAIL_COBRANCA_FATURAMENTO);

			while (iterator.hasNext()) {
				objeto = (Object[]) iterator.next();

				// montar o objeto mensagemEmailFaturamentoCobranca
				mensagemEmailFaturamentoCobranca = montarObjetoMensagemEmailFaturamentoCobranca(objeto);

				emailRemetente = envioEmail.getEmailRemetente();
				tituloMensagem = envioEmail.getTituloMensagem();
				emailReceptor = mensagemEmailFaturamentoCobranca
						.getEmailDestino();
				mensagem = mensagemEmailFaturamentoCobranca
						.getDescricaoMensagem();

				if (Util.enviarEmail(emailRemetente, emailReceptor,
						tituloMensagem, mensagem)) {
					mensagemEmailFaturamentoCobranca.setDataEnvio(new Date());
					mensagemEmailFaturamentoCobranca
							.setUltimaAlteracao(new Date());

					/*
					 * arrayCobrancaDocumento contém todos os
					 * idsCobrancaAcaoAtividadeComando para serem atualizados no
					 * final do batch arrayComplementarCobrancaDocumento contém
					 * todos as quantidades desses ids para atualizar a
					 * quantidade
					 */
					if (mensagemEmailFaturamentoCobranca
							.getCobrancaAcaoAtividadeComando() != null) {
						if (arrayCobrancaAcaoAtividadeComando != null) {
							for (int posicao = 0; posicao < arrayCobrancaAcaoAtividadeComando.length; posicao++) {
								if (arrayCobrancaAcaoAtividadeComando[posicao]
										.compareTo(mensagemEmailFaturamentoCobranca
												.getCobrancaAcaoAtividadeComando()
												.getId()) == 0) {
									if (arrayComplementararrayCobrancaAcaoAtividadeComando[posicao] == null) {
										arrayComplementararrayCobrancaAcaoAtividadeComando[posicao] = 0;
									}
									arrayComplementararrayCobrancaAcaoAtividadeComando[posicao] = arrayComplementararrayCobrancaAcaoAtividadeComando[posicao] + 1;
									break;
								}
							}
						}
					}

					/*
					 * [SB0007] Incluir EMAIL enviado na tabela de historico
					 */
					mensagemEmailHistorico = preencherObjetoMensagemEmailHistorico(mensagemEmailFaturamentoCobranca);
					mensagemEmailHistorico.setDataEnvio(new Date());
					repositorioUtil.inserir(mensagemEmailHistorico);

					/*
					 * [SB0008] Excluir da tabela de mensagens de EMAIL
					 */
					repositorioUtil.remover(mensagemEmailFaturamentoCobranca);

				} else {
					if (mensagemEmailFaturamentoCobranca.getConta() != null
							&& mensagemEmailFaturamentoCobranca.getConta()
									.getId() != null) {
						if (mensagemEmailFaturamentoCobranca
								.getQuantidadeTentativasEnvio() >= obterQuantidadeTentativasObjetoParametrosMSGSMSEmail(
								colecaoParametrosMSGSMSEmail,
								mensagemEmailFaturamentoCobranca
										.getParametroMensagemSMSEmail().getId())) {
							/*
							 * [SB0007] Incluir EMAIL enviado na tabela de
							 * historico
							 */
							mensagemEmailFaturamentoCobranca
									.setUltimaAlteracao(new Date());
							mensagemEmailHistorico = preencherObjetoMensagemEmailHistorico(mensagemEmailFaturamentoCobranca);
							repositorioUtil.inserir(mensagemEmailHistorico);

							/*
							 * [SB0008] Excluir da tabela de mensagens de EMAIL
							 */
							repositorioUtil
									.remover(mensagemEmailFaturamentoCobranca);
						} else {
							/*
							 * [SB0009] Atualizar erro no envio EMAIL
							 */
							repositorioUtil
									.atualizar(mensagemEmailFaturamentoCobranca);
						}
					} else {
						if (mensagemEmailFaturamentoCobranca
								.getQuantidadeTentativasEnvio() >= obterQuantidadeTentativasObjetoCobrancaAcao(
								colecaoCobrancaAcao,
								mensagemEmailFaturamentoCobranca
										.getAcaoCobranca().getId())) {
							/*
							 * [SB0010] Incluir EMAIL com erro na tabela de
							 * histórico.
							 */
							mensagemEmailFaturamentoCobranca
									.setUltimaAlteracao(new Date());
							mensagemEmailHistorico = preencherObjetoMensagemEmailHistorico(mensagemEmailFaturamentoCobranca);
							repositorioUtil.inserir(mensagemEmailHistorico);

							/*
							 * [SB0008] Excluir da tabela de mensagens de EMAIL
							 */
							repositorioUtil
									.remover(mensagemEmailFaturamentoCobranca);
						} else {
							/*
							 * [SB0009] Atualizar erro no envio EMAIL
							 */
							repositorioUtil
									.atualizar(mensagemEmailFaturamentoCobranca);
						}
					}
				}
			}

			// [FS0006] Limpar EMAIL pela data limite
			Collection colecaoMensagemEmailFaturamentoCobrancaDataLimite = repositorioCadastro
					.obterMensagemEmailFaturamentoCobrancaDataLimite(simpleDateFormat
							.format(dataCorrente));

			iterator = colecaoMensagemEmailFaturamentoCobrancaDataLimite
					.iterator();

			while (iterator.hasNext()) {
				objeto = (Object[]) iterator.next();
				/*
				 * [SB0007] Incluir EMAIL enviado na tabela de historico
				 */
				mensagemEmailFaturamentoCobranca = montarObjetoMensagemEmailFaturamentoCobranca(objeto);
				mensagemEmailFaturamentoCobranca.setUltimaAlteracao(new Date());
				mensagemEmailHistorico = preencherObjetoMensagemEmailHistorico(mensagemEmailFaturamentoCobranca);
				repositorioUtil.inserir(mensagemEmailHistorico);

				/*
				 * [SB0008] Excluir da tabela de mensagens de EMAIL
				 */
				repositorioUtil.remover(mensagemEmailFaturamentoCobranca);
			}

			// [SB0015] Atualizar total de EMAIL enviados
			CobrancaAcaoAtividadeComando cobrancaAcaoAtividadeComando = null;
			if (arrayCobrancaAcaoAtividadeComando != null) {
				FiltroCobrancaAcaoAtividadeComando filtroCobrancaAcaoAtividadeComando = new FiltroCobrancaAcaoAtividadeComando();
				for (int posicao = 0; posicao < arrayCobrancaAcaoAtividadeComando.length; posicao++) {
					// Pesquisar o objeto cobrancaAcaoAtividadeComando
					filtroCobrancaAcaoAtividadeComando
							.adicionarParametro(new ParametroSimples(
									FiltroCobrancaAcaoAtividadeComando.ID,
									arrayCobrancaAcaoAtividadeComando[posicao]));
					// Retorno objeto cobrancaAcaoAtividadeComando
					cobrancaAcaoAtividadeComando = (CobrancaAcaoAtividadeComando) Util
							.retonarObjetoDeColecao(Fachada.getInstancia()
									.pesquisar(
											filtroCobrancaAcaoAtividadeComando,
											CobrancaAcaoAtividadeComando.class
													.getName()));
					// Adicionar a quantidade de emails a quantidade que tinha
					// antes do batch
					if (cobrancaAcaoAtividadeComando
							.getQuantidadeEmailEnviados() != null) {
						cobrancaAcaoAtividadeComando
								.setQuantidadeEmailEnviados(cobrancaAcaoAtividadeComando
										.getQuantidadeEmailEnviados()
										+ arrayComplementararrayCobrancaAcaoAtividadeComando[posicao]);
					} else {
						cobrancaAcaoAtividadeComando
								.setQuantidadeEmailEnviados(1);
					}

					// Atualiza o objeto cobrancaAcaoAtividadeComando
					repositorioUtil.atualizar(cobrancaAcaoAtividadeComando);
					filtroCobrancaAcaoAtividadeComando.limparListaParametros();
				}
			}

			getControladorBatch().encerrarUnidadeProcessamentoBatch(null,
					idUnidadeIniciada, false);

		} catch (Exception ex) {
			sessionContext.getRollbackOnly();
			getControladorBatch().encerrarUnidadeProcessamentoBatch(ex,
					idUnidadeIniciada, true);
			ex.printStackTrace();
			throw new EJBException(ex);
		}

	}

	/**
	 * @author Jonathan Marcos
	 * @date 06/08/2014
	 * @param listaMensagemSMSFaturamentoCobranca
	 * @return Integer
	 */
	private Integer transmitirSMSEmLoteCobrancaFaturamentoTWW(
			ArrayList<MensagemSMSFaturamentoCobranca> listaMensagemSMSFaturamentoCobranca) {
		Integer quantidadeRetornoValidado = 0;

		boolean tentouTransmitiuPeloMenosUM = false;

		try {

			ContaEmpresaSMS contaEmpresaSms = this
					.recuperarDadosContaEmpresaSMS();

			String numusu = contaEmpresaSms.getUsuario();
			String password = contaEmpresaSms.getSenha();
			String URLServer = contaEmpresaSms.getUrlWebService();

			URL url = new URL(URLServer);
			HttpURLConnection connection = (HttpURLConnection) url
					.openConnection();

			connection.setRequestMethod("POST");
			connection.setDoOutput(true);
			connection.setDoInput(true);

			connection.setRequestProperty("Content-type",
					"text/xml; charset=utf-8");

			String xmlSMS = "";
			for (int posicao = 0; posicao < listaMensagemSMSFaturamentoCobranca
					.size(); posicao++) {
				if (listaMensagemSMSFaturamentoCobranca
						.get(posicao)
						.getCodigoRetorno()
						.compareTo(
								ConstantesSistema.CODIGO_RETORNO_ERRO_TRANSMISSAO) != 0) {
					tentouTransmitiuPeloMenosUM = true;
					xmlSMS += "<sms>"
							+ "<seunum>"
							+ listaMensagemSMSFaturamentoCobranca.get(posicao)
									.getSmsSequenciaEnvio().getId()
							+ "</seunum>"
							+ "<celular>"
							+ listaMensagemSMSFaturamentoCobranca.get(posicao)
									.getNumeroTelefoneDestino()
							+ "</celular>"
							+ "<mensagem>"
							+ listaMensagemSMSFaturamentoCobranca.get(posicao)
									.getDescricaoMensagem() + "</mensagem>"
							+ "<agendamento></agendamento>" + "</sms>\n";
				}
			}

			String XMLTable = "<?xml version=\"1.0\" encoding=\"UTF-8\"?>"
					+ "<lote>" + xmlSMS + "</lote>";

			String xml = "<?xml version=\"1.0\" encoding=\"utf-8\"?>"
					+ "<soap12:Envelope xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\" xmlns:soap12=\"http://www.w3.org/2003/05/soap-envelope\">"
					+ "<soap12:Body>"
					+ "<EnviaSMSXML xmlns=\"https://www.twwwireless.com.br/reluzcap/wsreluzcap\">"
					+ "<NumUsu><![CDATA[" + numusu + "]]></NumUsu>"
					+ "<Senha><![CDATA[" + password + "]]></Senha>"
					+ "<StrXML><![CDATA[" + XMLTable + "]]></StrXML>"
					+ "</EnviaSMSXML>" + "</soap12:Body>"
					+ "</soap12:Envelope>";

			if (tentouTransmitiuPeloMenosUM) {
				byte[] bytes = xml.getBytes();
				connection.setRequestProperty("Content-length",
						String.valueOf(bytes.length));

				OutputStream out = connection.getOutputStream();
				out.write(bytes);

				BufferedReader in = new BufferedReader(new InputStreamReader(
						connection.getInputStream()));
				String retornoXML;
				while ((retornoXML = in.readLine()) != null) {
					retornoXML = retornoXML.replace("<EnviaSMSXMLResult>", "|");
					retornoXML = retornoXML
							.replace("</EnviaSMSXMLResult>", "#");

					retornoXML = retornoXML.substring(retornoXML.indexOf("|"),
							retornoXML.indexOf("#"));

					quantidadeRetornoValidado = Integer.valueOf(retornoXML
							.split(" ")[1]);
				}
				in.close();
				out.close();
			}
		} catch (Exception ex) {
			sessionContext.getRollbackOnly();
			ex.printStackTrace();
		}

		return quantidadeRetornoValidado;
	}

	/**
	 * @author Jonathan Marcos
	 * @date 06/08/2014
	 * @param numeroLote
	 * @return ArrayList<BuscarSMSTWWHelper>
	 */
	/*
	 * Esse método faz uma busca no Webservice da TWW para retonar informações
	 * referentes a número de lote e data de recebimento
	 */
	private ArrayList<BuscarSMSTWWHelper> buscarSMSTWW(Integer numeroLote) {

		ArrayList<BuscarSMSTWWHelper> listaBuscarSMSTWWHelper = null;
		BuscarSMSTWWHelper buscarSMSTWWHelper = null;
		try {

			ContaEmpresaSMS contaEmpresaSms = this
					.recuperarDadosContaEmpresaSMS();

			String numusu = contaEmpresaSms.getUsuario();
			String password = contaEmpresaSms.getSenha();
			String URLServer = contaEmpresaSms.getUrlWebService();

			URL url = new URL(URLServer);
			HttpURLConnection connection = (HttpURLConnection) url
					.openConnection();

			connection.setRequestMethod("POST");
			connection.setDoOutput(true);
			connection.setDoInput(true);
			connection.setRequestProperty("Content-type",
					"text/xml; charset=utf-8");

			String xml = "<?xml version=\"1.0\" encoding=\"utf-8\"?>"
					+ "<soap12:Envelope xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\" xmlns:soap12=\"http://www.w3.org/2003/05/soap-envelope\">"
					+ "<soap12:Body>"
					+ "<StatusSMS xmlns=\"https://www.twwwireless.com.br/reluzcap/wsreluzcap\">"
					+ "<NumUsu><![CDATA[" + numusu + "]]></NumUsu>"
					+ "<Senha><![CDATA[" + password + "]]></Senha>"
					+ "<SeuNum><![CDATA[" + numeroLote + "]]></SeuNum>"
					+ "</StatusSMS>" + "</soap12:Body>" + "</soap12:Envelope>";

			byte[] bytes = xml.getBytes();
			connection.setRequestProperty("Content-length",
					String.valueOf(bytes.length));
			OutputStream out = connection.getOutputStream();
			out.write(bytes);

			BufferedReader in = new BufferedReader(new InputStreamReader(
					connection.getInputStream()));

			String retornoXML = "";
			while ((retornoXML = in.readLine()) != null) {
				String auxiliar = new String(retornoXML);
				boolean depoisPrimeiroLoop = false;
				if (retornoXML.contains("<StatusSMSResult>")
						&& retornoXML.contains("</StatusSMSResult>")) {
					listaBuscarSMSTWWHelper = new ArrayList<BuscarSMSTWWHelper>();
					while (auxiliar.contains("</seunum>")) {
						buscarSMSTWWHelper = new BuscarSMSTWWHelper();
						String retorno = "";

						if (depoisPrimeiroLoop) {
							retornoXML = retornoXML.replaceFirst(
									"</StatusSMS>", "");
						}

						retornoXML = retornoXML.substring(
								retornoXML.indexOf("<seunum>"),
								retornoXML.indexOf("</StatusSMS>"));

						retorno = retornoXML.substring(
								retornoXML.indexOf("<seunum>"),
								retornoXML.indexOf("</seunum>"));
						retornoXML = retornoXML.replace(retorno, "");
						buscarSMSTWWHelper
								.setNumeroLote(Integer.valueOf(retorno.replace(
										"<seunum>", "").trim()));

						retorno = retornoXML.substring(
								retornoXML.indexOf("<celular>"),
								retornoXML.indexOf("</celular>"));
						retornoXML = retornoXML.replace(retorno, "");
						buscarSMSTWWHelper.setNumeroTelefone(retorno.replace(
								"<celular>", "").trim());

						retorno = retornoXML.substring(
								retornoXML.indexOf("<mensagem>"),
								retornoXML.indexOf("</mensagem>"));
						retornoXML = retornoXML.replace(retorno, "");
						buscarSMSTWWHelper.setMensagem(retorno.replace(
								"<mensagem>", "").trim());

						retorno = retornoXML.substring(
								retornoXML.indexOf("<status>"),
								retornoXML.indexOf("</status>"));
						retornoXML = retornoXML.replace(retorno, "");

						String status = retorno.replace("<status>", "").trim();
						if (status.compareTo("OK") == 0
								|| status.compareTo("OP") == 0) {
							buscarSMSTWWHelper
									.setStatus(ConstantesSistema.CODIGO_RETORNO_TRANSMITIDO);
						} else if (status.compareTo("CL") == 0) {
							buscarSMSTWWHelper
									.setStatus(ConstantesSistema.CODIGO_RETORNO_ENVIADO);
						} else if (status.compareTo("E4") == 0
								|| status.compareTo("E0") == 0
								|| status.compareTo("ER") == 0
								|| status.compareTo("E3") == 0
								|| status.compareTo("E1") == 0) {
							buscarSMSTWWHelper
									.setStatus(ConstantesSistema.CODIGO_RETORNO_ERRO_OPERADORA);
						}

						retorno = retornoXML.substring(
								retornoXML.indexOf("<datarec>"),
								retornoXML.indexOf("</datarec>"));
						retornoXML = retornoXML.replace(retorno, "");

						retorno = retornoXML.substring(
								retornoXML.indexOf("<dataenv>"),
								retornoXML.indexOf("</dataenv>"));
						retornoXML = retornoXML.replace(retorno, "");

						retorno = retornoXML.substring(
								retornoXML.indexOf("<datastatus>"),
								retornoXML.indexOf("</datastatus>"));
						retornoXML = retornoXML.replace(retorno, "");

						retorno = retornoXML.substring(
								retornoXML.indexOf("<op>"),
								retornoXML.indexOf("</op>"));
						retornoXML = retornoXML.replace(retorno, "");

						retornoXML = retornoXML.replace("", "");

						if (depoisPrimeiroLoop) {
							auxiliar = auxiliar
									.replaceFirst("</StatusSMS>", "");
						}
						auxiliar = auxiliar.replace(auxiliar.substring(
								auxiliar.indexOf("<seunum>"),
								auxiliar.indexOf("</StatusSMS>")), "");
						retornoXML = new String(auxiliar);
						depoisPrimeiroLoop = true;

						listaBuscarSMSTWWHelper.add(buscarSMSTWWHelper);
					}
				}
			}
		} catch (Exception e) {
			sessionContext.getRollbackOnly();
			e.printStackTrace();
		}

		return listaBuscarSMSTWWHelper;
	}

	/**
	 * @author Jonathan Marcos
	 * @date 06/08/2014
	 * @param objeto
	 * @param numeroLote
	 * @return MensagemSMSFaturamentoCobranca
	 */
	private MensagemSMSFaturamentoCobranca montarObjetoMensagemSMSFaturamentoCobranca(
			Object[] objeto, Integer numeroLote) {
		Cliente cliente = null;
		ParametrosMSGSMSEmail parametrosMSGSMSEmail = null;
		CobrancaAcao cobrancaAcao = null;
		Conta conta = null;
		FaturamentoGrupo faturamentoGrupo = null;
		CobrancaAcaoAtividadeComando cobrancaAcaoAtividadeComando = null;
		CobrancaDocumento cobrancaDocumento = null;
		SMSSequenciaEnvio smsSequenciaEnvio = new SMSSequenciaEnvio();

		MensagemSMSFaturamentoCobranca mensagemSMSFaturamentoCobranca = new MensagemSMSFaturamentoCobranca();

		mensagemSMSFaturamentoCobranca.setId((Integer) (objeto[0]));

		cliente = new Cliente();
		cliente.setId((Integer) objeto[1]);
		mensagemSMSFaturamentoCobranca.setCliente(cliente);

		parametrosMSGSMSEmail = new ParametrosMSGSMSEmail();
		parametrosMSGSMSEmail.setId((Integer) objeto[2]);
		mensagemSMSFaturamentoCobranca
				.setParametroMensagemSMSEmail(parametrosMSGSMSEmail);

		if (objeto[3] != null) {
			cobrancaAcao = new CobrancaAcao();
			cobrancaAcao.setId((Integer) objeto[3]);
		}
		mensagemSMSFaturamentoCobranca.setAcaoCobranca(cobrancaAcao);

		mensagemSMSFaturamentoCobranca.setDescricaoMensagem((String) objeto[4]);
		mensagemSMSFaturamentoCobranca
				.setNumeroTelefoneDestino((String) objeto[5]);
		mensagemSMSFaturamentoCobranca.setDataPrevisaoEnvio((Date) objeto[6]);
		mensagemSMSFaturamentoCobranca.setDataLimiteEnvio((Date) objeto[7]);
		mensagemSMSFaturamentoCobranca.setDataEnvio((Date) objeto[8]);
		mensagemSMSFaturamentoCobranca
				.setQuantidadeTentativasEnvio((Integer) objeto[9]);
		mensagemSMSFaturamentoCobranca.setUltimaAlteracao((Date) objeto[10]);

		if (objeto[11] != null) {
			conta = new Conta();
			conta.setId((Integer) objeto[11]);
		}
		mensagemSMSFaturamentoCobranca.setConta(conta);

		mensagemSMSFaturamentoCobranca
				.setAnoMesReferenciaConta((Integer) objeto[12]);

		if (objeto[13] != null) {
			faturamentoGrupo = new FaturamentoGrupo();
			faturamentoGrupo.setId((Integer) objeto[13]);
		}
		mensagemSMSFaturamentoCobranca.setGrupoFaturamento(faturamentoGrupo);

		if (objeto[14] != null) {
			cobrancaAcaoAtividadeComando = new CobrancaAcaoAtividadeComando();
			cobrancaAcaoAtividadeComando.setId((Integer) objeto[14]);
			mensagemSMSFaturamentoCobranca
					.setCobrancaAcaoAtividadeComando(cobrancaAcaoAtividadeComando);
		}

		if (objeto[15] != null) {
			cobrancaDocumento = new CobrancaDocumento();
			cobrancaDocumento.setId((Integer) objeto[15]);
			mensagemSMSFaturamentoCobranca
					.setCobrancaDocumento(cobrancaDocumento);
		}

		if (objeto[16] == null) {
			smsSequenciaEnvio.setId(numeroLote);
		} else {
			smsSequenciaEnvio.setId((Integer) objeto[16]);
		}

		mensagemSMSFaturamentoCobranca.setSmsSequenciaEnvio(smsSequenciaEnvio);

		if (objeto[17] != null) {
			if (mensagemSMSFaturamentoCobranca.getNumeroTelefoneDestino()
					.length() == 12
					|| mensagemSMSFaturamentoCobranca
							.getNumeroTelefoneDestino().length() == 13) {
				mensagemSMSFaturamentoCobranca
						.setCodigoRetorno((Integer) objeto[17]);
			} else {
				mensagemSMSFaturamentoCobranca
						.setCodigoRetorno(ConstantesSistema.CODIGO_RETORNO_ERRO_TRANSMISSAO);
			}
		}

		return mensagemSMSFaturamentoCobranca;
	}

	/**
	 * @author Jonathan Marcos
	 * @date 06/08/2014
	 * @param mensagemSMSFaturamentoCobranca
	 * @return MensagemSMSHistorico
	 */
	private MensagemSMSHistorico montarObjetoMensagemSMSHistorico(
			MensagemSMSFaturamentoCobranca mensagemSMSFaturamentoCobranca) {
		MensagemSMSHistorico mensagemSMSHistorico = new MensagemSMSHistorico();

		mensagemSMSHistorico.setId(mensagemSMSFaturamentoCobranca.getId());
		mensagemSMSHistorico
				.setDescricaoMensagem(mensagemSMSFaturamentoCobranca
						.getDescricaoMensagem());
		mensagemSMSHistorico
				.setNumeroTelefoneDestino(mensagemSMSFaturamentoCobranca
						.getNumeroTelefoneDestino());
		;
		mensagemSMSHistorico
				.setDataPrevisaoEnvio(mensagemSMSFaturamentoCobranca
						.getDataPrevisaoEnvio());
		mensagemSMSHistorico.setDataLimiteEnvio(mensagemSMSFaturamentoCobranca
				.getDataLimiteEnvio());
		;
		mensagemSMSHistorico.setDataEnvio(mensagemSMSFaturamentoCobranca
				.getDataEnvio());
		mensagemSMSHistorico
				.setQuantidadeTentativasEnvio(mensagemSMSFaturamentoCobranca
						.getQuantidadeTentativasEnvio() + 1);
		mensagemSMSHistorico.setUltimaAlteracao(mensagemSMSFaturamentoCobranca
				.getUltimaAlteracao());
		mensagemSMSHistorico.setCliente(mensagemSMSFaturamentoCobranca
				.getCliente());
		mensagemSMSHistorico
				.setParametroMensagemSMSEmail(mensagemSMSFaturamentoCobranca
						.getParametroMensagemSMSEmail());
		mensagemSMSHistorico.setAcaoCobranca(mensagemSMSFaturamentoCobranca
				.getAcaoCobranca());
		mensagemSMSHistorico
				.setConta(mensagemSMSFaturamentoCobranca.getConta());
		mensagemSMSHistorico.setGrupoFaturamento(mensagemSMSFaturamentoCobranca
				.getGrupoFaturamento());
		mensagemSMSHistorico
				.setCobrancaAcaoAtividadeComando(mensagemSMSFaturamentoCobranca
						.getCobrancaAcaoAtividadeComando());
		mensagemSMSHistorico
				.setCobrancaDocumento(mensagemSMSFaturamentoCobranca
						.getCobrancaDocumento());
		mensagemSMSHistorico
				.setSmsSequenciaEnvio(mensagemSMSFaturamentoCobranca
						.getSmsSequenciaEnvio());
		mensagemSMSHistorico.setCodigoRetorno(mensagemSMSFaturamentoCobranca
				.getCodigoRetorno());

		return mensagemSMSHistorico;
	}

	/**
	 * @author Jonathan Marcos
	 * @date 06/08/2014
	 * @param idFuncionalidadeIniciada
	 * @throws ControladorException
	 */
	public void batchTransmitirSMSEmLoteCobrancaFaturamento(
			Integer idFuncionalidadeIniciada) throws ControladorException {
		int idUnidadeIniciada = 0;

		/*
		 * Registrar o início do processamento da Unidade de Processamento do
		 * Batch
		 */
		idUnidadeIniciada = getControladorBatch()
				.iniciarUnidadeProcessamentoBatch(idFuncionalidadeIniciada,
						UnidadeProcessamento.FUNCIONALIDADE, 0);

		try {

			// Inicializa a dataCorrente
			SimpleDateFormat simpleDateFormat = new SimpleDateFormat(
					"yyyy-MM-dd");
			Date dataCorrente = new Date();

			// Obtem a quantidade de sms que estejam com código de retorno 0 ou
			// seja gerados
			Integer quantidadeSMSGerados = repositorioCadastro
					.obterQuantidadeSMSGerados(
							simpleDateFormat.format(dataCorrente),
							simpleDateFormat.format(dataCorrente),
							ConstantesSistema.CODIGO_RETORNO_GERADO);

			// [FS0001] Gerar seleção de SMS para enviar
			Collection<Object[]> colecaoMensagemSMSFaturamentoCobranca = repositorioCadastro
					.obterMensagemSMSFaturamentoCobrancaParaEnviar(
							simpleDateFormat.format(dataCorrente),
							simpleDateFormat.format(dataCorrente),
							ConstantesSistema.CODIGO_RETORNO_GERADO);
			ArrayList<MensagemSMSFaturamentoCobranca> listaMensagemSMSFaturamentoCobranca = new ArrayList<MensagemSMSFaturamentoCobranca>();

			// Se o quantidade de sms gerados seja diferente de 0 gera um novo
			// sequencial de envio
			SMSSequenciaEnvio smsSequenciaEnvio = null;
			Integer numeroLote = null;
			int quantidadeInvalidado = 0;
			int quantidadeErroEnvio = 0;
			if (quantidadeSMSGerados.compareTo(0) != 0) {
				smsSequenciaEnvio = new SMSSequenciaEnvio();
				smsSequenciaEnvio.setQuantidadeInvalidado(quantidadeInvalidado);
				smsSequenciaEnvio.setQuantidadeErroEnvio(quantidadeErroEnvio);
				smsSequenciaEnvio
						.setQuantidadeEnvio(colecaoMensagemSMSFaturamentoCobranca
								.size());
				smsSequenciaEnvio.setUltimaAlteracao(dataCorrente);
				smsSequenciaEnvio.setDataEnvio(dataCorrente);
				smsSequenciaEnvio.setId((Integer) Fachada.getInstancia()
						.inserir(smsSequenciaEnvio));

				numeroLote = smsSequenciaEnvio.getId();
			}

			MensagemSMSFaturamentoCobranca mensagemSMSFaturamentoCobranca = null;

			Iterator iterator = colecaoMensagemSMSFaturamentoCobranca
					.iterator();

			Object[] objeto = null;

			while (iterator.hasNext()) {
				objeto = (Object[]) iterator.next();

				// Montar o objeto mensagemSMSFaturamentoCobranca
				mensagemSMSFaturamentoCobranca = montarObjetoMensagemSMSFaturamentoCobranca(
						objeto, numeroLote);

				listaMensagemSMSFaturamentoCobranca
						.add(mensagemSMSFaturamentoCobranca);
			}

			// Verifica se quantidadeRetornoValidado e igual a número da lista
			Integer quantidadeRetornoValidado = 0;
			if (listaMensagemSMSFaturamentoCobranca != null
					&& listaMensagemSMSFaturamentoCobranca.size() != 0) {
				quantidadeRetornoValidado = transmitirSMSEmLoteCobrancaFaturamentoTWW(listaMensagemSMSFaturamentoCobranca);

				if (quantidadeRetornoValidado
						.compareTo(listaMensagemSMSFaturamentoCobranca.size()) == 0) {
					for (int posicao = 0; posicao < listaMensagemSMSFaturamentoCobranca
							.size(); posicao++) {
						mensagemSMSFaturamentoCobranca = listaMensagemSMSFaturamentoCobranca
								.get(posicao);

						mensagemSMSFaturamentoCobranca
								.setCodigoRetorno(ConstantesSistema.CODIGO_RETORNO_TRANSMITIDO);
						// mensagemSMSFaturamentoCobranca.setQuantidadeTentativasEnvio(mensagemSMSFaturamentoCobranca.getQuantidadeTentativasEnvio()+1);

						repositorioUtil
								.atualizar(mensagemSMSFaturamentoCobranca);
					}
				} else {
					// monta uma lista helpers BuscarSMSTWWHelper
					ArrayList<BuscarSMSTWWHelper> listaBuscarSMSTWWHelper = buscarSMSTWW(numeroLote);
					if (listaBuscarSMSTWWHelper != null) {
						for (int posicaoLista = 0; posicaoLista < listaBuscarSMSTWWHelper
								.size(); posicaoLista++) {
							// Verifica se código de retorno do helper
							// BuscarSMSTWWHelper e igual a 1 ou 3
							if (listaBuscarSMSTWWHelper
									.get(posicaoLista)
									.getStatus()
									.compareTo(
											ConstantesSistema.CODIGO_RETORNO_ERRO_TRANSMISSAO) == 0
									|| listaBuscarSMSTWWHelper
											.get(posicaoLista)
											.getStatus()
											.compareTo(
													ConstantesSistema.CODIGO_RETORNO_ERRO_OPERADORA) == 0) {
								/*
								 * Verifica se número do telefone do helper
								 * BuscarSMSTWWHelper é igual a algum número da
								 * lista Geral de envio
								 */
								for (int posicaoSubLista = 0; posicaoSubLista < listaMensagemSMSFaturamentoCobranca
										.size(); posicaoSubLista++) {
									if (listaBuscarSMSTWWHelper
											.get(posicaoLista)
											.getNumeroTelefone()
											.compareTo(
													listaMensagemSMSFaturamentoCobranca
															.get(posicaoSubLista)
															.getNumeroTelefoneDestino()) == 0) {
										listaMensagemSMSFaturamentoCobranca
												.get(posicaoSubLista)
												.setCodigoRetorno(
														ConstantesSistema.CODIGO_RETORNO_ERRO_TRANSMISSAO);
									}
								}
							}
						}
					}

					// [FS0002] Atualizar retorno de SMS
					mensagemSMSFaturamentoCobranca = null;
					MensagemSMSHistorico mensagemSMSHistorico = null;
					for (int posicao = 0; posicao < listaMensagemSMSFaturamentoCobranca
							.size(); posicao++) {

						mensagemSMSFaturamentoCobranca = listaMensagemSMSFaturamentoCobranca
								.get(posicao);

						// mensagemSMSFaturamentoCobranca.setQuantidadeTentativasEnvio(mensagemSMSFaturamentoCobranca.getQuantidadeTentativasEnvio()+1);
						// mensagemSMSFaturamentoCobranca.setUltimaAlteracao(new
						// Date());

						if (mensagemSMSFaturamentoCobranca.getCodigoRetorno() == null
								|| mensagemSMSFaturamentoCobranca
										.getCodigoRetorno()
										.compareTo(
												ConstantesSistema.CODIGO_RETORNO_GERADO) == 0) {
							mensagemSMSFaturamentoCobranca
									.setCodigoRetorno(ConstantesSistema.CODIGO_RETORNO_TRANSMITIDO);
							/*
							 * Atualiza o objeto mensagemSMSFaturamentoCobranca
							 * com quantidadeTentativas+1 e
							 * CODIGO_RETORNO_TRANSMITIDO [SB0003] Marcar
							 * registro transmitido
							 */
							repositorioUtil
									.atualizar(mensagemSMSFaturamentoCobranca);
						} else if (mensagemSMSFaturamentoCobranca
								.getCodigoRetorno() == null
								|| mensagemSMSFaturamentoCobranca
										.getCodigoRetorno()
										.compareTo(
												ConstantesSistema.CODIGO_RETORNO_ERRO_TRANSMISSAO) == 0
								|| mensagemSMSFaturamentoCobranca
										.getCodigoRetorno()
										.compareTo(
												ConstantesSistema.CODIGO_RETORNO_ERRO_OPERADORA) == 0) {
							if (mensagemSMSFaturamentoCobranca
									.getCodigoRetorno()
									.compareTo(
											ConstantesSistema.CODIGO_RETORNO_ERRO_TRANSMISSAO) == 0) {
								quantidadeInvalidado++;
							} else if (mensagemSMSFaturamentoCobranca
									.getCodigoRetorno()
									.compareTo(
											ConstantesSistema.CODIGO_RETORNO_ERRO_OPERADORA) == 0) {
								quantidadeErroEnvio++;
							}

							// Monta o objeto mensagemSMSHistorico
							mensagemSMSHistorico = montarObjetoMensagemSMSHistorico(mensagemSMSFaturamentoCobranca);

							/*
							 * Inserir o objeto na tabela de histórico com
							 * quantidadeTentativas+1 e
							 * CODIGO_RETORNO_ERRO_TRANSMISSAO ou
							 * CODIGO_RETORNO_ERRO_OPERADORA [SB0005] Incluir
							 * SMS com telefone inválido enviado na tabela de
							 * histórico
							 */
							repositorioUtil.inserir(mensagemSMSHistorico);

							// [SB0006] Excluir da tabela de mensagens de SMS
							repositorioUtil
									.remover(mensagemSMSFaturamentoCobranca);
						}

					}
				}
			}

			/*
			 * Atualiza quantidadeInvalidado e quantidadeErroEnvio
			 */
			if (numeroLote != null) {
				smsSequenciaEnvio.setId(numeroLote);
				smsSequenciaEnvio.setQuantidadeInvalidado(smsSequenciaEnvio
						.getQuantidadeInvalidado() + quantidadeInvalidado);
				smsSequenciaEnvio.setQuantidadeErroEnvio(smsSequenciaEnvio
						.getQuantidadeErroEnvio() + quantidadeErroEnvio);
				smsSequenciaEnvio.setUltimaAlteracao(new Date());
				repositorioUtil.atualizar(smsSequenciaEnvio);
			}

			// [FS0003] Limpar SMS pela data limite
			Collection colecaoRetornoDataLimite = repositorioCadastro
					.obterMensagemSMSFaturamentoCobrancaDataLimite(simpleDateFormat
							.format(dataCorrente));

			iterator = colecaoRetornoDataLimite.iterator();

			MensagemSMSHistorico mensagemSMSHistorico = null;

			while (iterator.hasNext()) {
				objeto = (Object[]) iterator.next();

				// Monta o objeto mensagemSMSFaturamentoCobranca
				mensagemSMSFaturamentoCobranca = montarObjetoMensagemSMSFaturamentoCobranca(
						objeto, numeroLote);
				mensagemSMSFaturamentoCobranca.setUltimaAlteracao(new Date());

				// Monta o objeto mensagemSMSHistorico
				mensagemSMSHistorico = montarObjetoMensagemSMSHistorico(mensagemSMSFaturamentoCobranca);

				// [SB0004] Atualizar histórico SMS pela data limite
				repositorioUtil.inserir(mensagemSMSHistorico);

				// [SB0006] Excluir da tabela de mensagens de SMS
				repositorioUtil.remover(mensagemSMSFaturamentoCobranca);
			}

			getControladorBatch().encerrarUnidadeProcessamentoBatch(null,
					idUnidadeIniciada, false);
		} catch (Exception ex) {
			sessionContext.setRollbackOnly();
			getControladorBatch().encerrarUnidadeProcessamentoBatch(ex,
					idUnidadeIniciada, true);
			ex.printStackTrace();
			throw new EJBException(ex);
		}
	}

	/**
	 * [UC1619] - Processar Retorno do SMS
	 * 
	 * @author Raphael Rossiter
	 * @date 06/08/2014
	 * 
	 * @param idFuncionalidadeIniciada
	 * @throws ControladorException
	 */
	public void retornoSMSEmLote(Integer idFuncionalidadeIniciada)
			throws ControladorException {

		int idUnidadeIniciada = 0;

		/*
		 * Registrar o início do processamento da Unidade de Processamento do
		 * Batch
		 */
		idUnidadeIniciada = getControladorBatch()
				.iniciarUnidadeProcessamentoBatch(idFuncionalidadeIniciada,
						UnidadeProcessamento.FUNCIONALIDADE, 0);

		try {

			// [FS0001] - Gerar Lista de Lotes de SMS pendentes
			Collection<Integer[]> colecaoSequencialSMSEnvio = this.repositorioCadastro
					.pesquisarLotesSMSPendentes();

			if (colecaoSequencialSMSEnvio != null
					&& !colecaoSequencialSMSEnvio.isEmpty()) {

				Iterator it = colecaoSequencialSMSEnvio.iterator();
				SMSSequenciaEnvio smsSequenciaEnvio = null;

				while (it.hasNext()) {

					Object[] sequencialSMS = (Object[]) it.next();

					smsSequenciaEnvio = new SMSSequenciaEnvio();
					smsSequenciaEnvio.setId((Integer) sequencialSMS[0]);

					Collection<BuscarSMSTWWHelper> colecaoBuscarSMSTWWHelper = this
							.buscarSMSTWW(smsSequenciaEnvio.getId());

					if (colecaoBuscarSMSTWWHelper != null
							&& !colecaoBuscarSMSTWWHelper.isEmpty()) {

						Iterator itColecaoBuscarSMSTWWHelper = colecaoBuscarSMSTWWHelper
								.iterator();

						while (itColecaoBuscarSMSTWWHelper.hasNext()) {

							BuscarSMSTWWHelper buscarSMSTWWHelper = (BuscarSMSTWWHelper) itColecaoBuscarSMSTWWHelper
									.next();
							MensagemSMSHistorico mensagemSMSHistorico = null;

							// IDENTIFICANDO O TELEFONE ENVIADO
							FiltroMensagemSMSFaturamentoCobranca filtro = new FiltroMensagemSMSFaturamentoCobranca();

							filtro.adicionarParametro(new ParametroSimples(
									FiltroMensagemSMSFaturamentoCobranca.ID_SMSSEQUENCIAENVIO,
									smsSequenciaEnvio.getId()));
							filtro.adicionarParametro(new ParametroSimples(
									FiltroMensagemSMSFaturamentoCobranca.NUMERO_TELEFONE_DESTINO,
									buscarSMSTWWHelper.getNumeroTelefone()
											.trim()));
							filtro.adicionarCaminhoParaCarregamentoEntidade("acaoCobranca");
							filtro.adicionarCaminhoParaCarregamentoEntidade("parametroMensagemSMSEmail");

							Collection colecaoMensagemSMSFaturamentoCobranca = this
									.getControladorUtil()
									.pesquisar(
											filtro,
											MensagemSMSFaturamentoCobranca.class
													.getName());

							if (colecaoMensagemSMSFaturamentoCobranca != null
									&& !colecaoMensagemSMSFaturamentoCobranca
											.isEmpty()) {

								MensagemSMSFaturamentoCobranca mensagemSMSFaturamentoCobranca = (MensagemSMSFaturamentoCobranca) Util
										.retonarObjetoDeColecao(colecaoMensagemSMSFaturamentoCobranca);
								mensagemSMSFaturamentoCobranca
										.setSmsSequenciaEnvio(smsSequenciaEnvio);

								switch (buscarSMSTWWHelper.getStatus()) {
								case MensagemSMSFaturamentoCobranca.ENVIADO:

									// [SB0001] - Incluir SMS enviado na tabela
									// de histórico
									// [SB0002] - Excluir da tabela de mensagens
									// de SMS
									mensagemSMSHistorico = this
											.transferirSMSParaHistorico(
													mensagemSMSFaturamentoCobranca,
													MensagemSMSFaturamentoCobranca.ENVIADO);

									// [SB0007] - Atualizar total SMS enviados
									this.atualizarTotalSMSEnviado(mensagemSMSHistorico);

									break;

								default:

									// [SB0003] - Atualizar erro no envio SMS
									mensagemSMSHistorico = this
											.atualizarErroEnvioSMS(
													mensagemSMSFaturamentoCobranca,
													mensagemSMSFaturamentoCobranca
															.getParametroMensagemSMSEmail());

									break;
								}
							}
						}
					}
				}
			}

			getControladorBatch().encerrarUnidadeProcessamentoBatch(null,
					idUnidadeIniciada, false);

		} catch (Exception ex) {
			ex.printStackTrace();
			getControladorBatch().encerrarUnidadeProcessamentoBatch(ex,
					idUnidadeIniciada, true);
			throw new EJBException(ex);
		}
	}

	/**
	 * [UC1619] - Processar Retorno do SMS
	 * 
	 * [SB0003] - Atualizar erro no envio SMS
	 * 
	 * @author Raphael Rossiter
	 * @date 06/08/2014
	 * 
	 * @param SMSSequenciaEnvio
	 * @param telefone
	 * @return MensagemSMSHistorico
	 * @throws ControladorException
	 */
	public MensagemSMSHistorico atualizarErroEnvioSMS(
			MensagemSMSFaturamentoCobranca mensagemSMSFaturamentoCobranca,
			ParametrosMSGSMSEmail parametrosMSGSMSEmail)
			throws ControladorException {

		MensagemSMSHistorico mensagemSMSHistorico = null;

		try {

			// [SB0004] - Incluir SMS com erro na tabela de histórico
			// [SB0002] - Excluir da tabela de mensagens de SMS
			mensagemSMSHistorico = this.transferirSMSParaHistorico(
					mensagemSMSFaturamentoCobranca,
					MensagemSMSFaturamentoCobranca.ERRO_OPERADORA);

			// [SB0006] - Atualizar contador de erro no envio por lote
			this.atualizarTotalSMSErro(mensagemSMSFaturamentoCobranca
					.getSmsSequenciaEnvio());

			// [SB0005] - Atualizar Tentativas de envio SMS
			this.atualizarTotalSMSTentativa(mensagemSMSFaturamentoCobranca);

		} catch (Exception ex) {
			ex.printStackTrace();
			sessionContext.setRollbackOnly();
			throw new ControladorException("erro.sistema", ex);
		}

		return mensagemSMSHistorico;
	}

	/**
	 * [UC1619] - Processar Retorno do SMS
	 * 
	 * [SB0001] - Incluir SMS enviado na tabela de histórico [SB0002] - Excluir
	 * da tabela de mensagens de SMS [SB0004] - Incluir SMS com erro na tabela
	 * de histórico
	 * 
	 * @author Raphael Rossiter
	 * @date 06/08/2014
	 * 
	 * @param SMSSequenciaEnvio
	 * @param telefone
	 * @return MensagemSMSHistorico
	 * @throws ControladorException
	 */
	public MensagemSMSHistorico transferirSMSParaHistorico(
			MensagemSMSFaturamentoCobranca mensagemSMSFaturamentoCobranca,
			Integer codigoRetorno) throws ControladorException {

		MensagemSMSHistorico mensagemSMSHistorico = null;

		try {

			// [SB0001] - Incluir SMS enviado na tabela de histórico
			mensagemSMSHistorico = new MensagemSMSHistorico();

			mensagemSMSHistorico.setCliente(mensagemSMSFaturamentoCobranca
					.getCliente());
			mensagemSMSHistorico.setConta(mensagemSMSFaturamentoCobranca
					.getConta());
			mensagemSMSHistorico
					.setParametroMensagemSMSEmail(mensagemSMSFaturamentoCobranca
							.getParametroMensagemSMSEmail());
			mensagemSMSHistorico.setAcaoCobranca(mensagemSMSFaturamentoCobranca
					.getAcaoCobranca());
			mensagemSMSHistorico
					.setDescricaoMensagem(mensagemSMSFaturamentoCobranca
							.getDescricaoMensagem());
			mensagemSMSHistorico
					.setNumeroTelefoneDestino(mensagemSMSFaturamentoCobranca
							.getNumeroTelefoneDestino());
			mensagemSMSHistorico
					.setDataPrevisaoEnvio(mensagemSMSFaturamentoCobranca
							.getDataPrevisaoEnvio());
			mensagemSMSHistorico
					.setDataLimiteEnvio(mensagemSMSFaturamentoCobranca
							.getDataLimiteEnvio());

			if (codigoRetorno.equals(MensagemSMSFaturamentoCobranca.ENVIADO)) {
				mensagemSMSHistorico.setDataEnvio(new Date());
			} else {
				mensagemSMSHistorico.setDataEnvio(null);
			}

			mensagemSMSHistorico
					.setGrupoFaturamento(mensagemSMSFaturamentoCobranca
							.getGrupoFaturamento());
			mensagemSMSHistorico
					.setCobrancaAcaoAtividadeComando(mensagemSMSFaturamentoCobranca
							.getCobrancaAcaoAtividadeComando());
			mensagemSMSHistorico
					.setCobrancaDocumento(mensagemSMSFaturamentoCobranca
							.getCobrancaDocumento());

			if (mensagemSMSFaturamentoCobranca.getQuantidadeTentativasEnvio() != null) {
				mensagemSMSHistorico
						.setQuantidadeTentativasEnvio(mensagemSMSFaturamentoCobranca
								.getQuantidadeTentativasEnvio() + 1);
			} else {
				mensagemSMSHistorico.setQuantidadeTentativasEnvio(1);
			}

			mensagemSMSHistorico.setUltimaAlteracao(new Date());
			mensagemSMSHistorico
					.setSmsSequenciaEnvio(mensagemSMSFaturamentoCobranca
							.getSmsSequenciaEnvio());

			if (codigoRetorno.equals(MensagemSMSFaturamentoCobranca.ENVIADO)) {
				mensagemSMSHistorico
						.setCodigoRetorno(MensagemSMSFaturamentoCobranca.ENVIADO);
			} else {
				mensagemSMSHistorico
						.setCodigoRetorno(MensagemSMSFaturamentoCobranca.ERRO_OPERADORA);
			}

			mensagemSMSHistorico
					.setAnoMesReferenciaConta(mensagemSMSFaturamentoCobranca
							.getAnoMesReferenciaConta());

			this.getControladorUtil().inserir(mensagemSMSHistorico);

			// [SB0002] - Excluir da tabela de mensagens de SMS
			this.getControladorUtil().remover(mensagemSMSFaturamentoCobranca);

		} catch (Exception ex) {
			ex.printStackTrace();
			sessionContext.setRollbackOnly();
			throw new ControladorException("erro.sistema", ex);
		}

		return mensagemSMSHistorico;
	}

	/**
	 * [UC1619] - Processar Retorno do SMS
	 * 
	 * [SB0007] - Atualizar total SMS enviados
	 * 
	 * @author Raphael Rossiter
	 * @date 06/08/2014
	 * 
	 * @param mensagemSMSHistorico
	 * @throws ControladorException
	 */
	public void atualizarTotalSMSEnviado(
			MensagemSMSHistorico mensagemSMSHistorico)
			throws ControladorException {

		try {

			if (mensagemSMSHistorico.getCobrancaAcaoAtividadeComando() != null) {

				this.repositorioCadastro
						.atualizarTotalSMSEnviado(mensagemSMSHistorico
								.getCobrancaAcaoAtividadeComando());
			}

		} catch (Exception ex) {
			ex.printStackTrace();
			throw new ControladorException("erro.sistema", ex);
		}
	}

	/**
	 * [UC1619] - Processar Retorno do SMS
	 * 
	 * [SB0006] - Atualizar contador de erro no envio por lote
	 * 
	 * @author Raphael Rossiter
	 * @date 11/08/2014
	 * 
	 * @param mensagemSMSHistorico
	 * @throws ControladorException
	 */
	public void atualizarTotalSMSErro(SMSSequenciaEnvio smsSequenciaEnvio)
			throws ControladorException {

		try {

			this.repositorioCadastro.atualizarTotalSMSErro(smsSequenciaEnvio);

		} catch (Exception ex) {
			ex.printStackTrace();
			throw new ControladorException("erro.sistema", ex);
		}
	}

	/**
	 * [UC1619] - Processar Retorno do SMS
	 * 
	 * [SB0005] - Atualizar Tentativas de envio SMS
	 * 
	 * @author Raphael Rossiter
	 * @date 11/08/2014
	 * 
	 * @param mensagemSMSFaturamentoCobranca
	 * @throws ControladorException
	 */
	public void atualizarTotalSMSTentativa(
			MensagemSMSFaturamentoCobranca mensagemSMSFaturamentoCobranca)
			throws ControladorException {

		try {

			this.repositorioCadastro
					.atualizarTotalSMSTentativa(mensagemSMSFaturamentoCobranca);

		} catch (Exception ex) {
			ex.printStackTrace();
			throw new ControladorException("erro.sistema", ex);
		}
	}

	/**
	 * [UC1618] - Enviar SMS em lote
	 * 
	 * @author Rodrigo Cabral
	 * @date 24/09/2014
	 * 
	 * @throws ErroRepositorioException
	 */
	public ContaEmpresaSMS recuperarDadosContaEmpresaSMS()
			throws ControladorException {

		ContaEmpresaSMS retorno = null;
		try {
			retorno = this.repositorioCadastro.recuperarDadosContaEmpresaSMS();

			if (retorno == null) {
				throw new ControladorException(
						"atencao.nao_existe_conta_ativa_sms");
			}

		} catch (ErroRepositorioException e) {
			e.printStackTrace();
		}

		return retorno;

	}

	/**
	 * @author Diogo Luiz
	 * @date 26/08/2014
	 * 
	 * @param idLocalidade
	 * @param codigoSetorComercial
	 * @param quadrasSelecionadas
	 * @param colecaoLigacaoAguaSituacao
	 * @param clienteUsuario
	 * @param indicadorSituacaoImovel
	 * @return
	 * @throws ControladorException
	 */
	public Collection<ImoveisRoteiroDispositivoMovelDMHelper> pesquisarImoveisRoteiroDispositivoMovel(
			String idLocalidade, String codigoSetorComercial,
			Collection<Integer> quadrasSelecionadas,
			Collection<Integer> colecaoLigacaoAguaSituacao,
			String clienteUsuario, String[] indicadorSituacaoImovel)
			throws ControladorException {

		try {
			ImoveisRoteiroDispositivoMovelDMHelper helper = null;

			Collection<ImoveisRoteiroDispositivoMovelDMHelper> retorno = new ArrayList<ImoveisRoteiroDispositivoMovelDMHelper>();

			Collection<Object[]> colecaoImoveis = repositorioImovel
					.pesquisarImoveisRoteiroDispositivoMovel(idLocalidade,
							codigoSetorComercial, quadrasSelecionadas,
							colecaoLigacaoAguaSituacao, clienteUsuario,
							indicadorSituacaoImovel);

			if (!Util.isVazioOrNulo(colecaoImoveis)) {
				Iterator<Object[]> it = colecaoImoveis.iterator();

				while (it.hasNext()) {
					helper = new ImoveisRoteiroDispositivoMovelDMHelper();

					Object[] array = (Object[]) it.next();

					Integer idImovel = (Integer) array[0];
					Integer localidade = (Integer) array[1];
					Integer codigoSetor = (Integer) array[2];
					Integer numeroQuadra = (Integer) array[3];
					Short lote = (Short) array[4];
					Short subLote = (Short) array[5];
					Short rota = (Short) array[6];

					Integer intLote = Integer.parseInt(lote.toString());
					Integer intSubLote = Integer.parseInt(subLote.toString());

					helper.setIdImovel(String.valueOf(idImovel));
					helper.setInsricaoImovel(this.imovelInscricaoFormatada(
							localidade, codigoSetor, numeroQuadra, intLote,
							intSubLote));
					helper.setSetor(String.valueOf(codigoSetor));
					helper.setQuadra(String.valueOf(numeroQuadra));
					helper.setRota(String.valueOf(rota));
					helper.setLote(String.valueOf(lote));
					helper.setSubLote(String.valueOf(subLote));
					helper.setIndicadorResetorizacao(String
							.valueOf(ConstantesSistema.NAO));

					retorno.add(helper);
				}
			}

			return retorno;

		} catch (ErroRepositorioException e) {
			throw new ControladorException("erro.sistema", e);
		}
	}

	private String imovelInscricaoFormatada(Integer loc, Integer setor,
			Integer qd, Integer lt, Integer subLt) {
		String inscricao = "";

		String zeroUm = "0";
		String zeroDois = "00";
		String zeroTres = "000";

		String localidade, setorComercial, quadra, lote, subLote;

		localidade = String.valueOf(loc);
		setorComercial = String.valueOf(setor);
		quadra = String.valueOf(qd);
		lote = String.valueOf(lt);
		subLote = String.valueOf(subLt);

		if (String.valueOf(loc).length() < 3
				&& String.valueOf(loc).length() > 1) {
			localidade = zeroUm + loc;
		} else if (String.valueOf(loc).length() < 3) {
			localidade = zeroDois + loc;
		}

		if (String.valueOf(setor).length() < 3
				&& String.valueOf(setor).length() > 1) {
			setorComercial = zeroUm + setor;
		} else if (String.valueOf(setor).length() < 3) {
			setorComercial = zeroDois + setor;
		}

		if (String.valueOf(qd).length() < 3 && String.valueOf(qd).length() > 1) {
			quadra = zeroUm + qd;
		} else if (String.valueOf(qd).length() < 3) {
			quadra = zeroDois + qd;
		}

		if (String.valueOf(lt).length() < 4 && String.valueOf(lt).length() > 2) {
			lote = zeroUm + lt;
		} else if (String.valueOf(lt).length() < 3
				&& String.valueOf(lt).length() > 1) {
			lote = zeroDois + lt;
		} else if (String.valueOf(lt).length() < 2) {
			lote = zeroTres + lt;
		}

		if (String.valueOf(subLt).length() < 3
				&& String.valueOf(subLt).length() > 1) {
			subLote = zeroUm + subLt;
		} else if (String.valueOf(subLt).length() < 3) {
			subLote = zeroDois + subLt;
		}

		inscricao = localidade + "." + setorComercial + "." + quadra + "."
				+ lote + "." + subLote;

		return inscricao;
	}

	/**
	 * [UC 1391] - Gerar Roteiro Dispositivo Movel Atualização Cadastral
	 * 
	 * @author Diogo Luiz
	 * @date 26/08/2014
	 */
	public void gerarRoteiroDispositivoMovel(Integer idFuncionalidadeIniciada,
			Collection<String> colecaoImoveis,
			ComandoAtualizacaoCadastralDMHelper helper)
			throws ControladorException {

		int idUnidadeIniciada = 0;

		try {
			/*
			 * Registrar o início do processamento da Unidade de Processamento
			 * do Batch
			 */
			idUnidadeIniciada = getControladorBatch()
					.iniciarUnidadeProcessamentoBatch(idFuncionalidadeIniciada,
							UnidadeProcessamento.FUNCIONALIDADE, 0);

			System.out
					.println("******************************************************");
			System.out
					.println("GERAR ROTEIRO DISPOSITIVO MOVEL ATUALIZAÇÃO CADASTRAL ");
			System.out
					.println("******************************************************");

			// [SB0001] Gerar Comando de Atualização Cadastral
			// Montar Dados do Parametro Tabela Atualização Cadastral
			ParametroTabelaAtualizacaoCadastralDM parametro = new ParametroTabelaAtualizacaoCadastralDM();
			parametro.setEmpresa(helper.getEmpresa());
			parametro.setLocalidade(helper.getLocalidade());
			parametro.setCodigoSetorComercial(helper.getCodigoSetorComercial());
			parametro.setUsuario(helper.getUsuarioLogado());
			parametro.setUltimaAlteracao(new Date());

			// Inserir Parametro Tabela Atualizacao Cadastral
			Integer idParametro = (Integer) getControladorUtil().inserir(
					parametro);
			parametro.setId(idParametro);

			System.out.println("ID Parametro Tabela Atualização Cadastral: "
					+ idParametro);

			Set<Integer> colecaoSetores = new HashSet<Integer>();

			// Inserir as Quadras na tabela Roteiro_quadra_atlz_cad
			Integer[] idsQuadras = helper.getQuadrasSelecionadas();

			if (idsQuadras != null) {
				for (Integer id : idsQuadras) {
					ParametroQuadraAtualizacaoCadastralDM roteiroQuadraAtlzCad = new ParametroQuadraAtualizacaoCadastralDM();
					roteiroQuadraAtlzCad.setNumeroQuadra(id);
					roteiroQuadraAtlzCad
							.setParametroTabelaAtualizacaoCadastralDM(parametro);
					roteiroQuadraAtlzCad.setUltimaAlteracao(new Date());

					getControladorUtil().inserir(roteiroQuadraAtlzCad);
				}
			}

			if (!Util.isVazioOrNulo(colecaoImoveis)) {

				// Gerar Tabelas Temporárias
				this.gerarTabelasTemporarias(colecaoImoveis,
						helper.getEmpresa(), parametro);

				Collection<Integer> colecaoIdImoveis = new ArrayList<Integer>();

				Iterator iteratorImovel = colecaoImoveis.iterator();
				while (iteratorImovel.hasNext()) {
					String auxiliar = (String) iteratorImovel.next();

					// System.out.println("Imovel - " + auxiliar);

					StringTokenizer stk = new StringTokenizer(auxiliar, "/");
					List<String> colArquivos = new ArrayList<String>();

					while (stk.hasMoreTokens()) {
						colArquivos.add(stk.nextToken());
					}

					Integer idImovel = Integer.parseInt(colArquivos.get(0));
					colecaoIdImoveis.add(idImovel);
				}

				// Data Atual
				Integer diaAtual = Util.getDiaMes(new Date());
				String anoMesAtual = Util.getAnoMesComoString(new Date());

				// Descrição do Arquivo de Atualização Cadastral
				String descricaoArquivo = String.valueOf(idParametro)
						+ anoMesAtual + String.valueOf(diaAtual) + ".txt";

				// ID Leiturista
				Integer idLeiturista = null;

				if (helper.getLeiturista() != null
						&& !helper.getLeiturista().getId()
								.equals(new Integer("-1"))) {
					idLeiturista = helper.getLeiturista().getId();
				} else {
					Leiturista leiturista = new Leiturista();
					helper.setLeiturista(leiturista);
				}

				// Gerar Arquivo Texto
				StringBuilder retorno = new StringBuilder("");

				// Registro Tipo 19 - Sistema Parâmetro
				retorno.append(this.gerarRegistroTipo19AC(idLeiturista,
						parametro.getLocalidade().getId(), parametro
								.getCodigoSetorComercial(), idParametro,
						colecaoImoveis.size(), descricaoArquivo, helper
								.getEmpresa().getId()));

				// Registro Tipo 1 - Bairro | Tipo 2 cep | tipo 3 Logradouro
				// |tipo 4 Logradouro bairro |
				// tipo 5 Logradouro cep |
				retorno.append(this.gerarRegistroTipo1AC(colecaoIdImoveis,
						parametro.getLocalidade().getId(),
						parametro.getCodigoSetorComercial()));

				// Registro Tipo 28 - Imovel perfil
				retorno.append(this.gerarRegistroTipo28AC());

				// Registro Tipo 29 - Quadra
				retorno.append(this.gerarRegistroTipo29AC(parametro
						.getLocalidade().getId(), parametro
						.getCodigoSetorComercial(), colecaoSetores));

				// Registro Tipo 30 - Cadastro Ocorrencia
				retorno.append(this.gerarRegistroTipo30AC());

				// Registro Tipo 31 - Unidade Federecao
				retorno.append(this.gerarRegistroTipo31AC());

				// Registro Tipo 32 - Hidrometro Marca
				retorno.append(this.gerarRegistroTipo32AC());

				// Registro Tipo 33 - Hidrometro Capacidade
				retorno.append(this.gerarRegistroTipo33AC());

				// Registro Tipo 34 - Cliente Tipo
				retorno.append(this.gerarRegistroTipo34AC());

				// Registro Tipo 35 - Medicao Tipo
				retorno.append(this.gerarRegistroTipo35AC());

				// Registro Tipo 6 - Pavimento Rua
				retorno.append(this.gerarRegistroTipo6AC());

				// Registro Tipo 5 - Pavimento Calçada
				retorno.append(this.gerarRegistroTipo7AC());

				// Registro Tipo 8 - Fonte Abastecimento
				retorno.append(this.gerarRegistroTipo8AC());

				// Registro Tipo 9 - Categoria
				retorno.append(this.gerarRegistroTipo9AC());

				// Registro Tipo 10 - SubCategoria
				retorno.append(this.gerarRegistroTipo10AC());

				// Registro Tipo 11 - Ligação Água Situação
				retorno.append(this.gerarRegistroTipo11AC());

				// Registro Tipo 12 - Ligação Esgoto Situação
				retorno.append(this.gerarRegistroTipo12AC());

				// Registro Tipo 13 - Hidrômetro Local Instalação
				retorno.append(this.gerarRegistroTipo13AC());

				// Registro Tipo 14 - Hidrômetro Proteção
				retorno.append(this.gerarRegistroTipo14AC());

				// Registro Tipo 15 - Orgão Expedidor RG
				retorno.append(this.gerarRegistroTipo15AC());

				// Registro Tipo 16 - Endereço Referência
				retorno.append(this.gerarRegistroTipo16AC());

				// Registro Tipo 15 - Pessoa Sexo
				retorno.append(this.gerarRegistroTipo17AC());

				// Registro Tipo 18 - Fone Tipo
				retorno.append(this.gerarRegistroTipo18AC());

				// Registro Tipo 20 - Imovel Atualização Cadastral
				retorno.append(this.gerarRegistroTipo20AC(idParametro));

				// Registro Tipo 36 - Setor Comercial
				if (Util.isVazioOrNulo(colecaoSetores)
						&& parametro.getCodigoSetorComercial() != null) {
					colecaoSetores.add(parametro.getCodigoSetorComercial());
				}
				retorno.append(this.gerarRegistroTipo36AC(colecaoSetores,
						parametro.getLocalidade().getId()));

				// Registro Tipo 38 - Leitura Anormalidade
				retorno.append(this.gerarRegistroTipo38AC());

				// Ultimo registro a ser enviado, indicador informando que o
				// arquivo foi carregado com sucesso.
				StringBuilder ultimoRegistro = new StringBuilder();
				ultimoRegistro.append("37|");
				ultimoRegistro.append("1");
				ultimoRegistro.append("\n");

				// adiciona o ultimo registro ao arquivo
				retorno.append(ultimoRegistro);

				// Situação do Arquivo - Disponível
				SituacaoTransmissaoAtualizacaoCadastralDM situacaoTransmissao = new SituacaoTransmissaoAtualizacaoCadastralDM(
						SituacaoTransmissaoAtualizacaoCadastralDM.DISPONIVEL);

				// Montar Dados da Atualização Cadastral Arquivo Texto
				ArquivoTextoAtualizacaoCadastralDM atualizacaoCadastralArquivoTexto = new ArquivoTextoAtualizacaoCadastralDM();
				atualizacaoCadastralArquivoTexto.setArquivoTexto(retorno
						.toString().getBytes());
				atualizacaoCadastralArquivoTexto
						.setDescricaoArquivo(descricaoArquivo);
				atualizacaoCadastralArquivoTexto
						.setQuantidadeImovel(colecaoImoveis.size());
				atualizacaoCadastralArquivoTexto.setDataArquivoLiberado(null);
				atualizacaoCadastralArquivoTexto
						.setParametroTabelaAtualizacaoCadastralDM(parametro);
				atualizacaoCadastralArquivoTexto
						.setSituacaoTransmissao(situacaoTransmissao);
				atualizacaoCadastralArquivoTexto.setLeiturista(helper
						.getLeiturista());
				atualizacaoCadastralArquivoTexto.setUltimaAlteracao(new Date());

				// Inserir a Atualização Cadastral Arquivo Texto
				getControladorUtil().inserir(atualizacaoCadastralArquivoTexto);

			}

			getControladorBatch().encerrarUnidadeProcessamentoBatch(null,
					idUnidadeIniciada, false);

			System.out
					.println("******* FIM GERAR ROTEIRO DISPOSITIVO MOVEL ATUALIZAÇÃO CADASTRAL **********");

		} catch (Exception e) {
			e.printStackTrace();
			getControladorBatch().encerrarUnidadeProcessamentoBatch(e,
					idUnidadeIniciada, true);
			throw new EJBException(e);
		}
	}

	/**
	 * [UC 1391] - Gerar Roteiro Dispositivo Móvel
	 * 
	 * @author Diogo Luiz
	 * @throws ErroRepositorioException
	 * @date 27/08/2014
	 */
	public void gerarTabelasTemporarias(Collection colecaoIdsImovel,
			Empresa empresa, ParametroTabelaAtualizacaoCadastralDM parametro)
			throws ControladorException, ErroRepositorioException {

		if (!Util.isVazioOrNulo(colecaoIdsImovel)) {
			ClienteAtualizacaoCadastralDM clienteAtualizacaoCadastralProprietario = null;
			ClienteAtualizacaoCadastralDM clienteAtualizacaoCadastralUsuario = null;

			Iterator iteratorImovel = colecaoIdsImovel.iterator();
			while (iteratorImovel.hasNext()) {
				String auxiliar = (String) iteratorImovel.next();

				StringTokenizer stk = new StringTokenizer(auxiliar, "/");
				List<String> colArquivos = new ArrayList<String>();

				while (stk.hasMoreTokens()) {
					colArquivos.add(stk.nextToken());
				}

				Integer idImovel = Integer.parseInt(colArquivos.get(0));
				// Integer indicadorResetorizacao =
				// Integer.parseInt(colArquivos.get(1));

				System.out.println("Imóvel: " + idImovel);

				ImovelAtualizacaoCadastralDM imovelAtualizacaoCadastral = null;
				Integer idImovelAtuCadastral = null;

				// [UC1261][SB0003]-Incluir Imoveis na Tabela Temporaria
				// 1.1. Caso o imóvel seja retornado para campo (exista registro
				// na tabela CADASTRO.IMOVEL_ATLZ_CADASTRAL
				// com IMOV_ID = id do imóvel selecionado e IMAC_ICDADOSRETORNO
				// = 1 e IMAC_CDSITUACAO = 2)
				// pesquisar os dados a partir da tabela
				// CADASTRO.IMOVEL_ATLZ_CADASTRAL,
				// caso exista mais de um registro na tabela, seleciona o
				// registro com maior IMAC_ID.
				FiltroImovelAtualizacaoCadastralDM filtroImovelAtualizacaoCadastral = new FiltroImovelAtualizacaoCadastralDM();
				filtroImovelAtualizacaoCadastral
						.adicionarParametro(new ParametroSimples(
								FiltroImovelAtualizacaoCadastralDM.ID_IMOVEL,
								idImovel));
				filtroImovelAtualizacaoCadastral
						.adicionarParametro(new ParametroSimples(
								FiltroImovelAtualizacaoCadastralDM.INDICADOR_DADOS_RETORNO,
								ConstantesSistema.SIM));
				filtroImovelAtualizacaoCadastral
						.adicionarParametro(new ParametroSimples(
								FiltroImovelAtualizacaoCadastralDM.CODIGO_SITUACAO,
								ConstantesSistema.NAO));
				filtroImovelAtualizacaoCadastral
						.setCampoOrderBy(FiltroImovelAtualizacaoCadastralDM.ID);

				Collection<ImovelAtualizacaoCadastralDM> colecaoimovelAtuCadastral = (Collection<ImovelAtualizacaoCadastralDM>) getControladorUtil()
						.pesquisar(filtroImovelAtualizacaoCadastral,
								ImovelAtualizacaoCadastralDM.class.getName());

				if (colecaoimovelAtuCadastral != null
						&& !colecaoimovelAtuCadastral.isEmpty()) {
					LinkedList<ImovelAtualizacaoCadastralDM> listaImovelAtuCadastral = new LinkedList<ImovelAtualizacaoCadastralDM>(
							colecaoimovelAtuCadastral);
					imovelAtualizacaoCadastral = listaImovelAtuCadastral
							.getLast();
				}

				if (imovelAtualizacaoCadastral != null
						&& imovelAtualizacaoCadastral.getId() != null
						&& imovelAtualizacaoCadastral.getId().intValue() != 0) {
					idImovelAtuCadastral = imovelAtualizacaoCadastral.getId();

					imovelAtualizacaoCadastral.setId(null);
					imovelAtualizacaoCadastral
							.setIndicadorRegistroExcluido(ConstantesSistema.NAO);
					imovelAtualizacaoCadastral
							.setIndicadorPendente(ConstantesSistema.NAO);
					imovelAtualizacaoCadastral
							.setIndicadorDadosRetorno(ConstantesSistema.NAO);
					imovelAtualizacaoCadastral.setCodigoImovel(null);
					imovelAtualizacaoCadastral.setCodigoSituacao(null);
					imovelAtualizacaoCadastral.setLogin(null);
					imovelAtualizacaoCadastral.setDataVisita(null);
					imovelAtualizacaoCadastral
							.setDataRecebimentoMovimento(null);
					imovelAtualizacaoCadastral.setUltimaAlteracao(new Date());

				} else {
					// 1.2. Caso contrario para cada imóvel selecionado incluir
					// nas tabelas relacionadas com o imóvel os dados a partir
					// da tabela cadastro.imovel
					imovelAtualizacaoCadastral = this
							.obterImovelGeracaoTabelasTemporarias(idImovel,
									parametro);
				}

				Imovel imovel = new Imovel();

				imovel.setId(imovelAtualizacaoCadastral.getIdImovel());

				if (!imovelJaExisteImovelAtualizacaoCadastralDM(
						imovelAtualizacaoCadastral.getIdImovel(),
						imovelAtualizacaoCadastral
								.getParametroTabelaAtualizacaoCadastralDM()
								.getId())) {

					imovelAtualizacaoCadastral
							.setIndicadorAtualizado(ConstantesSistema.NAO);
					imovelAtualizacaoCadastral
							.setParametroTabelaAtualizacaoCadastralDM(parametro);

					Integer idImovelAtualizacaoCadastral = (Integer) getControladorUtil()
							.inserir(imovelAtualizacaoCadastral);

					imovelAtualizacaoCadastral
							.setId(idImovelAtualizacaoCadastral);

					// Imovel Subcategoria
					Collection<ImovelSubcategoriaAtualizacaoCadastralDM> imovelSubcategorias = null;
					// Caso o imovel seja retornado para campo pesquisar os
					// dados a partir
					// da tabela CADASTRO.IMOVEL_SUBCATG_ATLZ_CAD com IMAC_ID =
					// id do imovel atualização cadastral.
					if (idImovelAtuCadastral != null) {
						imovelSubcategorias = this
								.pesquisarSubCategoriaAtualizacaoCadastralDM(idImovelAtuCadastral);
					} else {
						imovelSubcategorias = obterImovelSubcategoriaAtualizacaoCadastral(idImovel);
					}

					for (ImovelSubcategoriaAtualizacaoCadastralDM imovSubAtual : imovelSubcategorias) {
						ImovelSubcategoriaAtualizacaoCadastralDM imovelSubCatAlzCadDM = new ImovelSubcategoriaAtualizacaoCadastralDM();

						imovSubAtual.setId(null);
						imovSubAtual
								.setImovelAtualizacaoCadastralDM(imovelAtualizacaoCadastral);
						imovSubAtual.setUltimaAlteracao(new Date());

						getControladorUtil().inserir(imovSubAtual);
					}

					// Cliente Usuario
					// Caso o imoovel seja retornado para campo pesquisar os
					// dados a partir
					// da tabela CADASTRO.CLIENTE_ATLZ_CADASTRAL com IMAC_ID =
					// id do imovel atualização cadastral.
					if (idImovelAtuCadastral != null) {
						Collection<ClienteAtualizacaoCadastralDM> colecaoCliente = repositorioCadastro
								.pesquisarClienteAtualizacaoCadastralClienteUsuario(idImovelAtuCadastral);

						clienteAtualizacaoCadastralUsuario = (ClienteAtualizacaoCadastralDM) Util
								.retonarObjetoDeColecao(colecaoCliente);

					} else {
						clienteAtualizacaoCadastralUsuario = getControladorCliente()
								.obterClientetuAlizacaoCadastralDM(idImovel,
										ClienteRelacaoTipo.USUARIO);
					}

					if (clienteAtualizacaoCadastralUsuario != null) {

						// inserindo valores obrigatórios no objeto cliente
						if (clienteAtualizacaoCadastralUsuario
								.getIndicadorDocumentacao() == null) {
							clienteAtualizacaoCadastralUsuario
									.setIndicadorDocumentacao(ConstantesSistema.NAO);
						}
						if (clienteAtualizacaoCadastralUsuario
								.getIndicadorProprietario() == null) {
							clienteAtualizacaoCadastralUsuario
									.setIndicadorProprietario(ConstantesSistema.NAO);
						}
						if (clienteAtualizacaoCadastralUsuario
								.getIndicadorResponsavel() == null) {
							clienteAtualizacaoCadastralUsuario
									.setIndicadorResponsavel(ConstantesSistema.NAO);
						}

						Integer idAntigoClienteAtualizacaoCadastral = clienteAtualizacaoCadastralUsuario
								.getId();

						clienteAtualizacaoCadastralUsuario.setId(null);
						clienteAtualizacaoCadastralUsuario
								.setImovelAtualizacaoCadastralDM(imovelAtualizacaoCadastral);
						clienteAtualizacaoCadastralUsuario
								.setUltimaAlteracao(new Date());

						Integer idClienteAtualizacaoCadastral = (Integer) getControladorUtil()
								.inserir(clienteAtualizacaoCadastralUsuario);

						// Cliente Fone Usuario
						// Caso o imovel seja retornado para campo pesquisar os
						// dados a partir da tabela
						// CADASTRO.CLIENTE_FONE_ATLZ_CAD com CLAC_ID = id do
						// cliente atualizacao Cadastral
						Collection clienteFonesAtualizacaoCadastral = null;
						if (idAntigoClienteAtualizacaoCadastral != null) {
							clienteFonesAtualizacaoCadastral = getControladorCliente()
									.obterDadosClienteFoneAtualizacaoCadastralDM(
											idAntigoClienteAtualizacaoCadastral);
						} else {
							clienteFonesAtualizacaoCadastral = getControladorCliente()
									.obterDadosClienteFone(
											clienteAtualizacaoCadastralUsuario
													.getIdCliente());
						}

						if (clienteFonesAtualizacaoCadastral != null
								&& !clienteFonesAtualizacaoCadastral.isEmpty()) {

							Iterator clienteFonesAtualizacaoCadastralIter = clienteFonesAtualizacaoCadastral
									.iterator();

							while (clienteFonesAtualizacaoCadastralIter
									.hasNext()) {

								ClienteFoneAtualizacaoCadastralDM clienteFoneAtualizacaoCadastral = (ClienteFoneAtualizacaoCadastralDM) clienteFonesAtualizacaoCadastralIter
										.next();

								ClienteAtualizacaoCadastralDM clienteAtualizacaoCadastral = new ClienteAtualizacaoCadastralDM();
								clienteAtualizacaoCadastral
										.setId(idClienteAtualizacaoCadastral);

								clienteFoneAtualizacaoCadastral.setId(null);
								clienteFoneAtualizacaoCadastral
										.setClienteAtualizacaoCadastralDM(clienteAtualizacaoCadastral);
								clienteFoneAtualizacaoCadastral
										.setUltimaAlteracao(new Date());
								getControladorUtil().inserir(
										clienteFoneAtualizacaoCadastral);
							}
						}
					}

					try {
						// Hidrometro Instalacao Historico
						// Caso o imovel seja retornado para campo pesquisar os
						// dados a partir da tabela
						// MICROMEDICAO.HIDROM_INST_HIST_ATL_CAD com IMAC_ID =
						// id do imovel atualizacao cadastral
						Collection colecaoDadosHidrometro = null;
						if (idImovelAtuCadastral != null) {
							colecaoDadosHidrometro = repositorioCadastro
									.pesquisarHidrometroInstalacaoHistoricoAtualizacaoCadastralDM(
											idImovelAtuCadastral, null);

							if (colecaoDadosHidrometro != null
									&& !colecaoDadosHidrometro.isEmpty()) {

								Iterator iteratorDadosHidrometro = colecaoDadosHidrometro
										.iterator();
								while (iteratorDadosHidrometro.hasNext()) {
									HidrometroInstalacaoHistoricoAtualizacaoCadastralDM hidrometroAtualizacaoCadastral = (HidrometroInstalacaoHistoricoAtualizacaoCadastralDM) iteratorDadosHidrometro
											.next();
									hidrometroAtualizacaoCadastral.setId(null);
									hidrometroAtualizacaoCadastral
											.setImovelAtualizacaoCadastralDM(imovelAtualizacaoCadastral);
									hidrometroAtualizacaoCadastral
											.setUltimaAlteracao(new Date());

									getControladorUtil().inserir(
											hidrometroAtualizacaoCadastral);
								}
							}

						} else {
							colecaoDadosHidrometro = repositorioCadastro
									.obterDadosHidrometroInstalacaoHistorico(idImovel);

							if (colecaoDadosHidrometro != null
									&& !colecaoDadosHidrometro.isEmpty()) {

								Iterator iteratorDadosHidrometro = colecaoDadosHidrometro
										.iterator();
								while (iteratorDadosHidrometro.hasNext()) {

									Object[] element = (Object[]) iteratorDadosHidrometro
											.next();

									HidrometroInstalacaoHistoricoAtualizacaoCadastralDM hidrometroAtualizacaoCadastral = new HidrometroInstalacaoHistoricoAtualizacaoCadastralDM();

									// numero do hidrometro
									if (element[0] != null) {
										hidrometroAtualizacaoCadastral
												.setNumeroHidrometro((String) element[0]);
									}

									// Data de instalacao hidrometro
									if (element[1] != null) {
										hidrometroAtualizacaoCadastral
												.setDataInstalacaoHidrometro((Date) element[1]);
									}

									// Medicao Tipo
									if (element[2] != null) {
										MedicaoTipo medicaoTipo = new MedicaoTipo();
										medicaoTipo.setId((Integer) element[2]);

										hidrometroAtualizacaoCadastral
												.setMedicaoTipo(medicaoTipo);
									}

									// Hidrometro Local instalacao
									if (element[3] != null) {
										HidrometroLocalInstalacao hidrometroLocalInstalacao = new HidrometroLocalInstalacao();
										hidrometroLocalInstalacao
												.setId((Integer) element[3]);

										hidrometroAtualizacaoCadastral
												.setHidrometroLocalInstalacao(hidrometroLocalInstalacao);
									}

									// Hidrometro Protecao
									if (element[4] != null) {
										HidrometroProtecao hidrometroProtecao = new HidrometroProtecao();
										hidrometroProtecao
												.setId((Integer) element[4]);

										hidrometroAtualizacaoCadastral
												.setHidrometroProtecao(hidrometroProtecao);
									}

									// Leitura hidrometro
									if (element[5] != null) {
										hidrometroAtualizacaoCadastral
												.setNumeroInstalacaoHidrometro((Integer) element[5]);
									}

									// Imovel atualizacao cadastral
									hidrometroAtualizacaoCadastral
											.setImovelAtualizacaoCadastralDM(imovelAtualizacaoCadastral);

									// Ultima Alteracao
									hidrometroAtualizacaoCadastral
											.setUltimaAlteracao(new Date());

									getControladorUtil().inserir(
											hidrometroAtualizacaoCadastral);
								}
							}
						}

					} catch (ErroRepositorioException e) {
						e.printStackTrace();
					}

					// Atualizar Situacao Atualizacao Cadastral
					getControladorImovel()
							.atualizarImovelSituacaoAtualizacaoCadastral(
									idImovel,
									SituacaoAtualizacaoCadastral.BLOQUEADO);

					Integer idEmpresa = null;
					if (empresa != null) {
						idEmpresa = empresa.getId();
					}

					getControladorImovel()
							.atualizarImovelAtualizacaoCadastralSituacaoAtualizacaoCadastral(
									idImovel,
									SituacaoAtualizacaoCadastral.DISPONIVEL,
									idEmpresa, parametro.getId());
				}
			}
		}
	}

	// Método para verificar se já existe o Imóvel no banco
	public Boolean imovelJaExisteImovelAtualizacaoCadastralDM(Integer idImovel,
			Integer idParametro) throws ControladorException {

		Boolean retorno = false;
		Integer idImovelAtualizacaoCadastral = getControladorImovel()
				.verificaExistenciaImovelAtualizacaoCadastralDM(idImovel,
						idParametro);

		if (idImovelAtualizacaoCadastral != null) {
			retorno = true;
		}

		return retorno;
	}

	/**
	 * [UC0831] Gerar Tabelas para Atualização Cadastral via celular
	 * 
	 * @author Diogo Luiz
	 * @date 27/08/2014
	 */
	public ImovelAtualizacaoCadastralDM obterImovelGeracaoTabelasTemporarias(
			Integer idImovel, ParametroTabelaAtualizacaoCadastralDM parametro)
			throws ControladorException {

		ImovelAtualizacaoCadastralDM imovelAtualizacaoCadastral = null;

		try {

			Object[] element = repositorioCadastro
					.obterImovelGeracaoTabelasTemporarias(idImovel);

			// Imóvel
			imovelAtualizacaoCadastral = new ImovelAtualizacaoCadastralDM();
			if (element != null) {

				// Id Imóvel
				Imovel imovel = new Imovel();
				imovel.setId((Integer) element[0]);
				imovelAtualizacaoCadastral.setIdImovel(imovel.getId());

				// Localidade
				if (element[1] != null) {
					Localidade localidade = new Localidade();
					localidade.setId((Integer) element[1]);

					imovelAtualizacaoCadastral.setLocalidade(localidade);
				}

				// Setor Comercial
				if (element[2] != null) {
					imovelAtualizacaoCadastral
							.setCodigoSetorComercial((Integer) element[2]);
				}

				// Quadra
				if (element[3] != null) {
					imovelAtualizacaoCadastral
							.setNumeroQuadra((Integer) element[3]);
				}

				// Lote
				if (element[4] != null) {
					imovelAtualizacaoCadastral
							.setNumeroLote((Integer) element[4]);
				}

				// SubLote
				if (element[5] != null) {
					imovelAtualizacaoCadastral
							.setNumeroSubLote((Integer) element[5]);
				}

				// Código Logradouro
				if (element[8] != null) {
					imovelAtualizacaoCadastral
							.setIdLogradouro(((Integer) element[8]).longValue());
				} else if (element[9] != null) {
					imovelAtualizacaoCadastral
							.setIdLogradouro(((Integer) element[9]).longValue());
				}

				// Observação
				imovelAtualizacaoCadastral.setObservacao(null);

				// Número de moradores
				if (element[7] != null) {
					imovelAtualizacaoCadastral
							.setNumeroMorador((Short) element[7]);
				}

				// Logradouro
				Collection colecaoEndereco = getControladorEndereco()
						.pesquisarLogradouro(idImovel);

				if (colecaoEndereco != null && !colecaoEndereco.isEmpty()) {

					Iterator enderecoIterator = colecaoEndereco.iterator();

					Object[] arrayEndereco = (Object[]) enderecoIterator.next();

					if (arrayEndereco[5] != null) {

						Municipio municipio = new Municipio();
						municipio.setId((Integer) arrayEndereco[5]);

						if (arrayEndereco[6] != null) {
							municipio.setNome((String) arrayEndereco[6]);
						}

						imovelAtualizacaoCadastral.setMunicipio(municipio);
					}

					if (arrayEndereco[9] != null) {
						imovelAtualizacaoCadastral
								.setCodigoLogradouroCep((Integer) arrayEndereco[9]);
					}

					if (arrayEndereco[10] != null) {
						imovelAtualizacaoCadastral
								.setCodigoLogradouroBairro((Integer) arrayEndereco[10]);
					}

					// Código de referência
					if (element[13] != null) {

						EnderecoReferencia enderecoReferencia = new EnderecoReferencia();
						enderecoReferencia.setId((Integer) element[13]);

						imovelAtualizacaoCadastral
								.setEnderecoReferencia(enderecoReferencia);
					}

					if (arrayEndereco[7] != null) {

						UnidadeFederacao unidadeFederacao = new UnidadeFederacao();
						unidadeFederacao.setId((Integer) arrayEndereco[7]);

						imovelAtualizacaoCadastral
								.setUnidadeFederacao(unidadeFederacao);

						String dsUnidadeFederacao = (String) arrayEndereco[8];
						imovelAtualizacaoCadastral
								.setDsUFSiglaMunicipio(dsUnidadeFederacao);
					}
				}

				// Cep
				if (element[10] != null) {
					imovelAtualizacaoCadastral
							.setCodigoCep((Integer) element[10]);
				}

				// Bairro
				if (element[11] != null) {
					imovelAtualizacaoCadastral
							.setIdBairro((Integer) element[11]);
				}

				// Descrição do bairro
				if (element[12] != null) {
					imovelAtualizacaoCadastral
							.setNomeBairro((String) element[12]);
				}

				// Número do imóvel
				if (element[14] != null) {
					imovelAtualizacaoCadastral
							.setNumeroImovel((String) element[14]);
				}

				// Complemento do Imóvel
				String complementoImovel = ((String) element[15]);

				if (complementoImovel != null
						&& complementoImovel.length() > 25) {
					complementoImovel = complementoImovel.substring(0, 24);
				}

				imovelAtualizacaoCadastral
						.setComplementoEndereco(complementoImovel);

				// Contrato de energia
				if (element[34] != null) {
					imovelAtualizacaoCadastral.setNumeroMedidorEnergia(String
							.valueOf(element[34]));
				}

				// Pavimento rua
				if (element[23] != null) {

					PavimentoRua pavimentoRua = new PavimentoRua();
					pavimentoRua.setId((Integer) element[23]);

					imovelAtualizacaoCadastral.setPavimentoRua(pavimentoRua);
				}

				// Pavimento calçada
				if (element[22] != null) {

					PavimentoCalcada pavimentoCalcada = new PavimentoCalcada();
					pavimentoCalcada.setId((Integer) element[22]);

					imovelAtualizacaoCadastral
							.setPavimentoCalcada(pavimentoCalcada);
				}

				// Fonte de abastecimento
				if (element[24] != null) {

					FonteAbastecimento fonteAbastecimento = new FonteAbastecimento();
					fonteAbastecimento.setId((Integer) element[24]);

					imovelAtualizacaoCadastral
							.setFonteAbastecimento(fonteAbastecimento);
				}

				// Situação de água
				if (element[17] != null) {

					LigacaoAguaSituacao ligacaoAguaSituacao = new LigacaoAguaSituacao();
					ligacaoAguaSituacao.setId((Integer) element[17]);

					imovelAtualizacaoCadastral
							.setLigacaoAguaSituacao(ligacaoAguaSituacao);
				}

				// Situação da ligação de esgoto
				if (element[27] != null) {

					LigacaoEsgotoSituacao ligacaoEsgotoSituacao = new LigacaoEsgotoSituacao();
					ligacaoEsgotoSituacao.setId((Integer) element[27]);

					imovelAtualizacaoCadastral
							.setLigacaoEsgotoSituacao(ligacaoEsgotoSituacao);
				}

				// Perfil do Imóvel
				if (element[28] != null) {

					ImovelPerfil imovelPerfil = new ImovelPerfil();
					imovelPerfil.setId((Integer) element[28]);

					imovelAtualizacaoCadastral.setImovelPerfil(imovelPerfil);
				}

				// Coordenadas
				if (element[30] != null) {
					imovelAtualizacaoCadastral
							.setCoordenadaX((BigDecimal) element[30]);
				}
				if (element[31] != null) {
					imovelAtualizacaoCadastral
							.setCoordenadaY((BigDecimal) element[31]);
				}

				imovelAtualizacaoCadastral.setUltimaAlteracao(new Date());
				imovelAtualizacaoCadastral
						.setIndicadorPendente(ConstantesSistema.NAO);
				imovelAtualizacaoCadastral
						.setIndicadorDadosRetorno(ConstantesSistema.NAO);
				imovelAtualizacaoCadastral
						.setIndicadorAtualizado(ConstantesSistema.NAO);
				imovelAtualizacaoCadastral
						.setParametroTabelaAtualizacaoCadastralDM(parametro);
				imovelAtualizacaoCadastral.setEmpresa(parametro.getEmpresa());
				imovelAtualizacaoCadastral.setDataRecebimentoMovimento(null);
				imovelAtualizacaoCadastral.setDataVisita(null);
				imovelAtualizacaoCadastral.setLogin(null);
				imovelAtualizacaoCadastral
						.setIndicadorResetorizado(ConstantesSistema.NAO);
				imovelAtualizacaoCadastral
						.setIndicadorImovelNovo(ConstantesSistema.NAO);
				imovelAtualizacaoCadastral.setCodigoSituacao(null);
				imovelAtualizacaoCadastral.setCodigoImovel(null);

				imovelAtualizacaoCadastral
						.setIndicadorRegistroExcluido(ConstantesSistema.NAO);

			}
		} catch (ErroRepositorioException e) {
			e.printStackTrace();
			throw new ControladorException("erro.sistema", e);
		}

		return imovelAtualizacaoCadastral;

	}

	/**
	 * Pesquisar Registro Tipo 19 - Sistema Parâmetro
	 * 
	 * @author Diogo Luiz
	 * @date 27/08/2014
	 */
	private String gerarRegistroTipo19AC(Integer idLeiturista,
			Integer idLocalidade, Integer codigoSetorComercial,
			Integer idComando, Integer quantidadeImovel,
			String descricaoArquivo, Integer idEmpresa)
			throws ControladorException {
		StringBuilder retorno = new StringBuilder();

		SetorComercial setorComercial = null;
		if (codigoSetorComercial != null) {
			FiltroSetorComercial filtroSetorComercial = new FiltroSetorComercial();
			filtroSetorComercial.adicionarParametro(new ParametroSimples(
					FiltroSetorComercial.LOCALIDADE_ID, idLocalidade));
			filtroSetorComercial.adicionarParametro(new ParametroSimples(
					FiltroSetorComercial.CODIGO_SETOR_COMERCIAL,
					codigoSetorComercial));
			Collection<SetorComercial> colecaoSetorComercial = getControladorUtil()
					.pesquisar(filtroSetorComercial,
							SetorComercial.class.getName());

			setorComercial = (SetorComercial) Util
					.retonarObjetoDeColecao(colecaoSetorComercial);
		}

		FiltroLocalidade filtroLocalidade = new FiltroLocalidade();
		filtroLocalidade.adicionarParametro(new ParametroSimples(
				FiltroLocalidade.ID, idLocalidade));

		Collection<Localidade> colecaoLocalidade = getControladorUtil()
				.pesquisar(filtroLocalidade, Localidade.class.getName());

		Localidade localidade = (Localidade) Util
				.retonarObjetoDeColecao(colecaoLocalidade);

		// VERSÃO DO CELULAR
		FiltroVersaoSistemasAndroid filtro = new FiltroVersaoSistemasAndroid();
		filtro.adicionarParametro(new ParametroSimples(
				FiltroVersaoSistemasAndroid.SISTEMA_ANDROID_ID,
				SistemaAndroid.ATUALIZACAO_CADASTRAL));
		filtro.adicionarCaminhoParaCarregamentoEntidade(FiltroVersaoSistemasAndroid.SISTEMA_ANDROID);
		filtro.setCampoOrderBy(FiltroVersaoSistemasAndroid.ID);
		ArrayList<VersaoSistemasAndroid> colecaoVersoes = (ArrayList<VersaoSistemasAndroid>) Fachada
				.getInstancia().pesquisar(filtro,
						VersaoSistemasAndroid.class.getName());
		VersaoSistemasAndroid versao = null;
		if (colecaoVersoes != null && !colecaoVersoes.isEmpty()) {
			versao = colecaoVersoes.get(colecaoVersoes.size() - 1);

		} else {
			versao = new VersaoSistemasAndroid();
			versao.setNumeroVersao("1");
		}

		gsan.micromedicao.FiltroLeiturista filtroLeiturista = new gsan.micromedicao.FiltroLeiturista();
		filtroLeiturista.adicionarParametro(new ParametroSimples(
				gsan.micromedicao.FiltroLeiturista.ID, idLeiturista));
		filtroLeiturista
				.adicionarCaminhoParaCarregamentoEntidade(gsan.micromedicao.FiltroLeiturista.USUARIO);

		Collection<?> colLeiturista = getControladorUtil().pesquisar(
				filtroLeiturista, Leiturista.class.getName());
		if (!Util.isVazioOrNulo(colLeiturista)) {
			Leiturista leiturista = (Leiturista) Util
					.retonarObjetoDeColecao(colLeiturista);

			retorno.append("19|");
			retorno.append(Util.formatarCampoParaConcatenacao(leiturista
					.getUsuario().getLogin()));
			retorno.append(Util.formatarCampoParaConcatenacao(leiturista
					.getUsuario().getSenha()));
			retorno.append(Util.formatarCampoParaConcatenacao(leiturista
					.getNumeroImei()));
			retorno.append(Util.formatarCampoParaConcatenacao(versao
					.getNumeroVersao()));
			retorno.append(Util.formatarCampoParaConcatenacao(localidade
					.getId()));
			retorno.append(Util.formatarCampoParaConcatenacao(localidade
					.getDescricao()));
			if (setorComercial != null) {
				retorno.append(Util
						.formatarCampoParaConcatenacao(setorComercial
								.getCodigo()));
				retorno.append(Util
						.formatarCampoParaConcatenacao(setorComercial
								.getDescricao()));
			} else {
				retorno.append("|");
				retorno.append("|");
			}
			retorno.append(Util.formatarCampoParaConcatenacao(idComando));
			retorno.append(Util.formatarCampoParaConcatenacao(quantidadeImovel));
			retorno.append(Util.formatarCampoParaConcatenacao(descricaoArquivo));
			retorno.append(Util.formatarCampoParaConcatenacao(idEmpresa));

			retorno.append("\n");
		}

		return retorno.toString();
	}

	/**
	 * Pesquisar Registro Tipo 1 - Bairros
	 * 
	 * @author Diogo Luiz
	 * @date 27/08/2014
	 */
	private String gerarRegistroTipo1AC(Collection<Integer> colecaoImoveis,
			Integer idLocalidade, Integer setorComercial)
			throws ControladorException {
		try {
			StringBuilder retorno = new StringBuilder();

			Collection colecaoBairros = repositorioCadastro
					.pesquisarBairrosImovel(idLocalidade);

			if (!Util.isVazioOrNulo(colecaoBairros)) {
				Object[] array = null;

				Iterator<?> it = colecaoBairros.iterator();
				while (it.hasNext()) {
					array = (Object[]) it.next();

					retorno.append("01|");
					retorno.append(Util.formatarCampoParaConcatenacao(array[0]
							.toString()));
					retorno.append(Util.formatarCampoParaConcatenacao(array[1]
							.toString()));
					retorno.append(Util.formatarCampoParaConcatenacao(array[2]));
					retorno.append("\n");
				}

				// Seleciona apenas os bairros dos imoveis
				Set<Integer> colecaoBairrosImoveis = new HashSet<Integer>();
				for (Integer matricula : colecaoImoveis) {
					Imovel imovel = repositorioImovel
							.pesquisarImovelGerarRoteiro(matricula);
					colecaoBairrosImoveis.add(imovel.getLogradouroBairro()
							.getBairro().getId());
				}

				// Retorno Tipo 25 - Logradouro Tipo
				retorno.append(this.gerarRegistroTipo25AC());

				// Retorno Tipo 26 - Logradouro Titulo
				retorno.append(this.gerarRegistroTipo26AC());

				Municipio municipio = null;
				if (setorComercial != null) {
					FiltroSetorComercial filtroSetorComercial = new FiltroSetorComercial();
					filtroSetorComercial
							.adicionarParametro(new ParametroSimples(
									FiltroSetorComercial.LOCALIDADE_ID,
									idLocalidade));
					filtroSetorComercial
							.adicionarParametro(new ParametroSimples(
									FiltroSetorComercial.CODIGO_SETOR_COMERCIAL,
									setorComercial));
					filtroSetorComercial
							.adicionarCaminhoParaCarregamentoEntidade(FiltroSetorComercial.MUNICIPIO);

					Collection<SetorComercial> colecaoSetorComercial = getControladorUtil()
							.pesquisar(filtroSetorComercial,
									SetorComercial.class.getName());

					municipio = (Municipio) ((SetorComercial) Util
							.retonarObjetoDeColecao(colecaoSetorComercial))
							.getMunicipio();
				} else {
					FiltroLocalidade filtroLocalidade = new FiltroLocalidade();
					filtroLocalidade.adicionarParametro(new ParametroSimples(
							FiltroLocalidade.ID, idLocalidade));
					filtroLocalidade
							.adicionarCaminhoParaCarregamentoEntidade(FiltroLocalidade.MUNICIPIO);

					Collection<Localidade> colecaoLocalidade = getControladorUtil()
							.pesquisar(filtroLocalidade,
									Localidade.class.getName());

					Localidade localidade = (Localidade) Util
							.retonarObjetoDeColecao(colecaoLocalidade);

					municipio = localidade.getMunicipio();
				}

				Cep cep = null;
				Short indicadorCepUnico = ConstantesSistema.NAO;
				if (municipio != null) {

					if (!getControladorGeografico()
							.verificarMunicipioComCepPorLogradouro(municipio)) {

						cep = getControladorEndereco().obterCepUnicoMunicipio(
								municipio);
						indicadorCepUnico = ConstantesSistema.SIM;

						retorno.append("02|");
						retorno.append(Util.formatarCampoParaConcatenacao(cep
								.getCepId().toString()));
						retorno.append(Util.formatarCampoParaConcatenacao(cep
								.getCodigo().toString()));
						retorno.append("\n");
					} else {
						// Registro Tipo 2 - Cep
						retorno.append(this
								.gerarRegistroTipo2AC(colecaoBairrosImoveis));
					}

					// Municipio
					retorno.append("27|");
					retorno.append(Util.formatarCampoParaConcatenacao(municipio
							.getId().toString()));
					retorno.append(Util.formatarCampoParaConcatenacao(municipio
							.getNome()));
					retorno.append(Util
							.formatarCampoParaConcatenacao(indicadorCepUnico
									.toString()));
					retorno.append(Util.formatarCampoParaConcatenacao(municipio
							.getCepInicio()));
					retorno.append("\n");
				}

				// Registro Tipo 3 - Logradouro
				retorno.append(this.gerarRegistroTipo3AC(colecaoBairrosImoveis));

				// Registro Tipo 4 - Logradouro Bairro
				retorno.append(this.gerarRegistroTipo4AC(colecaoBairrosImoveis));

				// Registro Tipo 5 - Logradouro Cep
				if (indicadorCepUnico.equals(ConstantesSistema.NAO)) {
					retorno.append(this
							.gerarRegistroTipo5AC(colecaoBairrosImoveis));
				} else {

					FiltroLogradouroCep filtroLogradouroCep = new FiltroLogradouroCep();
					filtroLogradouroCep
							.adicionarParametro(new ParametroSimples(
									FiltroLogradouroCep.ID_CEP, cep.getCepId()));
					filtroLogradouroCep
							.adicionarCaminhoParaCarregamentoEntidade(FiltroLogradouroCep.LOGRADOURO);
					filtroLogradouroCep
							.adicionarCaminhoParaCarregamentoEntidade(FiltroLogradouroCep.CEP);

					Collection<LogradouroCep> colecaoLogradouroCep = getControladorUtil()
							.pesquisar(filtroLogradouroCep,
									LogradouroCep.class.getName());

					Iterator iteratorLogradouroCep = colecaoLogradouroCep
							.iterator();
					while (iteratorLogradouroCep.hasNext()) {

						LogradouroCep logradouroCep = (LogradouroCep) iteratorLogradouroCep
								.next();

						retorno.append("05|");
						retorno.append(Util
								.formatarCampoParaConcatenacao(logradouroCep
										.getId().toString()));
						retorno.append(Util.formatarCampoParaConcatenacao(
								logradouroCep.getCep().getCepId()).toString());
						retorno.append(Util.formatarCampoParaConcatenacao(
								logradouroCep.getLogradouro().getId())
								.toString());
						retorno.append("\n");
					}
				}

			}

			return retorno.toString();
		} catch (ErroRepositorioException e) {
			throw new ControladorException("erro.sistema", e);
		}
	}

	/**
	 * Pesquisar Registro Tipo 5- Logradouro Cep
	 * 
	 * @author Diogo Luiz
	 * @date 27/08/2014
	 * 
	 */
	private String gerarRegistroTipo5AC(Collection<Integer> colecaoBairros)
			throws ControladorException {
		try {
			StringBuilder retorno = new StringBuilder();

			Collection colecaoLogradouros = repositorioCadastro
					.pesquisarLogradouroCepBairros(colecaoBairros);

			if (!Util.isVazioOrNulo(colecaoLogradouros)) {
				Object[] array = null;

				Iterator<?> it = colecaoLogradouros.iterator();
				while (it.hasNext()) {
					array = (Object[]) it.next();

					retorno.append("05|");
					retorno.append(Util.formatarCampoParaConcatenacao(array[0]
							.toString()));
					retorno.append(Util.formatarCampoParaConcatenacao(array[1])
							.toString());
					retorno.append(Util.formatarCampoParaConcatenacao(array[2])
							.toString());
					retorno.append("\n");
				}
			}

			return retorno.toString();
		} catch (ErroRepositorioException e) {
			throw new ControladorException("erro.sistema", e);
		}
	}

	/**
	 * Pesquisar Registro Tipo 4- Logradouro Bairro
	 * 
	 * @author Diogo Luiz
	 * @date 27/08/2014
	 * 
	 */
	private String gerarRegistroTipo4AC(Collection<Integer> colecaoBairros)
			throws ControladorException {
		try {
			StringBuilder retorno = new StringBuilder();

			Collection colecaoLogradouros = repositorioCadastro
					.pesquisarLogradouroBairros(colecaoBairros);

			if (!Util.isVazioOrNulo(colecaoLogradouros)) {
				Object[] array = null;

				Iterator<?> it = colecaoLogradouros.iterator();
				while (it.hasNext()) {
					array = (Object[]) it.next();

					retorno.append("04|");
					retorno.append(Util.formatarCampoParaConcatenacao(array[0]
							.toString()));
					retorno.append(Util.formatarCampoParaConcatenacao(array[1])
							.toString());
					retorno.append(Util.formatarCampoParaConcatenacao(array[2])
							.toString());
					retorno.append("\n");
				}
			}

			return retorno.toString();
		} catch (ErroRepositorioException e) {
			throw new ControladorException("erro.sistema", e);
		}
	}

	/**
	 * Pesquisar Registro Tipo 3- Logradouros
	 * 
	 * @author Diogo Luiz
	 * @date 27/08/2014
	 * 
	 */
	private String gerarRegistroTipo3AC(Collection<Integer> colecaoBairros)
			throws ControladorException {
		try {
			StringBuilder retorno = new StringBuilder();

			Collection colecaoLogradouros = repositorioCadastro
					.pesquisarLogradouro(colecaoBairros);

			if (!Util.isVazioOrNulo(colecaoLogradouros)) {
				Object[] array = null;

				Iterator<?> it = colecaoLogradouros.iterator();
				while (it.hasNext()) {
					array = (Object[]) it.next();

					retorno.append("03|");
					retorno.append(Util.formatarCampoParaConcatenacao(array[0]
							.toString()));
					retorno.append(Util.formatarCampoParaConcatenacao(array[1]));
					retorno.append(Util.formatarCampoParaConcatenacao(array[2]));
					retorno.append(Util.formatarCampoParaConcatenacao(null));
					retorno.append(Util.formatarCampoParaConcatenacao(array[3]
							.toString()));
					retorno.append(Util.formatarCampoParaConcatenacao(array[4]
							.toString()));
					retorno.append(Util.formatarCampoParaConcatenacao(array[5]));
					retorno.append("\n");
				}
			}

			return retorno.toString();
		} catch (ErroRepositorioException e) {
			throw new ControladorException("erro.sistema", e);
		}
	}

	/**
	 * Pesquisar Registro Tipo 2 - Cep
	 * 
	 * @author Diogo Luiz
	 * @date 27/08/2014
	 * 
	 */
	private String gerarRegistroTipo2AC(Collection<Integer> colecaoBairros)
			throws ControladorException {
		try {
			StringBuilder retorno = new StringBuilder();

			Collection colecaoCep = repositorioCadastro
					.pesquisarCepBairros(colecaoBairros);

			if (!Util.isVazioOrNulo(colecaoCep)) {
				Object[] array = null;

				Iterator<?> it = colecaoCep.iterator();
				while (it.hasNext()) {
					array = (Object[]) it.next();

					retorno.append("02|");
					retorno.append(Util.formatarCampoParaConcatenacao(array[0]
							.toString()));
					retorno.append(Util.formatarCampoParaConcatenacao(array[1]
							.toString()));
					retorno.append("\n");
				}
			}

			return retorno.toString();
		} catch (ErroRepositorioException e) {
			throw new ControladorException("erro.sistema", e);
		}
	}

	/**
	 * Pesquisar Registro Tipo 26- Logradouro Titulo
	 * 
	 * @author Diogo Luiz
	 * @date 27/08/2014
	 * 
	 */
	private String gerarRegistroTipo26AC() throws ControladorException {
		StringBuilder retorno = new StringBuilder();

		FiltroLogradouroTitulo filtroLogradouroTitulo = new FiltroLogradouroTitulo();
		filtroLogradouroTitulo.adicionarParametro(new ParametroSimples(
				FiltroLogradouroTitulo.INDICADORUSO, ConstantesSistema.SIM));

		Collection<LogradouroTitulo> colecaoLogradouroTitulo = getControladorUtil()
				.pesquisar(filtroLogradouroTitulo,
						LogradouroTitulo.class.getName());

		if (!Util.isVazioOrNulo(colecaoLogradouroTitulo)) {

			Iterator<LogradouroTitulo> it = colecaoLogradouroTitulo.iterator();
			while (it.hasNext()) {
				LogradouroTitulo logradouroTitulo = it.next();

				retorno.append("26|");
				retorno.append(Util
						.formatarCampoParaConcatenacao(logradouroTitulo.getId()
								.toString()));
				retorno.append(Util
						.formatarCampoParaConcatenacao(logradouroTitulo
								.getDescricao()));
				retorno.append(Util
						.formatarCampoParaConcatenacao(logradouroTitulo
								.getDescricaoAbreviada()));
				retorno.append("\n");
			}
		}

		return retorno.toString();
	}

	/**
	 * Pesquisar Registro Tipo 25- Logradouro Tipo
	 * 
	 * @author Diogo Luiz
	 * @date 27/08/2014
	 * 
	 */
	private String gerarRegistroTipo25AC() throws ControladorException {
		StringBuilder retorno = new StringBuilder();

		FiltroLogradouroTipo filtroLogradouroTipo = new FiltroLogradouroTipo();
		filtroLogradouroTipo.adicionarParametro(new ParametroSimples(
				FiltroLogradouroTipo.INDICADORUSO, ConstantesSistema.SIM));

		Collection<LogradouroTipo> colecaoLogradouroTipo = getControladorUtil()
				.pesquisar(filtroLogradouroTipo, LogradouroTipo.class.getName());

		if (!Util.isVazioOrNulo(colecaoLogradouroTipo)) {

			Iterator<LogradouroTipo> it = colecaoLogradouroTipo.iterator();
			while (it.hasNext()) {
				LogradouroTipo logradouroTipo = it.next();

				retorno.append("25|");
				retorno.append(Util
						.formatarCampoParaConcatenacao(logradouroTipo.getId()
								.toString()));
				retorno.append(Util
						.formatarCampoParaConcatenacao(logradouroTipo
								.getDescricao()));
				retorno.append(Util
						.formatarCampoParaConcatenacao(logradouroTipo
								.getDescricaoAbreviada()));
				retorno.append("\n");
			}
		}

		return retorno.toString();
	}

	/**
	 * Pesquisar Registro Tipo 28 - Imovel Perfil
	 * 
	 * @author Diogo Luiz
	 * @date 27/08/2014
	 */
	private String gerarRegistroTipo28AC() throws ControladorException {
		StringBuilder retorno = new StringBuilder();

		FiltroImovelPerfil filtroImovelPerfil = new FiltroImovelPerfil();
		filtroImovelPerfil.adicionarParametro(new ParametroSimples(
				FiltroImovelPerfil.INDICADOR_USO, ConstantesSistema.SIM));

		Collection<ImovelPerfil> colecaoImovelPerfil = getControladorUtil()
				.pesquisar(filtroImovelPerfil, ImovelPerfil.class.getName());

		if (colecaoImovelPerfil != null && !colecaoImovelPerfil.isEmpty()) {
			Iterator<ImovelPerfil> iteratorImovelPerfil = colecaoImovelPerfil
					.iterator();
			while (iteratorImovelPerfil.hasNext()) {

				ImovelPerfil imovelPerfil = (ImovelPerfil) iteratorImovelPerfil
						.next();
				retorno.append("28|");
				retorno.append(Util.formatarCampoParaConcatenacao(imovelPerfil
						.getId().toString()));
				retorno.append(Util.formatarCampoParaConcatenacao(imovelPerfil
						.getDescricao()));
				retorno.append("\n");

			}
		}

		return retorno.toString();
	}

	/**
	 * Pesquisar Registro Tipo 29 - Quadra
	 * 
	 * @author Diogo Luiz
	 * @date 27/08/2014
	 */
	private String gerarRegistroTipo29AC(Integer idLocalidade,
			Integer setorComercial, Collection<Integer> colecaoSetor)
			throws ControladorException {
		StringBuilder retorno = new StringBuilder();

		FiltroQuadra filtroQuadra = new FiltroQuadra();
		filtroQuadra.adicionarParametro(new ParametroSimples(
				FiltroQuadra.ID_LOCALIDADE, idLocalidade));
		filtroQuadra
				.adicionarCaminhoParaCarregamentoEntidade(FiltroQuadra.SETORCOMERCIAL);
		if (setorComercial != null) {
			filtroQuadra.adicionarParametro(new ParametroSimples(
					FiltroQuadra.CODIGO_SETORCOMERCIAL, setorComercial));
		} else {
			filtroQuadra.adicionarParametro(new ParametroSimplesIn(
					FiltroQuadra.CODIGO_SETORCOMERCIAL, colecaoSetor));
		}

		Collection<Quadra> colecaoQuadra = getControladorUtil().pesquisar(
				filtroQuadra, Quadra.class.getName());

		if (colecaoQuadra != null && !colecaoQuadra.isEmpty()) {
			Iterator<Quadra> iteratorQuadra = colecaoQuadra.iterator();
			while (iteratorQuadra.hasNext()) {

				Quadra quadra = (Quadra) iteratorQuadra.next();
				retorno.append("29|");
				retorno.append(Util.formatarCampoParaConcatenacao(quadra
						.getId().toString()));
				retorno.append(Util.formatarCampoParaConcatenacao(quadra
						.getNumeroQuadra()));
				retorno.append(Util.formatarCampoParaConcatenacao(quadra
						.getSetorComercial().getCodigo()));
				retorno.append("\n");

			}
		}

		return retorno.toString();
	}

	/**
	 * Pesquisar Registro Tipo 30 - Cadastro Ocorrencia
	 * 
	 * @author Diogo Luiz
	 * @date 27/08/2014
	 */
	private String gerarRegistroTipo30AC() throws ControladorException {
		StringBuilder retorno = new StringBuilder();

		FiltroCadastroOcorrencia filtroCadastroOcorrencia = new FiltroCadastroOcorrencia();
		filtroCadastroOcorrencia.adicionarParametro(new ParametroSimples(
				FiltroCadastroOcorrencia.INDICADOR_USO, ConstantesSistema.SIM));

		Collection<CadastroOcorrencia> colecaoCadastroOcorrencia = getControladorUtil()
				.pesquisar(filtroCadastroOcorrencia,
						CadastroOcorrencia.class.getName());

		if (colecaoCadastroOcorrencia != null
				&& !colecaoCadastroOcorrencia.isEmpty()) {
			Iterator<CadastroOcorrencia> iteratorCadastroOcorrencia = colecaoCadastroOcorrencia
					.iterator();
			while (iteratorCadastroOcorrencia.hasNext()) {

				CadastroOcorrencia cadastroOcorrencia = (CadastroOcorrencia) iteratorCadastroOcorrencia
						.next();
				retorno.append("30|");
				retorno.append(Util
						.formatarCampoParaConcatenacao(cadastroOcorrencia
								.getId().toString()));
				retorno.append(Util
						.formatarCampoParaConcatenacao(cadastroOcorrencia
								.getDescricao()));
				retorno.append(Util
						.formatarCampoParaConcatenacao(cadastroOcorrencia
								.getIndicadorCamposObrigatoriosTablet()));
				retorno.append("\n");

			}
		}

		return retorno.toString();
	}

	/**
	 * Pesquisar Registro Tipo 31 - Unidade Federacao
	 * 
	 * @author Diogo Luiz
	 * @date 27/08/2014
	 */
	private String gerarRegistroTipo31AC() throws ControladorException {
		StringBuilder retorno = new StringBuilder();

		FiltroUnidadeFederacao filtroUnidadeFederacao = new FiltroUnidadeFederacao();

		Collection<UnidadeFederacao> colecaoUnidadeFederacao = getControladorUtil()
				.pesquisar(filtroUnidadeFederacao,
						UnidadeFederacao.class.getName());

		if (colecaoUnidadeFederacao != null
				&& !colecaoUnidadeFederacao.isEmpty()) {
			Iterator<UnidadeFederacao> iteratorUnidadeFederacao = colecaoUnidadeFederacao
					.iterator();
			while (iteratorUnidadeFederacao.hasNext()) {

				UnidadeFederacao unidadeFederacao = (UnidadeFederacao) iteratorUnidadeFederacao
						.next();
				retorno.append("31|");
				retorno.append(Util
						.formatarCampoParaConcatenacao(unidadeFederacao.getId()
								.toString()));
				retorno.append(Util
						.formatarCampoParaConcatenacao(unidadeFederacao
								.getSigla()));
				retorno.append("\n");

			}
		}

		return retorno.toString();
	}

	/**
	 * Pesquisar Registro Tipo 32 - Hidrometro Marca
	 * 
	 * @author Diogo Luiz
	 * @date 27/08/2014
	 */
	private String gerarRegistroTipo32AC() throws ControladorException {
		StringBuilder retorno = new StringBuilder();

		FiltroHidrometroMarca filtroHidrometroMarca = new FiltroHidrometroMarca();
		filtroHidrometroMarca.adicionarParametro(new ParametroSimples(
				FiltroHidrometroMarca.INDICADOR_USO, ConstantesSistema.SIM));

		Collection<HidrometroMarca> colecaoHidrometroMarca = getControladorUtil()
				.pesquisar(filtroHidrometroMarca,
						HidrometroMarca.class.getName());

		if (colecaoHidrometroMarca != null && !colecaoHidrometroMarca.isEmpty()) {
			Iterator<HidrometroMarca> iteratorHidrometroMarca = colecaoHidrometroMarca
					.iterator();
			while (iteratorHidrometroMarca.hasNext()) {

				HidrometroMarca hidrometroMarca = (HidrometroMarca) iteratorHidrometroMarca
						.next();
				retorno.append("32|");
				retorno.append(Util
						.formatarCampoParaConcatenacao(hidrometroMarca.getId()
								.toString()));
				retorno.append(Util
						.formatarCampoParaConcatenacao(hidrometroMarca
								.getCodigoHidrometroMarca()));
				retorno.append("\n");

			}
		}

		return retorno.toString();
	}

	/**
	 * Pesquisar Registro Tipo 33 - Hidrometro Capacidade
	 * 
	 * @author Diogo Luiz
	 * @date 27/08/2014
	 */
	private String gerarRegistroTipo33AC() throws ControladorException {
		StringBuilder retorno = new StringBuilder();

		FiltroHidrometroCapacidade filtroHidrometroCapacidade = new FiltroHidrometroCapacidade();
		filtroHidrometroCapacidade
				.adicionarParametro(new ParametroSimples(
						FiltroHidrometroCapacidade.INDICADOR_USO,
						ConstantesSistema.SIM));

		Collection<HidrometroCapacidade> colecaoHidrometroCapacidade = getControladorUtil()
				.pesquisar(filtroHidrometroCapacidade,
						HidrometroCapacidade.class.getName());

		if (colecaoHidrometroCapacidade != null
				&& !colecaoHidrometroCapacidade.isEmpty()) {
			Iterator<HidrometroCapacidade> iteratorHidrometroCapacidade = colecaoHidrometroCapacidade
					.iterator();
			while (iteratorHidrometroCapacidade.hasNext()) {

				HidrometroCapacidade hidrometroCapacidade = (HidrometroCapacidade) iteratorHidrometroCapacidade
						.next();
				retorno.append("33|");
				retorno.append(Util
						.formatarCampoParaConcatenacao(hidrometroCapacidade
								.getId().toString()));
				retorno.append(Util
						.formatarCampoParaConcatenacao(hidrometroCapacidade
								.getCodigoHidrometroCapacidade()));
				retorno.append("\n");

			}
		}

		return retorno.toString();
	}

	/**
	 * Pesquisar Registro Tipo 34 - Cliente Tipo
	 * 
	 * @author Diogo Luiz
	 * @date 27/08/2014
	 */
	private String gerarRegistroTipo34AC() throws ControladorException {
		StringBuilder retorno = new StringBuilder();

		FiltroClienteTipo filtroClienteTipo = new FiltroClienteTipo();
		filtroClienteTipo.adicionarParametro(new ParametroSimples(
				FiltroClienteTipo.INDICADOR_USO, ConstantesSistema.SIM));

		Collection<ClienteTipo> colecaoClienteTipo = getControladorUtil()
				.pesquisar(filtroClienteTipo, ClienteTipo.class.getName());

		if (colecaoClienteTipo != null && !colecaoClienteTipo.isEmpty()) {
			Iterator<ClienteTipo> iteratorClienteTipo = colecaoClienteTipo
					.iterator();
			while (iteratorClienteTipo.hasNext()) {

				ClienteTipo clienteTipo = (ClienteTipo) iteratorClienteTipo
						.next();
				retorno.append("34|");
				retorno.append(Util.formatarCampoParaConcatenacao(clienteTipo
						.getId().toString()));
				retorno.append(Util.formatarCampoParaConcatenacao(clienteTipo
						.getDescricao()));
				retorno.append(Util.formatarCampoParaConcatenacao(clienteTipo
						.getIndicadorPessoaFisicaJuridica()));
				retorno.append("\n");

			}
		}

		return retorno.toString();
	}

	/**
	 * Pesquisar Registro Tipo 35 - Medicao Tipo
	 * 
	 * @author Diogo Luiz
	 * @date 27/08/2014
	 */
	private String gerarRegistroTipo35AC() throws ControladorException {
		StringBuilder retorno = new StringBuilder();

		FiltroMedicaoTipo filtroMedicaoTipo = new FiltroMedicaoTipo();
		filtroMedicaoTipo.adicionarParametro(new ParametroSimples(
				FiltroMedicaoTipo.INDICADOR_USO, ConstantesSistema.SIM));

		Collection<MedicaoTipo> colecaoMedicaoTipo = getControladorUtil()
				.pesquisar(filtroMedicaoTipo, MedicaoTipo.class.getName());

		if (colecaoMedicaoTipo != null && !colecaoMedicaoTipo.isEmpty()) {
			Iterator<MedicaoTipo> iteratorMedicaoTipo = colecaoMedicaoTipo
					.iterator();
			while (iteratorMedicaoTipo.hasNext()) {

				MedicaoTipo medicaoTipo = (MedicaoTipo) iteratorMedicaoTipo
						.next();
				retorno.append("35|");
				retorno.append(Util.formatarCampoParaConcatenacao(medicaoTipo
						.getId().toString()));
				retorno.append(Util.formatarCampoParaConcatenacao(medicaoTipo
						.getDescricao()));
				retorno.append("\n");

			}
		}

		return retorno.toString();
	}

	/**
	 * Pesquisar Registro Tipo 6 - Pavimento Rua
	 * 
	 * @author Diogo Luiz
	 * @date 27/08/2014
	 */
	private String gerarRegistroTipo6AC() throws ControladorException {
		StringBuilder retorno = new StringBuilder();

		FiltroPavimentoRua filtroPavimentoRua = new FiltroPavimentoRua(
				FiltroPavimentoRua.ID);
		filtroPavimentoRua.adicionarParametro(new ParametroSimples(
				FiltroPavimentoRua.INDICADOR_USO,
				ConstantesSistema.INDICADOR_USO_ATIVO));

		Collection<?> colPavimentoRua = getControladorUtil().pesquisar(
				filtroPavimentoRua, PavimentoRua.class.getName());
		if (!Util.isVazioOrNulo(colPavimentoRua)) {
			PavimentoRua pavimentoRua = null;

			Iterator<?> it = colPavimentoRua.iterator();
			while (it.hasNext()) {
				pavimentoRua = (PavimentoRua) it.next();

				retorno.append("06|");
				retorno.append(Util.formatarCampoParaConcatenacao(pavimentoRua
						.getId().toString()));
				retorno.append(Util.formatarCampoParaConcatenacao(pavimentoRua
						.getDescricao()));
				retorno.append("\n");
			}
		}

		return retorno.toString();
	}

	/**
	 * Pesquisar Registro Tipo 7 - Pavimento Calçada
	 * 
	 * @author Diogo Luiz
	 * @date 27/08/2014
	 */
	private String gerarRegistroTipo7AC() throws ControladorException {
		StringBuilder retorno = new StringBuilder();

		FiltroPavimentoCalcada filtroPavimentoCalcada = new FiltroPavimentoCalcada(
				FiltroPavimentoCalcada.ID);
		filtroPavimentoCalcada.adicionarParametro(new ParametroSimples(
				FiltroPavimentoCalcada.INDICADOR_USO,
				ConstantesSistema.INDICADOR_USO_ATIVO));

		Collection<?> colPavimentoCalcada = getControladorUtil().pesquisar(
				filtroPavimentoCalcada, PavimentoCalcada.class.getName());
		if (!Util.isVazioOrNulo(colPavimentoCalcada)) {
			PavimentoCalcada pavimentoCalcada = null;

			Iterator<?> it = colPavimentoCalcada.iterator();
			while (it.hasNext()) {
				pavimentoCalcada = (PavimentoCalcada) it.next();

				retorno.append("07|");
				retorno.append(Util
						.formatarCampoParaConcatenacao(pavimentoCalcada.getId()
								.toString()));
				retorno.append(Util
						.formatarCampoParaConcatenacao(pavimentoCalcada
								.getDescricao()));
				retorno.append("\n");
			}
		}

		return retorno.toString();
	}

	/**
	 * Pesquisar Registro Tipo 8 - Fonte de Abastecimento
	 * 
	 * @author Diogo Luiz
	 * @date 27/08/2014
	 */
	private String gerarRegistroTipo8AC() throws ControladorException {
		StringBuilder retorno = new StringBuilder();

		FiltroFonteAbastecimento filtroFonteAbastecimento = new FiltroFonteAbastecimento(
				FiltroFonteAbastecimento.ID);
		filtroFonteAbastecimento.adicionarParametro(new ParametroSimples(
				FiltroFonteAbastecimento.INDICADOR_USO,
				ConstantesSistema.INDICADOR_USO_ATIVO));

		Collection<?> colFonteAbastecimento = getControladorUtil().pesquisar(
				filtroFonteAbastecimento, FonteAbastecimento.class.getName());
		if (!Util.isVazioOrNulo(colFonteAbastecimento)) {
			FonteAbastecimento fonteAbastecimento = null;

			Iterator<?> it = colFonteAbastecimento.iterator();
			while (it.hasNext()) {
				fonteAbastecimento = (FonteAbastecimento) it.next();

				retorno.append("08|");
				retorno.append(Util
						.formatarCampoParaConcatenacao(fonteAbastecimento
								.getId().toString()));
				retorno.append(Util
						.formatarCampoParaConcatenacao(fonteAbastecimento
								.getDescricao()));
				retorno.append("\n");
			}
		}

		return retorno.toString();
	}

	/**
	 * Pesquisar Registro Tipo 9 - Categoria
	 * 
	 * @author Diogo Luiz
	 * @date 27/08/2014
	 */
	private String gerarRegistroTipo9AC() throws ControladorException {
		StringBuilder retorno = new StringBuilder();

		FiltroCategoria filtroCategoria = new FiltroCategoria(
				FiltroCategoria.CODIGO);
		filtroCategoria.adicionarParametro(new ParametroSimples(
				FiltroCategoria.INDICADOR_USO,
				ConstantesSistema.INDICADOR_USO_ATIVO));

		Collection<?> colCategoria = getControladorUtil().pesquisar(
				filtroCategoria, Categoria.class.getName());
		if (!Util.isVazioOrNulo(colCategoria)) {
			Categoria categoria = null;

			Iterator<?> it = colCategoria.iterator();
			while (it.hasNext()) {
				categoria = (Categoria) it.next();

				retorno.append("09|");
				retorno.append(Util.formatarCampoParaConcatenacao(categoria
						.getId().toString()));
				retorno.append(Util.formatarCampoParaConcatenacao(categoria
						.getDescricao()));
				retorno.append("\n");
			}
		}

		return retorno.toString();
	}

	/**
	 * Pesquisar Registro Tipo 10 - SubCategoria
	 * 
	 * @author Diogo Luiz
	 * @date 27/08/2014
	 */
	private String gerarRegistroTipo10AC() throws ControladorException {
		StringBuilder retorno = new StringBuilder();

		FiltroSubCategoria filtroSubCategoria = new FiltroSubCategoria(
				FiltroSubCategoria.ID);
		filtroSubCategoria.adicionarParametro(new ParametroSimples(
				FiltroSubCategoria.INDICADOR_USO,
				ConstantesSistema.INDICADOR_USO_ATIVO));
		filtroSubCategoria
				.adicionarCaminhoParaCarregamentoEntidade(FiltroSubCategoria.CATEGORIA);

		Collection<?> colSubCategoria = getControladorUtil().pesquisar(
				filtroSubCategoria, Subcategoria.class.getName());
		if (!Util.isVazioOrNulo(colSubCategoria)) {
			Subcategoria subCategoria = null;

			Iterator<?> it = colSubCategoria.iterator();
			while (it.hasNext()) {
				subCategoria = (Subcategoria) it.next();

				retorno.append("10|");
				retorno.append(Util.formatarCampoParaConcatenacao(subCategoria
						.getId().toString()));
				retorno.append(Util.formatarCampoParaConcatenacao(subCategoria
						.getCategoria().getId()));
				retorno.append(Util.formatarCampoParaConcatenacao(subCategoria
						.getDescricao()));
				retorno.append("\n");
			}
		}

		return retorno.toString();
	}

	/**
	 * Pesquisar Registro Tipo 11 - Ligação Água Situação
	 * 
	 * @author Diogo Luiz
	 * @date 27/08/2014
	 */
	private String gerarRegistroTipo11AC() throws ControladorException {
		StringBuilder retorno = new StringBuilder();

		FiltroLigacaoAguaSituacao filtroLigacaoAguaSituacao = new FiltroLigacaoAguaSituacao(
				FiltroLigacaoAguaSituacao.ID);
		filtroLigacaoAguaSituacao.adicionarParametro(new ParametroSimples(
				FiltroLigacaoAguaSituacao.INDICADOR_USO,
				ConstantesSistema.INDICADOR_USO_ATIVO));

		Collection<?> colLigacaoAguaSituacao = getControladorUtil().pesquisar(
				filtroLigacaoAguaSituacao, LigacaoAguaSituacao.class.getName());
		if (!Util.isVazioOrNulo(colLigacaoAguaSituacao)) {
			LigacaoAguaSituacao ligacaoAguaSituacao = null;

			Iterator<?> it = colLigacaoAguaSituacao.iterator();
			while (it.hasNext()) {
				ligacaoAguaSituacao = (LigacaoAguaSituacao) it.next();

				retorno.append("11|");
				retorno.append(Util
						.formatarCampoParaConcatenacao(ligacaoAguaSituacao
								.getId().toString()));
				retorno.append(Util
						.formatarCampoParaConcatenacao(ligacaoAguaSituacao
								.getDescricao()));
				retorno.append("\n");
			}
		}

		return retorno.toString();
	}

	/**
	 * Pesquisar Registro Tipo 12 - Ligação Esgoto Situação
	 * 
	 * @author Diogo Luiz
	 * @date 27/08/2014
	 */
	private String gerarRegistroTipo12AC() throws ControladorException {
		StringBuilder retorno = new StringBuilder();

		FiltroLigacaoEsgotoSituacao filtroLigacaoEsgotoSituacao = new FiltroLigacaoEsgotoSituacao(
				FiltroLigacaoEsgotoSituacao.ID);
		filtroLigacaoEsgotoSituacao.adicionarParametro(new ParametroSimples(
				FiltroLigacaoEsgotoSituacao.INDICADOR_USO,
				ConstantesSistema.INDICADOR_USO_ATIVO));

		Collection<?> colLigacaoEsgotoSituacao = getControladorUtil()
				.pesquisar(filtroLigacaoEsgotoSituacao,
						LigacaoEsgotoSituacao.class.getName());
		if (!Util.isVazioOrNulo(colLigacaoEsgotoSituacao)) {
			LigacaoEsgotoSituacao ligacaoEsgotoSituacao = null;

			Iterator<?> it = colLigacaoEsgotoSituacao.iterator();
			while (it.hasNext()) {
				ligacaoEsgotoSituacao = (LigacaoEsgotoSituacao) it.next();

				retorno.append("12|");
				retorno.append(Util
						.formatarCampoParaConcatenacao(ligacaoEsgotoSituacao
								.getId().toString()));
				retorno.append(Util
						.formatarCampoParaConcatenacao(ligacaoEsgotoSituacao
								.getDescricao()));
				retorno.append("\n");
			}
		}

		return retorno.toString();
	}

	/**
	 * Pesquisar Registro Tipo 13 - Hidrômetro Local Instalação
	 * 
	 * @author Diogo Luiz
	 * @date 27/08/2014
	 */
	private String gerarRegistroTipo13AC() throws ControladorException {
		StringBuilder retorno = new StringBuilder();

		FiltroHidrometroLocalInstalacao filtroHidrometroLocalInstalacao = new FiltroHidrometroLocalInstalacao(
				FiltroHidrometroLocalInstalacao.ID);
		filtroHidrometroLocalInstalacao
				.adicionarParametro(new ParametroSimples(
						FiltroHidrometroLocalInstalacao.INDICADOR_USO,
						ConstantesSistema.INDICADOR_USO_ATIVO));

		Collection<?> colHidrometroLocalInstalacao = getControladorUtil()
				.pesquisar(filtroHidrometroLocalInstalacao,
						HidrometroLocalInstalacao.class.getName());
		if (!Util.isVazioOrNulo(colHidrometroLocalInstalacao)) {
			HidrometroLocalInstalacao hidrometroLocalInstalacao = null;

			Iterator<?> it = colHidrometroLocalInstalacao.iterator();
			while (it.hasNext()) {
				hidrometroLocalInstalacao = (HidrometroLocalInstalacao) it
						.next();

				retorno.append("13|");
				retorno.append(Util
						.formatarCampoParaConcatenacao(hidrometroLocalInstalacao
								.getId().toString()));
				retorno.append(Util
						.formatarCampoParaConcatenacao(hidrometroLocalInstalacao
								.getDescricao()));
				retorno.append("\n");
			}
		}

		return retorno.toString();
	}

	/**
	 * Pesquisar Registro Tipo 14 - Hidrômetro Proteção
	 * 
	 * @author Diogo Luiz
	 * @date 27/08/2014
	 */
	private String gerarRegistroTipo14AC() throws ControladorException {
		StringBuilder retorno = new StringBuilder();

		FiltroHidrometroProtecao filtroHidrometroProtecao = new FiltroHidrometroProtecao(
				FiltroHidrometroProtecao.ID);
		filtroHidrometroProtecao.adicionarParametro(new ParametroSimples(
				FiltroHidrometroProtecao.INDICADOR_USO,
				ConstantesSistema.INDICADOR_USO_ATIVO));

		Collection<?> colHidrometroProtecao = getControladorUtil().pesquisar(
				filtroHidrometroProtecao, HidrometroProtecao.class.getName());
		if (!Util.isVazioOrNulo(colHidrometroProtecao)) {
			HidrometroProtecao hidrometroProtecao = null;

			Iterator<?> it = colHidrometroProtecao.iterator();
			while (it.hasNext()) {
				hidrometroProtecao = (HidrometroProtecao) it.next();

				retorno.append("14|");
				retorno.append(Util
						.formatarCampoParaConcatenacao(hidrometroProtecao
								.getId().toString()));
				retorno.append(Util
						.formatarCampoParaConcatenacao(hidrometroProtecao
								.getDescricao()));
				retorno.append("\n");
			}
		}

		return retorno.toString();
	}

	/**
	 * Pesquisar Registro Tipo 15 - Orgão Expedidor RG
	 * 
	 * @author Diogo Luiz
	 * @date 27/08/2014
	 */
	private String gerarRegistroTipo15AC() throws ControladorException {
		StringBuilder retorno = new StringBuilder();

		FiltroOrgaoExpedidorRg filtroRG = new FiltroOrgaoExpedidorRg(
				FiltroOrgaoExpedidorRg.ID);
		filtroRG.adicionarParametro(new ParametroSimples(
				FiltroOrgaoExpedidorRg.INDICADOR_USO,
				ConstantesSistema.INDICADOR_USO_ATIVO));

		Collection<?> colOrgaoExpedidorRg = getControladorUtil().pesquisar(
				filtroRG, OrgaoExpedidorRg.class.getName());
		if (!Util.isVazioOrNulo(colOrgaoExpedidorRg)) {
			OrgaoExpedidorRg orgaoExpedidorRg = null;

			Iterator<?> it = colOrgaoExpedidorRg.iterator();
			while (it.hasNext()) {
				orgaoExpedidorRg = (OrgaoExpedidorRg) it.next();

				retorno.append("15|");
				retorno.append(Util
						.formatarCampoParaConcatenacao(orgaoExpedidorRg.getId()
								.toString()));
				retorno.append(Util
						.formatarCampoParaConcatenacao(orgaoExpedidorRg
								.getDescricao()));
				retorno.append(Util
						.formatarCampoParaConcatenacao(orgaoExpedidorRg
								.getDescricaoAbreviada()));
				retorno.append("\n");
			}
		}

		return retorno.toString();
	}

	/**
	 * Pesquisar Registro Tipo 16 - Endereco Referencia
	 * 
	 * @author Diogo Luiz
	 * @date 27/08/2014
	 */
	private String gerarRegistroTipo16AC() throws ControladorException {
		StringBuilder retorno = new StringBuilder();

		FiltroEnderecoReferencia filtroEnderecoReferencia = new FiltroEnderecoReferencia(
				FiltroEnderecoReferencia.ID);
		filtroEnderecoReferencia.adicionarParametro(new ParametroSimples(
				FiltroEnderecoReferencia.INDICADORUSO,
				ConstantesSistema.INDICADOR_USO_ATIVO));

		Collection<?> colEnderecoReferencia = getControladorUtil().pesquisar(
				filtroEnderecoReferencia, EnderecoReferencia.class.getName());
		if (!Util.isVazioOrNulo(colEnderecoReferencia)) {
			EnderecoReferencia enderecoReferencia = null;

			Iterator<?> it = colEnderecoReferencia.iterator();
			while (it.hasNext()) {
				enderecoReferencia = (EnderecoReferencia) it.next();

				retorno.append("16|");
				retorno.append(Util
						.formatarCampoParaConcatenacao(enderecoReferencia
								.getId().toString()));
				retorno.append(Util
						.formatarCampoParaConcatenacao(enderecoReferencia
								.getDescricao()));
				retorno.append(Util
						.formatarCampoParaConcatenacao(enderecoReferencia
								.getDescricaoAbreviada()));
				retorno.append("\n");
			}
		}

		return retorno.toString();
	}

	/**
	 * Pesquisar Registro Tipo 15 - Pessoa Sexo
	 * 
	 * @author Diogo Luiz
	 * @date 27/08/2014
	 */
	private String gerarRegistroTipo17AC() throws ControladorException {
		StringBuilder retorno = new StringBuilder();

		FiltroPessoaSexo filtroPessoaSexo = new FiltroPessoaSexo(
				FiltroPessoaSexo.ID);
		filtroPessoaSexo.adicionarParametro(new ParametroSimples(
				FiltroPessoaSexo.INDICADOR_USO,
				ConstantesSistema.INDICADOR_USO_ATIVO));

		Collection<?> colPessoaSexo = getControladorUtil().pesquisar(
				filtroPessoaSexo, PessoaSexo.class.getName());
		if (!Util.isVazioOrNulo(colPessoaSexo)) {
			PessoaSexo pessoaSexo = null;

			Iterator<?> it = colPessoaSexo.iterator();
			while (it.hasNext()) {
				pessoaSexo = (PessoaSexo) it.next();

				retorno.append("17|");
				retorno.append(Util.formatarCampoParaConcatenacao(pessoaSexo
						.getId().toString()));
				retorno.append(Util.formatarCampoParaConcatenacao(pessoaSexo
						.getDescricao()));
				retorno.append("\n");
			}
		}

		return retorno.toString();
	}

	/**
	 * Pesquisar Registro Tipo 18 - Fone Tipo
	 * 
	 * @author Diogo Luiz
	 * @date 27/08/2014
	 */
	private String gerarRegistroTipo18AC() throws ControladorException {
		StringBuilder retorno = new StringBuilder();

		FiltroFoneTipo filtroFoneTipo = new FiltroFoneTipo(FiltroFoneTipo.ID);
		filtroFoneTipo.adicionarParametro(new ParametroSimples(
				FiltroFoneTipo.INDICADOR_USO,
				ConstantesSistema.INDICADOR_USO_ATIVO));

		Collection<?> colFoneTipo = getControladorUtil().pesquisar(
				filtroFoneTipo, FoneTipo.class.getName());
		if (!Util.isVazioOrNulo(colFoneTipo)) {
			FoneTipo foneTipo = null;

			Iterator<?> it = colFoneTipo.iterator();
			while (it.hasNext()) {
				foneTipo = (FoneTipo) it.next();

				retorno.append("18|");
				retorno.append(Util.formatarCampoParaConcatenacao(foneTipo
						.getId().toString()));
				retorno.append(Util.formatarCampoParaConcatenacao(foneTipo
						.getDescricao()));
				retorno.append("\n");
			}
		}

		return retorno.toString();
	}

	/**
	 * Pesquisar Registro Tipo 20 - Imovel Atualização Cadastral
	 * 
	 * @author Diogo Luiz
	 * @date 27/08/2014
	 */
	private String gerarRegistroTipo20AC(Integer idParametro)
			throws ControladorException {
		StringBuilder retorno = new StringBuilder();

		FiltroImovelAtualizacaoCadastralDM filtroImovelAtualizacaoCadastral = new FiltroImovelAtualizacaoCadastralDM(
				FiltroImovelAtualizacaoCadastralDM.ID);
		filtroImovelAtualizacaoCadastral
				.adicionarParametro(new ParametroSimples(
						FiltroImovelAtualizacaoCadastralDM.ID_PARAMETRO_TABELA_ATUALIZACAO_CADASTRAL_DM,
						idParametro));
		filtroImovelAtualizacaoCadastral
				.adicionarCaminhoParaCarregamentoEntidade(FiltroImovelAtualizacaoCadastralDM.MUNICIPIO);

		Collection<ImovelAtualizacaoCadastralDM> colecaoImovelAtualizacaoCadastral = getControladorUtil()
				.pesquisar(filtroImovelAtualizacaoCadastral,
						ImovelAtualizacaoCadastralDM.class.getName());
		if (!Util.isVazioOrNulo(colecaoImovelAtualizacaoCadastral)) {
			Collection<Integer> colecaoImoveis = new ArrayList<Integer>();

			ImovelAtualizacaoCadastralDM imovelAtualizacaoCadastral = null;

			Iterator<?> it = colecaoImovelAtualizacaoCadastral.iterator();
			while (it.hasNext()) {
				imovelAtualizacaoCadastral = (ImovelAtualizacaoCadastralDM) it
						.next();

				colecaoImoveis.add(imovelAtualizacaoCadastral.getId());

				retorno.append("20|");
				retorno.append(Util
						.formatarCampoParaConcatenacao(imovelAtualizacaoCadastral
								.getId().toString())); // 1
				retorno.append(Util
						.formatarCampoParaConcatenacao(imovelAtualizacaoCadastral
								.getIdImovel().toString())); // 2
				retorno.append(Util
						.formatarCampoParaConcatenacao(imovelAtualizacaoCadastral
								.getMunicipio().getId())); // 3
				retorno.append(Util
						.formatarCampoParaConcatenacao(imovelAtualizacaoCadastral
								.getMunicipio().getNome())); // 4
				retorno.append(Util
						.formatarCampoParaConcatenacao(imovelAtualizacaoCadastral
								.getLocalidade().getId())); // 5

				Localidade localidade = imovelAtualizacaoCadastral
						.getLocalidade();

				localidade = getControladorLocalidade().pesquisarLocalidade(
						localidade.getId());

				if (localidade != null) {
					retorno.append(Util
							.formatarCampoParaConcatenacao(localidade
									.getDescricao())); // 6
				} else {
					retorno.append("|");
				}

				retorno.append(Util
						.formatarCampoParaConcatenacao(imovelAtualizacaoCadastral
								.getCodigoSetorComercial())); // 7
				retorno.append(Util
						.formatarCampoParaConcatenacao(imovelAtualizacaoCadastral
								.getNumeroQuadra())); // 8
				retorno.append(Util
						.formatarCampoParaConcatenacao(imovelAtualizacaoCadastral
								.getNumeroLote())); // 9
				retorno.append(Util
						.formatarCampoParaConcatenacao(imovelAtualizacaoCadastral
								.getNumeroSubLote())); // 10
				retorno.append(Util
						.formatarCampoParaConcatenacao(imovelAtualizacaoCadastral
								.getIdLogradouro())); // 11

				if (imovelAtualizacaoCadastral.getEnderecoReferencia() != null) {
					retorno.append(Util
							.formatarCampoParaConcatenacao(imovelAtualizacaoCadastral
									.getEnderecoReferencia().getId())); // 12
				} else {
					retorno.append("|");
				}
				retorno.append(Util
						.formatarCampoParaConcatenacao(imovelAtualizacaoCadastral
								.getNumeroImovel())); // 13
				retorno.append(Util
						.formatarCampoParaConcatenacao(imovelAtualizacaoCadastral
								.getComplementoEndereco())); // 14
				retorno.append(Util
						.formatarCampoParaConcatenacao(imovelAtualizacaoCadastral
								.getCodigoLogradouroBairro())); // 15
				retorno.append(Util
						.formatarCampoParaConcatenacao(imovelAtualizacaoCadastral
								.getCodigoLogradouroCep())); // 16
				retorno.append(Util
						.formatarCampoParaConcatenacao(imovelAtualizacaoCadastral
								.getImovelPerfil().getId())); // 17
				retorno.append(Util
						.formatarCampoParaConcatenacao(imovelAtualizacaoCadastral
								.getNumeroMedidorEnergia())); // 18
				retorno.append(Util
						.formatarCampoParaConcatenacao(imovelAtualizacaoCadastral
								.getNumeroMorador())); // 19
				retorno.append(Util
						.formatarCampoParaConcatenacao(imovelAtualizacaoCadastral
								.getPavimentoRua().getId())); // 20
				retorno.append(Util
						.formatarCampoParaConcatenacao(imovelAtualizacaoCadastral
								.getPavimentoCalcada().getId())); // 21
				retorno.append(Util
						.formatarCampoParaConcatenacao(imovelAtualizacaoCadastral
								.getFonteAbastecimento().getId())); // 22
				retorno.append(Util
						.formatarCampoParaConcatenacao(imovelAtualizacaoCadastral
								.getLigacaoAguaSituacao().getId())); // 23
				retorno.append(Util
						.formatarCampoParaConcatenacao(imovelAtualizacaoCadastral
								.getLigacaoEsgotoSituacao().getId())); // 24
				retorno.append("|"); // 25
				retorno.append(Util
						.formatarCampoParaConcatenacao(imovelAtualizacaoCadastral
								.getIdBairro())); // 26
				retorno.append(Util
						.formatarCampoParaConcatenacao(imovelAtualizacaoCadastral
								.getCodigoCep())); // 27

				retorno.append(Util
						.formatarCampoParaConcatenacao(imovelAtualizacaoCadastral
								.getCoordenadaX())); // 28
				retorno.append(Util
						.formatarCampoParaConcatenacao(imovelAtualizacaoCadastral
								.getCoordenadaY())); // 29

				// SetorComercial setorComercial =
				// getControladorCobranca().obterSetorComercialLocalidade(imovelAtualizacaoCadastral.getLocalidade().getId().toString(),
				// String.valueOf(imovelAtualizacaoCadastral.getCodigoSetorComercial()));
				// retorno.append(Util.formatarCampoParaConcatenacao(setorComercial.getDescricao()));
				// //28

				retorno.append("\n");
			}

			// Gerar Registro Tipo 21 - Cliente Atualização Cadastral
			retorno.append(this.gerarRegistroTipo21AC(colecaoImoveis));

			// Gerar Registro Tipo 23 - Hidrômetro Instalação Histórico
			// Atualização Cadastral
			retorno.append(this.gerarRegistroTipo23AC(colecaoImoveis));

			// Gerar Registro Tipo 24 - Imóvel Subcategoria Atualização
			// Cadastral
			retorno.append(this.gerarRegistroTipo24AC(colecaoImoveis));
		}

		return retorno.toString();
	}

	/**
	 * Pesquisar Registro Tipo 24 - Imóvel Subcategoria Atualização Cadastral
	 * 
	 * @author Diogo Luiz
	 * @date 27/08/2014
	 */
	private String gerarRegistroTipo24AC(Collection<Integer> colecaoImoveis)
			throws ControladorException {
		StringBuilder retorno = new StringBuilder();

		Collection colImovelSubCategoria = new ArrayList();

		if (colecaoImoveis.size() > 999) {
			List<List<Integer>> particoes = CollectionUtil.particao(
					(List<Integer>) colecaoImoveis, 999);

			int qtdQuebras = 999;
			int indice = colecaoImoveis.size() / qtdQuebras;

			if (colecaoImoveis.size() % qtdQuebras != 0) {
				indice++;
			}

			for (int i = 0; i < indice; i++) {
				Collection colecaoAux = null;

				FiltroImovelSubcategoriaAtualizacaoCadastralDM filtroImovelSubCategoria = new FiltroImovelSubcategoriaAtualizacaoCadastralDM(
						FiltroImovelSubcategoriaAtualizacaoCadastralDM.ID);

				filtroImovelSubCategoria
						.adicionarParametro(new ParametroSimplesIn(
								FiltroImovelSubcategoriaAtualizacaoCadastralDM.ID_IMOVEL_ATUALIZACAO_CADASTRAL,
								particoes.get(i)));

				colecaoAux = getControladorUtil().pesquisar(
						filtroImovelSubCategoria,
						ImovelSubcategoriaAtualizacaoCadastralDM.class
								.getName());

				colImovelSubCategoria.addAll(colecaoAux);
			}
		} else {
			FiltroImovelSubcategoriaAtualizacaoCadastralDM filtroImovelSubCategoria = new FiltroImovelSubcategoriaAtualizacaoCadastralDM(
					FiltroImovelSubcategoriaAtualizacaoCadastralDM.ID);

			filtroImovelSubCategoria
					.adicionarParametro(new ParametroSimplesIn(
							FiltroImovelSubcategoriaAtualizacaoCadastralDM.ID_IMOVEL_ATUALIZACAO_CADASTRAL,
							colecaoImoveis));

			colImovelSubCategoria = getControladorUtil().pesquisar(
					filtroImovelSubCategoria,
					ImovelSubcategoriaAtualizacaoCadastralDM.class.getName());
		}

		if (!Util.isVazioOrNulo(colImovelSubCategoria)) {
			ImovelSubcategoriaAtualizacaoCadastralDM imovelSubCategoria = null;

			Iterator<?> it = colImovelSubCategoria.iterator();
			while (it.hasNext()) {
				imovelSubCategoria = (ImovelSubcategoriaAtualizacaoCadastralDM) it
						.next();

				retorno.append("24|");
				retorno.append(Util
						.formatarCampoParaConcatenacao(imovelSubCategoria
								.getImovelAtualizacaoCadastralDM().getId()));
				// retorno.append(Util.formatarCampoParaConcatenacao(imovelSubCategoria.getImovelAtualizacaoCadastralDM().getIdImovel()));
				retorno.append(Util
						.formatarCampoParaConcatenacao(imovelSubCategoria
								.getCategoria().getId()));
				retorno.append(Util
						.formatarCampoParaConcatenacao(imovelSubCategoria
								.getSubcategoria().getId()));
				retorno.append(Util
						.formatarCampoParaConcatenacao(imovelSubCategoria
								.getQuantidadeEconomias()));
				retorno.append("\n");
			}
		}

		return retorno.toString();
	}

	/**
	 * Pesquisar Registro Tipo 23 - Hidrômetro Instalação Histórico Atualização
	 * Cadastral
	 * 
	 * @author Diogo Luiz
	 * @date 27/08/2014
	 */
	private String gerarRegistroTipo23AC(Collection<Integer> colecaoImoveis)
			throws ControladorException {
		StringBuilder retorno = new StringBuilder();

		Collection colHidrometroAtualizacaoCadastral = new ArrayList();

		if (colecaoImoveis.size() > 999) {
			List<List<Integer>> particoes = CollectionUtil.particao(
					(List<Integer>) colecaoImoveis, 999);

			int qtdQuebras = 999;
			int indice = colecaoImoveis.size() / qtdQuebras;

			if (colecaoImoveis.size() % qtdQuebras != 0) {
				indice++;
			}

			for (int i = 0; i < indice; i++) {
				Collection colecaoAux = null;

				FiltroHidrometroInstalacaoHistoricoAtualizacaoCadastralDM filtroHidrometro = new FiltroHidrometroInstalacaoHistoricoAtualizacaoCadastralDM(
						FiltroHidrometroInstalacaoHistoricoAtualizacaoCadastralDM.ID);
				filtroHidrometro
						.adicionarCaminhoParaCarregamentoEntidade(FiltroHidrometroInstalacaoHistoricoAtualizacaoCadastralDM.HIDROMETRO_LOCAL_INSTALACAO);
				filtroHidrometro
						.adicionarCaminhoParaCarregamentoEntidade(FiltroHidrometroInstalacaoHistoricoAtualizacaoCadastralDM.HIDROMETRO_PROTECAO);
				filtroHidrometro
						.adicionarCaminhoParaCarregamentoEntidade(FiltroHidrometroInstalacaoHistoricoAtualizacaoCadastralDM.IMOVEL_ATUALIZACAO_CADASTRAL);

				filtroHidrometro
						.adicionarParametro(new ParametroSimplesIn(
								FiltroHidrometroInstalacaoHistoricoAtualizacaoCadastralDM.ID_IMOVEL_ATUALIZACAO_CADASTRAL,
								particoes.get(i)));

				colecaoAux = getControladorUtil()
						.pesquisar(
								filtroHidrometro,
								HidrometroInstalacaoHistoricoAtualizacaoCadastralDM.class
										.getName());

				colHidrometroAtualizacaoCadastral.addAll(colecaoAux);

			}
		} else {

			FiltroHidrometroInstalacaoHistoricoAtualizacaoCadastralDM filtroHidrometro = new FiltroHidrometroInstalacaoHistoricoAtualizacaoCadastralDM(
					FiltroHidrometroInstalacaoHistoricoAtualizacaoCadastralDM.ID);
			filtroHidrometro
					.adicionarCaminhoParaCarregamentoEntidade(FiltroHidrometroInstalacaoHistoricoAtualizacaoCadastralDM.HIDROMETRO_LOCAL_INSTALACAO);
			filtroHidrometro
					.adicionarCaminhoParaCarregamentoEntidade(FiltroHidrometroInstalacaoHistoricoAtualizacaoCadastralDM.HIDROMETRO_PROTECAO);
			filtroHidrometro
					.adicionarCaminhoParaCarregamentoEntidade(FiltroHidrometroInstalacaoHistoricoAtualizacaoCadastralDM.IMOVEL_ATUALIZACAO_CADASTRAL);

			filtroHidrometro
					.adicionarParametro(new ParametroSimplesIn(
							FiltroHidrometroInstalacaoHistoricoAtualizacaoCadastralDM.ID_IMOVEL_ATUALIZACAO_CADASTRAL,
							colecaoImoveis));

			colHidrometroAtualizacaoCadastral = getControladorUtil().pesquisar(
					filtroHidrometro,
					HidrometroInstalacaoHistoricoAtualizacaoCadastralDM.class
							.getName());
		}

		if (!Util.isVazioOrNulo(colHidrometroAtualizacaoCadastral)) {
			HidrometroInstalacaoHistoricoAtualizacaoCadastralDM hidrometroHistorico = null;

			Iterator<?> it = colHidrometroAtualizacaoCadastral.iterator();
			while (it.hasNext()) {
				hidrometroHistorico = (HidrometroInstalacaoHistoricoAtualizacaoCadastralDM) it
						.next();

				retorno.append("23|");
				retorno.append(Util
						.formatarCampoParaConcatenacao(hidrometroHistorico
								.getId()));
				retorno.append(Util
						.formatarCampoParaConcatenacao(hidrometroHistorico
								.getImovelAtualizacaoCadastralDM().getId()));
				retorno.append(Util
						.formatarCampoParaConcatenacao(hidrometroHistorico
								.getMedicaoTipo().getId()));
				retorno.append(Util
						.formatarCampoParaConcatenacao(hidrometroHistorico
								.getNumeroHidrometro()));
				retorno.append(Util
						.formatarCampoParaConcatenacao(hidrometroHistorico
								.getHidrometroLocalInstalacao().getId()));
				retorno.append(Util
						.formatarCampoParaConcatenacao(hidrometroHistorico
								.getHidrometroProtecao().getId()));
				retorno.append("|");
				retorno.append(Util
						.formatarCampoParaConcatenacao(hidrometroHistorico
								.getNumeroInstalacaoHidrometro()));
				retorno.append("\n");
			}
		}

		return retorno.toString();
	}

	/**
	 * Pesquisar Registro Tipo 21 - Cliente Atualização Cadastral
	 * 
	 * @author Diogo Luiz
	 * @date 27/08/2014
	 */
	private String gerarRegistroTipo21AC(Collection<Integer> colecaoImoveis)
			throws ControladorException {
		StringBuilder retorno = new StringBuilder();

		Collection colClienteAtualizacaoCadastral = new ArrayList();

		if (colecaoImoveis.size() > 999) {
			List<List<Integer>> particoes = CollectionUtil.particao(
					(List<Integer>) colecaoImoveis, 999);

			int qtdQuebras = 999;
			int indice = colecaoImoveis.size() / qtdQuebras;

			if (colecaoImoveis.size() % qtdQuebras != 0) {
				indice++;
			}

			for (int i = 0; i < indice; i++) {

				Collection colecaoAux = null;

				FiltroClienteAtualizacaoCadastralDM filtroClienteAtualizacaoCadastral = new FiltroClienteAtualizacaoCadastralDM(
						FiltroClienteAtualizacaoCadastralDM.ID);

				filtroClienteAtualizacaoCadastral
						.adicionarParametro(new ParametroSimplesIn(
								FiltroClienteAtualizacaoCadastralDM.ID_IMOVEL_ATUALIZACAO_CADASTRAL,
								particoes.get(i)));

				colecaoAux = getControladorUtil().pesquisar(
						filtroClienteAtualizacaoCadastral,
						ClienteAtualizacaoCadastralDM.class.getName());

				colClienteAtualizacaoCadastral.addAll(colecaoAux);
			}

		} else {

			FiltroClienteAtualizacaoCadastralDM filtroClienteAtualizacaoCadastral = new FiltroClienteAtualizacaoCadastralDM(
					FiltroClienteAtualizacaoCadastralDM.ID);

			filtroClienteAtualizacaoCadastral
					.adicionarParametro(new ParametroSimplesIn(
							FiltroClienteAtualizacaoCadastralDM.ID_IMOVEL_ATUALIZACAO_CADASTRAL,
							colecaoImoveis));

			colClienteAtualizacaoCadastral = getControladorUtil().pesquisar(
					filtroClienteAtualizacaoCadastral,
					ClienteAtualizacaoCadastralDM.class.getName());
		}

		if (!Util.isVazioOrNulo(colClienteAtualizacaoCadastral)) {
			Collection<Integer> colecaoClientes = new ArrayList<Integer>();

			ClienteAtualizacaoCadastralDM clienteAtualizacaoCadastral = null;

			Iterator<?> it = colClienteAtualizacaoCadastral.iterator();
			while (it.hasNext()) {
				clienteAtualizacaoCadastral = (ClienteAtualizacaoCadastralDM) it
						.next();

				colecaoClientes.add(clienteAtualizacaoCadastral.getId());

				retorno.append("21|");
				retorno.append(Util
						.formatarCampoParaConcatenacao(clienteAtualizacaoCadastral
								.getId().toString()));
				retorno.append(Util
						.formatarCampoParaConcatenacao(clienteAtualizacaoCadastral
								.getImovelAtualizacaoCadastralDM().getId()
								.toString()));
				retorno.append(Util
						.formatarCampoParaConcatenacao(clienteAtualizacaoCadastral
								.getClienteTipo().getId()));
				retorno.append(Util
						.formatarCampoParaConcatenacao(clienteAtualizacaoCadastral
								.getCpfCnpj()));
				retorno.append(Util
						.formatarCampoParaConcatenacao(clienteAtualizacaoCadastral
								.getNomeCliente()));
				retorno.append(Util
						.formatarCampoParaConcatenacao(clienteAtualizacaoCadastral
								.getRg()));

				if (clienteAtualizacaoCadastral.getOrgaoExpedidorRG() != null) {
					retorno.append(Util
							.formatarCampoParaConcatenacao(clienteAtualizacaoCadastral
									.getOrgaoExpedidorRG().getId()));
				} else {
					retorno.append("|");
				}

				if (clienteAtualizacaoCadastral.getUnidadeFederacao() != null) {
					retorno.append(Util
							.formatarCampoParaConcatenacao(clienteAtualizacaoCadastral
									.getUnidadeFederacao().getId()));
				} else {
					retorno.append("|");
				}

				if (clienteAtualizacaoCadastral.getSexo() != null) {
					retorno.append(Util
							.formatarCampoParaConcatenacao(clienteAtualizacaoCadastral
									.getSexo().getId()));
				} else {
					retorno.append("|");
				}

				String dataEmissao = "";
				if (clienteAtualizacaoCadastral.getDataEmissaoRg() != null) {
					dataEmissao = Util.formatarData(clienteAtualizacaoCadastral
							.getDataEmissaoRg());
				}
				retorno.append(Util.formatarCampoParaConcatenacao(dataEmissao));

				String dataNascimento = "";
				if (clienteAtualizacaoCadastral.getDataNascimento() != null) {
					dataNascimento = Util
							.formatarData(clienteAtualizacaoCadastral
									.getDataNascimento());
				}

				retorno.append(Util
						.formatarCampoParaConcatenacao(dataNascimento));

				retorno.append(Util
						.formatarCampoParaConcatenacao(clienteAtualizacaoCadastral
								.getIdCliente()));

				retorno.append(Util
						.formatarCampoParaConcatenacao(clienteAtualizacaoCadastral
								.getNomeMae()));

				retorno.append("\n");
			}

			// Gerar Registro Tipo 20 - Cliente Fone Atualização Cadastral
			retorno.append(this.gerarRegistroTipo22AC(colecaoClientes));
		}

		return retorno.toString();
	}

	/**
	 * Pesquisar Registro Tipo 22 - Cliente Fone Atualização Cadastral
	 * 
	 * @author Diogo Luiz
	 * @date 27/08/2014
	 */
	private String gerarRegistroTipo22AC(Collection<Integer> colecaoCliente)
			throws ControladorException {
		StringBuilder retorno = new StringBuilder();

		Collection colClienteFoneAtualizacaoCadastral = new ArrayList();

		if (colecaoCliente.size() > 999) {
			List<List<Integer>> particoes = CollectionUtil.particao(
					(List<Integer>) colecaoCliente, 999);

			int qtdQuebras = 999;
			int indice = colecaoCliente.size() / qtdQuebras;

			if (colecaoCliente.size() % qtdQuebras != 0) {
				indice++;
			}

			for (int i = 0; i < indice; i++) {

				Collection colecaoAux = null;

				FiltroClienteFoneAtualizacaoCadastralDM filtroClienteFone = new FiltroClienteFoneAtualizacaoCadastralDM(
						FiltroClienteFoneAtualizacaoCadastralDM.ID);
				filtroClienteFone
						.adicionarCaminhoParaCarregamentoEntidade(FiltroClienteFoneAtualizacaoCadastralDM.CLIENTE_ATUALIZACAO_CADASTRAL);

				filtroClienteFone
						.adicionarParametro(new ParametroSimplesIn(
								FiltroClienteFoneAtualizacaoCadastralDM.ID_CLIENTE_ATUALIZACAO_CADASTRAL,
								particoes.get(i)));

				colecaoAux = getControladorUtil().pesquisar(filtroClienteFone,
						ClienteFoneAtualizacaoCadastralDM.class.getName());

				colClienteFoneAtualizacaoCadastral.addAll(colecaoAux);
			}
		} else {

			FiltroClienteFoneAtualizacaoCadastralDM filtroClienteFone = new FiltroClienteFoneAtualizacaoCadastralDM(
					FiltroClienteFoneAtualizacaoCadastralDM.ID);
			filtroClienteFone
					.adicionarCaminhoParaCarregamentoEntidade(FiltroClienteFoneAtualizacaoCadastralDM.CLIENTE_ATUALIZACAO_CADASTRAL);

			filtroClienteFone
					.adicionarParametro(new ParametroSimplesIn(
							FiltroClienteFoneAtualizacaoCadastralDM.ID_CLIENTE_ATUALIZACAO_CADASTRAL,
							colecaoCliente));

			colClienteFoneAtualizacaoCadastral = getControladorUtil()
					.pesquisar(filtroClienteFone,
							ClienteFoneAtualizacaoCadastralDM.class.getName());
		}

		if (!Util.isVazioOrNulo(colClienteFoneAtualizacaoCadastral)) {
			ClienteFoneAtualizacaoCadastralDM clienteFoneAtualizacaoCadastral = null;

			Iterator<?> it = colClienteFoneAtualizacaoCadastral.iterator();
			while (it.hasNext()) {
				clienteFoneAtualizacaoCadastral = (ClienteFoneAtualizacaoCadastralDM) it
						.next();

				retorno.append("22|");
				retorno.append(Util
						.formatarCampoParaConcatenacao(clienteFoneAtualizacaoCadastral
								.getClienteAtualizacaoCadastralDM().getId()));
				retorno.append(Util
						.formatarCampoParaConcatenacao(clienteFoneAtualizacaoCadastral
								.getClienteAtualizacaoCadastralDM()
								.getIdCliente()));
				retorno.append(Util
						.formatarCampoParaConcatenacao(clienteFoneAtualizacaoCadastral
								.getFoneTipo().getId()));
				retorno.append(Util
						.formatarCampoParaConcatenacao(clienteFoneAtualizacaoCadastral
								.getDdd()));
				retorno.append(Util
						.formatarCampoParaConcatenacao(clienteFoneAtualizacaoCadastral
								.getTelefone()));
				retorno.append(Util
						.formatarCampoParaConcatenacao(clienteFoneAtualizacaoCadastral
								.getIndicadorFonePadrao()));
				retorno.append("\n");
			}
		}

		return retorno.toString();
	}

	/**
	 * Pesquisar Registro Tipo 36 - Setor Comercial
	 * 
	 * @author Diogo Luiz
	 * @date 27/08/2014
	 */
	private String gerarRegistroTipo36AC(
			Collection<Integer> colecaoSetorComercial, Integer idLocalidade)
			throws ControladorException {
		StringBuilder retorno = new StringBuilder();

		for (Integer codigo : colecaoSetorComercial) {
			SetorComercial setorComercial = getControladorCobranca()
					.obterSetorComercialLocalidade(idLocalidade.toString(),
							codigo.toString());

			retorno.append("36|");
			retorno.append(Util.formatarCampoParaConcatenacao(setorComercial
					.getId()));
			retorno.append(Util.formatarCampoParaConcatenacao(setorComercial
					.getCodigo()));
			retorno.append(Util.formatarCampoParaConcatenacao(setorComercial
					.getDescricao()));
			retorno.append("\n");
		}

		return retorno.toString();
	}

	public Collection<Integer> pesquisarImoveisAtualizacaoCadastral(
			Integer idParametro) throws ControladorException {
		try {
			return repositorioCadastro
					.pesquisarImoveisAtualizacaoCadastral(idParametro);
		} catch (Exception e) {
			sessionContext.setRollbackOnly();
			throw new ControladorException("erro.sistema", e);
		}
	}

	/**
	 * [UC1392] - Consultar Roteiro Dispositivo Movel Atualizacao Cadastral
	 * 
	 * @author André Miranda
	 * @since 01/09/2014
	 * 
	 * @param idParametro
	 * @return Retorna um Collection<Integer> com os numeros das quadras
	 * @throws ControladorException
	 */
	public Collection<Integer> pesquisarRoteiroQuadra(Integer idParametro)
			throws ControladorException {
		try {
			return repositorioCadastro.pesquisarRoteiroQuadra(idParametro);
		} catch (Exception e) {
			sessionContext.setRollbackOnly();
			throw new ControladorException("erro.sistema", e);
		}
	}

	/**
	 * @author Diogo Luiz
	 * @date 04/09/2014
	 * 
	 * @param helper
	 * @return
	 * @throws ControladorException
	 */
	public void atualizarSituacaoTransmissaoImovel(Integer idComando)
			throws ControladorException {
		try {

			repositorioImovel.atualizarSituacaoTransmissaoImovel(idComando);

		} catch (Exception e) {
			sessionContext.setRollbackOnly();
			throw new ControladorException("erro.sistema", e);
		}
	}

	/**
	 * [UC1393] Processar Requisições do Dispositivo Móvel Atualização
	 * Cadastral.
	 * 
	 * Recebe o dados de apenas um imóvel.
	 * 
	 * @author Diogo Luiz
	 * @date 05/09/2014
	 * 
	 * @param buffer
	 *            BufferedReader
	 * @throws ControladorException
	 */
	public void atualizarMovimentoImovelAtualizacaoCadastral(
			BufferedReader buffer) throws ControladorException {

		String idComando = "0";
		String linha = "";

		String REGISTRO_TIPO_FINALIZA_ARQUIVO = "00";
		String REGISTRO_TIPO_CEP = "01";
		String REGISTRO_TIPO_LOGRADOURO = "02";
		String REGISTRO_TIPO_LOGRADOURO_BAIRRO = "03";
		String REGISTRO_TIPO_LOGRADOURO_CEP = "04";
		String REGISTRO_TIPO_IMOVEL = "05";
		String REGISTRO_TIPO_CLIENTE = "06";
		String REGISTRO_TIPO_CLIENTE_FONE = "07";
		String REGISTRO_TIPO_HIDROMETRO = "08";
		String REGISTRO_TIPO_SUBCATEGORIA = "09";
		String REGISTRO_TIPO_OCORRENCIA = "10";
		String REGISTRO_TIPO_USUARIO_SEM_LOGIN = "13";

		ArquivoTextoAtualizacaoCadastralDM atualizacaoCadastralArquivoTexto = null;

		try {

			if (buffer == null) {
				throw new ControladorException(
						"Arquivo de Atualização Cadastral sem dados");
			}
			boolean imovelNaoTransmitido = true;

			ImovelAtualizacaoCadastralDM imovel = new ImovelAtualizacaoCadastralDM();
			Integer idImovelAtualizacaoCadastral = null;
			while ((linha = buffer.readLine()) != null) {

				String tipoRegistro = linha.substring(0, 2);
				List<String> colArquivos = new ArrayList<String>();

				colArquivos = Util.split(linha);

				System.out
						.println("INICIO-ATUALIZA O MOVIMENTO IMOVEL ATUALIZACAO CADASTRAL: CRIA REGISTRO");

				if (tipoRegistro.equals(REGISTRO_TIPO_USUARIO_SEM_LOGIN)) {
					throw new ControladorException(
							"atencao.arquivo_usuario_sem_login");
				} else if (tipoRegistro.equals(REGISTRO_TIPO_FINALIZA_ARQUIVO)) {

					idComando = (colArquivos.get(1));

					System.out
							.println("INICIO-ATUALIZA O MOVIMENTO IMOVEL ATUALIZACAO CADASTRAL: CRIA REGISTRO DADOS PARAMETROS");

					FiltroArquivoTextoAtualizacaoCadastralDM filtro = new FiltroArquivoTextoAtualizacaoCadastralDM();

					filtro.adicionarParametro(new ParametroSimples(
							FiltroArquivoTextoAtualizacaoCadastralDM.ID_PARAMETRO_TABELA_ATUALIZACAO_CADASTRO,
							idComando));
					filtro.adicionarCaminhoParaCarregamentoEntidade(FiltroArquivoTextoAtualizacaoCadastralDM.PARAMETRO_TABELA_ATUALIZACAO_CADASTRO);
					filtro.adicionarCaminhoParaCarregamentoEntidade(FiltroArquivoTextoAtualizacaoCadastralDM.EMPRESA);

					Collection<ArquivoTextoAtualizacaoCadastralDM> colArquivoTexto = this
							.getControladorUtil().pesquisar(
									filtro,
									ArquivoTextoAtualizacaoCadastralDM.class
											.getName());

					atualizacaoCadastralArquivoTexto = (ArquivoTextoAtualizacaoCadastralDM) Util
							.retonarObjetoDeColecao(colArquivoTexto);

					if (atualizacaoCadastralArquivoTexto != null
							&& atualizacaoCadastralArquivoTexto
									.getSituacaoTransmissao()
									.getId()
									.equals(SituacaoTransmissaoLeitura.EM_CAMPO)) {

						SituacaoTransmissaoAtualizacaoCadastralDM situacaoTransmissaoLeitura = new SituacaoTransmissaoAtualizacaoCadastralDM();
						situacaoTransmissaoLeitura
								.setId(SituacaoTransmissaoLeitura.TRANSMITIDO);

						atualizacaoCadastralArquivoTexto
								.setSituacaoTransmissao(situacaoTransmissaoLeitura);

						atualizacaoCadastralArquivoTexto
								.setDataFinalizacaoArquivo(new Date());

						atualizacaoCadastralArquivoTexto
								.setUltimaAlteracao(new Date());

						repositorioUtil
								.atualizar(atualizacaoCadastralArquivoTexto);

						// Atualizar Situacao de transmissao do imóvel -- Libera
						// para um novo roteiro todos os imoveis que nao
						// foram atualizados desse comando.
						repositorioImovel
								.atualizarSituacaoTransmissaoImovel(Integer
										.valueOf(idComando));

					} else {
						throw new ControladorException(
								"atencao.arquivo_finalizado");
					}

					System.out
							.println("FIM-ATUALIZA O MOVIMENTO IMOVEL ATUALIZACAO CADASTRAL: CRIA REGISTRO DADOS PARAMETROS");

				} else if (tipoRegistro.equals(REGISTRO_TIPO_CEP)) {

					System.out
							.println("INICIO-ATUALIZA O MOVIMENTO IMOVEL ATUALIZACAO CADASTRAL: CRIA REGISTRO DADOS CEP");

					FiltroCepAtlzCadDM filtroCepAtlzCad = new FiltroCepAtlzCadDM();
					filtroCepAtlzCad.adicionarParametro(new ParametroSimples(
							FiltroCepAtlzCadDM.ID_CEP_ATLZ_CAD, colArquivos
									.get(1)));

					Collection<CepAtlzCadDM> colecaoCep = this
							.getControladorUtil().pesquisar(filtroCepAtlzCad,
									CepAtlzCadDM.class.getName());

					CepAtlzCadDM ceAtlzCad = adicionarCepAtlzCad(colArquivos);
					if (colecaoCep != null && !colecaoCep.isEmpty()) {
						getControladorUtil().atualizar(ceAtlzCad);
					} else {
						getControladorUtil().inserir(ceAtlzCad);
					}

					System.out
							.println("FIM-ATUALIZA O MOVIMENTO IMOVEL ATUALIZACAO CADASTRAL: CRIA REGISTRO DADOS CEP");

				} else if (tipoRegistro.equals(REGISTRO_TIPO_LOGRADOURO)) {

					System.out
							.println("INICIO-ATUALIZA O MOVIMENTO IMOVEL ATUALIZACAO CADASTRAL: CRIA REGISTRO DADOS LOGRADOURO");

					FiltroLogradouroAtlzCadDM filtroLogradouroAtlzCad = new FiltroLogradouroAtlzCadDM();
					filtroLogradouroAtlzCad
							.adicionarParametro(new ParametroSimples(
									FiltroLogradouroAtlzCadDM.CODIGO,
									colArquivos.get(1)));

					Collection<LogradouroAtlzCadDM> colecaoLogradouroAtlzCad = this
							.getControladorUtil().pesquisar(
									filtroLogradouroAtlzCad,
									LogradouroAtlzCadDM.class.getName());

					// Caso já tenha inserido o logradouro , não existe mais a
					// necessidade de inserir o mesmo logradouro
					if (colecaoLogradouroAtlzCad == null
							|| colecaoLogradouroAtlzCad.isEmpty()) {
						LogradouroAtlzCadDM logradouroAtlzCad = adicionarLogradouroAtlzCad(colArquivos);
						getControladorUtil().inserir(logradouroAtlzCad);
					} else {
						// Caso transmita um logradouro ja atualizado pro gsan.
						LogradouroAtlzCadDM logradouroAtlzCad = (LogradouroAtlzCadDM) Util
								.retonarObjetoDeColecao(colecaoLogradouroAtlzCad);
						if (logradouroAtlzCad.getIndicadorAtualizado().equals(
								ConstantesSistema.SIM)) {
							logradouroAtlzCad
									.setIndicadorAtualizado(ConstantesSistema.NAO);
							getControladorUtil().atualizar(logradouroAtlzCad);
						}
					}

					System.out
							.println("FIM-ATUALIZA O MOVIMENTO IMOVEL ATUALIZACAO CADASTRAL: CRIA REGISTRO DADOS LOGRADOURO");

				} else if (tipoRegistro.equals(REGISTRO_TIPO_LOGRADOURO_BAIRRO)) {

					System.out
							.println("INICIO-ATUALIZA O MOVIMENTO IMOVEL ATUALIZACAO CADASTRAL: CRIA REGISTRO DADOS LOGRADOURO BAIRRO");

					String codigo = colArquivos.get(1);
					Bairro bairro = new Bairro();
					bairro.setId(Integer.valueOf(colArquivos.get(2)));

					FiltroLogradouroBairroAtlzCadDM filtroLogradouroBairroAtlzCad = new FiltroLogradouroBairroAtlzCadDM();
					filtroLogradouroBairroAtlzCad
							.adicionarParametro(new ParametroSimples(
									FiltroLogradouroBairroAtlzCadDM.ID_BAIRRO,
									bairro.getId()));
					filtroLogradouroBairroAtlzCad
							.adicionarParametro(new ParametroSimples(
									FiltroLogradouroBairroAtlzCadDM.CODIGO_LOGRADOURO_ATLZ_CAD,
									codigo));

					Collection<LogradouroBairroAtlzCadDM> colecaoLogradouroBairroAtlzCad = getControladorUtil()
							.pesquisar(filtroLogradouroBairroAtlzCad,
									LogradouroBairroAtlzCadDM.class.getName());

					if (colecaoLogradouroBairroAtlzCad == null
							|| colecaoLogradouroBairroAtlzCad.isEmpty()) {
						LogradouroBairroAtlzCadDM logradouroBairroAtlzCad = adicionarLogradouroBairroAtlzCad(colArquivos);
						getControladorUtil().inserir(logradouroBairroAtlzCad);
					}

					System.out
							.println("FIM-ATUALIZA O MOVIMENTO IMOVEL ATUALIZACAO CADASTRAL: CRIA REGISTRO DADOS LOGRADOURO BAIRRO");

				} else if (tipoRegistro.equals(REGISTRO_TIPO_LOGRADOURO_CEP)) {

					System.out
							.println("INICIO-ATUALIZA O MOVIMENTO IMOVEL ATUALIZACAO CADASTRAL: CRIA REGISTRO DADOS LOGRADOURO CEP");

					String codigoCep = colArquivos.get(1);
					CepAtlzCadDM cepAtlzCad = new CepAtlzCadDM();
					cepAtlzCad.setId(codigoCep);
					String codigo = colArquivos.get(2);

					FiltroLogradouroCepAtlzCadDM filtroLogradouroCepAtlzCad = new FiltroLogradouroCepAtlzCadDM();
					filtroLogradouroCepAtlzCad
							.adicionarParametro(new ParametroSimples(
									FiltroLogradouroCepAtlzCadDM.ID_CEP_ATLZ_CAD,
									cepAtlzCad.getId()));
					filtroLogradouroCepAtlzCad
							.adicionarParametro(new ParametroSimples(
									FiltroLogradouroCepAtlzCadDM.CODIGO_LOGRADOURO_ATLZ_CAD,
									codigo));

					Collection<LogradouroCepAtlzCadDM> colecaoLogradouroCepAtlzCad = getControladorUtil()
							.pesquisar(filtroLogradouroCepAtlzCad,
									LogradouroCepAtlzCadDM.class.getName());

					if (colecaoLogradouroCepAtlzCad == null
							|| colecaoLogradouroCepAtlzCad.isEmpty()) {
						LogradouroCepAtlzCadDM logradouroCepAtlzCad = adicionarLogradouroCepAtlzCad(colArquivos);
						getControladorUtil().inserir(logradouroCepAtlzCad);
					}

					System.out
							.println("FIM-ATUALIZA O MOVIMENTO IMOVEL ATUALIZACAO CADASTRAL: CRIA REGISTRO DADOS LOGRADOURO CEP");
				} else if (tipoRegistro.equals(REGISTRO_TIPO_IMOVEL)) {

					System.out
							.println("INICIO-ATUALIZA O MOVIMENTO IMOVEL ATUALIZACAO CADASTRAL: CRIA REGISTRO DADOS  IMOVEL");

					if (colArquivos.get(2) != null
							&& !colArquivos.get(2).equals("")
							&& Integer.valueOf(colArquivos.get(2)) > 0) {
						Integer quantidade = repositorioCadastro
								.pesquisarImovelAtlzCadastralJaTransmitido(
										Integer.valueOf(colArquivos.get(2)),
										Integer.valueOf(colArquivos.get(26)));

						if (quantidade != null && quantidade > 0) {
							imovelNaoTransmitido = false;
						} else {
							imovelNaoTransmitido = true;
						}

						// Caso não tenha id do imovel, é inclusão do imovel
					} else {

						Integer quantidade = repositorioCadastro
								.pesquisarImovelAtlzCadastralNovoJaTransmitido(
										colArquivos.get(25),
										Integer.valueOf(colArquivos.get(26)));

						if (quantidade != null && quantidade > 0) {
							imovelNaoTransmitido = false;
						} else {
							imovelNaoTransmitido = true;
						}
					}

					// verifica se o imovel inserido anteriormente, esta
					// integro, sem inconsistencias no ambiente pre-gsan
					if (idImovelAtualizacaoCadastral != null) {
						validaIntegridadeImovelAnterior(idImovelAtualizacaoCadastral);
					}

					if (imovelNaoTransmitido) {
						imovel = adicionarImovelAtualizacaoCadastral(colArquivos);
						getControladorUtil().inserir(imovel);
						// atualiza o codigo do imovel.
						idImovelAtualizacaoCadastral = imovel.getId();
					}
					System.out
							.println("FIM-ATUALIZA O MOVIMENTO IMOVEL ATUALIZACAO CADASTRAL: CRIA REGISTRO DADOS  IMOVEL");
				} else if (tipoRegistro.equals(REGISTRO_TIPO_CLIENTE)) {
					if (imovelNaoTransmitido) {
						System.out
								.println("INICIO-ATUALIZA O MOVIMENTO IMOVEL ATUALIZACAO CADASTRAL: CRIA REGISTRO DADOS  CLIENTE");

						ClienteAtualizacaoCadastralDM clienteAtualizacaoCadastral = adicionarClienteAtualizacaoCadastral(colArquivos);
						getControladorUtil().inserir(
								clienteAtualizacaoCadastral);

						System.out
								.println("FIM-ATUALIZA O MOVIMENTO IMOVEL ATUALIZACAO CADASTRAL: CRIA REGISTRO DADOS  CLIENTE");
					}
				} else if (tipoRegistro.equals(REGISTRO_TIPO_CLIENTE_FONE)) {
					if (imovelNaoTransmitido) {
						System.out
								.println("INICIO-ATUALIZA O MOVIMENTO IMOVEL ATUALIZACAO CADASTRAL: CRIA REGISTRO DADOS  CLIENTE FONE");

						ClienteFoneAtualizacaoCadastralDM clienteFoneAtualizacaoCadastral = adicionarClienteFoneAtualizacaoCadastral(colArquivos);

						getControladorUtil().inserir(
								clienteFoneAtualizacaoCadastral);

						System.out
								.println("FIM-ATUALIZA O MOVIMENTO IMOVEL ATUALIZACAO CADASTRAL: CRIA REGISTRO DADOS  CLIENTE FONE");
					}
				} else if (tipoRegistro.equals(REGISTRO_TIPO_HIDROMETRO)) {
					if (imovelNaoTransmitido) {
						System.out
								.println("INICIO-ATUALIZA O MOVIMENTO IMOVEL ATUALIZACAO CADASTRAL: CRIA REGISTRO DADOS hidrometro");

						HidrometroInstalacaoHistoricoAtualizacaoCadastralDM hidrometro = adicionarHidrometroInstalacaoHistoricoAtualizacaoCadastral(colArquivos);

						getControladorUtil().inserir(hidrometro);

						System.out
								.println("FIM-ATUALIZA O MOVIMENTO IMOVEL ATUALIZACAO CADASTRAL: CRIA REGISTRO DADOS  hidrometro");
					}
				} else if (tipoRegistro.equals(REGISTRO_TIPO_SUBCATEGORIA)) {
					if (imovelNaoTransmitido) {
						System.out
								.println("INICIO-ATUALIZA O MOVIMENTO IMOVEL ATUALIZACAO CADASTRAL: CRIA REGISTRO DADOS ImovelSubcategoriaAtualizacaoCadastral");

						ImovelSubcategoriaAtualizacaoCadastralDM subcategoria = adicionarImovelSubcategoriaAtualizacaoCadastral(colArquivos);
						getControladorUtil().inserir(subcategoria);

						System.out
								.println("FIM-ATUALIZA O MOVIMENTO IMOVEL ATUALIZACAO CADASTRAL: CRIA REGISTRO DADOS  ImovelSubcategoriaAtualizacaoCadastral");
					}
				} else if (tipoRegistro.equals(REGISTRO_TIPO_OCORRENCIA)) {
					if (imovelNaoTransmitido) {
						System.out
								.println("INICIO-ATUALIZA O MOVIMENTO IMOVEL ATUALIZACAO CADASTRAL: CRIA REGISTRO DADOS OCORRENCIA CADASTRO ATLZ CAD");

						ImovelOcorrenciaAtualizacaoCadastralDM ocorrencia = adicionarImovelOcorrenciaAtualizacaoCadastral(colArquivos);
						getControladorUtil().inserir(ocorrencia);

						System.out
								.println("FIM-ATUALIZA O MOVIMENTO IMOVEL ATUALIZACAO CADASTRAL: CRIA REGISTRO DADOS  OCORRENCIA CADASTRO ATLZ CAD");
					}
				}

				System.out
						.println("FIM-ATUALIZA O MOVIMENTO IMOVEL ATUALIZACAO CADASTRAL: CRIA REGISTRO ");
			}

		} catch (Exception ex) {
			throw new ControladorException(ex.getMessage(), ex);
		}
	}

	private ImovelOcorrenciaAtualizacaoCadastralDM adicionarImovelOcorrenciaAtualizacaoCadastral(
			List<String> colArquivos) throws ControladorException {

		ImovelOcorrenciaAtualizacaoCadastralDM ocorrencia = new ImovelOcorrenciaAtualizacaoCadastralDM();

		CadastroOcorrencia cadastroOcorrencia = new CadastroOcorrencia();
		cadastroOcorrencia.setId(Integer.valueOf(colArquivos.get(1)));
		ocorrencia.setCadastroOcorrencia(cadastroOcorrencia);

		Integer idImovelAtlzCadastral = null;
		try {
			idImovelAtlzCadastral = repositorioCadastro
					.pesquisarIdImovelAtualizacaoCadastral(colArquivos.get(2));
		} catch (ErroRepositorioException e) {
			e.printStackTrace();
		}

		ImovelAtualizacaoCadastralDM imovelAtualizacaoCadastral = new ImovelAtualizacaoCadastralDM();
		imovelAtualizacaoCadastral.setId(idImovelAtlzCadastral);
		ocorrencia.setImovelAtualizacaoCadastral(imovelAtualizacaoCadastral);

		ocorrencia.setUltimaAlteracao(new Date());

		return ocorrencia;
	}

	public void atualizarSituacaoDoArquivo(
			int idAtualizacaoCadastralArquivoTexto, Integer situacaoArquivo)
			throws ControladorException {

		FiltroArquivoTextoAtualizacaoCadastralDM filtro = new FiltroArquivoTextoAtualizacaoCadastralDM();
		filtro.adicionarParametro(new ParametroSimples(
				FiltroArquivoTextoAtualizacaoCadastralDM.PARAMETRO_TABELA_ATUALIZACAO_CADASTRO,
				idAtualizacaoCadastralArquivoTexto));

		Collection<ArquivoTextoAtualizacaoCadastralDM> colArquivoTexto = this
				.getControladorUtil().pesquisar(filtro,
						ArquivoTextoAtualizacaoCadastralDM.class.getName());

		ArquivoTextoAtualizacaoCadastralDM atualizacaoCadastralArquivoTexto = (ArquivoTextoAtualizacaoCadastralDM) Util
				.retonarObjetoDeColecao(colArquivoTexto);

		if (atualizacaoCadastralArquivoTexto != null) {
			SituacaoTransmissaoAtualizacaoCadastralDM situacao = new SituacaoTransmissaoAtualizacaoCadastralDM(
					situacaoArquivo);
			atualizacaoCadastralArquivoTexto.setSituacaoTransmissao(situacao);

			if (situacaoArquivo
					.compareTo(SituacaoTransmissaoLeitura.TRANSMITIDO) == 0) {
				atualizacaoCadastralArquivoTexto
						.setDataFinalizacaoArquivo(new Date());
			}

			atualizacaoCadastralArquivoTexto.setUltimaAlteracao(new Date());

			this.getControladorUtil().atualizar(
					atualizacaoCadastralArquivoTexto);

			if (situacaoArquivo.equals(SituacaoTransmissaoLeitura.TRANSMITIDO)) {
				this.atualizarSituacaoTransmissaoImovel(Integer.valueOf(String
						.valueOf(idAtualizacaoCadastralArquivoTexto)));
			}
		}
	}

	private LogradouroCepAtlzCadDM adicionarLogradouroCepAtlzCad(
			List<String> colArquivos) {

		LogradouroCepAtlzCadDM logradouroCepAtlzCad = new LogradouroCepAtlzCadDM();

		try {

			String codigoCep = colArquivos.get(1);
			CepAtlzCadDM cepAtlzCad = new CepAtlzCadDM();
			cepAtlzCad.setId(codigoCep);
			logradouroCepAtlzCad.setCepAtlzCad(cepAtlzCad);

			String codigo = colArquivos.get(2);
			FiltroLogradouroAtlzCadDM filtroLogradouroAtlzCad = new FiltroLogradouroAtlzCadDM();
			filtroLogradouroAtlzCad.adicionarParametro(new ParametroSimples(
					FiltroLogradouroAtlzCadDM.CODIGO, codigo));

			Collection<LogradouroAtlzCadDM> colecaoLogradouroAtlzCad = this
					.getControladorUtil().pesquisar(filtroLogradouroAtlzCad,
							LogradouroAtlzCadDM.class.getName());
			LogradouroAtlzCadDM logradouroAtlzCad = (LogradouroAtlzCadDM) Util
					.retonarObjetoDeColecao(colecaoLogradouroAtlzCad);
			logradouroCepAtlzCad.setLogradouroAtlzCad(logradouroAtlzCad);
			logradouroCepAtlzCad.setUltimaAlteracao(new Date());

		} catch (ControladorException e) {
			e.printStackTrace();
		}

		return logradouroCepAtlzCad;
	}

	private LogradouroBairroAtlzCadDM adicionarLogradouroBairroAtlzCad(
			List<String> colArquivos) {

		LogradouroBairroAtlzCadDM logradouroBairroAtlzCad = new LogradouroBairroAtlzCadDM();

		try {

			String codigo = colArquivos.get(1);
			FiltroLogradouroAtlzCadDM filtroLogradouroAtlzCad = new FiltroLogradouroAtlzCadDM();
			filtroLogradouroAtlzCad.adicionarParametro(new ParametroSimples(
					FiltroLogradouroAtlzCadDM.CODIGO, codigo));
			Collection<LogradouroAtlzCadDM> colecaoLogradouroAtlzCad = this
					.getControladorUtil().pesquisar(filtroLogradouroAtlzCad,
							LogradouroAtlzCadDM.class.getName());
			LogradouroAtlzCadDM logradouroAtlzCad = (LogradouroAtlzCadDM) Util
					.retonarObjetoDeColecao(colecaoLogradouroAtlzCad);

			logradouroBairroAtlzCad.setLogradouroAtlzCadDM(logradouroAtlzCad);

			Bairro bairro = new Bairro();
			bairro.setId(Integer.valueOf(colArquivos.get(2)));

			logradouroBairroAtlzCad.setBairro(bairro);
			logradouroBairroAtlzCad.setUltimaAlteracao(new Date());
		} catch (ControladorException e) {
			e.printStackTrace();
		}

		return logradouroBairroAtlzCad;
	}

	private LogradouroAtlzCadDM adicionarLogradouroAtlzCad(
			List<String> colArquivos) {

		LogradouroAtlzCadDM logradouroAtlzCad = new LogradouroAtlzCadDM();
		logradouroAtlzCad.setCodigo(colArquivos.get(1));
		logradouroAtlzCad.setNome(colArquivos.get(2));
		logradouroAtlzCad.setNomePopular(colArquivos.get(3));
		logradouroAtlzCad.setNomeLoteamento(colArquivos.get(4));

		Municipio municipio = new Municipio();
		if (colArquivos.get(5) != null) {
			municipio.setId(Integer.valueOf(colArquivos.get(5)));
		}
		logradouroAtlzCad.setMunicipio(municipio);

		LogradouroTipo logradouroTipo = new LogradouroTipo();
		if (Util.validarCamposAtualizacaoCadastral(colArquivos.get(6))) {
			logradouroTipo.setId(Integer.valueOf(colArquivos.get(6)));
		}
		logradouroAtlzCad.setLogradouroTipo(logradouroTipo);

		LogradouroTitulo logradouroTitulo = new LogradouroTitulo();
		if (Util.validarCamposAtualizacaoCadastral(colArquivos.get(7))) {
			logradouroTitulo.setId(Integer.valueOf(colArquivos.get(7)));
		}

		logradouroAtlzCad.setLogradouroTitulo(logradouroTitulo);

		logradouroAtlzCad.setUltimaAlteracao(new Date());

		logradouroAtlzCad.setIndicadorAtualizado(ConstantesSistema.NAO);

		Localidade localidade = new Localidade();
		localidade.setId(Integer.valueOf(colArquivos.get(8)));
		logradouroAtlzCad.setLocalidade(localidade);

		Empresa empresa = new Empresa();
		empresa.setId(Integer.valueOf(colArquivos.get(9)));
		logradouroAtlzCad.setEmpresa(empresa);

		return logradouroAtlzCad;
	}

	private CepAtlzCadDM adicionarCepAtlzCad(List<String> colArquivos) {

		CepAtlzCadDM cepAtlzCad = new CepAtlzCadDM();
		cepAtlzCad.setId(colArquivos.get(1));
		cepAtlzCad.setCodigoCep(Integer.parseInt(colArquivos.get(2)));
		cepAtlzCad.setUltimaAlteracao(new Date());

		return cepAtlzCad;
	}

	private ImovelSubcategoriaAtualizacaoCadastralDM adicionarImovelSubcategoriaAtualizacaoCadastral(
			List<String> colArquivos) throws ControladorException {

		ImovelSubcategoriaAtualizacaoCadastralDM subcategoria = new ImovelSubcategoriaAtualizacaoCadastralDM();

		FiltroImovelAtualizacaoCadastralDM filtroImovelAtualizacaoCadastral = new FiltroImovelAtualizacaoCadastralDM();
		filtroImovelAtualizacaoCadastral
				.adicionarParametro(new ParametroSimples(
						FiltroImovelAtualizacaoCadastralDM.CODIGO, colArquivos
								.get(1)));

		Collection<ImovelAtualizacaoCadastralDM> colecaoImovel = this
				.getControladorUtil().pesquisar(
						filtroImovelAtualizacaoCadastral,
						ImovelAtualizacaoCadastralDM.class.getName());

		ImovelAtualizacaoCadastralDM imovelAtualizacaoCadastral = (ImovelAtualizacaoCadastralDM) Util
				.retonarObjetoDeColecao(colecaoImovel);

		subcategoria
				.setImovelAtualizacaoCadastralDM(imovelAtualizacaoCadastral);

		Categoria categoria = new Categoria();
		categoria.setId(Integer.valueOf(colArquivos.get(2)));

		if (categoria.getId().toString().trim().equals("1")) {
			categoria.setDescricao(Categoria.RESIDENCIAL_DESCRICAO);
		} else if (categoria.getId().toString().trim().equals("2")) {
			categoria.setDescricao(Categoria.COMERCIAL_DESCRICAO);
		} else if (categoria.getId().toString().trim().equals("3")) {
			categoria.setDescricao(Categoria.INDUSTRIAL_DESCRICAO);
		} else if (categoria.getId().toString().trim().equals("4")) {
			categoria.setDescricao(Categoria.PUBLICO_DESCRICAO);
		}

		subcategoria.setCategoria(categoria);

		Subcategoria subCategoria = new Subcategoria();
		subCategoria.setId(Integer.valueOf(colArquivos.get(3)));
		subcategoria.setSubcategoria(subCategoria);

		// pesquisa a descricao da subcategoria
		FiltroSubCategoria filtroSubCategoria = new FiltroSubCategoria();
		filtroSubCategoria.adicionarParametro(new ParametroSimples(
				FiltroSubCategoria.ID, subCategoria.getId()));
		Collection<Subcategoria> colecaoSubcategoria = getControladorUtil()
				.pesquisar(filtroSubCategoria, Subcategoria.class.getName());
		if (colecaoSubcategoria != null && !colecaoSubcategoria.isEmpty()) {
			Subcategoria subcategoria2 = (Subcategoria) Util
					.retonarObjetoDeColecao(colecaoSubcategoria);
			subcategoria.setSubcategoria(subcategoria2);
		}

		subcategoria.setQuantidadeEconomias(Short.valueOf(colArquivos.get(4)));

		subcategoria.setUltimaAlteracao(new Date());

		return subcategoria;
	}

	private HidrometroInstalacaoHistoricoAtualizacaoCadastralDM adicionarHidrometroInstalacaoHistoricoAtualizacaoCadastral(
			List<String> colArquivos) {

		HidrometroInstalacaoHistoricoAtualizacaoCadastralDM hidrometro = new HidrometroInstalacaoHistoricoAtualizacaoCadastralDM();

		try {
			FiltroImovelAtualizacaoCadastralDM filtroImovelAtualizacaoCadastral = new FiltroImovelAtualizacaoCadastralDM();
			filtroImovelAtualizacaoCadastral
					.adicionarParametro(new ParametroSimples(
							FiltroImovelAtualizacaoCadastralDM.CODIGO,
							colArquivos.get(1)));

			Collection<ImovelAtualizacaoCadastralDM> colecaoImovel = this
					.getControladorUtil().pesquisar(
							filtroImovelAtualizacaoCadastral,
							ImovelAtualizacaoCadastralDM.class.getName());

			ImovelAtualizacaoCadastralDM imovelAtualizacaoCadastral = (ImovelAtualizacaoCadastralDM) Util
					.retonarObjetoDeColecao(colecaoImovel);

			hidrometro
					.setImovelAtualizacaoCadastralDM(imovelAtualizacaoCadastral);
			hidrometro.setNumeroHidrometro(colArquivos.get(2));

			HidrometroLocalInstalacao hidrometroLocalInstalacao = new HidrometroLocalInstalacao();

			if (Util.validarCamposAtualizacaoCadastral(colArquivos.get(3))) {
				hidrometroLocalInstalacao.setId(Integer.valueOf(colArquivos
						.get(3)));
			}

			hidrometro.setHidrometroLocalInstalacao(hidrometroLocalInstalacao);
			HidrometroProtecao hidrometroProtecao = new HidrometroProtecao();

			if (Util.validarCamposAtualizacaoCadastralAceitaZero(colArquivos
					.get(4))) {
				hidrometroProtecao.setId(Integer.valueOf(colArquivos.get(4)));
			}
			hidrometro.setHidrometroProtecao(hidrometroProtecao);
			hidrometro.setNumeroInstalacaoHidrometro(Integer
					.valueOf(colArquivos.get(6)));
			MedicaoTipo medicaoTipo = new MedicaoTipo();
			medicaoTipo.setId(MedicaoTipo.LIGACAO_AGUA);
			hidrometro.setMedicaoTipo(medicaoTipo);
			hidrometro.setUltimaAlteracao(new Date());
			Date dataInstalacao = imovelAtualizacaoCadastral.getDataVisita();

			if (colArquivos.get(7) != null && !colArquivos.get(7).equals("")) {

				Integer idImovel = Integer.valueOf(colArquivos.get(7));

				Hidrometro hidrometro1 = getControladorMicromedicao()
						.pesquisarHidrometroPeloNumero(
								hidrometro.getNumeroHidrometro());
				if (hidrometro1 != null && hidrometro1.getId() != null) {
					FiltroHidrometroInstalacaoHistorico filtroHidrometroInstalacaoHistorico = new FiltroHidrometroInstalacaoHistorico();
					filtroHidrometroInstalacaoHistorico
							.adicionarParametro(new ParametroSimples(
									FiltroHidrometroInstalacaoHistorico.HIDROMETRO_ID,
									hidrometro1.getId()));
					filtroHidrometroInstalacaoHistorico
							.adicionarParametro(new ParametroSimples(
									FiltroHidrometroInstalacaoHistorico.LIGACAO_AGUA_ID,
									idImovel));

					Collection colecaoHidrometroInstalacaoHistorico = Fachada
							.getInstancia().pesquisar(
									filtroHidrometroInstalacaoHistorico,
									HidrometroInstalacaoHistorico.class
											.getName());
					if (colecaoHidrometroInstalacaoHistorico != null
							&& !colecaoHidrometroInstalacaoHistorico.isEmpty()) {
						HidrometroInstalacaoHistorico hidrometroInstalacaoHistorico = (HidrometroInstalacaoHistorico) Util
								.retonarObjetoDeColecao(colecaoHidrometroInstalacaoHistorico);
						dataInstalacao = hidrometroInstalacaoHistorico
								.getDataInstalacao();
					}
				}
			}

			hidrometro.setDataInstalacaoHidrometro(dataInstalacao);

		} catch (ControladorException e) {
			e.printStackTrace();
		}
		return hidrometro;
	}

	private ClienteFoneAtualizacaoCadastralDM adicionarClienteFoneAtualizacaoCadastral(
			List<String> colArquivos) {

		ClienteFoneAtualizacaoCadastralDM clienteFoneAtualizacaoCadastral = new ClienteFoneAtualizacaoCadastralDM();

		Integer idClienteAtlzCadastral = null;

		try {

			idClienteAtlzCadastral = repositorioCadastro
					.pesquisarIdClienteAtualizacaoCadastral(colArquivos.get(1));

		} catch (ErroRepositorioException e) {
			e.printStackTrace();
		}

		ClienteAtualizacaoCadastralDM clienteAtualizacaoCadastral = new ClienteAtualizacaoCadastralDM();
		clienteAtualizacaoCadastral.setId(idClienteAtlzCadastral);
		clienteFoneAtualizacaoCadastral
				.setClienteAtualizacaoCadastralDM(clienteAtualizacaoCadastral);

		FoneTipo foneTipo = new FoneTipo();
		foneTipo.setId(Integer.valueOf(colArquivos.get(2)));
		clienteFoneAtualizacaoCadastral.setFoneTipo(foneTipo);
		clienteFoneAtualizacaoCadastral.setDdd(colArquivos.get(3));
		clienteFoneAtualizacaoCadastral.setTelefone(colArquivos.get(4));
		clienteFoneAtualizacaoCadastral.setUltimaAlteracao(new Date());

		short indicadorFone = 2;

		if (colArquivos.get(5) != null
				&& (colArquivos.get(5).equals("1") || colArquivos.get(5)
						.equals("2"))) {
			indicadorFone = Short.parseShort(colArquivos.get(5));
		}

		clienteFoneAtualizacaoCadastral.setIndicadorFonePadrao(indicadorFone);

		return clienteFoneAtualizacaoCadastral;
	}

	private ClienteAtualizacaoCadastralDM adicionarClienteAtualizacaoCadastral(
			List<String> colArquivos) {

		ClienteAtualizacaoCadastralDM clienteAtualizacaoCadastral = new ClienteAtualizacaoCadastralDM();

		Integer idImovelAtlzCadastral = null;
		try {
			idImovelAtlzCadastral = repositorioCadastro
					.pesquisarIdImovelAtualizacaoCadastral(colArquivos.get(1));
		} catch (ErroRepositorioException e) {
			e.printStackTrace();
		}

		ImovelAtualizacaoCadastralDM imovelAtualizacaoCadastral = new ImovelAtualizacaoCadastralDM();
		imovelAtualizacaoCadastral.setId(idImovelAtlzCadastral);
		clienteAtualizacaoCadastral
				.setImovelAtualizacaoCadastralDM(imovelAtualizacaoCadastral);

		if (Util.validarCamposAtualizacaoCadastral(colArquivos.get(2))) {

			ClienteTipo clienteTipo = new ClienteTipo();
			clienteTipo.setId(Integer.valueOf(colArquivos.get(2)));

			clienteAtualizacaoCadastral.setClienteTipo(clienteTipo);
		}

		clienteAtualizacaoCadastral.setCpfCnpj(colArquivos.get(3));

		clienteAtualizacaoCadastral.setNomeCliente(colArquivos.get(4));

		clienteAtualizacaoCadastral.setRg(colArquivos.get(5));

		if (Util.validarCamposAtualizacaoCadastral(colArquivos.get(6))) {

			OrgaoExpedidorRg orgaoExpedidorRG = new OrgaoExpedidorRg();
			orgaoExpedidorRG.setId(Integer.valueOf(colArquivos.get(6)));
			clienteAtualizacaoCadastral.setOrgaoExpedidorRG(orgaoExpedidorRG);
		}

		if (Util.validarCamposAtualizacaoCadastral(colArquivos.get(7))) {

			UnidadeFederacao unidadeFederacao = new UnidadeFederacao();
			unidadeFederacao.setId(Integer.valueOf(colArquivos.get(7)));

			clienteAtualizacaoCadastral.setUnidadeFederacao(unidadeFederacao);
		}

		if (colArquivos.get(8) != null) {
			clienteAtualizacaoCadastral.setDataEmissaoRg(Util
					.converteStringParaDate(colArquivos.get(8)));
		}

		if (colArquivos.get(9) != null && !colArquivos.get(9).equals("")) {

			PessoaSexo pessoaSexo = new PessoaSexo();
			pessoaSexo.setId(Integer.valueOf(colArquivos.get(9)));
			clienteAtualizacaoCadastral.setSexo(pessoaSexo);
		}

		if (colArquivos.get(10) != null && !"".equals(colArquivos.get(10))) {
			clienteAtualizacaoCadastral.setDataNascimento(Util
					.converteStringParaDate(colArquivos.get(10)));
		}

		if (colArquivos.get(11) != null && !"".equals(colArquivos.get(11))) {
			clienteAtualizacaoCadastral.setIdCliente(Integer
					.valueOf(colArquivos.get(11)));
		}

		ClienteRelacaoTipo clienteRelacaoTipo = new ClienteRelacaoTipo();
		clienteRelacaoTipo.setId(Integer.valueOf(ClienteRelacaoTipo.USUARIO));
		clienteAtualizacaoCadastral.setClienteRelacaoTipo(clienteRelacaoTipo);
		clienteAtualizacaoCadastral.setUltimaAlteracao(new Date());

		return clienteAtualizacaoCadastral;
	}

	/**
	 * Metodo responsavel por verificar se o imovel foi inserido com sucesso
	 * apos o carregamento do arquivo de retorno.
	 * 
	 * @param codigoImovel
	 * @throws ControladorException
	 */
	private void validaIntegridadeImovelAnterior(
			Integer idImovelAtualizacaoCadastral) throws ControladorException {

		try {
			Integer quantidade = repositorioCadastro
					.pesquisarIntegridadeImovelAtualizacaoCadastral(idImovelAtualizacaoCadastral);

			// caso o imovel nao tenha todos os itens obrigatorios
			// categoria | ocorrencia | cliente
			if (quantidade == null || quantidade < 1) {

				repositorioCadastro
						.excluirDadosImovelAtualizacaoCadastral(idImovelAtualizacaoCadastral);
				throw new ControladorException(
						"atencao.carregamento_arquivo_retorno_com_imoveis_sem_integridade");
			}
		} catch (ErroRepositorioException e) {
			e.printStackTrace();
		}
	}

	private ImovelAtualizacaoCadastralDM adicionarImovelAtualizacaoCadastral(
			List<String> colArquivos) {

		ImovelAtualizacaoCadastralDM imovelAtualizacaoCadastral = new ImovelAtualizacaoCadastralDM();

		imovelAtualizacaoCadastral.setId(Integer.valueOf(colArquivos.get(1)));

		if (colArquivos.get(2) != null && !colArquivos.get(2).equals("")) {
			Imovel imovel = new Imovel();
			imovelAtualizacaoCadastral.setIdImovel(Integer.valueOf(colArquivos
					.get(2)));
		}

		Municipio municipio = new Municipio();
		municipio.setId(Integer.valueOf(colArquivos.get(3)));
		imovelAtualizacaoCadastral.setMunicipio(municipio);

		Localidade localidade = new Localidade();
		localidade.setId(Integer.valueOf(colArquivos.get(4)));

		imovelAtualizacaoCadastral.setLocalidade(localidade);
		imovelAtualizacaoCadastral.setCodigoSetorComercial(Integer
				.valueOf(colArquivos.get(5)));
		imovelAtualizacaoCadastral.setNumeroQuadra(Integer.valueOf(colArquivos
				.get(6)));
		imovelAtualizacaoCadastral.setNumeroLote(Integer.valueOf(colArquivos
				.get(7)));
		imovelAtualizacaoCadastral.setNumeroSubLote(Integer.valueOf(colArquivos
				.get(8)));
		imovelAtualizacaoCadastral.setIdLogradouro(Long.valueOf(colArquivos
				.get(9)));
		if (Util.validarCamposAtualizacaoCadastral(colArquivos.get(10))) {

			EnderecoReferencia enderecoReferencia = new EnderecoReferencia();
			enderecoReferencia.setId(Integer.valueOf(colArquivos.get(10)));

			imovelAtualizacaoCadastral
					.setEnderecoReferencia(enderecoReferencia);
		}

		String complemento = colArquivos.get(12);
		if (complemento != null
				&& (complemento.contains("Â½") || complemento.contains("Â"))) {

			int posicaoInicial = complemento.indexOf("Ã");

			int posicaoFinal = ConstantesSistema.NUMERO_NAO_INFORMADO;
			if (complemento.contains("½")) {
				posicaoFinal = complemento.indexOf("½") + 1;
			} else if (complemento.contains("¿")) {
				posicaoFinal = complemento.indexOf("¿") + 1;
			} else if (complemento.contains("Â")) {
				posicaoFinal = complemento.indexOf("Â") + 1;
			}

			if (posicaoInicial >= 0 && posicaoFinal >= 0) {
				String caracterInvalido = complemento.substring(posicaoInicial,
						posicaoFinal);
				complemento = complemento.replace(caracterInvalido, "");
			}
		}

		String numeroImovel = colArquivos.get(11);
		if (numeroImovel != null
				&& (numeroImovel.contains("Â½") || numeroImovel.contains("Â"))) {

			int posicaoInicial = numeroImovel.indexOf("Ã");

			int posicaoFinal = ConstantesSistema.NUMERO_NAO_INFORMADO;
			if (numeroImovel.contains("½")) {
				posicaoFinal = numeroImovel.indexOf("½") + 1;
			} else if (numeroImovel.contains("¿")) {
				posicaoFinal = numeroImovel.indexOf("¿") + 1;
			} else if (numeroImovel.contains("Â")) {
				posicaoFinal = numeroImovel.indexOf("Â") + 1;
			}

			if (posicaoInicial >= 0 && posicaoFinal >= 0) {
				String caracterInvalido = numeroImovel.substring(
						posicaoInicial, posicaoFinal);
				numeroImovel = numeroImovel.replace(caracterInvalido, "");
			}
		}

		imovelAtualizacaoCadastral.setNumeroImovel(numeroImovel);
		imovelAtualizacaoCadastral.setComplementoEndereco(Util.completaString(
				complemento, 25));
		imovelAtualizacaoCadastral.setCodigoLogradouroBairro(Integer
				.valueOf(colArquivos.get(13)));
		imovelAtualizacaoCadastral.setCodigoLogradouroCep(Integer
				.valueOf(colArquivos.get(14)));

		ImovelPerfil imovelPerfil = new ImovelPerfil();
		imovelPerfil.setId(Integer.valueOf(colArquivos.get(15)));

		imovelAtualizacaoCadastral.setImovelPerfil(imovelPerfil);

		String numeroMedidorEnergia = colArquivos.get(16);
		imovelAtualizacaoCadastral
				.setNumeroMedidorEnergia(numeroMedidorEnergia);

		if (colArquivos.get(17) != null
				&& !colArquivos.get(17).toString().trim().equals("")) {
			imovelAtualizacaoCadastral.setNumeroMorador(Short
					.valueOf(colArquivos.get(17)));
		}

		PavimentoRua pavimentoRua = new PavimentoRua();
		pavimentoRua.setId(Integer.valueOf(colArquivos.get(18)));

		imovelAtualizacaoCadastral.setPavimentoRua(pavimentoRua);

		PavimentoCalcada pavimentoCalcada = new PavimentoCalcada();
		pavimentoCalcada.setId(Integer.valueOf(colArquivos.get(19)));

		imovelAtualizacaoCadastral.setPavimentoCalcada(pavimentoCalcada);

		FonteAbastecimento fonteAbastecimento = new FonteAbastecimento();
		fonteAbastecimento.setId(Integer.valueOf(colArquivos.get(20)));

		imovelAtualizacaoCadastral.setFonteAbastecimento(fonteAbastecimento);

		LigacaoAguaSituacao ligacaoAguaSituacao = new LigacaoAguaSituacao();
		ligacaoAguaSituacao.setId(Integer.valueOf(colArquivos.get(21)));

		imovelAtualizacaoCadastral.setLigacaoAguaSituacao(ligacaoAguaSituacao);

		LigacaoEsgotoSituacao ligacaoEsgotoSituacao = new LigacaoEsgotoSituacao();
		ligacaoEsgotoSituacao.setId(Integer.valueOf(colArquivos.get(22)));

		imovelAtualizacaoCadastral
				.setLigacaoEsgotoSituacao(ligacaoEsgotoSituacao);

		if (colArquivos.get(24) != null && colArquivos.get(24).length() > 10) {
			imovelAtualizacaoCadastral.setDataVisita(Util
					.converteStringParaDateHora(colArquivos.get(24)));
		} else {
			imovelAtualizacaoCadastral.setDataVisita(Util
					.converteStringParaDate(colArquivos.get(24)));
		}

		imovelAtualizacaoCadastral.setCodigoImovel(colArquivos.get(25));
		ParametroTabelaAtualizacaoCadastralDM parametroTabelaAtualizacaoCadastro = new ParametroTabelaAtualizacaoCadastralDM();
		parametroTabelaAtualizacaoCadastro.setId(Integer.valueOf(colArquivos
				.get(26)));
		imovelAtualizacaoCadastral
				.setParametroTabelaAtualizacaoCadastralDM(parametroTabelaAtualizacaoCadastro);
		imovelAtualizacaoCadastral.setIdBairro(Integer.valueOf(colArquivos
				.get(27)));
		imovelAtualizacaoCadastral.setCodigoCep(Integer.valueOf(colArquivos
				.get(28)));
		imovelAtualizacaoCadastral.setObservacao(colArquivos.get(29));

		Empresa empresa = new Empresa();
		empresa.setId(Integer.valueOf(colArquivos.get(30)));

		imovelAtualizacaoCadastral.setEmpresa(empresa);
		imovelAtualizacaoCadastral.setLogin(colArquivos.get(31));

		String indicadorImovelNovoComMatricula = colArquivos.get(33);

		imovelAtualizacaoCadastral
				.setIndicadorAtualizado(ConstantesSistema.NAO);

		imovelAtualizacaoCadastral.setIndicadorPendente(ConstantesSistema.NAO);
		imovelAtualizacaoCadastral.setIndicadorDadosRetorno(Short.valueOf("3"));
		imovelAtualizacaoCadastral
				.setIndicadorResetorizado(ConstantesSistema.NAO);
		imovelAtualizacaoCadastral.setDataRecebimentoMovimento(new Date());

		if (imovelAtualizacaoCadastral.getIdImovel() != null
				&& !imovelAtualizacaoCadastral.getIdImovel().toString()
						.equals("")
				&& imovelAtualizacaoCadastral.getIdImovel() > 0) {
			imovelAtualizacaoCadastral
					.setIndicadorImovelNovo(ConstantesSistema.NAO);

			// Caso a matricula informada pelo cadastrador no tablet nao exista
			// no arquivo do tablet.
			if (indicadorImovelNovoComMatricula != null
					&& indicadorImovelNovoComMatricula
							.equals(ConstantesSistema.SIM.toString())) {
				try {
					Imovel imovel = new Imovel();
					imovel.setId(imovelAtualizacaoCadastral.getIdImovel());

					imovel = this.getControladorImovel().pesquisarImovel(
							imovel.getId());

					if (imovel != null && imovel.getId() != null) {
						Collection colecaoIdImovel = new ArrayList();
						colecaoIdImovel.add(imovel.getId() + "/"
								+ ConstantesSistema.NAO);

						Empresa empr = new Empresa();
						empr = imovelAtualizacaoCadastral.getEmpresa();

						this.gerarTabelasTemporarias(colecaoIdImovel, empr,
								parametroTabelaAtualizacaoCadastro);
					}

				} catch (ControladorException e) {
					e.printStackTrace();
				} catch (ErroRepositorioException e) {
					e.printStackTrace();
				}
			}

		} else {

			try {
				Integer id = getControladorImovel().obterNextValImovel();
				imovelAtualizacaoCadastral.setIdImovel(id);
			} catch (ControladorException e) {
				e.printStackTrace();
			}
			imovelAtualizacaoCadastral
					.setIndicadorImovelNovo(ConstantesSistema.SIM);
		}

		imovelAtualizacaoCadastral.setUltimaAlteracao(new Date());

		return imovelAtualizacaoCadastral;
	}

	/**
	 * Pesquisar Registro Tipo 38 - Leitura Anormalidade
	 * 
	 * @author Vivianne Sousa
	 * @date 10/09/2014
	 */
	private String gerarRegistroTipo38AC() throws ControladorException {
		StringBuilder retorno = new StringBuilder();

		FiltroLeituraAnormalidade filtroLeituraAnormalidade = new FiltroLeituraAnormalidade();
		filtroLeituraAnormalidade.adicionarParametro(new ParametroSimples(
				FiltroLeituraAnormalidade.INDICADOR_RELATIVO_HIDROMETRO, 1));
		filtroLeituraAnormalidade.adicionarParametro(new ParametroSimples(
				FiltroLeituraAnormalidade.INDICADOR_USO, 1));
		Collection<?> colHidrometroAnormalidade = getControladorUtil()
				.pesquisar(filtroLeituraAnormalidade,
						LeituraAnormalidade.class.getName());

		if (!Util.isVazioOrNulo(colHidrometroAnormalidade)) {
			LeituraAnormalidade leituraAnormalidade = null;

			Iterator<?> it = colHidrometroAnormalidade.iterator();
			while (it.hasNext()) {
				leituraAnormalidade = (LeituraAnormalidade) it.next();
				retorno.append("38|");
				retorno.append(Util
						.formatarCampoParaConcatenacao(leituraAnormalidade
								.getId().toString()));
				retorno.append(Util
						.formatarCampoParaConcatenacao(leituraAnormalidade
								.getDescricao()));
				retorno.append("\n");
			}
		}

		return retorno.toString();
	}

	/**
	 * Método responsável por fazer todo o processamento do atualização
	 * cadastral vindo do tablet
	 * 
	 * @author Jonathan Marcos
	 * @since 25/09/2014
	 * @param nomePasta
	 * @throws ControladorException
	 */
	public void processarRecebimentoDadosImoveisTablet(String nomePasta)
			throws ControladorException {
		Connection connection = null;
		try {
			connection = obterConexaoSqlite(nomePasta);
			if (connection != null) {
				processarRecebimentoDadosImoveisTabletCepAtlzCadDM(connection);
				processarRecebimentoDadosImoveisTabletLogradouroAtlzCadDMEHLogradouroBairroAtlzCadDM(connection);
				processarRecebimentoDadosImoveisTabletLogradouroCepAtlzCadDM(connection);
				processarRecebimentoDadosImoveisTabletImovelAtualizacaoCadastralDMEHRelacionados(connection);
				processarImovelFotoAtualizacaoCadastralDM(connection, nomePasta);
				atualizarSituacaoArquivoTextoAtualizacaoCadastralDMFinalizado(Integer
						.valueOf(nomePasta.split("_")[0]));
				connection.close();
			}
		} catch (Exception e) {
			if (connection != null) {
				try {
					connection.close();
				} catch (SQLException e1) {

				}
			}
			sessionContext.setRollbackOnly();
			throw new ControladorException("erro.sistema", e);
		}

	}

	/**
	 * Método responsável por fazer o processamento do imovel vindo do tablet
	 * 
	 * @author Jonathan Marcos
	 * @since 09/10/2014
	 * @throws ControladorException
	 */
	public void processarRecebimentoDadosImovelTabletOnline(
			AtualizacaoCadastralDMOnlineHelper helper)
			throws ControladorException {
		try {
			processarRecebimentoDadosImoveisTabletCepAtlzCadDMOnline(helper
					.getCepDM());
			processarRecebimentoDadosImoveisTabletLogradouroAtlzCadDMEHLogradouroBairroAtlzCadDMOnline(helper);
			processarRecebimentoDadosImoveisTabletLogradouroCepAtlzCadDMOnline(helper
					.getLogradouroCepDM());
			processarRecebimentoDadosImoveisTabletImovelAtualizacaoCadastralDMEHRelacionadosOnline(helper);
			processarImovelFotoAtualizacaoCadastralDMOnline(helper);
		} catch (Exception e) {
			sessionContext.getRollbackOnly();
			throw new ControladorException("erro.sistema", e);
		}

	}

	/**
	 * Método responsável processar cepAtlzCadDM
	 * 
	 * @author Jonathan Marcos
	 * @since 25/09/2014
	 * @param statement
	 * @throws SQLException
	 * @throws ControladorException
	 * @throws ErroRepositorioException
	 */
	private void processarRecebimentoDadosImoveisTabletCepAtlzCadDM(
			Connection connection) throws SQLException, ControladorException,
			ErroRepositorioException {
		/*
		 * ResultSets necessários para as pesquisas
		 */
		ResultSet resultSetCep = null;

		/*
		 * Pesquisa na tabela logradouro_cep os logradouro_cep novos que não
		 * foram transmitidos
		 */
		resultSetCep = repositorioCadastro.pesquisarCepTablet(connection);
		Collection<CepAtlzCadDM> colecaoCepAtlzCadDM = null;
		while (resultSetCep.next()) {

			FiltroCepAtlzCadDM filtroCepAtlzCadDM = null;
			CepAtlzCadDM cepAtlzCadDM = null;
			/*
			 * Montagem do filtro para pesquisar o CepAtlzCadDM
			 */
			filtroCepAtlzCadDM = new FiltroCepAtlzCadDM();
			filtroCepAtlzCadDM.adicionarParametro(new ParametroSimples(
					FiltroCepAtlzCadDM.ID_CEP_ATLZ_CAD, resultSetCep
							.getString("CEP_CDUNICO")));

			colecaoCepAtlzCadDM = getControladorUtil().pesquisar(
					filtroCepAtlzCadDM, CepAtlzCadDM.class.getName());

			/*
			 * Monta o objeto cepAtlzCadDM vindo do banco de dados Sqlite
			 */
			cepAtlzCadDM = montarObjetoCepAtlzCadDM(resultSetCep);

			if (colecaoCepAtlzCadDM != null && !colecaoCepAtlzCadDM.isEmpty()) {
				getControladorUtil().atualizar(cepAtlzCadDM);
			} else {
				getControladorUtil().inserir(cepAtlzCadDM);
			}
		}
	}

	/**
	 * Método responsável processar LogradouroAtlzCadDM
	 * LogradouroBairroAtlzCadDM
	 * 
	 * @author Jonathan Marcos
	 * @since 25/09/2014
	 * @param statement
	 * @throws SQLException
	 * @throws ControladorException
	 * @throws ErroRepositorioException
	 */
	private void processarRecebimentoDadosImoveisTabletLogradouroAtlzCadDMEHLogradouroBairroAtlzCadDM(
			Connection connection) throws SQLException, ControladorException,
			ErroRepositorioException {
		/*
		 * ResultSets necessários para as pesquisas
		 */
		ResultSet resultSetLogradouro = null;
		ResultSet resultSetLogradouroBairro = null;

		/*
		 * Pesquisa na tabela logradouro os logradouros novos e não transmitido
		 * que estão associados a algum imóvel
		 */
		resultSetLogradouro = repositorioCadastro
				.pesquisarLogradouroTablet(connection);

		FiltroLogradouroAtlzCadDM filtroLogradouroAtlzCadDM = null;
		FiltroLogradouroBairroAtlzCadDM filtroLogradouroBairroAtlzCadDM = null;
		LogradouroAtlzCadDM logradouroAtlzCadDM = null;
		LogradouroBairroAtlzCadDM logradouroBairroAtlzCadDM = null;
		Collection<LogradouroAtlzCadDM> colecaoLogradouroAtlzCadDM = null;
		Collection<LogradouroBairroAtlzCadDM> colecaoLogradouroBairroAtlzCadDM = null;
		while (resultSetLogradouro.next()) {
			/*
			 * Montagem do filtro para pesquisar o LogradouroAtlzCadDM
			 */
			filtroLogradouroAtlzCadDM = new FiltroLogradouroAtlzCadDM();
			filtroLogradouroAtlzCadDM.adicionarParametro(new ParametroSimples(
					FiltroLogradouroAtlzCadDM.CODIGO, resultSetLogradouro
							.getString("LOGR_CDUNICO")));

			colecaoLogradouroAtlzCadDM = this.getControladorUtil().pesquisar(
					filtroLogradouroAtlzCadDM,
					LogradouroAtlzCadDM.class.getName());

			if (colecaoLogradouroAtlzCadDM == null
					|| colecaoLogradouroAtlzCadDM.isEmpty()) {
				/*
				 * Monta o objeto logradouroAtlzCadDM e depois inseri
				 */
				logradouroAtlzCadDM = montarObjetoLogradouroAtlzCadDM(
						connection, resultSetLogradouro);
				getControladorUtil().inserir(logradouroAtlzCadDM);

				filtroLogradouroAtlzCadDM.limparListaParametros();
			} else {
				logradouroAtlzCadDM = (LogradouroAtlzCadDM) Util
						.retonarObjetoDeColecao(colecaoLogradouroAtlzCadDM);
			}

			resultSetLogradouroBairro = repositorioCadastro
					.pesquisarLogradouroBairroTablet(connection,
							resultSetLogradouro.getInt("LOGR_ID"));
			while (resultSetLogradouroBairro.next()) {

				/*
				 * Monta o filtro para pesquisar o LogradouroBairroAtlzCadDM
				 */
				filtroLogradouroBairroAtlzCadDM = new FiltroLogradouroBairroAtlzCadDM();
				filtroLogradouroBairroAtlzCadDM
						.adicionarParametro(new ParametroSimples(
								FiltroLogradouroBairroAtlzCadDM.ID_BAIRRO,
								resultSetLogradouroBairro.getInt("BAIR_ID")));
				filtroLogradouroBairroAtlzCadDM
						.adicionarParametro(new ParametroSimples(
								FiltroLogradouroBairroAtlzCadDM.CODIGO_LOGRADOURO_ATLZ_CAD,
								logradouroAtlzCadDM.getCodigo()));

				colecaoLogradouroBairroAtlzCadDM = this.getControladorUtil()
						.pesquisar(filtroLogradouroBairroAtlzCadDM,
								LogradouroBairroAtlzCadDM.class.getName());
				if (colecaoLogradouroBairroAtlzCadDM == null
						|| colecaoLogradouroBairroAtlzCadDM.isEmpty()) {
					/*
					 * Monta o objeto logradouroBairroAtlzCadDM e depois inseri
					 */
					logradouroBairroAtlzCadDM = montarObjetoLogradouroBairroAtlzCadDM(
							logradouroAtlzCadDM,
							resultSetLogradouroBairro.getInt("BAIR_ID"));
					getControladorUtil().inserir(logradouroBairroAtlzCadDM);

					filtroLogradouroBairroAtlzCadDM.limparListaParametros();
				}
			}
		}
	}

	/**
	 * Método responsável processar LogradouroCepAtlzCadDM
	 * 
	 * @author Jonathan Marcos
	 * @since 25/09/2014
	 * @param statement
	 * @throws SQLException
	 * @throws ControladorException
	 * @throws ErroRepositorioException
	 */
	private void processarRecebimentoDadosImoveisTabletLogradouroCepAtlzCadDM(
			Connection connection) throws SQLException, ControladorException,
			ErroRepositorioException {
		/*
		 * ResultSets necessários para as pesquisas
		 */
		ResultSet resultSetLogradouroCep = null;

		/*
		 * Pesquisa na tabela logradouro_cep os logradouro_cep novos que não
		 * foram transmitidos
		 */
		resultSetLogradouroCep = repositorioCadastro
				.pesquisarLogradouroCepTablet(connection);

		LogradouroCepAtlzCadDM logradouroCepAtlzCadDM = null;
		FiltroLogradouroCepAtlzCadDM filtroLogradouroCepAtlzCadDM = null;
		Collection<LogradouroCepAtlzCadDM> colecaoLogradouroCepAtlzCadDM = null;
		while (resultSetLogradouroCep.next()) {

			filtroLogradouroCepAtlzCadDM = new FiltroLogradouroCepAtlzCadDM();
			filtroLogradouroCepAtlzCadDM
					.adicionarParametro(new ParametroSimples(
							FiltroLogradouroCepAtlzCadDM.ID_CEP_ATLZ_CAD,
							resultSetLogradouroCep.getString("CEP_CDUNICO")));
			filtroLogradouroCepAtlzCadDM
					.adicionarParametro(new ParametroSimples(
							FiltroLogradouroCepAtlzCadDM.CODIGO_LOGRADOURO_ATLZ_CAD,
							resultSetLogradouroCep.getString("LOGR_CDUNICO")));

			colecaoLogradouroCepAtlzCadDM = getControladorUtil().pesquisar(
					filtroLogradouroCepAtlzCadDM,
					LogradouroCepAtlzCadDM.class.getName());

			if (colecaoLogradouroCepAtlzCadDM == null
					|| colecaoLogradouroCepAtlzCadDM.isEmpty()) {
				logradouroCepAtlzCadDM = montarObjetoLogradouroCepAtlzCadDM(resultSetLogradouroCep);
				getControladorUtil().inserir(logradouroCepAtlzCadDM);
			}
		}
	}

	/**
	 * Método responsável por processar imovel atualização cadastral e seus
	 * relacionados
	 * 
	 * @author Jonathan Marcos
	 * @since 01/10/2014
	 * @param connection
	 * @throws SQLException
	 * @throws ControladorException
	 * @throws ErroRepositorioException
	 * @throws ParseException
	 */
	private void processarRecebimentoDadosImoveisTabletImovelAtualizacaoCadastralDMEHRelacionados(
			Connection connection) throws SQLException, ControladorException,
			ErroRepositorioException, ParseException {
		/*
		 * ResultSets necessários para as pesquisas
		 */
		ResultSet resultSetClienteAtualizacaoCadastralDM = null;
		ResultSet resultSetClienteFoneAtualizacaoCadastralDM = null;
		ResultSet resultSetHidrometroInstalacaoHistoricoAtualizacaoCadastralDM = null;
		ResultSet resultSetImovelSubcategoriaAtualizacaoCadastralDM = null;
		ResultSet resultSetImovelOcorrenciaAtualizacaoCadastralDM = null;
		ResultSet resultSetImovelAtualizacaoCadastralDM = repositorioCadastro
				.pesquisarImovelAtualizacaoCadastralTablet(connection);

		Integer quantidade = null;
		boolean imovelNaoTransmitido = true;
		Integer idImovelAtualizacaoCadastral = null;
		Integer idAnteriorImovelTablet = null;

		/*
		 * Objetos relacionados as interações posteriores
		 */
		ImovelAtualizacaoCadastralDM imovelAtualizacaoCadastralDM = null;
		ClienteAtualizacaoCadastralDM clienteAtualizacaoCadastralDM = null;
		ClienteFoneAtualizacaoCadastralDM clienteFoneAtualizacaoCadastralDM = null;
		HidrometroInstalacaoHistoricoAtualizacaoCadastralDM hidrometroInstalacaoHistoricoAtualizacaoCadastralDM = null;
		ImovelSubcategoriaAtualizacaoCadastralDM imovelSubcategoriaAtualizacaoCadastralDM = null;
		ImovelOcorrenciaAtualizacaoCadastralDM imovelOcorrenciaAtualizacaoCadastralDM = null;

		while (resultSetImovelAtualizacaoCadastralDM.next()) {
			quantidade = null;
			imovelNaoTransmitido = true;
			idAnteriorImovelTablet = null;

			/*
			 * Montar o objeto imovelAtualizacaoCadastralDM
			 */
			idAnteriorImovelTablet = new Integer(
					resultSetImovelAtualizacaoCadastralDM.getInt("IMAC_ID"));
			imovelAtualizacaoCadastralDM = montarObjetoImovelAtualizacaoCadastralDM(
					resultSetImovelAtualizacaoCadastralDM, connection);
			if (imovelAtualizacaoCadastralDM.getIdImovel() != null) {
				quantidade = repositorioCadastro
						.pesquisarImovelAtlzCadastralJaTransmitido(
								imovelAtualizacaoCadastralDM.getIdImovel(),
								imovelAtualizacaoCadastralDM
										.getParametroTabelaAtualizacaoCadastralDM()
										.getId());
				if (quantidade != null && quantidade > 0) {
					imovelNaoTransmitido = false;
				}

			} else {
				quantidade = repositorioCadastro
						.pesquisarImovelAtlzCadastralNovoJaTransmitido(
								imovelAtualizacaoCadastralDM.getCodigoImovel(),
								imovelAtualizacaoCadastralDM
										.getParametroTabelaAtualizacaoCadastralDM()
										.getId());
				if (quantidade != null && quantidade > 0) {
					imovelNaoTransmitido = false;
				}
			}

			if (idImovelAtualizacaoCadastral != null) {
				validaIntegridadeImovelAnterior(idImovelAtualizacaoCadastral);
			}

			if (imovelNaoTransmitido) {
				/*
				 * Inserir objeto imovelAtualizacaoCadastralDM
				 */
				getControladorUtil().inserir(imovelAtualizacaoCadastralDM);
				idImovelAtualizacaoCadastral = imovelAtualizacaoCadastralDM
						.getId();
			}

			/*
			 * Pesquisar todos os clientes relacionados ao imovel
			 */
			resultSetClienteAtualizacaoCadastralDM = repositorioCadastro
					.pesquisarClienteAtualizacaoCadastralTablet(connection,
							idAnteriorImovelTablet);

			while (resultSetClienteAtualizacaoCadastralDM.next()) {
				/*
				 * Monta objeto clienteAtualizacaoCadastralDM depois inseri
				 */
				clienteAtualizacaoCadastralDM = montarObjetoClienteAtualizacaoCadastralDM(
						resultSetClienteAtualizacaoCadastralDM,
						imovelAtualizacaoCadastralDM.getCodigoImovel());
				getControladorUtil().inserir(clienteAtualizacaoCadastralDM);
				/*
				 * Pesquisar todos os clientes fones relacionados ao cliente
				 */
				resultSetClienteFoneAtualizacaoCadastralDM = repositorioCadastro
						.pesquisarClienteFoneAtualizacaoCadastral(connection,
								resultSetClienteAtualizacaoCadastralDM
										.getInt("CLAC_ID"));
				while (resultSetClienteFoneAtualizacaoCadastralDM.next()) {
					/*
					 * Monta objeto clienteFoneAtualizacaoCadastralDM depois
					 * inseri
					 */
					clienteFoneAtualizacaoCadastralDM = montarObjetoClienteFoneAtualizacaoCadastralDM(
							resultSetClienteFoneAtualizacaoCadastralDM,
							imovelAtualizacaoCadastralDM.getCodigoImovel());
					getControladorUtil().inserir(
							clienteFoneAtualizacaoCadastralDM);
				}
			}

			/*
			 * Pesquisa todos os hidrometros instalação historico relacionados
			 * ao imovel
			 */
			resultSetHidrometroInstalacaoHistoricoAtualizacaoCadastralDM = repositorioCadastro
					.pesquisarHidrometroInstalacaoHistoricoAtualizacaoCadastral(
							connection, idAnteriorImovelTablet);
			while (resultSetHidrometroInstalacaoHistoricoAtualizacaoCadastralDM
					.next()) {
				/*
				 * Monta objeto
				 * hidrometroInstalacaoHistoricoAtualizacaoCadastralDM depois
				 * inseri
				 */
				hidrometroInstalacaoHistoricoAtualizacaoCadastralDM = montarObjetoHidrometroInstalacaoHistoricoAtualizacaoCadastralDM(
						resultSetHidrometroInstalacaoHistoricoAtualizacaoCadastralDM,
						imovelAtualizacaoCadastralDM.getCodigoImovel(),
						idAnteriorImovelTablet);
				getControladorUtil().inserir(
						hidrometroInstalacaoHistoricoAtualizacaoCadastralDM);
			}

			/*
			 * Pesquisa todos imovel subcategoria relacionada ao imovel
			 */
			resultSetImovelSubcategoriaAtualizacaoCadastralDM = repositorioCadastro
					.pesquisarImovelSubcategoriaAtualizacaoCadastral(
							connection, idAnteriorImovelTablet);
			while (resultSetImovelSubcategoriaAtualizacaoCadastralDM.next()) {
				/*
				 * Monta objeto imovelSubcategoriaAtualizacaoCadastralDM depois
				 * inseri
				 */
				imovelSubcategoriaAtualizacaoCadastralDM = montarObjetoImovelSubcategoriaAtualizacaoCadastralDM(
						resultSetImovelSubcategoriaAtualizacaoCadastralDM,
						imovelAtualizacaoCadastralDM.getCodigoImovel());
				getControladorUtil().inserir(
						imovelSubcategoriaAtualizacaoCadastralDM);
			}

			/*
			 * Pesquisa todas as ocorrências de cadastro relacionada ao imovel
			 */
			resultSetImovelOcorrenciaAtualizacaoCadastralDM = repositorioCadastro
					.pesquisarImovelOcorrenciaAtualizacaoCadastral(connection,
							idAnteriorImovelTablet);
			while (resultSetImovelOcorrenciaAtualizacaoCadastralDM.next()) {
				/*
				 * Monta objeto imovelOcorrenciaAtualizacaoCadastralDM depois
				 * inseri
				 */
				imovelOcorrenciaAtualizacaoCadastralDM = montarObjetoImovelOcorrenciaAtualizacaoCadastralDM(
						resultSetImovelOcorrenciaAtualizacaoCadastralDM,
						imovelAtualizacaoCadastralDM.getCodigoImovel());
				getControladorUtil().inserir(
						imovelOcorrenciaAtualizacaoCadastralDM);
			}
		}
	}

	/**
	 * Método responsável por processar fotos dos imoveis atualizados
	 * 
	 * @author Jonathan Marcos
	 * @since 01/10/2014
	 * @param connection
	 * @param nomePasta
	 * @throws ErroRepositorioException
	 * @throws SQLException
	 * @throws ControladorException
	 * @throws IOException
	 */
	private void processarImovelFotoAtualizacaoCadastralDM(Connection connection, String nomePasta)
			throws ErroRepositorioException, SQLException, ControladorException, IOException {
		String fotoPath = null;
		ImovelFotoAtualizacaoCadastralDM imovelFotoAtlzCadDM = null;
		ResultSet resultSetFotos = repositorioCadastro.pesquisarImovelFotoAtualizacaoCadastral(connection);

		String diretorioFoto = ConstantesSistema.DIRETORIO_ATUALIZACAO_CADASTRAL_BIN;
		diretorioFoto += File.separator;
		diretorioFoto += nomePasta;
		diretorioFoto += File.separator;

		while (resultSetFotos.next()) {
			fotoPath = diretorioFoto;
			fotoPath += FilenameUtils.getName(resultSetFotos.getString("FOTO_PATH"));
			imovelFotoAtlzCadDM = montarObjetoImovelFotoAtualizacaoCadastralDM(resultSetFotos, fotoPath);
			getControladorUtil().inserir(imovelFotoAtlzCadDM);
		}
	}

	/**
	 * Método responsável por processar o cep novo enviado imovel-online
	 * 
	 * @author Jonathan Marcos
	 * @since 09/10/2014
	 * @param cepDM
	 * @throws ControladorException
	 */
	private void processarRecebimentoDadosImoveisTabletCepAtlzCadDMOnline(
			CepDM cepDM) throws ControladorException {
		if (cepDM != null) {
			CepAtlzCadDM cepAtlzCadDM = montarObjetoCepAtlzCadDM(cepDM);
			/*
			 * Montagem do filtro para pesquisar o CepAtlzCadDM
			 */
			FiltroCepAtlzCadDM filtroCepAtlzCadDM = new FiltroCepAtlzCadDM();
			filtroCepAtlzCadDM.adicionarParametro(new ParametroSimples(
					FiltroCepAtlzCadDM.ID_CEP_ATLZ_CAD, cepAtlzCadDM.getId()));

			Collection<CepAtlzCadDM> colecaoCepAtlzCadDM = getControladorUtil()
					.pesquisar(filtroCepAtlzCadDM, CepAtlzCadDM.class.getName());

			/*
			 * Monta o objeto cepAtlzCadDM vindo do banco de dados Sqlite
			 */

			if (colecaoCepAtlzCadDM != null && !colecaoCepAtlzCadDM.isEmpty()) {
				getControladorUtil().atualizar(cepAtlzCadDM);
			} else {
				getControladorUtil().inserir(cepAtlzCadDM);
			}
		}
	}

	/**
	 * Método responsável processar LogradouroAtlzCadDM
	 * LogradouroBairroAtlzCadDM imovel-online
	 * 
	 * @author Jonathan Marcos
	 * @since 25/09/2014
	 * @param helper
	 * @throws ControladorException
	 */
	private void processarRecebimentoDadosImoveisTabletLogradouroAtlzCadDMEHLogradouroBairroAtlzCadDMOnline(
			AtualizacaoCadastralDMOnlineHelper helper)
			throws ControladorException {

		FiltroLogradouroAtlzCadDM filtroLogradouroAtlzCadDM = null;
		FiltroLogradouroBairroAtlzCadDM filtroLogradouroBairroAtlzCadDM = null;
		LogradouroAtlzCadDM logradouroAtlzCadDM = null;
		LogradouroBairroAtlzCadDM logradouroBairroAtlzCadDM = null;
		if (helper.getLogradouroDM() != null) {
			/*
			 * Montagem do filtro para pesquisar o LogradouroAtlzCadDM
			 */
			filtroLogradouroAtlzCadDM = new FiltroLogradouroAtlzCadDM();
			filtroLogradouroAtlzCadDM.adicionarParametro(new ParametroSimples(
					FiltroLogradouroAtlzCadDM.CODIGO, helper.getLogradouroDM()
							.getCodigo()));

			Collection<LogradouroAtlzCadDM> colecaoLogradouroAtlzCadDM = this
					.getControladorUtil().pesquisar(filtroLogradouroAtlzCadDM,
							LogradouroAtlzCadDM.class.getName());

			if (colecaoLogradouroAtlzCadDM == null
					|| colecaoLogradouroAtlzCadDM.isEmpty()) {
				/*
				 * Monta o objeto logradouroAtlzCadDM e depois inseri
				 */
				logradouroAtlzCadDM = montarObjetoLogradouroAtlzCadDM(helper
						.getLogradouroDM());
				getControladorUtil().inserir(logradouroAtlzCadDM);

				filtroLogradouroAtlzCadDM.limparListaParametros();
			} else {
				logradouroAtlzCadDM = (LogradouroAtlzCadDM) Util
						.retonarObjetoDeColecao(colecaoLogradouroAtlzCadDM);
			}

			if (helper.getLogradouroBairroDM() != null) {

				/*
				 * Monta o filtro para pesquisar o LogradouroBairroAtlzCadDM
				 */
				filtroLogradouroBairroAtlzCadDM = new FiltroLogradouroBairroAtlzCadDM();
				filtroLogradouroBairroAtlzCadDM
						.adicionarParametro(new ParametroSimples(
								FiltroLogradouroBairroAtlzCadDM.ID_BAIRRO,
								helper.getLogradouroBairroDM().getIdBairro()));

				filtroLogradouroBairroAtlzCadDM
						.adicionarParametro(new ParametroSimples(
								FiltroLogradouroBairroAtlzCadDM.CODIGO_LOGRADOURO_ATLZ_CAD,
								logradouroAtlzCadDM.getCodigo()));

				Collection<LogradouroBairroAtlzCadDM> colecaoLogradouroBairroAtlzCadDM = this
						.getControladorUtil().pesquisar(
								filtroLogradouroBairroAtlzCadDM,
								LogradouroBairroAtlzCadDM.class.getName());
				if (colecaoLogradouroBairroAtlzCadDM == null
						|| colecaoLogradouroBairroAtlzCadDM.isEmpty()) {
					/*
					 * Monta o objeto logradouroBairroAtlzCadDM e depois inseri
					 */
					logradouroBairroAtlzCadDM = montarObjetoLogradouroBairroAtlzCadDM(
							logradouroAtlzCadDM, helper.getLogradouroBairroDM()
									.getIdBairro());
					getControladorUtil().inserir(logradouroBairroAtlzCadDM);

					filtroLogradouroBairroAtlzCadDM.limparListaParametros();
				}
			}
		}
	}

	/**
	 * Método responsável por processar LogradouroCepAtlzCadDM imovel-online
	 * 
	 * @param logradouroCepDM
	 * @throws ControladorException
	 */
	private void processarRecebimentoDadosImoveisTabletLogradouroCepAtlzCadDMOnline(
			LogradouroCepDM logradouroCepDM) throws ControladorException {

		LogradouroCepAtlzCadDM logradouroCepAtlzCadDM = null;
		FiltroLogradouroCepAtlzCadDM filtroLogradouroCepAtlzCadDM = null;
		Collection<LogradouroCepAtlzCadDM> colecaoLogradouroCepAtlzCadDM = null;
		if (logradouroCepDM != null) {

			filtroLogradouroCepAtlzCadDM = new FiltroLogradouroCepAtlzCadDM();
			filtroLogradouroCepAtlzCadDM
					.adicionarParametro(new ParametroSimples(
							FiltroLogradouroCepAtlzCadDM.ID_CEP_ATLZ_CAD,
							logradouroCepDM.getCodigoUnicoCep()));
			filtroLogradouroCepAtlzCadDM
					.adicionarParametro(new ParametroSimples(
							FiltroLogradouroCepAtlzCadDM.CODIGO_LOGRADOURO_ATLZ_CAD,
							logradouroCepDM.getCodigoUnicoLogradouro()));

			colecaoLogradouroCepAtlzCadDM = getControladorUtil().pesquisar(
					filtroLogradouroCepAtlzCadDM,
					LogradouroCepAtlzCadDM.class.getName());

			if (colecaoLogradouroCepAtlzCadDM == null
					|| colecaoLogradouroCepAtlzCadDM.isEmpty()) {
				logradouroCepAtlzCadDM = montarObjetoLogradouroCepAtlzCadDM(logradouroCepDM);
				getControladorUtil().inserir(logradouroCepAtlzCadDM);
			}
		}
	}

	/**
	 * Método responsável por processar
	 * ImoveisTabletImovelAtualizacaoCadastralDM e seus relacionados
	 * imovel-online
	 * 
	 * @author Jonathan Marcos
	 * @since 14/10/2014
	 * @param helper
	 * @throws ControladorException
	 * @throws ErroRepositorioException
	 * @throws ParseException
	 */
	private void processarRecebimentoDadosImoveisTabletImovelAtualizacaoCadastralDMEHRelacionadosOnline(
			AtualizacaoCadastralDMOnlineHelper helper)
			throws ControladorException, ErroRepositorioException,
			ParseException {

		Integer quantidade = null;
		boolean imovelNaoTransmitido = true;
		Integer idImovelAtualizacaoCadastral = null;
		Integer idAnteriorImovelTablet = null;

		/*
		 * Objetos relacionados as interações posteriores
		 */
		ClienteFoneAtualizacaoCadastralDM clienteFoneAtualizacaoCadastralDM = null;
		ImovelSubcategoriaAtualizacaoCadastralDM imovelSubcategoriaAtualizacaoCadastralDM = null;
		ImovelOcorrenciaAtualizacaoCadastralDM imovelOcorrenciaAtualizacaoCadastralDM = null;

		if (helper.getImovelDM() != null) {
			quantidade = null;
			imovelNaoTransmitido = true;
			idAnteriorImovelTablet = null;

			/*
			 * Montar o objeto imovelAtualizacaoCadastralDM
			 */
			idAnteriorImovelTablet = new Integer(helper.getImovelDM().getId());
			ImovelAtualizacaoCadastralDM imovelAtualizacaoCadastralDM = montarObjetoImovelAtualizacaoCadastralDM(helper
					.getImovelDM());
			if (imovelAtualizacaoCadastralDM.getIdImovel() != null) {
				quantidade = repositorioCadastro
						.pesquisarImovelAtlzCadastralJaTransmitido(
								imovelAtualizacaoCadastralDM.getIdImovel(),
								imovelAtualizacaoCadastralDM
										.getParametroTabelaAtualizacaoCadastralDM()
										.getId());
				if (quantidade != null && quantidade > 0) {
					imovelNaoTransmitido = false;
				}

			} else {
				quantidade = repositorioCadastro
						.pesquisarImovelAtlzCadastralNovoJaTransmitido(
								imovelAtualizacaoCadastralDM.getCodigoImovel(),
								imovelAtualizacaoCadastralDM
										.getParametroTabelaAtualizacaoCadastralDM()
										.getId());
				if (quantidade != null && quantidade > 0) {
					imovelNaoTransmitido = false;
				}
			}

			if (idImovelAtualizacaoCadastral != null) {
				validaIntegridadeImovelAnterior(idImovelAtualizacaoCadastral);
			}

			if (imovelNaoTransmitido) {
				/*
				 * Inserir objeto imovelAtualizacaoCadastralDM
				 */
				getControladorUtil().inserir(imovelAtualizacaoCadastralDM);
				idImovelAtualizacaoCadastral = imovelAtualizacaoCadastralDM
						.getId();
			}

			if (helper.getClienteDM() != null) {
				/*
				 * Monta objeto clienteAtualizacaoCadastralDM depois inseri
				 */
				ClienteAtualizacaoCadastralDM clienteAtualizacaoCadastralDM = montarObjetoClienteAtualizacaoCadastralDM(helper
						.getClienteDM());
				getControladorUtil().inserir(clienteAtualizacaoCadastralDM);

				if (helper.getListaClienteFoneDM() != null
						&& !helper.getListaClienteFoneDM().isEmpty()) {
					for (int posicao = 0; posicao < helper
							.getListaClienteFoneDM().size(); posicao++) {
						/*
						 * Monta objeto clienteFoneAtualizacaoCadastralDM depois
						 * inseri
						 */
						clienteFoneAtualizacaoCadastralDM = montarObjetoClienteFoneAtualizacaoCadastralDM(helper
								.getListaClienteFoneDM().get(posicao));
						getControladorUtil().inserir(
								clienteFoneAtualizacaoCadastralDM);
					}
				}
			}

			if (helper.getHidrometroInstacaoHistoricoDM() != null) {
				/*
				 * Monta objeto
				 * hidrometroInstalacaoHistoricoAtualizacaoCadastralDM depois
				 * inseri
				 */
				HidrometroInstalacaoHistoricoAtualizacaoCadastralDM hidrometroInstalacaoHistoricoAtualizacaoCadastralDM = montarObjetoHidrometroInstalacaoHistoricoAtualizacaoCadastralDM(
						helper.getHidrometroInstacaoHistoricoDM(),
						idAnteriorImovelTablet);
				getControladorUtil().inserir(
						hidrometroInstalacaoHistoricoAtualizacaoCadastralDM);
			}

			for (int posicao = 0; posicao < helper
					.getListaImovelSubcategoriaDM().size(); posicao++) {
				/*
				 * Monta objeto imovelSubcategoriaAtualizacaoCadastralDM depois
				 * inseri
				 */
				imovelSubcategoriaAtualizacaoCadastralDM = montarObjetoImovelSubcategoriaAtualizacaoCadastralDM(helper
						.getListaImovelSubcategoriaDM().get(posicao));
				getControladorUtil().inserir(
						imovelSubcategoriaAtualizacaoCadastralDM);
			}

			for (int posicao = 0; posicao < helper.getListaImovelOcorrenciaDM()
					.size(); posicao++) {
				/*
				 * Monta objeto imovelOcorrenciaAtualizacaoCadastralDM depois
				 * inseri
				 */
				imovelOcorrenciaAtualizacaoCadastralDM = montarObjetoImovelOcorrenciaAtualizacaoCadastralDM(helper
						.getListaImovelOcorrenciaDM().get(posicao));
				getControladorUtil().inserir(
						imovelOcorrenciaAtualizacaoCadastralDM);
			}
		}
	}

	/**
	 * Método responsável por processar as fotos imovel-online
	 * 
	 * @author Jonathan Marcos
	 * @since 14/10/2014
	 * @param helper
	 * @throws ControladorException
	 */
	private void processarImovelFotoAtualizacaoCadastralDMOnline(
			AtualizacaoCadastralDMOnlineHelper helper)
			throws ControladorException {
		ImovelFotoAtualizacaoCadastralDM imovelFotoAtualizacaoCadastralDM = null;
		if (helper.getFotoFrenteCasaByte() != null) {
			imovelFotoAtualizacaoCadastralDM = montarObjetoImovelFotoAtualizacaoCadastralDM(
					helper, helper.getIdFotoTipoFrenteCasa(),
					helper.getFotoFrenteCasaByte());
			getControladorUtil().inserir(imovelFotoAtualizacaoCadastralDM);
		}

		if (helper.getFotoHidrometroByte() != null) {
			imovelFotoAtualizacaoCadastralDM = montarObjetoImovelFotoAtualizacaoCadastralDM(
					helper, helper.getIdFotoTipoHidrometro(),
					helper.getFotoHidrometroByte());
			getControladorUtil().inserir(imovelFotoAtualizacaoCadastralDM);
		}
	}

	/**
	 * Método responsável por montar o objeto CepAtlzCadDM
	 * 
	 * @author Jonathan Marcos
	 * @since 25/09/2014
	 * @param resultSet
	 * @return CepAtlzCadDM
	 * @throws SQLException
	 */
	private CepAtlzCadDM montarObjetoCepAtlzCadDM(ResultSet resultSet)
			throws SQLException {
		CepAtlzCadDM cepAtlzCadDM = new CepAtlzCadDM();
		cepAtlzCadDM.setId(resultSet.getString("CEP_CDUNICO"));
		cepAtlzCadDM.setCodigoCep(resultSet.getInt("CEP_CDCEP"));
		cepAtlzCadDM.setUltimaAlteracao(new Date());
		return cepAtlzCadDM;
	};

	/**
	 * Método responsável por montar o objeto LogradouroAtlzCadDM
	 * 
	 * @author Jonathan Marcos
	 * @since 25/09/2014
	 * @param statement
	 * @param resultSet
	 * @return LogradouroAtlzCadDM
	 * @throws SQLException
	 */
	private LogradouroAtlzCadDM montarObjetoLogradouroAtlzCadDM(
			Connection connection, ResultSet resultSet) throws SQLException {
		ResultSet resultSetSistemaParametros = null;

		LogradouroAtlzCadDM logradouroAtlzCadDM = new LogradouroAtlzCadDM();

		logradouroAtlzCadDM.setCodigo(resultSet.getString("LOGR_CDUNICO"));
		logradouroAtlzCadDM.setNome(resultSet.getString("LOGR_NMLOGRADOURO"));
		logradouroAtlzCadDM.setNomePopular(resultSet
				.getString("LOGR_NMPOPULAR"));
		logradouroAtlzCadDM.setNomeLoteamento(resultSet
				.getString("LOGR_NMLOTEAMENTO"));

		Municipio municipio = null;
		if (resultSet.getString("MUNI_ID") != null) {
			municipio = new Municipio();
			municipio.setId(resultSet.getInt("MUNI_ID"));
		}
		logradouroAtlzCadDM.setMunicipio(municipio);

		LogradouroTipo logradouroTipo = null;
		if (Util.validarCamposAtualizacaoCadastral(resultSet
				.getString("LGTP_ID"))) {
			logradouroTipo = new LogradouroTipo();
			logradouroTipo.setId(resultSet.getInt("LGTP_ID"));
		}
		logradouroAtlzCadDM.setLogradouroTipo(logradouroTipo);

		LogradouroTitulo logradouroTitulo = null;
		if (Util.validarCamposAtualizacaoCadastral(resultSet
				.getString("LGTT_ID"))) {
			logradouroTitulo = new LogradouroTitulo();
			logradouroTitulo.setId(resultSet.getInt("LGTT_ID"));
		}
		logradouroAtlzCadDM.setLogradouroTitulo(logradouroTitulo);

		logradouroAtlzCadDM.setUltimaAlteracao(new Date());
		logradouroAtlzCadDM.setIndicadorAtualizado(ConstantesSistema.NAO);

		resultSetSistemaParametros = connection.createStatement().executeQuery(
				"SELECT LOCA_ID,EMPR_ID FROM sistema_parametros");

		Localidade localidade = new Localidade();
		localidade.setId(resultSetSistemaParametros.getInt("LOCA_ID"));
		logradouroAtlzCadDM.setLocalidade(localidade);

		Empresa empresa = new Empresa();
		empresa.setId(resultSetSistemaParametros.getInt("EMPR_ID"));
		logradouroAtlzCadDM.setEmpresa(empresa);

		return logradouroAtlzCadDM;
	}

	/**
	 * Método responsável por montar o objeto LogradouroBairroAtlzCadDM
	 * 
	 * @author Jonathan Marcos
	 * @since 25/09/2014
	 * @param logradouroAtlzCadDM
	 * @param idBairro
	 * @return LogradouroBairroAtlzCadDM
	 */
	private LogradouroBairroAtlzCadDM montarObjetoLogradouroBairroAtlzCadDM(
			LogradouroAtlzCadDM logradouroAtlzCadDM, Integer idBairro) {
		LogradouroBairroAtlzCadDM logradouroBairroAtlzCadDM = new LogradouroBairroAtlzCadDM();

		Bairro bairro = new Bairro();
		bairro.setId(idBairro);
		logradouroBairroAtlzCadDM.setBairro(bairro);

		logradouroBairroAtlzCadDM.setLogradouroAtlzCadDM(logradouroAtlzCadDM);
		logradouroBairroAtlzCadDM.setUltimaAlteracao(new Date());

		return logradouroBairroAtlzCadDM;
	}

	/**
	 * Método responsável por monta o objeto LogradouroCepAtlzCadDM
	 * 
	 * @author Jonathan Marcos
	 * @since 25/09/2014
	 * @param cepAtlzCad
	 * @param logradouroAtlzCadDM
	 * @return LogradouroCepAtlzCadDM
	 * @throws SQLException
	 * @throws ControladorException
	 */
	private LogradouroCepAtlzCadDM montarObjetoLogradouroCepAtlzCadDM(
			ResultSet resultSet) throws SQLException, ControladorException {
		LogradouroCepAtlzCadDM logradouroCepAtlzCadDM = new LogradouroCepAtlzCadDM();

		CepAtlzCadDM cepAtlzCad = new CepAtlzCadDM();
		cepAtlzCad.setId(resultSet.getString("CEP_CDUNICO"));
		logradouroCepAtlzCadDM.setCepAtlzCad(cepAtlzCad);

		FiltroLogradouroAtlzCadDM filtroLogradouroAtlzCadDM = new FiltroLogradouroAtlzCadDM();
		filtroLogradouroAtlzCadDM.adicionarParametro(new ParametroSimples(
				FiltroLogradouroAtlzCadDM.CODIGO, resultSet
						.getString("LOGR_CDUNICO")));

		Collection<LogradouroAtlzCadDM> colecaoLogradouroAtlzCadDM = this
				.getControladorUtil().pesquisar(filtroLogradouroAtlzCadDM,
						LogradouroAtlzCadDM.class.getName());
		LogradouroAtlzCadDM logradouroAtlzCadDM = (LogradouroAtlzCadDM) Util
				.retonarObjetoDeColecao(colecaoLogradouroAtlzCadDM);
		logradouroCepAtlzCadDM.setLogradouroAtlzCad(logradouroAtlzCadDM);

		logradouroCepAtlzCadDM.setUltimaAlteracao(new Date());
		return logradouroCepAtlzCadDM;
	}

	/**
	 * Método responsável por montar o objeto ImovelAtualizacaoCadastralDM
	 * 
	 * @author Jonathan Marcos
	 * @since 25/09/2014
	 * @param statement
	 * @param resultSet
	 * @return LogradouroAtlzCadDM
	 * @throws SQLException
	 * @throws ParseException
	 */
	private ImovelAtualizacaoCadastralDM montarObjetoImovelAtualizacaoCadastralDM(
			ResultSet resultSet, Connection connection) throws SQLException,
			ParseException, ControladorException {
		ImovelAtualizacaoCadastralDM imovelAtualizacaoCadastralDM = new ImovelAtualizacaoCadastralDM();

		imovelAtualizacaoCadastralDM.setId(resultSet.getInt("IMAC_ID"));

		if (resultSet.getString("IMOV_ID") != null
				&& !resultSet.getString("IMOV_ID").equals("")) {
			Imovel imovel = new Imovel();
			imovelAtualizacaoCadastralDM.setIdImovel(resultSet
					.getInt("IMOV_ID"));
		}

		Municipio municipio = new Municipio();
		municipio.setId(resultSet.getInt("MUNI_ID"));
		imovelAtualizacaoCadastralDM.setMunicipio(municipio);

		Localidade localidade = new Localidade();
		localidade.setId(resultSet.getInt("LOCA_ID"));
		imovelAtualizacaoCadastralDM.setLocalidade(localidade);

		imovelAtualizacaoCadastralDM.setCodigoSetorComercial(resultSet
				.getInt("STCM_CDSETORCOMERCIAL"));
		imovelAtualizacaoCadastralDM.setNumeroQuadra(resultSet
				.getInt("QDRA_NNQUADRA"));
		imovelAtualizacaoCadastralDM.setNumeroLote(resultSet
				.getInt("IMAC_NNLOTE"));
		imovelAtualizacaoCadastralDM.setNumeroSubLote(resultSet
				.getInt("IMAC_NNSUBLOTE"));

		if (resultSet.getString("IMAC_CDUNICOLOG") != null
				&& resultSet.getString("IMAC_CDUNICOLOG").compareTo("") != 0) {
			imovelAtualizacaoCadastralDM.setIdLogradouro(resultSet
					.getLong("IMAC_CDUNICOLOG"));
		} else {
			imovelAtualizacaoCadastralDM.setIdLogradouro(resultSet
					.getLong("LOGR_ID"));
		}

		if (Util.validarCamposAtualizacaoCadastral(resultSet
				.getString("EDRF_ID"))) {
			EnderecoReferencia enderecoReferencia = new EnderecoReferencia();
			enderecoReferencia.setId(resultSet.getInt("EDRF_ID"));
			imovelAtualizacaoCadastralDM
					.setEnderecoReferencia(enderecoReferencia);
		}

		String numeroImovel = resultSet.getString("IMAC_NNIMOVEL");
		if (numeroImovel != null
				&& (numeroImovel.contains("Â½") || numeroImovel.contains("Â"))) {

			int posicaoInicial = numeroImovel.indexOf("Ã");

			int posicaoFinal = ConstantesSistema.NUMERO_NAO_INFORMADO;
			if (numeroImovel.contains("½")) {
				posicaoFinal = numeroImovel.indexOf("½") + 1;
			} else if (numeroImovel.contains("¿")) {
				posicaoFinal = numeroImovel.indexOf("¿") + 1;
			} else if (numeroImovel.contains("Â")) {
				posicaoFinal = numeroImovel.indexOf("Â") + 1;
			}

			if (posicaoInicial >= 0 && posicaoFinal >= 0) {
				String caracterInvalido = numeroImovel.substring(
						posicaoInicial, posicaoFinal);
				numeroImovel = numeroImovel.replace(caracterInvalido, "");
			}
		}
		imovelAtualizacaoCadastralDM.setNumeroImovel(numeroImovel);

		String complemento = resultSet.getString("IMAC_DSCOMPLEMENTOENDERECO");
		if (complemento != null
				&& (complemento.contains("Â½") || complemento.contains("Â"))) {

			int posicaoInicial = complemento.indexOf("Ã");

			int posicaoFinal = ConstantesSistema.NUMERO_NAO_INFORMADO;
			if (complemento.contains("½")) {
				posicaoFinal = complemento.indexOf("½") + 1;
			} else if (complemento.contains("¿")) {
				posicaoFinal = complemento.indexOf("¿") + 1;
			} else if (complemento.contains("Â")) {
				posicaoFinal = complemento.indexOf("Â") + 1;
			}

			if (posicaoInicial >= 0 && posicaoFinal >= 0) {
				String caracterInvalido = complemento.substring(posicaoInicial,
						posicaoFinal);
				complemento = complemento.replace(caracterInvalido, "");
			}
		}
		imovelAtualizacaoCadastralDM.setComplementoEndereco(Util
				.completaString(complemento, 25));

		imovelAtualizacaoCadastralDM.setCodigoLogradouroBairro(resultSet
				.getInt("LGBR_ID"));
		imovelAtualizacaoCadastralDM.setCodigoLogradouroCep(resultSet
				.getInt("LGCP_ID"));

		ImovelPerfil imovelPerfil = new ImovelPerfil();
		imovelPerfil.setId(resultSet.getInt("IPER_ID"));
		imovelAtualizacaoCadastralDM.setImovelPerfil(imovelPerfil);

		imovelAtualizacaoCadastralDM.setNumeroMedidorEnergia(resultSet
				.getString("IMAC_NNMEDIDORENERGIA"));

		if (resultSet.getString("IMAC_NNMORADOR") != null
				&& resultSet.getString("IMAC_NNMORADOR").trim().compareTo("") != 0) {
			imovelAtualizacaoCadastralDM.setNumeroMorador(resultSet
					.getShort("IMAC_NNMORADOR"));
		}

		PavimentoRua pavimentoRua = new PavimentoRua();
		pavimentoRua.setId(resultSet.getInt("PRUA_ID"));
		imovelAtualizacaoCadastralDM.setPavimentoRua(pavimentoRua);

		PavimentoCalcada pavimentoCalcada = new PavimentoCalcada();
		pavimentoCalcada.setId(resultSet.getInt("PCAL_ID"));
		imovelAtualizacaoCadastralDM.setPavimentoCalcada(pavimentoCalcada);

		FonteAbastecimento fonteAbastecimento = new FonteAbastecimento();
		fonteAbastecimento.setId(resultSet.getInt("FTAB_ID"));
		imovelAtualizacaoCadastralDM.setFonteAbastecimento(fonteAbastecimento);

		LigacaoAguaSituacao ligacaoAguaSituacao = new LigacaoAguaSituacao();
		ligacaoAguaSituacao.setId(resultSet.getInt("LAST_ID"));
		imovelAtualizacaoCadastralDM
				.setLigacaoAguaSituacao(ligacaoAguaSituacao);

		LigacaoEsgotoSituacao ligacaoEsgotoSituacao = new LigacaoEsgotoSituacao();
		ligacaoEsgotoSituacao.setId(resultSet.getInt("LEST_ID"));
		imovelAtualizacaoCadastralDM
				.setLigacaoEsgotoSituacao(ligacaoEsgotoSituacao);

		UnidadeFederacao unidadeFederacao = new UnidadeFederacao();
		unidadeFederacao.setId(20);
		imovelAtualizacaoCadastralDM.setUnidadeFederacao(unidadeFederacao);

		imovelAtualizacaoCadastralDM.setDsUFSiglaMunicipio("RN");

		SimpleDateFormat simpleDateFormat = new SimpleDateFormat(
				"yyyy-MM-dd HH:mm:ss");
		imovelAtualizacaoCadastralDM.setDataVisita(simpleDateFormat
				.parse(resultSet.getString("IMAC_DTVISITA")));

		imovelAtualizacaoCadastralDM.setCodigoImovel(resultSet
				.getString("IMAC_INTEGRACAOID"));

		ResultSet resultSetSistemaParametros = connection.createStatement()
				.executeQuery("SELECT PTAC_ID,EMPR_ID FROM sistema_parametros");

		ParametroTabelaAtualizacaoCadastralDM parametroTabelaAtualizacaoCadastro = new ParametroTabelaAtualizacaoCadastralDM();
		parametroTabelaAtualizacaoCadastro.setId(resultSetSistemaParametros
				.getInt("PTAC_ID"));
		imovelAtualizacaoCadastralDM
				.setParametroTabelaAtualizacaoCadastralDM(parametroTabelaAtualizacaoCadastro);

		imovelAtualizacaoCadastralDM.setIdBairro(resultSet.getInt("BAIR_ID"));
		imovelAtualizacaoCadastralDM.setCodigoCep(resultSet
				.getInt("IMAC_CDCEP"));
		imovelAtualizacaoCadastralDM.setObservacao(resultSet
				.getString("IMAC_DSOBSERVACAO"));

		Empresa empresa = new Empresa();
		empresa.setId(resultSetSistemaParametros.getInt("EMPR_ID"));
		imovelAtualizacaoCadastralDM.setEmpresa(empresa);

		if (resultSet.getString("IMAC_LOGIN") != null
				&& resultSet.getString("IMAC_LOGIN").compareTo("") != 0) {
			imovelAtualizacaoCadastralDM.setLogin(resultSet
					.getString("IMAC_LOGIN"));
		} else {
			imovelAtualizacaoCadastralDM.setLogin(resultSetSistemaParametros
					.getString("PTAC_ID"));
		}

		if (resultSet.getString("LTAN_ID") != null
				&& resultSet.getString("LTAN_ID").compareTo("") != 0) {
			LeituraAnormalidade leituraAnormalidade = new LeituraAnormalidade();
			leituraAnormalidade.setId(resultSet.getInt("LTAN_ID"));
			imovelAtualizacaoCadastralDM
					.setOcorrenciaHidrometro(leituraAnormalidade);
		}

		DecimalFormat dff = null;
		if (resultSet.getString("IMAC_NNCOORDENADAX") != null
				&& resultSet.getString("IMAC_NNCOORDENADAX").compareTo("") != 0) {
			dff = new DecimalFormat(
					"########0.0000000000000000;-########0.0000000000000000");
			String coordenadaX = resultSet.getString("IMAC_NNCOORDENADAX");
			coordenadaX = validaBigDecimal(coordenadaX, dff, "X");
			imovelAtualizacaoCadastralDM.setCoordenadaX(Util
					.verificarNaoVazio(coordenadaX) ? new BigDecimal(
					coordenadaX.replace(',', '.')) : null);
		}

		if (resultSet.getString("IMAC_NNCOORDENADAY") != null
				&& resultSet.getString("IMAC_NNCOORDENADAY").compareTo("") != 0) {
			dff = new DecimalFormat(
					"########0.0000000000000000;-########0.0000000000000000");
			String coordenadaY = resultSet.getString("IMAC_NNCOORDENADAY");
			coordenadaY = validaBigDecimal(coordenadaY, dff, "Y");
			imovelAtualizacaoCadastralDM.setCoordenadaY(Util
					.verificarNaoVazio(coordenadaY) ? new BigDecimal(
					coordenadaY.replace(',', '.')) : null);
		}

		// String indicadorImovelNovoComMatricula = colArquivos.get(33);
		String indicadorImovelNovoComMatricula = null;

		imovelAtualizacaoCadastralDM
				.setIndicadorAtualizado(ConstantesSistema.NAO);
		imovelAtualizacaoCadastralDM
				.setIndicadorPendente(ConstantesSistema.NAO);
		imovelAtualizacaoCadastralDM.setIndicadorDadosRetorno(Short
				.valueOf("3"));
		imovelAtualizacaoCadastralDM
				.setIndicadorResetorizado(ConstantesSistema.NAO);
		imovelAtualizacaoCadastralDM.setDataRecebimentoMovimento(new Date());
		imovelAtualizacaoCadastralDM
				.setIndicadorRegistroExcluido(ConstantesSistema.NAO);

		if (imovelAtualizacaoCadastralDM.getIdImovel() != null
				&& !imovelAtualizacaoCadastralDM.getIdImovel().toString()
						.equals("")
				&& imovelAtualizacaoCadastralDM.getIdImovel() > 0) {
			imovelAtualizacaoCadastralDM
					.setIndicadorImovelNovo(ConstantesSistema.NAO);

			// Caso a matricula informada pelo cadastrador no tablet nao exista
			// no arquivo do tablet.
			if (indicadorImovelNovoComMatricula != null
					&& indicadorImovelNovoComMatricula
							.equals(ConstantesSistema.SIM.toString())) {
				try {
					Imovel imovel = new Imovel();
					imovel.setId(imovelAtualizacaoCadastralDM.getIdImovel());

					imovel = this.getControladorImovel().pesquisarImovel(
							imovel.getId());

					if (imovel != null && imovel.getId() != null) {
						Collection colecaoIdImovel = new ArrayList();
						colecaoIdImovel.add(imovel.getId() + "/"
								+ ConstantesSistema.NAO);

						Empresa empr = new Empresa();
						empr = imovelAtualizacaoCadastralDM.getEmpresa();

						this.gerarTabelasTemporarias(colecaoIdImovel, empr,
								parametroTabelaAtualizacaoCadastro);
					}

				} catch (ControladorException e) {
					e.printStackTrace();
				} catch (ErroRepositorioException e) {
					e.printStackTrace();
				}
			}

		} else {
			try {
				Integer id = getControladorImovel().obterNextValImovel();
				imovelAtualizacaoCadastralDM.setIdImovel(id);
			} catch (ControladorException e) {
				e.printStackTrace();
			}
			imovelAtualizacaoCadastralDM
					.setIndicadorImovelNovo(ConstantesSistema.SIM);
		}
		imovelAtualizacaoCadastralDM.setUltimaAlteracao(new Date());

		return imovelAtualizacaoCadastralDM;
	}

	/**
	 * Método responsável por montar o objeto ClienteAtualizacaoCadastralDM
	 * 
	 * @author Jonathan Marcos
	 * @since 25/09/2014
	 * @param statement
	 * @param resultSet
	 * @return LogradouroAtlzCadDM
	 * @throws SQLException
	 * @throws ParseException
	 */
	private ClienteAtualizacaoCadastralDM montarObjetoClienteAtualizacaoCadastralDM(
			ResultSet resultSet, String idImovelAtualizacaoCadastral)
			throws SQLException, ParseException {
		SimpleDateFormat simpleDateFormat = new SimpleDateFormat(
				"yyyy-MM-dd HH:mm:ss");

		ClienteAtualizacaoCadastralDM clienteAtualizacaoCadastralDM = new ClienteAtualizacaoCadastralDM();

		Integer idImovelAtlzCadastral = null;
		try {
			idImovelAtlzCadastral = repositorioCadastro
					.pesquisarIdImovelAtualizacaoCadastral(idImovelAtualizacaoCadastral);
		} catch (ErroRepositorioException e) {
			e.printStackTrace();
		}

		ImovelAtualizacaoCadastralDM imovelAtualizacaoCadastral = new ImovelAtualizacaoCadastralDM();
		imovelAtualizacaoCadastral.setId(idImovelAtlzCadastral);
		clienteAtualizacaoCadastralDM
				.setImovelAtualizacaoCadastralDM(imovelAtualizacaoCadastral);

		if (Util.validarCamposAtualizacaoCadastral(resultSet
				.getString("CLTP_ID"))) {
			ClienteTipo clienteTipo = new ClienteTipo();
			clienteTipo.setId(resultSet.getInt("CLTP_ID"));
			clienteAtualizacaoCadastralDM.setClienteTipo(clienteTipo);
		}

		clienteAtualizacaoCadastralDM.setCpfCnpj(resultSet
				.getString("CLAC_NNCPFCNPPJ"));
		clienteAtualizacaoCadastralDM.setNomeCliente(resultSet
				.getString("CLAC_NMCLIENTE"));
		clienteAtualizacaoCadastralDM.setRg(resultSet.getString("CLAC_NNRG"));

		if (Util.validarCamposAtualizacaoCadastral(resultSet
				.getString("OERG_ID"))) {
			OrgaoExpedidorRg orgaoExpedidorRG = new OrgaoExpedidorRg();
			orgaoExpedidorRG.setId(resultSet.getInt("OERG_ID"));
			clienteAtualizacaoCadastralDM.setOrgaoExpedidorRG(orgaoExpedidorRG);
		}

		if (Util.validarCamposAtualizacaoCadastral(resultSet
				.getString("UNFE_ID"))) {
			UnidadeFederacao unidadeFederacao = new UnidadeFederacao();
			unidadeFederacao.setId(resultSet.getInt("UNFE_ID"));
			clienteAtualizacaoCadastralDM.setUnidadeFederacao(unidadeFederacao);
		}

		if (resultSet.getString("CLAC_DTRGEMISSAO") != null
				&& resultSet.getString("CLAC_DTRGEMISSAO").compareTo("") != 0) {
			clienteAtualizacaoCadastralDM.setDataEmissaoRg(simpleDateFormat
					.parse(resultSet.getString("CLAC_DTRGEMISSAO")));
		}

		if (resultSet.getString("PSEX_ID") != null
				&& resultSet.getString("PSEX_ID").compareTo("") != 0) {
			PessoaSexo pessoaSexo = new PessoaSexo();
			pessoaSexo.setId(resultSet.getInt("PSEX_ID"));
			clienteAtualizacaoCadastralDM.setSexo(pessoaSexo);
		}

		if (resultSet.getString("CLAC_DTNASCIMENTO") != null
				&& resultSet.getString("CLAC_DTNASCIMENTO").compareTo("") != 0) {
			clienteAtualizacaoCadastralDM.setDataNascimento(simpleDateFormat
					.parse(resultSet.getString("CLAC_DTNASCIMENTO")));
		}

		if (resultSet.getString("CLAC_IDCLIENTE") != null
				&& resultSet.getString("CLAC_IDCLIENTE").compareTo("") != 0) {
			clienteAtualizacaoCadastralDM.setIdCliente(resultSet
					.getInt("CLAC_IDCLIENTE"));
		}

		if (resultSet.getString("CLAC_NMMAE") != null
				&& resultSet.getString("CLAC_NMMAE").compareTo("") != 0) {
			clienteAtualizacaoCadastralDM.setNomeMae(resultSet
					.getString("CLAC_NMMAE"));
		}

		if (resultSet.getString("CLAC_ICDOCUMENTACAO") != null
				&& resultSet.getString("CLAC_ICDOCUMENTACAO").compareTo("") != 0) {
			clienteAtualizacaoCadastralDM.setIndicadorDocumentacao(resultSet
					.getShort("CLAC_ICDOCUMENTACAO"));
		} else {
			clienteAtualizacaoCadastralDM
					.setIndicadorDocumentacao(ConstantesSistema.NAO);
		}

		if (resultSet.getString("CLAC_ICPROPRIETARIO") != null
				&& resultSet.getString("CLAC_ICPROPRIETARIO").compareTo("") != 0) {
			clienteAtualizacaoCadastralDM.setIndicadorProprietario(resultSet
					.getShort("CLAC_ICPROPRIETARIO"));
		} else {
			clienteAtualizacaoCadastralDM
					.setIndicadorProprietario(ConstantesSistema.NAO);
		}

		if (resultSet.getString("CLAC_ICRESPONSAVEL") != null
				&& resultSet.getString("CLAC_ICRESPONSAVEL").compareTo("") != 0) {
			clienteAtualizacaoCadastralDM.setIndicadorResponsavel(resultSet
					.getShort("CLAC_ICRESPONSAVEL"));
		} else {
			clienteAtualizacaoCadastralDM
					.setIndicadorResponsavel(ConstantesSistema.NAO);
		}

		ClienteRelacaoTipo clienteRelacaoTipo = new ClienteRelacaoTipo();
		clienteRelacaoTipo.setId(Integer.valueOf(ClienteRelacaoTipo.USUARIO));
		clienteAtualizacaoCadastralDM.setClienteRelacaoTipo(clienteRelacaoTipo);
		clienteAtualizacaoCadastralDM.setUltimaAlteracao(new Date());

		return clienteAtualizacaoCadastralDM;
	}

	/**
	 * Método responsável por montar o objeto ClienteFoneAtualizacaoCadastralDM
	 * 
	 * @author Jonathan Marcos
	 * @since 25/09/2014
	 * @param statement
	 * @param resultSet
	 * @return LogradouroAtlzCadDM
	 * @throws SQLException
	 */
	private ClienteFoneAtualizacaoCadastralDM montarObjetoClienteFoneAtualizacaoCadastralDM(
			ResultSet resultSet, String idIntegracao) throws SQLException,
			ErroRepositorioException {
		ClienteFoneAtualizacaoCadastralDM clienteFoneAtualizacaoCadastralDM = new ClienteFoneAtualizacaoCadastralDM();

		Integer idClienteAtlzCadastral = null;

		idClienteAtlzCadastral = repositorioCadastro
				.pesquisarIdClienteAtualizacaoCadastral(idIntegracao);

		ClienteAtualizacaoCadastralDM clienteAtualizacaoCadastral = new ClienteAtualizacaoCadastralDM();
		clienteAtualizacaoCadastral.setId(idClienteAtlzCadastral);
		clienteFoneAtualizacaoCadastralDM
				.setClienteAtualizacaoCadastralDM(clienteAtualizacaoCadastral);

		FoneTipo foneTipo = new FoneTipo();
		foneTipo.setId(resultSet.getInt("FNET_ID"));
		clienteFoneAtualizacaoCadastralDM.setFoneTipo(foneTipo);
		clienteFoneAtualizacaoCadastralDM.setDdd(resultSet
				.getString("CFAC_CDDDD"));
		clienteFoneAtualizacaoCadastralDM.setTelefone(resultSet
				.getString("CFAC_NNFONE"));
		clienteFoneAtualizacaoCadastralDM.setUltimaAlteracao(new Date());

		short indicadorFone = 2;

		if (resultSet.getString("CFAC_ICFONEPADRAO") != null
				&& (resultSet.getString("CFAC_ICFONEPADRAO").equals("1") || resultSet
						.getString("CFAC_ICFONEPADRAO").equals("2"))) {
			indicadorFone = resultSet.getShort("CFAC_ICFONEPADRAO");
		}

		clienteFoneAtualizacaoCadastralDM.setIndicadorFonePadrao(indicadorFone);

		return clienteFoneAtualizacaoCadastralDM;
	}

	/**
	 * Método responsável por montar o objeto
	 * HidrometroInstalacaoHistoricoAtualizacaoCadastralDM
	 * 
	 * @author Jonathan Marcos
	 * @since 25/09/2014
	 * @param statement
	 * @param resultSet
	 * @return LogradouroAtlzCadDM
	 * @throws SQLException
	 */
	private HidrometroInstalacaoHistoricoAtualizacaoCadastralDM montarObjetoHidrometroInstalacaoHistoricoAtualizacaoCadastralDM(
			ResultSet resultSet, String idIntegracao,
			Integer idAnteriorImovelTablet) throws ControladorException,
			SQLException {
		HidrometroInstalacaoHistoricoAtualizacaoCadastralDM hidrometroInstalacaoHistoricoAtualizacaoCadastralDM = new HidrometroInstalacaoHistoricoAtualizacaoCadastralDM();

		FiltroImovelAtualizacaoCadastralDM filtroImovelAtualizacaoCadastral = new FiltroImovelAtualizacaoCadastralDM();
		filtroImovelAtualizacaoCadastral
				.adicionarParametro(new ParametroSimples(
						FiltroImovelAtualizacaoCadastralDM.CODIGO, idIntegracao));

		Collection<ImovelAtualizacaoCadastralDM> colecaoImovel = this
				.getControladorUtil().pesquisar(
						filtroImovelAtualizacaoCadastral,
						ImovelAtualizacaoCadastralDM.class.getName());

		ImovelAtualizacaoCadastralDM imovelAtualizacaoCadastral = (ImovelAtualizacaoCadastralDM) Util
				.retonarObjetoDeColecao(colecaoImovel);

		hidrometroInstalacaoHistoricoAtualizacaoCadastralDM
				.setImovelAtualizacaoCadastralDM(imovelAtualizacaoCadastral);
		hidrometroInstalacaoHistoricoAtualizacaoCadastralDM
				.setNumeroHidrometro(resultSet.getString("HIAC_NNHIDROMETRO"));

		HidrometroLocalInstalacao hidrometroLocalInstalacao = null;
		if (Util.validarCamposAtualizacaoCadastral(resultSet
				.getString("HILI_ID"))) {
			hidrometroLocalInstalacao = new HidrometroLocalInstalacao();
			hidrometroLocalInstalacao.setId(resultSet.getInt("HILI_ID"));
		}
		hidrometroInstalacaoHistoricoAtualizacaoCadastralDM
				.setHidrometroLocalInstalacao(hidrometroLocalInstalacao);

		HidrometroProtecao hidrometroProtecao = null;
		if (Util.validarCamposAtualizacaoCadastralAceitaZero(resultSet
				.getString("HIPR_ID"))) {
			hidrometroProtecao = new HidrometroProtecao();
			hidrometroProtecao.setId(resultSet.getInt("HIPR_ID"));
		}
		hidrometroInstalacaoHistoricoAtualizacaoCadastralDM
				.setHidrometroProtecao(hidrometroProtecao);

		hidrometroInstalacaoHistoricoAtualizacaoCadastralDM
				.setNumeroInstalacaoHidrometro(resultSet
						.getInt("HIAC_NNINSTALACAOHIDMT"));

		MedicaoTipo medicaoTipo = new MedicaoTipo();
		medicaoTipo.setId(MedicaoTipo.LIGACAO_AGUA);
		hidrometroInstalacaoHistoricoAtualizacaoCadastralDM
				.setMedicaoTipo(medicaoTipo);

		hidrometroInstalacaoHistoricoAtualizacaoCadastralDM
				.setUltimaAlteracao(new Date());
		Date dataInstalacao = imovelAtualizacaoCadastral.getDataVisita();

		if (idAnteriorImovelTablet != null) {

			Integer idImovel = imovelAtualizacaoCadastral.getIdImovel();

			Hidrometro hidrometro1 = getControladorMicromedicao()
					.pesquisarHidrometroPeloNumero(
							hidrometroInstalacaoHistoricoAtualizacaoCadastralDM
									.getNumeroHidrometro());
			if (hidrometro1 != null && hidrometro1.getId() != null) {
				FiltroHidrometroInstalacaoHistorico filtroHidrometroInstalacaoHistorico = new FiltroHidrometroInstalacaoHistorico();
				filtroHidrometroInstalacaoHistorico
						.adicionarParametro(new ParametroSimples(
								FiltroHidrometroInstalacaoHistorico.HIDROMETRO_ID,
								hidrometro1.getId()));
				filtroHidrometroInstalacaoHistorico
						.adicionarParametro(new ParametroSimples(
								FiltroHidrometroInstalacaoHistorico.LIGACAO_AGUA_ID,
								idImovel));

				Collection colecaoHidrometroInstalacaoHistorico = Fachada
						.getInstancia().pesquisar(
								filtroHidrometroInstalacaoHistorico,
								HidrometroInstalacaoHistorico.class.getName());
				if (colecaoHidrometroInstalacaoHistorico != null
						&& !colecaoHidrometroInstalacaoHistorico.isEmpty()) {
					HidrometroInstalacaoHistorico hidrometroInstalacaoHistorico = (HidrometroInstalacaoHistorico) Util
							.retonarObjetoDeColecao(colecaoHidrometroInstalacaoHistorico);
					dataInstalacao = hidrometroInstalacaoHistorico
							.getDataInstalacao();
				}
			}
		}

		hidrometroInstalacaoHistoricoAtualizacaoCadastralDM
				.setDataInstalacaoHidrometro(dataInstalacao);

		return hidrometroInstalacaoHistoricoAtualizacaoCadastralDM;
	}

	/**
	 * Método responsável por montar o objeto
	 * ImovelSubcategoriaAtualizacaoCadastralDM
	 * 
	 * @author Jonathan Marcos
	 * @since 25/09/2014
	 * @param statement
	 * @param resultSet
	 * @return LogradouroAtlzCadDM
	 * @throws SQLException
	 */
	private ImovelSubcategoriaAtualizacaoCadastralDM montarObjetoImovelSubcategoriaAtualizacaoCadastralDM(
			ResultSet resultSet, String idIntegracao) throws SQLException,
			ControladorException {
		ImovelSubcategoriaAtualizacaoCadastralDM imovelSubcategoriaAtualizacaoCadastralDM = new ImovelSubcategoriaAtualizacaoCadastralDM();

		FiltroImovelAtualizacaoCadastralDM filtroImovelAtualizacaoCadastral = new FiltroImovelAtualizacaoCadastralDM();
		filtroImovelAtualizacaoCadastral
				.adicionarParametro(new ParametroSimples(
						FiltroImovelAtualizacaoCadastralDM.CODIGO, idIntegracao));

		Collection<ImovelAtualizacaoCadastralDM> colecaoImovel = this
				.getControladorUtil().pesquisar(
						filtroImovelAtualizacaoCadastral,
						ImovelAtualizacaoCadastralDM.class.getName());
		ImovelAtualizacaoCadastralDM imovelAtualizacaoCadastral = (ImovelAtualizacaoCadastralDM) Util
				.retonarObjetoDeColecao(colecaoImovel);
		imovelSubcategoriaAtualizacaoCadastralDM
				.setImovelAtualizacaoCadastralDM(imovelAtualizacaoCadastral);

		Categoria categoria = new Categoria();
		categoria.setId(resultSet.getInt("CATG_ID"));
		if (categoria.getId().toString().trim().equals("1")) {
			categoria.setDescricao(Categoria.RESIDENCIAL_DESCRICAO);
		} else if (categoria.getId().toString().trim().equals("2")) {
			categoria.setDescricao(Categoria.COMERCIAL_DESCRICAO);
		} else if (categoria.getId().toString().trim().equals("3")) {
			categoria.setDescricao(Categoria.INDUSTRIAL_DESCRICAO);
		} else if (categoria.getId().toString().trim().equals("4")) {
			categoria.setDescricao(Categoria.PUBLICO_DESCRICAO);
		}
		imovelSubcategoriaAtualizacaoCadastralDM.setCategoria(categoria);

		Subcategoria subCategoria = new Subcategoria();
		subCategoria.setId(resultSet.getInt("SCAT_ID"));
		imovelSubcategoriaAtualizacaoCadastralDM.setSubcategoria(subCategoria);

		// pesquisa a descricao da subcategoria
		FiltroSubCategoria filtroSubCategoria = new FiltroSubCategoria();
		filtroSubCategoria.adicionarParametro(new ParametroSimples(
				FiltroSubCategoria.ID, subCategoria.getId()));
		Collection<Subcategoria> colecaoSubcategoria = getControladorUtil()
				.pesquisar(filtroSubCategoria, Subcategoria.class.getName());
		if (colecaoSubcategoria != null && !colecaoSubcategoria.isEmpty()) {
			Subcategoria subcategoria2 = (Subcategoria) Util
					.retonarObjetoDeColecao(colecaoSubcategoria);
			imovelSubcategoriaAtualizacaoCadastralDM
					.setSubcategoria(subcategoria2);
		}

		imovelSubcategoriaAtualizacaoCadastralDM
				.setQuantidadeEconomias(resultSet.getShort("ISAC_QTECONOMIA"));

		imovelSubcategoriaAtualizacaoCadastralDM.setUltimaAlteracao(new Date());

		return imovelSubcategoriaAtualizacaoCadastralDM;
	}

	/**
	 * Método responsável por montar o objeto
	 * ImovelOcorrenciaAtualizacaoCadastralDM
	 * 
	 * @author Jonathan Marcos
	 * @since 25/09/2014
	 * @param statement
	 * @param resultSet
	 * @return LogradouroAtlzCadDM
	 * @throws SQLException
	 */
	private ImovelOcorrenciaAtualizacaoCadastralDM montarObjetoImovelOcorrenciaAtualizacaoCadastralDM(
			ResultSet resultSet, String idIntegracao) throws SQLException {
		ImovelOcorrenciaAtualizacaoCadastralDM imovelOcorrenciaAtualizacaoCadastralDM = new ImovelOcorrenciaAtualizacaoCadastralDM();

		CadastroOcorrencia cadastroOcorrencia = new CadastroOcorrencia();
		cadastroOcorrencia.setId(resultSet.getInt("COCR_ID"));
		imovelOcorrenciaAtualizacaoCadastralDM
				.setCadastroOcorrencia(cadastroOcorrencia);

		Integer idImovelAtlzCadastral = null;
		try {
			idImovelAtlzCadastral = repositorioCadastro
					.pesquisarIdImovelAtualizacaoCadastral(idIntegracao);
		} catch (ErroRepositorioException e) {
			e.printStackTrace();
		}

		ImovelAtualizacaoCadastralDM imovelAtualizacaoCadastral = new ImovelAtualizacaoCadastralDM();
		imovelAtualizacaoCadastral.setId(idImovelAtlzCadastral);
		imovelOcorrenciaAtualizacaoCadastralDM
				.setImovelAtualizacaoCadastral(imovelAtualizacaoCadastral);

		imovelOcorrenciaAtualizacaoCadastralDM.setUltimaAlteracao(new Date());

		return imovelOcorrenciaAtualizacaoCadastralDM;
	}

	/**
	 * Método responsável por montar o objeto ImovelFotoAtualizacaoCadastralDM
	 * 
	 * @author Jonathan Marcos
	 * @since 25/09/2014
	 * @param statement
	 * @param resultSet
	 * @return LogradouroAtlzCadDM
	 * @throws SQLException
	 */
	private ImovelFotoAtualizacaoCadastralDM montarObjetoImovelFotoAtualizacaoCadastralDM(
			ResultSet resultSet, String fotoPath) throws SQLException,
			ControladorException, IOException {
		ImovelFotoAtualizacaoCadastralDM imovelFotoAtualizacaoCadastralDM = new ImovelFotoAtualizacaoCadastralDM();

		FiltroImovelAtualizacaoCadastralDM filtroImovelAtualizacaoCadastralDM = new FiltroImovelAtualizacaoCadastralDM();
		filtroImovelAtualizacaoCadastralDM
				.adicionarParametro(new ParametroSimples(
						FiltroImovelAtualizacaoCadastralDM.CODIGO, resultSet
								.getString("IMAC_INTEGRACAOID")));
		ImovelAtualizacaoCadastralDM imovelAtualizacaoCadastralDM = (ImovelAtualizacaoCadastralDM) Util
				.retonarObjetoDeColecao(getControladorUtil().pesquisar(
						filtroImovelAtualizacaoCadastralDM,
						ImovelAtualizacaoCadastralDM.class.getName()));
		imovelFotoAtualizacaoCadastralDM
				.setImovelAtualizacaoCadastralDM(imovelAtualizacaoCadastralDM);

		FiltroFotoSituacaoOrdemServico filtroSituacaoFoto = new FiltroFotoSituacaoOrdemServico();
		filtroSituacaoFoto.adicionarParametro(new ParametroSimples(
				FiltroFotoSituacaoOrdemServico.ID, resultSet
						.getInt("FOTO_TIPO")));
		FotoSituacaoOrdemServico fotoSituacaoOrdemServico = (FotoSituacaoOrdemServico) Util
				.retonarObjetoDeColecao(getControladorUtil().pesquisar(
						filtroSituacaoFoto,
						FotoSituacaoOrdemServico.class.getName()));
		imovelFotoAtualizacaoCadastralDM
				.setFotoSituacao(fotoSituacaoOrdemServico);

		File fileFoto = new File(fotoPath);

		BufferedImage originalImage = ImageIO.read(fileFoto);
		ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream();
		ImageIO.write(originalImage, "jpg", byteArrayOutputStream);
		byte[] imagemArrayByte = byteArrayOutputStream.toByteArray();

		imovelFotoAtualizacaoCadastralDM.setFotoImovel(imagemArrayByte);

		imovelFotoAtualizacaoCadastralDM.setUltimaAlteracao(new Date());

		return imovelFotoAtualizacaoCadastralDM;
	}

	/**
	 * Método responsável por montar o objeto CepAtlzCadDM
	 * 
	 * @author Jonathan Marcos
	 * @since 09/10/2014
	 * @param cepDM
	 * @return CepAtlzCadDM
	 */
	private CepAtlzCadDM montarObjetoCepAtlzCadDM(CepDM cepDM) {
		CepAtlzCadDM cepAtlzCadDM = new CepAtlzCadDM();
		cepAtlzCadDM.setId(cepDM.getId());
		cepAtlzCadDM.setCodigoCep(cepDM.getCodigoCep());
		cepAtlzCadDM.setUltimaAlteracao(new Date());
		return cepAtlzCadDM;
	}

	/**
	 * Método responsável por montar o objeto LogradouroAtlzCadDM
	 * 
	 * @author Jonathan Marcos
	 * @since 13/10/2014
	 * @param logradouroDM
	 * @return LogradouroAtlzCadDM
	 */
	private LogradouroAtlzCadDM montarObjetoLogradouroAtlzCadDM(
			LogradouroDM logradouroDM) {

		LogradouroAtlzCadDM logradouroAtlzCadDM = new LogradouroAtlzCadDM();

		logradouroAtlzCadDM.setCodigo(logradouroDM.getCodigo());
		logradouroAtlzCadDM.setNome(logradouroDM.getNome());
		logradouroAtlzCadDM.setNomePopular(logradouroDM.getNomePopular());
		logradouroAtlzCadDM.setNomeLoteamento(logradouroDM.getNomeLoteamento());

		Municipio municipio = null;
		if (logradouroDM.getIdMunicipio() != null) {
			municipio = new Municipio();
			municipio.setId(logradouroDM.getIdMunicipio());
		}
		logradouroAtlzCadDM.setMunicipio(municipio);

		LogradouroTipo logradouroTipo = null;
		if (logradouroDM.getIdLogradouroTipo() != null
				&& Util.validarCamposAtualizacaoCadastral(logradouroDM
						.getIdLogradouroTipo().toString())) {
			logradouroTipo = new LogradouroTipo();
			logradouroTipo.setId(logradouroDM.getIdLogradouroTipo());
		}
		logradouroAtlzCadDM.setLogradouroTipo(logradouroTipo);

		LogradouroTitulo logradouroTitulo = null;
		if (logradouroDM.getIdLogradouroTitulo() != null
				&& Util.validarCamposAtualizacaoCadastral(logradouroDM
						.getIdLogradouroTitulo().toString())) {
			logradouroTitulo = new LogradouroTitulo();
			logradouroTitulo.setId(logradouroDM.getIdLogradouroTitulo());
		}
		logradouroAtlzCadDM.setLogradouroTitulo(logradouroTitulo);

		logradouroAtlzCadDM.setUltimaAlteracao(new Date());
		logradouroAtlzCadDM.setIndicadorAtualizado(ConstantesSistema.NAO);

		Localidade localidade = new Localidade();
		localidade.setId(logradouroDM.getIdLocalidade());
		logradouroAtlzCadDM.setLocalidade(localidade);

		Empresa empresa = new Empresa();
		empresa.setId(logradouroDM.getIdEmpresa());
		logradouroAtlzCadDM.setEmpresa(empresa);

		return logradouroAtlzCadDM;
	}

	/**
	 * Método responsável por montar o objeto LogradouroCepAtlzCadDM
	 * 
	 * @author Jonathan Marcos
	 * @since 13/10/2014
	 * @param logradouroDM
	 * @return LogradouroAtlzCadDM
	 */
	private LogradouroCepAtlzCadDM montarObjetoLogradouroCepAtlzCadDM(
			LogradouroCepDM logradouroCepDM) throws ControladorException {
		LogradouroCepAtlzCadDM logradouroCepAtlzCadDM = new LogradouroCepAtlzCadDM();

		CepAtlzCadDM cepAtlzCad = new CepAtlzCadDM();
		cepAtlzCad.setId(logradouroCepDM.getCodigoUnicoCep());
		logradouroCepAtlzCadDM.setCepAtlzCad(cepAtlzCad);

		FiltroLogradouroAtlzCadDM filtroLogradouroAtlzCadDM = new FiltroLogradouroAtlzCadDM();
		filtroLogradouroAtlzCadDM.adicionarParametro(new ParametroSimples(
				FiltroLogradouroAtlzCadDM.CODIGO, logradouroCepDM
						.getCodigoUnicoLogradouro()));

		Collection<LogradouroAtlzCadDM> colecaoLogradouroAtlzCadDM = this
				.getControladorUtil().pesquisar(filtroLogradouroAtlzCadDM,
						LogradouroAtlzCadDM.class.getName());
		LogradouroAtlzCadDM logradouroAtlzCadDM = (LogradouroAtlzCadDM) Util
				.retonarObjetoDeColecao(colecaoLogradouroAtlzCadDM);
		logradouroCepAtlzCadDM.setLogradouroAtlzCad(logradouroAtlzCadDM);

		logradouroCepAtlzCadDM.setUltimaAlteracao(new Date());
		return logradouroCepAtlzCadDM;
	}

	/**
	 * Método responsável por montar o objeto ImovelAtualizacaoCadastralDM
	 * 
	 * @author Jonathan Marcos
	 * @since 13/10/2014
	 * @param logradouroDM
	 * @return LogradouroAtlzCadDM
	 */
	private ImovelAtualizacaoCadastralDM montarObjetoImovelAtualizacaoCadastralDM(
			ImovelDM imovelDM) throws ParseException, ControladorException {
		ImovelAtualizacaoCadastralDM imovelAtualizacaoCadastralDM = new ImovelAtualizacaoCadastralDM();

		imovelAtualizacaoCadastralDM.setId(imovelDM.getId());

		if (imovelDM.getIdImovel() != null) {
			Imovel imovel = new Imovel();
			imovelAtualizacaoCadastralDM.setIdImovel(imovelDM.getIdImovel());
		}

		Municipio municipio = new Municipio();
		municipio.setId(imovelDM.getIdMunicipio());
		imovelAtualizacaoCadastralDM.setMunicipio(municipio);

		Localidade localidade = new Localidade();
		localidade.setId(imovelDM.getIdLocalidade());
		imovelAtualizacaoCadastralDM.setLocalidade(localidade);

		imovelAtualizacaoCadastralDM.setCodigoSetorComercial(imovelDM
				.getCodigoSetorComercial());
		imovelAtualizacaoCadastralDM
				.setNumeroQuadra(imovelDM.getNumeroQuadra());
		imovelAtualizacaoCadastralDM.setNumeroLote(imovelDM.getNumeroLote());
		imovelAtualizacaoCadastralDM.setNumeroSubLote(imovelDM
				.getNumeroSubLote());

		if (imovelDM.getCodigoUnicoLogradouro() != null
				&& Util.validarCamposAtualizacaoCadastral(imovelDM
						.getCodigoUnicoLogradouro())) {
			imovelAtualizacaoCadastralDM.setIdLogradouro(Long.valueOf(imovelDM
					.getCodigoUnicoLogradouro()));
		} else {
			imovelAtualizacaoCadastralDM.setIdLogradouro(Long.valueOf(imovelDM
					.getIdLogradouro()));
		}

		if (imovelDM.getIdEnderecoReferencia() != null
				&& Util.validarCamposAtualizacaoCadastral(imovelDM
						.getIdEnderecoReferencia().toString())) {
			EnderecoReferencia enderecoReferencia = new EnderecoReferencia();
			enderecoReferencia.setId(imovelDM.getIdEnderecoReferencia());
			imovelAtualizacaoCadastralDM
					.setEnderecoReferencia(enderecoReferencia);
		}

		String numeroImovel = imovelDM.getNumeroImovel();
		if (numeroImovel != null
				&& (numeroImovel.contains("Â½") || numeroImovel.contains("Â"))) {

			int posicaoInicial = numeroImovel.indexOf("Ã");

			int posicaoFinal = ConstantesSistema.NUMERO_NAO_INFORMADO;
			if (numeroImovel.contains("½")) {
				posicaoFinal = numeroImovel.indexOf("½") + 1;
			} else if (numeroImovel.contains("¿")) {
				posicaoFinal = numeroImovel.indexOf("¿") + 1;
			} else if (numeroImovel.contains("Â")) {
				posicaoFinal = numeroImovel.indexOf("Â") + 1;
			}

			if (posicaoInicial >= 0 && posicaoFinal >= 0) {
				String caracterInvalido = numeroImovel.substring(
						posicaoInicial, posicaoFinal);
				numeroImovel = numeroImovel.replace(caracterInvalido, "");
			}
		}
		imovelAtualizacaoCadastralDM.setNumeroImovel(numeroImovel);

		String complemento = imovelDM.getDescricaoComplementoEndereco();
		if (complemento != null
				&& (complemento.contains("Â½") || complemento.contains("Â"))) {

			int posicaoInicial = complemento.indexOf("Ã");

			int posicaoFinal = ConstantesSistema.NUMERO_NAO_INFORMADO;
			if (complemento.contains("½")) {
				posicaoFinal = complemento.indexOf("½") + 1;
			} else if (complemento.contains("¿")) {
				posicaoFinal = complemento.indexOf("¿") + 1;
			} else if (complemento.contains("Â")) {
				posicaoFinal = complemento.indexOf("Â") + 1;
			}

			if (posicaoInicial >= 0 && posicaoFinal >= 0) {
				String caracterInvalido = complemento.substring(posicaoInicial,
						posicaoFinal);
				complemento = complemento.replace(caracterInvalido, "");
			}
		}
		imovelAtualizacaoCadastralDM.setComplementoEndereco(Util
				.completaString(complemento, 25));

		imovelAtualizacaoCadastralDM.setCodigoLogradouroBairro(imovelDM
				.getIdLogradouroBairro());
		imovelAtualizacaoCadastralDM.setCodigoLogradouroCep(imovelDM
				.getIdLogradouroCep());

		ImovelPerfil imovelPerfil = new ImovelPerfil();
		imovelPerfil.setId(imovelDM.getIdImovelPerfil());
		imovelAtualizacaoCadastralDM.setImovelPerfil(imovelPerfil);

		imovelAtualizacaoCadastralDM.setNumeroMedidorEnergia(imovelDM
				.getNumeroMedidorEnergia());

		if (imovelDM.getNumeroMorador() != null) {
			imovelAtualizacaoCadastralDM.setNumeroMorador(imovelDM
					.getNumeroMorador());
		}

		PavimentoRua pavimentoRua = new PavimentoRua();
		pavimentoRua.setId(imovelDM.getIdPavimentoRua());
		imovelAtualizacaoCadastralDM.setPavimentoRua(pavimentoRua);

		PavimentoCalcada pavimentoCalcada = new PavimentoCalcada();
		pavimentoCalcada.setId(imovelDM.getIdPavimentoCalcada());
		imovelAtualizacaoCadastralDM.setPavimentoCalcada(pavimentoCalcada);

		FonteAbastecimento fonteAbastecimento = new FonteAbastecimento();
		fonteAbastecimento.setId(imovelDM.getIdFonteAbastecimento());
		imovelAtualizacaoCadastralDM.setFonteAbastecimento(fonteAbastecimento);

		LigacaoAguaSituacao ligacaoAguaSituacao = new LigacaoAguaSituacao();
		ligacaoAguaSituacao.setId(imovelDM.getIdLigacaoAguaSituacao());
		imovelAtualizacaoCadastralDM
				.setLigacaoAguaSituacao(ligacaoAguaSituacao);

		LigacaoEsgotoSituacao ligacaoEsgotoSituacao = new LigacaoEsgotoSituacao();
		ligacaoEsgotoSituacao.setId(imovelDM.getIdLigacaoEsgotoSituacao());
		imovelAtualizacaoCadastralDM
				.setLigacaoEsgotoSituacao(ligacaoEsgotoSituacao);

		UnidadeFederacao unidadeFederacao = new UnidadeFederacao();
		unidadeFederacao.setId(20);
		imovelAtualizacaoCadastralDM.setUnidadeFederacao(unidadeFederacao);

		imovelAtualizacaoCadastralDM.setDsUFSiglaMunicipio("RN");

		SimpleDateFormat simpleDateFormat = new SimpleDateFormat(
				"yyyy-MM-dd HH:mm:ss");
		String dataFormatada = simpleDateFormat
				.format(imovelDM.getDataVisita());
		imovelAtualizacaoCadastralDM.setDataVisita((Date) simpleDateFormat
				.parseObject(dataFormatada));

		imovelAtualizacaoCadastralDM.setCodigoImovel(imovelDM
				.getCodigoImovelIdIntegracao());

		ParametroTabelaAtualizacaoCadastralDM parametroTabelaAtualizacaoCadastro = new ParametroTabelaAtualizacaoCadastralDM();
		parametroTabelaAtualizacaoCadastro.setId(imovelDM.getIdComando());
		imovelAtualizacaoCadastralDM
				.setParametroTabelaAtualizacaoCadastralDM(parametroTabelaAtualizacaoCadastro);

		imovelAtualizacaoCadastralDM.setIdBairro(imovelDM.getIdBairro());
		imovelAtualizacaoCadastralDM.setCodigoCep(imovelDM.getCodigoCep());
		imovelAtualizacaoCadastralDM.setObservacao(imovelDM.getObservacao());

		Empresa empresa = new Empresa();
		empresa.setId(imovelDM.getIdEmpresa());
		imovelAtualizacaoCadastralDM.setEmpresa(empresa);

		if (imovelDM.getLogin() != null) {
			imovelAtualizacaoCadastralDM.setLogin(imovelDM.getLogin());
		} else {
			imovelAtualizacaoCadastralDM.setLogin(imovelDM.getIdComando()
					.toString());
		}

		if (imovelDM.getIdLeituraAnormalidade() != null) {
			LeituraAnormalidade leituraAnormalidade = new LeituraAnormalidade();
			leituraAnormalidade.setId(imovelDM.getIdLeituraAnormalidade());
			imovelAtualizacaoCadastralDM
					.setOcorrenciaHidrometro(leituraAnormalidade);
		}

		if (imovelDM.getCoordenadaX() != null
				&& imovelDM.getCoordenadaY() != null) {
			DecimalFormat dff = new DecimalFormat(
					"########0.0000000000000000;-########0.0000000000000000");
			String coordenadaX = imovelDM.getCoordenadaX();
			coordenadaX = validaBigDecimal(coordenadaX, dff, "X");
			String coordenadaY = imovelDM.getCoordenadaY();
			coordenadaY = validaBigDecimal(coordenadaY, dff, "Y");
			imovelAtualizacaoCadastralDM.setCoordenadaX(Util
					.verificarNaoVazio(coordenadaX) ? new BigDecimal(
					coordenadaX.replace(',', '.')) : null);
			imovelAtualizacaoCadastralDM.setCoordenadaY(Util
					.verificarNaoVazio(coordenadaY) ? new BigDecimal(
					coordenadaY.replace(',', '.')) : null);
		}

		// String indicadorImovelNovoComMatricula = colArquivos.get(33);
		String indicadorImovelNovoComMatricula = null;

		imovelAtualizacaoCadastralDM
				.setIndicadorAtualizado(ConstantesSistema.NAO);
		imovelAtualizacaoCadastralDM
				.setIndicadorPendente(ConstantesSistema.NAO);
		imovelAtualizacaoCadastralDM.setIndicadorDadosRetorno(Short
				.valueOf("3"));
		imovelAtualizacaoCadastralDM
				.setIndicadorResetorizado(ConstantesSistema.NAO);
		imovelAtualizacaoCadastralDM.setDataRecebimentoMovimento(new Date());
		imovelAtualizacaoCadastralDM
				.setIndicadorRegistroExcluido(ConstantesSistema.NAO);

		if (imovelAtualizacaoCadastralDM.getIdImovel() != null
				&& !imovelAtualizacaoCadastralDM.getIdImovel().toString()
						.equals("")
				&& imovelAtualizacaoCadastralDM.getIdImovel() > 0) {
			imovelAtualizacaoCadastralDM
					.setIndicadorImovelNovo(ConstantesSistema.NAO);

			// Caso a matricula informada pelo cadastrador no tablet nao exista
			// no arquivo do tablet.
			if (indicadorImovelNovoComMatricula != null
					&& indicadorImovelNovoComMatricula
							.equals(ConstantesSistema.SIM.toString())) {
				try {
					Imovel imovel = new Imovel();
					imovel.setId(imovelAtualizacaoCadastralDM.getIdImovel());

					imovel = this.getControladorImovel().pesquisarImovel(
							imovel.getId());

					if (imovel != null && imovel.getId() != null) {
						Collection colecaoIdImovel = new ArrayList();
						colecaoIdImovel.add(imovel.getId() + "/"
								+ ConstantesSistema.NAO);

						Empresa empr = new Empresa();
						empr = imovelAtualizacaoCadastralDM.getEmpresa();

						this.gerarTabelasTemporarias(colecaoIdImovel, empr,
								parametroTabelaAtualizacaoCadastro);
					}

				} catch (ControladorException e) {
					e.printStackTrace();
				} catch (ErroRepositorioException e) {
					e.printStackTrace();
				}
			}

		} else {
			try {
				Integer id = getControladorImovel().obterNextValImovel();
				imovelAtualizacaoCadastralDM.setIdImovel(id);
			} catch (ControladorException e) {
				e.printStackTrace();
			}
			imovelAtualizacaoCadastralDM
					.setIndicadorImovelNovo(ConstantesSistema.SIM);
		}
		imovelAtualizacaoCadastralDM.setUltimaAlteracao(new Date());

		return imovelAtualizacaoCadastralDM;
	}

	/**
	 * Método responsável por montar o objeto ClienteAtualizacaoCadastralDM
	 * 
	 * @author Jonathan Marcos
	 * @since 13/10/2014
	 * @param logradouroDM
	 * @return LogradouroAtlzCadDM
	 */
	private ClienteAtualizacaoCadastralDM montarObjetoClienteAtualizacaoCadastralDM(
			ClienteDM clienteDM) throws ParseException {

		ClienteAtualizacaoCadastralDM clienteAtualizacaoCadastralDM = new ClienteAtualizacaoCadastralDM();

		Integer idImovelAtlzCadastral = null;
		try {
			idImovelAtlzCadastral = repositorioCadastro
					.pesquisarIdImovelAtualizacaoCadastral(clienteDM
							.getCodigoImovelIdIntegracao());
		} catch (ErroRepositorioException e) {
			e.printStackTrace();
		}

		ImovelAtualizacaoCadastralDM imovelAtualizacaoCadastral = new ImovelAtualizacaoCadastralDM();
		imovelAtualizacaoCadastral.setId(idImovelAtlzCadastral);
		clienteAtualizacaoCadastralDM
				.setImovelAtualizacaoCadastralDM(imovelAtualizacaoCadastral);

		if (clienteDM.getIdClienteTipo() != null
				&& Util.validarCamposAtualizacaoCadastral(clienteDM
						.getIdClienteTipo().toString())) {
			ClienteTipo clienteTipo = new ClienteTipo();
			clienteTipo.setId(clienteDM.getIdClienteTipo());
			clienteAtualizacaoCadastralDM.setClienteTipo(clienteTipo);
		}

		clienteAtualizacaoCadastralDM.setCpfCnpj(clienteDM.getNumeroCpfCnpj());
		clienteAtualizacaoCadastralDM
				.setNomeCliente(clienteDM.getNomeCliente());
		clienteAtualizacaoCadastralDM.setRg(clienteDM.getNumeroRG());

		if (clienteDM.getIdOrgaoExpedidor() != null
				&& Util.validarCamposAtualizacaoCadastral(clienteDM
						.getIdOrgaoExpedidor().toString())) {
			OrgaoExpedidorRg orgaoExpedidorRG = new OrgaoExpedidorRg();
			orgaoExpedidorRG.setId(clienteDM.getIdOrgaoExpedidor());
			clienteAtualizacaoCadastralDM.setOrgaoExpedidorRG(orgaoExpedidorRG);
		}

		if (clienteDM.getIdUnidadeFederacao() != null
				&& Util.validarCamposAtualizacaoCadastral(clienteDM
						.getIdUnidadeFederacao().toString())) {
			UnidadeFederacao unidadeFederacao = new UnidadeFederacao();
			unidadeFederacao.setId(clienteDM.getIdUnidadeFederacao());
			clienteAtualizacaoCadastralDM.setUnidadeFederacao(unidadeFederacao);
		}

		SimpleDateFormat simpleDateFormat = new SimpleDateFormat("yyyy-MM-dd");
		if (clienteDM.getDataRGemissao() != null) {
			clienteAtualizacaoCadastralDM
					.setDataEmissaoRg((Date) simpleDateFormat
							.parseObject(clienteDM.getDataRGemissao()));
		}

		if (clienteDM.getIdSexo() != null) {
			PessoaSexo pessoaSexo = new PessoaSexo();
			pessoaSexo.setId(clienteDM.getIdSexo());
			clienteAtualizacaoCadastralDM.setSexo(pessoaSexo);
		}

		if (clienteDM.getDataNascimento() != null) {
			clienteAtualizacaoCadastralDM
					.setDataNascimento((Date) simpleDateFormat
							.parseObject(clienteDM.getDataNascimento()));
		}

		if (clienteDM.getIdCliente() != null) {
			clienteAtualizacaoCadastralDM
					.setIdCliente(clienteDM.getIdCliente());
		}

		if (clienteDM.getNomeMae() != null) {
			clienteAtualizacaoCadastralDM.setNomeMae(clienteDM.getNomeMae());
		}

		if (clienteDM.getIndicadorDocumentacao() != null) {
			clienteAtualizacaoCadastralDM.setIndicadorDocumentacao(clienteDM
					.getIndicadorDocumentacao());
		} else {
			clienteAtualizacaoCadastralDM
					.setIndicadorDocumentacao(ConstantesSistema.NAO);
		}

		if (clienteDM.getIndicadorProprietario() != null) {
			clienteAtualizacaoCadastralDM.setIndicadorProprietario(clienteDM
					.getIndicadorProprietario());
		} else {
			clienteAtualizacaoCadastralDM
					.setIndicadorProprietario(ConstantesSistema.NAO);
		}

		if (clienteDM.getIndicadorResponsavel() != null) {
			clienteAtualizacaoCadastralDM.setIndicadorResponsavel(clienteDM
					.getIndicadorResponsavel());
		} else {
			clienteAtualizacaoCadastralDM
					.setIndicadorResponsavel(ConstantesSistema.NAO);
		}

		ClienteRelacaoTipo clienteRelacaoTipo = new ClienteRelacaoTipo();
		clienteRelacaoTipo.setId(Integer.valueOf(ClienteRelacaoTipo.USUARIO));
		clienteAtualizacaoCadastralDM.setClienteRelacaoTipo(clienteRelacaoTipo);
		clienteAtualizacaoCadastralDM.setUltimaAlteracao(new Date());

		return clienteAtualizacaoCadastralDM;
	}

	/**
	 * Método responsável por montar o objeto ClienteFoneAtualizacaoCadastralDM
	 * 
	 * @author Jonathan Marcos
	 * @since 13/10/2014
	 * @param logradouroDM
	 * @return LogradouroAtlzCadDM
	 */
	private ClienteFoneAtualizacaoCadastralDM montarObjetoClienteFoneAtualizacaoCadastralDM(
			ClienteFoneDM clienteFoneDM) throws ErroRepositorioException {
		ClienteFoneAtualizacaoCadastralDM clienteFoneAtualizacaoCadastralDM = new ClienteFoneAtualizacaoCadastralDM();

		Integer idClienteAtlzCadastral = null;

		idClienteAtlzCadastral = repositorioCadastro
				.pesquisarIdClienteAtualizacaoCadastral(clienteFoneDM
						.getCodigoImovelIdIntegracao());

		ClienteAtualizacaoCadastralDM clienteAtualizacaoCadastral = new ClienteAtualizacaoCadastralDM();
		clienteAtualizacaoCadastral.setId(idClienteAtlzCadastral);
		clienteFoneAtualizacaoCadastralDM
				.setClienteAtualizacaoCadastralDM(clienteAtualizacaoCadastral);

		FoneTipo foneTipo = new FoneTipo();
		foneTipo.setId(clienteFoneDM.getIdFoneTipo());
		clienteFoneAtualizacaoCadastralDM.setFoneTipo(foneTipo);
		clienteFoneAtualizacaoCadastralDM.setDdd(clienteFoneDM.getDdd());
		clienteFoneAtualizacaoCadastralDM.setTelefone(clienteFoneDM
				.getTelefone());
		clienteFoneAtualizacaoCadastralDM.setUltimaAlteracao(new Date());

		short indicadorFone = 2;
		if (clienteFoneDM.getIndicadorFonePadrao() != null) {
			indicadorFone = clienteFoneDM.getIndicadorFonePadrao();
		}
		clienteFoneAtualizacaoCadastralDM.setIndicadorFonePadrao(indicadorFone);

		return clienteFoneAtualizacaoCadastralDM;
	}

	/**
	 * Método responsável por montar o objeto
	 * HidrometroInstalacaoHistoricoAtualizacaoCadastralDM
	 * 
	 * @author Jonathan Marcos
	 * @since 13/10/2014
	 * @param logradouroDM
	 * @return LogradouroAtlzCadDM
	 */
	private HidrometroInstalacaoHistoricoAtualizacaoCadastralDM montarObjetoHidrometroInstalacaoHistoricoAtualizacaoCadastralDM(
			HidrometroInstacaoHistoricoDM hidrometroInstacaoHistoricoDM,
			Integer idAnteriorImovelTablet) throws ControladorException {
		HidrometroInstalacaoHistoricoAtualizacaoCadastralDM hidrometroInstalacaoHistoricoAtualizacaoCadastralDM = new HidrometroInstalacaoHistoricoAtualizacaoCadastralDM();

		FiltroImovelAtualizacaoCadastralDM filtroImovelAtualizacaoCadastral = new FiltroImovelAtualizacaoCadastralDM();
		filtroImovelAtualizacaoCadastral
				.adicionarParametro(new ParametroSimples(
						FiltroImovelAtualizacaoCadastralDM.CODIGO,
						hidrometroInstacaoHistoricoDM
								.getCodigoImovelIdIntegracao()));

		Collection<ImovelAtualizacaoCadastralDM> colecaoImovel = this
				.getControladorUtil().pesquisar(
						filtroImovelAtualizacaoCadastral,
						ImovelAtualizacaoCadastralDM.class.getName());

		ImovelAtualizacaoCadastralDM imovelAtualizacaoCadastral = (ImovelAtualizacaoCadastralDM) Util
				.retonarObjetoDeColecao(colecaoImovel);

		hidrometroInstalacaoHistoricoAtualizacaoCadastralDM
				.setImovelAtualizacaoCadastralDM(imovelAtualizacaoCadastral);
		hidrometroInstalacaoHistoricoAtualizacaoCadastralDM
				.setNumeroHidrometro(hidrometroInstacaoHistoricoDM
						.getNumeroHidrometro());

		HidrometroLocalInstalacao hidrometroLocalInstalacao = null;
		if (hidrometroInstacaoHistoricoDM.getIdHidrometroLocalInstalacao() != null
				&& Util.validarCamposAtualizacaoCadastral(hidrometroInstacaoHistoricoDM
						.getIdHidrometroLocalInstalacao().toString())) {
			hidrometroLocalInstalacao = new HidrometroLocalInstalacao();
			hidrometroLocalInstalacao.setId(hidrometroInstacaoHistoricoDM
					.getIdHidrometroLocalInstalacao());
		}
		hidrometroInstalacaoHistoricoAtualizacaoCadastralDM
				.setHidrometroLocalInstalacao(hidrometroLocalInstalacao);

		HidrometroProtecao hidrometroProtecao = null;
		if (hidrometroInstacaoHistoricoDM.getIdHidrometroProtecao() != null
				&& Util.validarCamposAtualizacaoCadastralAceitaZero(hidrometroInstacaoHistoricoDM
						.getIdHidrometroProtecao().toString())) {
			hidrometroProtecao = new HidrometroProtecao();
			hidrometroProtecao.setId(hidrometroInstacaoHistoricoDM
					.getIdHidrometroProtecao());
		}
		hidrometroInstalacaoHistoricoAtualizacaoCadastralDM
				.setHidrometroProtecao(hidrometroProtecao);

		hidrometroInstalacaoHistoricoAtualizacaoCadastralDM
				.setNumeroInstalacaoHidrometro(hidrometroInstacaoHistoricoDM
						.getNumeroInstalacaoHidrometro());

		MedicaoTipo medicaoTipo = new MedicaoTipo();
		medicaoTipo.setId(MedicaoTipo.LIGACAO_AGUA);
		hidrometroInstalacaoHistoricoAtualizacaoCadastralDM
				.setMedicaoTipo(medicaoTipo);

		hidrometroInstalacaoHistoricoAtualizacaoCadastralDM
				.setUltimaAlteracao(new Date());
		Date dataInstalacao = imovelAtualizacaoCadastral.getDataVisita();

		if (idAnteriorImovelTablet != null) {

			Integer idImovel = imovelAtualizacaoCadastral.getIdImovel();

			Hidrometro hidrometro1 = getControladorMicromedicao()
					.pesquisarHidrometroPeloNumero(
							hidrometroInstalacaoHistoricoAtualizacaoCadastralDM
									.getNumeroHidrometro());
			if (hidrometro1 != null && hidrometro1.getId() != null) {
				FiltroHidrometroInstalacaoHistorico filtroHidrometroInstalacaoHistorico = new FiltroHidrometroInstalacaoHistorico();
				filtroHidrometroInstalacaoHistorico
						.adicionarParametro(new ParametroSimples(
								FiltroHidrometroInstalacaoHistorico.HIDROMETRO_ID,
								hidrometro1.getId()));
				filtroHidrometroInstalacaoHistorico
						.adicionarParametro(new ParametroSimples(
								FiltroHidrometroInstalacaoHistorico.LIGACAO_AGUA_ID,
								idImovel));

				Collection colecaoHidrometroInstalacaoHistorico = Fachada
						.getInstancia().pesquisar(
								filtroHidrometroInstalacaoHistorico,
								HidrometroInstalacaoHistorico.class.getName());
				if (colecaoHidrometroInstalacaoHistorico != null
						&& !colecaoHidrometroInstalacaoHistorico.isEmpty()) {
					HidrometroInstalacaoHistorico hidrometroInstalacaoHistorico = (HidrometroInstalacaoHistorico) Util
							.retonarObjetoDeColecao(colecaoHidrometroInstalacaoHistorico);
					dataInstalacao = hidrometroInstalacaoHistorico
							.getDataInstalacao();
				}
			}
		}

		hidrometroInstalacaoHistoricoAtualizacaoCadastralDM
				.setDataInstalacaoHidrometro(dataInstalacao);

		return hidrometroInstalacaoHistoricoAtualizacaoCadastralDM;
	}

	/**
	 * Método responsável por montar o objeto
	 * ImovelSubcategoriaAtualizacaoCadastralDM
	 * 
	 * @author Jonathan Marcos
	 * @since 13/10/2014
	 * @param logradouroDM
	 * @return LogradouroAtlzCadDM
	 */
	private ImovelSubcategoriaAtualizacaoCadastralDM montarObjetoImovelSubcategoriaAtualizacaoCadastralDM(
			ImovelSubcategoriaDM imovelSubcategoriaDM)
			throws ControladorException {
		ImovelSubcategoriaAtualizacaoCadastralDM imovelSubcategoriaAtualizacaoCadastralDM = new ImovelSubcategoriaAtualizacaoCadastralDM();

		FiltroImovelAtualizacaoCadastralDM filtroImovelAtualizacaoCadastral = new FiltroImovelAtualizacaoCadastralDM();
		filtroImovelAtualizacaoCadastral
				.adicionarParametro(new ParametroSimples(
						FiltroImovelAtualizacaoCadastralDM.CODIGO,
						imovelSubcategoriaDM.getCodigoImovelIdIntegracao()));

		Collection<ImovelAtualizacaoCadastralDM> colecaoImovel = this
				.getControladorUtil().pesquisar(
						filtroImovelAtualizacaoCadastral,
						ImovelAtualizacaoCadastralDM.class.getName());
		ImovelAtualizacaoCadastralDM imovelAtualizacaoCadastral = (ImovelAtualizacaoCadastralDM) Util
				.retonarObjetoDeColecao(colecaoImovel);
		imovelSubcategoriaAtualizacaoCadastralDM
				.setImovelAtualizacaoCadastralDM(imovelAtualizacaoCadastral);

		Categoria categoria = new Categoria();
		categoria.setId(imovelSubcategoriaDM.getIdCategoria());
		if (categoria.getId().toString().trim().equals("1")) {
			categoria.setDescricao(Categoria.RESIDENCIAL_DESCRICAO);
		} else if (categoria.getId().toString().trim().equals("2")) {
			categoria.setDescricao(Categoria.COMERCIAL_DESCRICAO);
		} else if (categoria.getId().toString().trim().equals("3")) {
			categoria.setDescricao(Categoria.INDUSTRIAL_DESCRICAO);
		} else if (categoria.getId().toString().trim().equals("4")) {
			categoria.setDescricao(Categoria.PUBLICO_DESCRICAO);
		}
		imovelSubcategoriaAtualizacaoCadastralDM.setCategoria(categoria);

		Subcategoria subCategoria = new Subcategoria();
		subCategoria.setId(imovelSubcategoriaDM.getIdSubcategoria());
		imovelSubcategoriaAtualizacaoCadastralDM.setSubcategoria(subCategoria);

		// pesquisa a descricao da subcategoria
		FiltroSubCategoria filtroSubCategoria = new FiltroSubCategoria();
		filtroSubCategoria.adicionarParametro(new ParametroSimples(
				FiltroSubCategoria.ID, subCategoria.getId()));
		Collection<Subcategoria> colecaoSubcategoria = getControladorUtil()
				.pesquisar(filtroSubCategoria, Subcategoria.class.getName());
		if (colecaoSubcategoria != null && !colecaoSubcategoria.isEmpty()) {
			Subcategoria subcategoria2 = (Subcategoria) Util
					.retonarObjetoDeColecao(colecaoSubcategoria);
			imovelSubcategoriaAtualizacaoCadastralDM
					.setSubcategoria(subcategoria2);
		}

		imovelSubcategoriaAtualizacaoCadastralDM
				.setQuantidadeEconomias(imovelSubcategoriaDM
						.getQuantidadeEconomias());

		imovelSubcategoriaAtualizacaoCadastralDM.setUltimaAlteracao(new Date());

		return imovelSubcategoriaAtualizacaoCadastralDM;
	}

	/**
	 * Método responsável por montar o objeto
	 * ImovelOcorrenciaAtualizacaoCadastralDM
	 * 
	 * @author Jonathan Marcos
	 * @since 13/10/2014
	 * @param logradouroDM
	 * @return LogradouroAtlzCadDM
	 */
	private ImovelOcorrenciaAtualizacaoCadastralDM montarObjetoImovelOcorrenciaAtualizacaoCadastralDM(
			ImovelOcorrenciaDM imovelOcorrenciaDM) {
		ImovelOcorrenciaAtualizacaoCadastralDM imovelOcorrenciaAtualizacaoCadastralDM = new ImovelOcorrenciaAtualizacaoCadastralDM();

		CadastroOcorrencia cadastroOcorrencia = new CadastroOcorrencia();
		cadastroOcorrencia.setId(imovelOcorrenciaDM.getIdCadastroOcorrencia());
		imovelOcorrenciaAtualizacaoCadastralDM
				.setCadastroOcorrencia(cadastroOcorrencia);

		Integer idImovelAtlzCadastral = null;
		try {
			idImovelAtlzCadastral = repositorioCadastro
					.pesquisarIdImovelAtualizacaoCadastral(imovelOcorrenciaDM
							.getCodigoImovelIdIntegracao());
		} catch (ErroRepositorioException e) {
			e.printStackTrace();
		}

		ImovelAtualizacaoCadastralDM imovelAtualizacaoCadastral = new ImovelAtualizacaoCadastralDM();
		imovelAtualizacaoCadastral.setId(idImovelAtlzCadastral);
		imovelOcorrenciaAtualizacaoCadastralDM
				.setImovelAtualizacaoCadastral(imovelAtualizacaoCadastral);

		imovelOcorrenciaAtualizacaoCadastralDM.setUltimaAlteracao(new Date());

		return imovelOcorrenciaAtualizacaoCadastralDM;
	}

	/**
	 * Método responsável por montar objeto ImovelFotoAtualizacaoCadastralDM
	 * 
	 * @author Jonathan Marcos
	 * @since 14/10/2014
	 * @param helper
	 * @param idFotoTipo
	 * @param fotoBytes
	 * @return
	 * @throws ControladorException
	 */
	private ImovelFotoAtualizacaoCadastralDM montarObjetoImovelFotoAtualizacaoCadastralDM(
			AtualizacaoCadastralDMOnlineHelper helper, Integer idFotoTipo,
			byte[] fotoBytes) throws ControladorException {
		ImovelFotoAtualizacaoCadastralDM imovelFotoAtualizacaoCadastralDM = new ImovelFotoAtualizacaoCadastralDM();

		FiltroImovelAtualizacaoCadastralDM filtroImovelAtualizacaoCadastralDM = new FiltroImovelAtualizacaoCadastralDM();
		filtroImovelAtualizacaoCadastralDM
				.adicionarParametro(new ParametroSimples(
						FiltroImovelAtualizacaoCadastralDM.CODIGO, helper
								.getImovelDM().getCodigoImovelIdIntegracao()));
		ImovelAtualizacaoCadastralDM imovelAtualizacaoCadastralDM = (ImovelAtualizacaoCadastralDM) Util
				.retonarObjetoDeColecao(getControladorUtil().pesquisar(
						filtroImovelAtualizacaoCadastralDM,
						ImovelAtualizacaoCadastralDM.class.getName()));
		imovelFotoAtualizacaoCadastralDM
				.setImovelAtualizacaoCadastralDM(imovelAtualizacaoCadastralDM);

		FiltroFotoSituacaoOrdemServico filtroSituacaoFoto = new FiltroFotoSituacaoOrdemServico();
		filtroSituacaoFoto.adicionarParametro(new ParametroSimples(
				FiltroFotoSituacaoOrdemServico.ID, idFotoTipo));
		FotoSituacaoOrdemServico fotoSituacaoOrdemServico = (FotoSituacaoOrdemServico) Util
				.retonarObjetoDeColecao(getControladorUtil().pesquisar(
						filtroSituacaoFoto,
						FotoSituacaoOrdemServico.class.getName()));
		imovelFotoAtualizacaoCadastralDM
				.setFotoSituacao(fotoSituacaoOrdemServico);

		imovelFotoAtualizacaoCadastralDM.setFotoImovel(fotoBytes);
		imovelFotoAtualizacaoCadastralDM.setUltimaAlteracao(new Date());

		return imovelFotoAtualizacaoCadastralDM;
	}

	/**
	 * Método responsável por atualizar a situação do arquivo para finalizado
	 * 
	 * @author Jonathan Marcos
	 * @since 08/10/2014
	 * @param idComando
	 * @param situacaoArquivo
	 * @throws ErroRepositorioException
	 * @throws ControladorException
	 */
	private void atualizarSituacaoArquivoTextoAtualizacaoCadastralDMFinalizado(
			Integer idComando) throws ErroRepositorioException,
			ControladorException {

		FiltroArquivoTextoAtualizacaoCadastralDM filtro = new FiltroArquivoTextoAtualizacaoCadastralDM();
		filtro.adicionarParametro(new ParametroSimples(
				FiltroArquivoTextoAtualizacaoCadastralDM.ID_PARAMETRO_TABELA_ATUALIZACAO_CADASTRO,
				idComando));
		filtro.adicionarCaminhoParaCarregamentoEntidade(FiltroArquivoTextoAtualizacaoCadastralDM.PARAMETRO_TABELA_ATUALIZACAO_CADASTRO);
		filtro.adicionarCaminhoParaCarregamentoEntidade(FiltroArquivoTextoAtualizacaoCadastralDM.EMPRESA);

		Collection<ArquivoTextoAtualizacaoCadastralDM> colArquivoTexto = this
				.getControladorUtil().pesquisar(filtro,
						ArquivoTextoAtualizacaoCadastralDM.class.getName());
		ArquivoTextoAtualizacaoCadastralDM arquivoTextoAtualizacaoCadastralDM = (ArquivoTextoAtualizacaoCadastralDM) Util
				.retonarObjetoDeColecao(colArquivoTexto);

		if (arquivoTextoAtualizacaoCadastralDM != null
				&& arquivoTextoAtualizacaoCadastralDM.getSituacaoTransmissao()
						.getId().equals(SituacaoTransmissaoLeitura.EM_CAMPO)) {

			SituacaoTransmissaoAtualizacaoCadastralDM situacaoTransmissaoAtualizacaoCadastralDM = new SituacaoTransmissaoAtualizacaoCadastralDM();
			situacaoTransmissaoAtualizacaoCadastralDM
					.setId(SituacaoTransmissaoAtualizacaoCadastralDM.FINALIZADO);
			arquivoTextoAtualizacaoCadastralDM
					.setSituacaoTransmissao(situacaoTransmissaoAtualizacaoCadastralDM);

			arquivoTextoAtualizacaoCadastralDM
					.setDataFinalizacaoArquivo(new Date());
			arquivoTextoAtualizacaoCadastralDM.setUltimaAlteracao(new Date());

			repositorioUtil.atualizar(arquivoTextoAtualizacaoCadastralDM);
			repositorioImovel.atualizarSituacaoTransmissaoImovel(Integer
					.valueOf(idComando));
		}
	}

	/**
	 * Método responsável por obter a conexão com banco de dados a ser
	 * processado
	 * 
	 * @author Jonathan Marcos
	 * @since 25/09/2014
	 * @param nomePasta
	 * @return Statement
	 */
	private Connection obterConexaoSqlite(String nomePasta) {
		Connection connection = null;
		String jdbcSqlite = "jdbc:sqlite:";
		String urlBancoDeDados = jdbcSqlite
				+ ConstantesSistema.DIRETORIO_ATUALIZACAO_CADASTRAL_BIN + "/"
				+ nomePasta + "/"
				+ ConstantesSistema.NOME_BANCO_SQLITE_ATUALIZACAO_CADASTRAL;
		try {
			Class.forName("org.sqlite.JDBC");
			connection = DriverManager.getConnection(urlBancoDeDados);
		} catch (Exception e) {
			connection = null;
		}
		return connection;
	}

	/**
	 * Método responsável pela pesquisa das ocorrências de cadastro de imóvel de
	 * atualização cadastral.
	 * 
	 * @author André Miranda
	 * @since 01/10/2014
	 * @param idImovel
	 * @return
	 * @throws ControladorException
	 */
	public List<CadastroOcorrencia> obterOcorrenciasImovelAtualizacaoCadastral(
			Integer idImovel) throws ControladorException {
		List<CadastroOcorrencia> list = new ArrayList<CadastroOcorrencia>();
		try {
			list = repositorioCadastro
					.obterOcorrenciasImovelAtualizacaoCadastralDM(idImovel);
		} catch (ErroRepositorioException e) {
			throw new ControladorException("erro.sistema", e);
		}

		return list;
	}

	/**
	 * Método responsável pela pesquisa de imóvel de atualização cadastral.
	 * 
	 * @author André Miranda
	 * @since 01/10/2014
	 * @param idImovel
	 * @return
	 * @throws ControladorException
	 */
	public ImovelAtualizacaoCadastralDM pesquisarImovelAtualizacaoCadastralDM(
			Integer idImovel) throws ControladorException {
		try {
			return repositorioImovel
					.pesquisarImovelAtualizacaoCadastralDM(idImovel);
		} catch (ErroRepositorioException e) {
			throw new ControladorException("erro.sistema", e);
		}
	}

	/**
	 * Método responsável pela pesquisa dos clientes de imóvel de atualização
	 * cadastral.
	 * 
	 * @author André Miranda
	 * @since 01/10/2014
	 * @param idImovel
	 * @return
	 * @throws ControladorException
	 */
	public List<ClienteAtualizacaoCadastralDM> pesquisarClienteAtualizacaoCadastralDM(
			Integer idImovel) throws ControladorException {
		try {
			return repositorioCadastro
					.pesquisarClienteAtualizacaoCadastralDM(idImovel);
		} catch (ErroRepositorioException e) {
			throw new ControladorException("erro.sistema", e);
		}
	}

	/**
	 * Método responsável pela pesquisa das subcategorias de imóvel de
	 * atualização cadastral.
	 * 
	 * @author André Miranda
	 * @since 01/10/2014
	 * @param idImovelAtzCad
	 * @return
	 * @throws ControladorException
	 */
	public List<ImovelSubcategoriaAtualizacaoCadastralDM> pesquisarSubCategoriaAtualizacaoCadastralDM(
			Integer idImovelAtzCad) throws ControladorException {
		try {
			return repositorioCadastro
					.pesquisarSubCategoriaAtualizacaoCadastralDM(idImovelAtzCad);
		} catch (ErroRepositorioException e) {
			throw new ControladorException("erro.sistema", e);
		}
	}

	/**
	 * Método responsável pela pesquisa dos hidrometrosInstalacao de imóvel de
	 * atualização cadastral.
	 * 
	 * @author André Miranda
	 * @since 01/10/2014
	 * @param idImovel
	 * @param medicaoTipo
	 * @return
	 * @throws ControladorException
	 */
	public List<HidrometroInstalacaoHistoricoAtualizacaoCadastralDM> pesquisarHidrometroInstalacaoHistoricoAtualizacaoCadastralDM(
			Integer idImovel, Integer medicaoTipo) throws ControladorException {
		try {
			return repositorioCadastro
					.pesquisarHidrometroInstalacaoHistoricoAtualizacaoCadastralDM(
							idImovel, medicaoTipo);
		} catch (ErroRepositorioException e) {
			throw new ControladorException("erro.sistema", e);
		}
	}

	/**
	 * Método responsável pela pesquisa de logradouro de imóvel de atualização
	 * cadastral.
	 * 
	 * @author André Miranda
	 * @since 01/10/2014
	 * @param idLogradouro
	 * @return
	 * @throws ControladorException
	 */
	public Logradouro pesquisarLogradouroImovelAtualizacaoCadastralDM(
			Long idLogradouro) throws ControladorException {
		Logradouro retorno = null;

		try {
			if (idLogradouro != null) {
				FiltroLogradouro filtro = new FiltroLogradouro();
				filtro.adicionarParametro(new ParametroSimples(
						FiltroLogradouro.ID, idLogradouro));
				filtro.adicionarCaminhoParaCarregamentoEntidade("logradouroTipo");
				filtro.adicionarCaminhoParaCarregamentoEntidade("logradouroTitulo");
				retorno = (Logradouro) Util
						.retonarObjetoDeColecao(getControladorUtil().pesquisar(
								filtro, Logradouro.class.getName()));
			}

			return retorno;
		} catch (Exception e) {
			throw new ControladorException("erro.sistema", e);
		}
	}

	/**
	 * [UC1288] Atualizar Dados Cadastrais do Imóvel pelo Recadastramento
	 * 
	 * @author André Miranda
	 * @since 09/10/2014
	 */
	public void atualizarDadosCadastraisImovelRecadastramento(
			Integer idFuncionalidadeIniciada) throws ControladorException {
		int idUnidadeIniciada = 0;
		final int quantidadeRegistros = 1000;
		Collection<ImovelAtualizacaoCadastralDM> colecaoPesquisa = null;

		try {
			idUnidadeIniciada = getControladorBatch()
					.iniciarUnidadeProcessamentoBatch(idFuncionalidadeIniciada,
							UnidadeProcessamento.FUNCIONALIDADE, 0);
			while (true) {
				// Seleciona os registros dos imóveis para atualização
				colecaoPesquisa = repositorioCadastro
						.pesquisarImovelAtualizacaoCadastralDM(
								ConstantesSistema.NAO, ConstantesSistema.SIM,
								null, quantidadeRegistros);

				// [FS0001] Verificar existência de registros para atualização
				if (colecaoPesquisa == null) {
					break;
				}

				for (ImovelAtualizacaoCadastralDM imovelAlzCad : colecaoPesquisa) {
					atualizarDadosCadastraisImovel(imovelAlzCad);
				}

				// [FS0001] Verificar existência de registros para atualização
				if (colecaoPesquisa.size() < quantidadeRegistros) {
					break;
				}
			}

			getControladorBatch().encerrarUnidadeProcessamentoBatch(null,
					idUnidadeIniciada, false);
		} catch (Exception e) {
			e.printStackTrace();

			getControladorBatch().encerrarUnidadeProcessamentoBatch(e,
					idUnidadeIniciada, true);
			throw new ControladorException("erro.sistema", e);
		}
	}

	/**
	 * [UC1288] Atualizar Dados Cadastrais do Imóvel pelo Recadastramento
	 * 
	 * @author André Miranda
	 * @since 09/10/2014
	 */
	public void atualizarDadosCadastraisImovel(
			ImovelAtualizacaoCadastralDM imovelAlzCad)
			throws ControladorException {
		try {
			System.out.println("Atualizacao Cadastral - IMAC_ID ="
					+ imovelAlzCad.getId() + " IMOV_ID="
					+ imovelAlzCad.getIdImovel());

			Imovel imovel = null;
			// Caso nao seja imovel novo, pesquisa o imovel cadastrado no GSAN
			if (imovelAlzCad.getIndicadorImovelNovo().equals(
					ConstantesSistema.NAO)) {
				imovel = repositorioImovel.pesquisarImovel(imovelAlzCad
						.getIdImovel());
			}

			// Comando de atualizacao cadastral.
			ParametroTabelaAtualizacaoCadastralDM paramTblAtlzCad = imovelAlzCad
					.getParametroTabelaAtualizacaoCadastralDM();

			LigacaoAguaSituacao ligacaoAguaSituacao = new LigacaoAguaSituacao();
			LigacaoEsgotoSituacao ligacaoEsgotoSituacao = new LigacaoEsgotoSituacao();

			if (imovel == null) {
				ligacaoAguaSituacao.setId(imovelAlzCad.getLigacaoAguaSituacao()
						.getId());
				ligacaoEsgotoSituacao.setId(imovelAlzCad
						.getLigacaoEsgotoSituacao().getId());
			} else {
				ligacaoAguaSituacao.setId(imovel.getLigacaoAguaSituacao()
						.getId());
				ligacaoEsgotoSituacao.setId(imovel.getLigacaoEsgotoSituacao()
						.getId());
			}

			// Classe responsavel por enviar todos os parametros para
			// atualizacao cadastral
			DadosCadastraisTransacaoBatchHelper dadosCadastraisTransacaoBatchHelper = new DadosCadastraisTransacaoBatchHelper();
			dadosCadastraisTransacaoBatchHelper
					.setIdOperacao(Operacao.OPERACAO_ATUALIZAR_IMOVEL_ATUALIZACAO_CADASTRAL_BATCH);

			// Para cada tipo de alteracao (inclusao, remocao, atualizacao) os
			// atributos são agrupados pelo tipo
			Collection<TipoAlteracaoTransacaoBatchHelper> colecaoTipoAlteracaoTransacao = new ArrayList<TipoAlteracaoTransacaoBatchHelper>();
			TipoAlteracaoTransacaoBatchHelper tipoAlteracaoTransacaoBatchHelper = new TipoAlteracaoTransacaoBatchHelper();
			tipoAlteracaoTransacaoBatchHelper.setIdTabela(Tabela.IMOVEL);

			// Registrar Transacao no Processo Batch - adiciona na colecao os
			// atributos que vao ser exibidos no log da transação
			Collection<ParametrosTransacaoBatchHelper> colecaoTransacaoHelper = new ArrayList<ParametrosTransacaoBatchHelper>();

			// [FS0002] Verificar situação do imóvel
			if (this.verificarSituacaoImovel(imovel, paramTblAtlzCad.getId(),
					null, imovelAlzCad)) {
				imovelAlzCad.setIndicadorPendente(ConstantesSistema.SIM);
			} else {
				SistemaParametro sistemaParametro = repositorioUtil
						.pesquisarParametrosDoSistema();

				if (imovelAlzCad.getIndicadorImovelNovo().equals(
						ConstantesSistema.SIM)) {
					// 2.2 Novo Imóvel
					tipoAlteracaoTransacaoBatchHelper
							.setTipoAlteracao(AlteracaoTipo.INCLUSAO);

					// [UC1290] Inserir ou Atualizar Imóvel Atualização
					// Cadastral
					// [SB0014] Inserir Imóvel
					// Também faz a relação com o cliente
					imovel = this.inserirImovel(imovelAlzCad, imovel,
							paramTblAtlzCad.getId(), colecaoTransacaoHelper,
							sistemaParametro);
				} else {
					// 2.3 Imóvel Existente
					tipoAlteracaoTransacaoBatchHelper
							.setTipoAlteracao(AlteracaoTipo.ALTERACAO);

					// [UC1299] Atualizar Cliente para Atualização Cadastral
					Collection<ClienteAtualizacaoCadastralDM> colecaoClienteAtlzCad = repositorioCadastro
							.pesquisarClienteAtualizacaoCadastralDM(
									imovelAlzCad.getId(), null);
					ClienteAtualizacaoCadastralDM clienteAtlzCad = (ClienteAtualizacaoCadastralDM) Util
							.retonarObjetoDeColecao(colecaoClienteAtlzCad);

					boolean clienteValido = this
							.atualizarClienteAtualizacaoCadastral(imovelAlzCad,
									clienteAtlzCad, paramTblAtlzCad, imovel,
									ligacaoAguaSituacao, ligacaoEsgotoSituacao,
									sistemaParametro);

					// [UC1290] Inserir ou Atualizar Imóvel Atualização
					// Cadastral
					inserirAtualizarImovelAtualizacaoCadastral(imovelAlzCad,
							imovel, paramTblAtlzCad.getId(), sistemaParametro,
							clienteValido, colecaoTransacaoHelper);
				}

				dadosCadastraisTransacaoBatchHelper.setIdArgumentoValor(imovel
						.getId());

				// [SB002] Validar Atributo Situação do Hidrômetro
				this.validarAtributoSituacaoHidrometro(imovel, null,
						paramTblAtlzCad.getId(), imovelAlzCad);

				// 2.1.6
				Collection<RetornoAtualizacaoCadastralDM> colecaoRetornoAtlzCad = repositorioCadastro
						.pesquisarRetornoAtualizacaoCadastralDM(imovelAlzCad
								.getId());

				if (colecaoRetornoAtlzCad != null) {
					for (RetornoAtualizacaoCadastralDM retorno : colecaoRetornoAtlzCad) {
						if (!retorno
								.getCodigoSituacao()
								.equals(RetornoAtualizacaoCadastralDM.SITUACAO_ATUALIZADO)) {
							imovelAlzCad
									.setIndicadorPendente(ConstantesSistema.SIM);
							break;
						}
					}
				}
			}

			imovelAlzCad.setIndicadorAtualizado(ConstantesSistema.SIM);
			repositorioUtil.atualizar(imovelAlzCad);

			// REGISTRAR TRANSACAO
			if (colecaoTransacaoHelper != null
					&& !colecaoTransacaoHelper.isEmpty()) {
				Usuario usuario = Usuario.USUARIO_BATCH;
				UsuarioAcao usuarioAcao = UsuarioAcao.USUARIO_ACAO_EFETUOU_OPERACAO;
				UsuarioAcaoUsuarioHelper usuarioAcaoUsuarioHelper = new UsuarioAcaoUsuarioHelper(
						usuario, usuarioAcao);

				Operacao operacao = new Operacao();
				operacao.setId(dadosCadastraisTransacaoBatchHelper
						.getIdOperacao());

				OperacaoEfetuada operacaoEfetuada = new OperacaoEfetuada();
				operacaoEfetuada.setOperacao(operacao);
				operacaoEfetuada.setDadosAdicionais("Matricula: "
						+ imovel.getId());
				operacaoEfetuada
						.setArgumentoValor(dadosCadastraisTransacaoBatchHelper
								.getIdArgumentoValor());

				tipoAlteracaoTransacaoBatchHelper
						.setColecaoParametrosTransacao(colecaoTransacaoHelper);
				colecaoTipoAlteracaoTransacao
						.add(tipoAlteracaoTransacaoBatchHelper);
				dadosCadastraisTransacaoBatchHelper
						.setColecaoTipoAlteracaoTransacao(colecaoTipoAlteracaoTransacao);
				getControladorTransacao()
						.processaRegistroOperacaoDadosCadastrais(
								usuarioAcaoUsuarioHelper,
								dadosCadastraisTransacaoBatchHelper,
								operacaoEfetuada);
			}
		} catch (Exception e) {
			e.printStackTrace();
			sessionContext.setRollbackOnly();
			throw new ControladorException("erro.sistema", e);
		}
	}

	/**
	 * [UC1288] Atualizar Dados Cadastrais do Imóvel pelo Recadastramento
	 * [FS0002] Verificar Situação do Imóvel
	 * 
	 * @author André Miranda
	 * @since 10/10/2014
	 * 
	 * @param imovel
	 * @param idParamTblAtlzCad
	 * @param idCliente
	 * @return
	 * @throws ControladorException
	 */
	public boolean verificarSituacaoImovel(Imovel imovel,
			Integer idParamTblAtlzCad, Integer idCliente,
			ImovelAtualizacaoCadastralDM imovelAtlzCad)
			throws ControladorException {
		boolean imovelCancelado = false;

		try {
			imovelCancelado = imovel.getLigacaoAguaSituacao().getId()
					.equals(LigacaoAguaSituacao.CANCELADO_INEXISTENTE);
		} catch (NullPointerException e) {
			// ignorar
		}

		if (imovelCancelado) {
			this.inserirRetornoAtualizacaoCadastralDM(
					imovel.getId(),
					idCliente,
					AtributoAtualizacaoCadastralDM.IMOVEL,
					RetornoAtualizacaoCadastralDM.SITUACAO_PENDENTE,
					MensagemAtualizacaoCadastralDM.IMOVEL_EXCLUIDO_APOS_ENVIO_CONTRATADA,
					idParamTblAtlzCad, imovelAtlzCad, null);
		}

		return imovelCancelado;
	}

	/**
	 * [UC1288] Atualizar Dados Cadastrais do Imóvel pelo Recadastramento
	 * [SB0001] Inserir Registro no retorno da Atualizacao Cadastral
	 * 
	 * @author André Miranda
	 * @since 08/10/2014
	 */
	public void inserirRetornoAtualizacaoCadastralDM(Integer idImovel,
			Integer idCliente, Integer idAtributoAtualizacaoCadastral,
			Short codigoSituacao, Integer idMensagemAtualizacaoCadastral,
			Integer idParametroTabelaAtualizacaoCadastro,
			ImovelAtualizacaoCadastralDM imovelAtualizacaoCadastral,
			Integer idMedicaoTipo) throws ControladorException {
		RetornoAtualizacaoCadastralDM retorno = new RetornoAtualizacaoCadastralDM();

		if (idImovel != null) {
			Imovel imovel = new Imovel();
			imovel.setId(idImovel);
			retorno.setImovel(imovel);
		}

		if (idCliente != null && !idCliente.equals(Integer.valueOf(0))) {
			Cliente cliente = new Cliente();
			cliente.setId(idCliente);
			retorno.setCliente(cliente);
		}

		if (idMedicaoTipo != null) {
			MedicaoTipo medicaoTipo = new MedicaoTipo();
			medicaoTipo.setId(idMedicaoTipo);
			retorno.setMedicaoTipo(medicaoTipo);
		}

		AtributoAtualizacaoCadastralDM atributo = new AtributoAtualizacaoCadastralDM();
		atributo.setId(idAtributoAtualizacaoCadastral);
		retorno.setAtributoAtualizacaoCadastralDM(atributo);

		MensagemAtualizacaoCadastralDM mensagem = new MensagemAtualizacaoCadastralDM();
		mensagem.setId(idMensagemAtualizacaoCadastral);
		retorno.setMensagemAtualizacaoCadastralDM(mensagem);

		ParametroTabelaAtualizacaoCadastralDM parametro = new ParametroTabelaAtualizacaoCadastralDM();
		parametro.setId(idParametroTabelaAtualizacaoCadastro);
		retorno.setParametroTabelaAtualizacaoCadastroDM(parametro);

		retorno.setCodigoSituacao(codigoSituacao);
		retorno.setImovelAtualizacaoCadastralDM(imovelAtualizacaoCadastral);
		retorno.setUltimaAlteracao(new Date());

		retorno.setUsuario(Usuario.USUARIO_BATCH);

		try {
			repositorioUtil.inserir(retorno);
		} catch (ErroRepositorioException e) {
			e.printStackTrace();
			throw new ControladorException("erro.sistema", e);
		}
	}

	/**
	 * [UC1288] Atualizar Dados Cadastrais do Imóvel pelo Recadastramento
	 * [SB0002] Validar Atributo Situacao do Hidrometro
	 * 
	 * @author André Miranda
	 * @since 10/10/2014
	 */
	public void validarAtributoSituacaoHidrometro(Imovel imovel,
			Integer idCliente, Integer idParamTblAtlzCad,
			ImovelAtualizacaoCadastralDM imovelAtlzCad)
			throws ControladorException {
		try {
			Collection<HidrometroInstalacaoHistoricoAtualizacaoCadastralDM> colecaoHidrometroInstHistAtlzCad = repositorioCadastro
					.pesquisarHidrometroInstalacaoHistoricoAtualizacaoCadastralDM(
							imovelAtlzCad.getId(), null);

			String nuHidromLigAgua = null;

			// 1.1 Selecionar número do hidrômetro GSAN
			try {
				nuHidromLigAgua = imovel.getLigacaoAgua()
						.getHidrometroInstalacaoHistorico().getHidrometro()
						.getNumero();
				if (nuHidromLigAgua.isEmpty())
					nuHidromLigAgua = null;
			} catch (NullPointerException ex) {
				// ignorar
			}

			if (colecaoHidrometroInstHistAtlzCad != null
					&& !colecaoHidrometroInstHistAtlzCad.isEmpty()) {
				for (HidrometroInstalacaoHistoricoAtualizacaoCadastralDM hidrometroInstAltCad : colecaoHidrometroInstHistAtlzCad) {
					// 1.2 Selecionar número do hidrômetro Amb. Virtual 2
					String nuHidromAmbVirt = hidrometroInstAltCad
							.getNumeroHidrometro();
					if (nuHidromAmbVirt != null && nuHidromAmbVirt.isEmpty())
						nuHidromAmbVirt = null;

					// 1.3
					if (hidrometroInstAltCad.getMedicaoTipo().getId()
							.equals(MedicaoTipo.LIGACAO_AGUA)) {
						// Validações Relacionadas à Ligação de água
						if (nuHidromLigAgua == null && nuHidromAmbVirt != null) {
							// 1.3.1 Efetuar Instalacao do Hidrometro
							efetuarInstalacaoHidrometroAtualizacaoCadastral(
									imovel, imovelAtlzCad,
									MedicaoTipo.LIGACAO_AGUA,
									idParamTblAtlzCad, hidrometroInstAltCad,
									false, Usuario.USUARIO_BATCH);
						}
						// 1.4
						else if (nuHidromLigAgua != null
								&& (nuHidromAmbVirt == null || (nuHidromAmbVirt != null && !nuHidromAmbVirt
										.equalsIgnoreCase(nuHidromLigAgua)))) {
							// [SB0001] Inserir Registro no retorno da
							// Atualizacao Cadastral
							inserirRetornoAtualizacaoCadastralDM(
									imovel.getId(),
									idCliente,
									AtributoAtualizacaoCadastralDM.SITUACAO_HIDROMETRO,
									RetornoAtualizacaoCadastralDM.SITUACAO_PENDENTE,
									MensagemAtualizacaoCadastralDM.IMOVEL_COM_EXCLUSAO_SUBSTITUICAO_DADOS_HIDROMETRO,
									idParamTblAtlzCad, imovelAtlzCad,
									MedicaoTipo.LIGACAO_AGUA);
						}
					}
				}
			} else {
				// 1.4
				if (nuHidromLigAgua != null) {
					// [SB0001] Inserir Registro no retorno da Atualizacao
					// Cadastral
					this.inserirRetornoAtualizacaoCadastralDM(
							imovel.getId(),
							idCliente,
							AtributoAtualizacaoCadastralDM.SITUACAO_HIDROMETRO,
							RetornoAtualizacaoCadastralDM.SITUACAO_PENDENTE,
							MensagemAtualizacaoCadastralDM.IMOVEL_COM_EXCLUSAO_SUBSTITUICAO_DADOS_HIDROMETRO,
							idParamTblAtlzCad, imovelAtlzCad,
							MedicaoTipo.LIGACAO_AGUA);
				}
			}
		} catch (ErroRepositorioException e) {
			e.printStackTrace();
			throw new ControladorException("erro.sistema", e);
		}
	}

	/**
	 * [UC1222] Atualizar Cliente a Partir do Dispositivo Mï¿½vel
	 * 
	 * [SB0003] - Substituir Cliente Usuário do Imóvel
	 * 
	 * @author Mariana Victor
	 * @date 27/09/2011
	 * 
	 * @param Integer
	 * 
	 * @return
	 * @throws ControladorException
	 */
	public boolean substituirClienteUsuarioDoImovel(Integer idCliente,
			Integer idClienteAnterior,
			AtualizarClienteAPartirDispositivoMovelHelper helper,
			Cliente clienteAnterior) throws ControladorException {

		boolean imovelSubstituido = true;
		try {

			Integer idImovel = Integer.valueOf(helper.getMatricula());

			// 1. O sistema efetua a substituiï¿½ï¿½o do cliente usuário do
			// imóvel

			// [FS0006] - Verificar existência de negativação para o
			// cliente-imóvel
			// Caso o cliente do imóvel esteja em processo de negativação
			if (idClienteAnterior != null) {
				Integer qtdOcorrenciaNegativacao = this.getControladorCliente()
						.pesquisarExistenciaNegativacaoParaClienteImovel(
								idClienteAnterior, idImovel);
				if (qtdOcorrenciaNegativacao != null
						&& qtdOcorrenciaNegativacao > 0) {

					// caso registre transacao, funcionalidade online
					throw new ControladorException(
							"atencao.cliente_imovel.processo_negativacao");
				}
			}

			// CLIM_ICNOMECONTA do cliente usuário do imóvel desvinculado acima.
			Short icNomeContaAnterior = ConstantesSistema.SIM;
			if (idClienteAnterior != null) {
				icNomeContaAnterior = this.repositorioClienteImovel
						.pesquisarIndicadorNomeConta(idClienteAnterior,
								idImovel);
			}

			// 1.1. Desvincula o cliente usuário atual do imóvel
			// 1.1.1. Atualiza a tabela de relacionamento entre cliente e imóvel
			// de modo a encerrar este relacionamento
			Date dataFim = new Date();

			this.repositorioClienteImovel
					.desvinculaClienteUsuarioAtualDoImovel(idImovel, dataFim);

			// 1.2. Vincula o novo cliente usuário atual do imóvel
			// 1.2.1. Insere nova linha na tabela de relacionamento entre
			// cliente e imóvel, conforme a seguir;
			ClienteImovel clienteImovel = new ClienteImovel();

			FiltroCliente filtro = new FiltroCliente();
			filtro.adicionarParametro(new ParametroSimples(FiltroCliente.ID,
					idCliente));
			Collection<Cliente> colecaoCLiente = this.getControladorUtil()
					.pesquisar(filtro, Cliente.class.getName());
			Cliente cliente = (Cliente) Util
					.retonarObjetoDeColecao(colecaoCLiente);

			Imovel imovel = new Imovel();
			imovel.setId(idImovel);
			ClienteRelacaoTipo clienteRelacaoTipo = new ClienteRelacaoTipo();
			clienteRelacaoTipo.setId(new Integer(ClienteRelacaoTipo.USUARIO));

			// CLIE_ID do novo cliente pesquisado ou inserido,
			clienteImovel.setCliente(cliente);

			// IMOV_ID da tabela ORDEM_SERVICO com ORSE_ID=ORSE_ID informado
			// como parï¿½metro.
			clienteImovel.setImovel(imovel);
			Date dataInicio = new Date();
			clienteImovel.setDataInicioRelacao(dataInicio);

			// CRTP_ID da tabela CLIENTE_RELACAO_TIPO correspondente a
			// "USUARIO".
			clienteImovel.setClienteRelacaoTipo(clienteRelacaoTipo);

			clienteImovel.setIndicadorNomeConta(icNomeContaAnterior);

			clienteImovel.setUltimaAlteracao(new Date());

			this.getControladorUtil().inserir(clienteImovel);

		} catch (ErroRepositorioException e) {
			e.printStackTrace();
			throw new ControladorException("erro.sistema", e);
		}

		return imovelSubstituido;
	}

	/**
	 * 
	 * @author Arthur Carvalho
	 * @date 29/09/2011
	 * 
	 * @param Integer
	 * 
	 * @return
	 * @throws ControladorException
	 */
	public void atualizarDadosFoneClienteAtual(
			Integer idClienteAtualizacaoCadastral, Integer idCliente,
			ImovelAtualizacaoCadastralDM imovelAtualizacaoCadastral)
			throws ControladorException {
		// Pesquisa o cliente fone atualizacao cadastral
		Collection<ClienteFoneAtualizacaoCadastralDM> colecaoClienteFoneAtlzCad = getControladorCliente()
				.obterDadosClienteFoneAtualizacaoCadastralDM(
						idClienteAtualizacaoCadastral);

		// valida se o cliente foi informado pelo formulario.
		// if ( imovelAtualizacaoCadastral.getCapaLoteAtualizacaoCadastral() !=
		// null &&
		// imovelAtualizacaoCadastral.getCapaLoteAtualizacaoCadastral().getId()
		// != null ) {
		//
		// //Telefones informados pelo formulario digitacao.
		//
		// //recupera o telefone informado pela digitacao.
		// if (colecaoClienteFoneAtlzCad != null &&
		// !colecaoClienteFoneAtlzCad.isEmpty()) {
		// ClienteFoneAtualizacaoCadastralDM clienteFoneAtlzCad =
		// (ClienteFoneAtualizacaoCadastralDM)
		// Util.retonarObjetoDeColecao(colecaoClienteFoneAtlzCad);
		//
		// Collection<ClienteFone> colecaoClienteFone =
		// this.getControladorCliente().pesquisarClienteFone(idCliente);
		//
		// if (colecaoClienteFone != null && !colecaoClienteFone.isEmpty()) {
		// // Percorre todos os telefones do cliente ate encontrar o fone
		// padrao.
		// for (ClienteFone clienteFone : colecaoClienteFone) {
		// if
		// (clienteFone.getIndicadorTelefonePadrao().equals(ClienteFone.INDICADOR_FONE_PADRAO))
		// {
		// //Atualiza
		// if (clienteFoneAtlzCad.getDdd() != null) {
		// clienteFone.setDdd(clienteFoneAtlzCad.getDdd());
		// }
		// if (clienteFoneAtlzCad.getRamal() != null) {
		// clienteFone.setRamal(clienteFoneAtlzCad.getRamal());
		// }
		// if (clienteFoneAtlzCad.getFoneTipo().getId() != null) {
		// FoneTipo foneTipo = new FoneTipo();
		// foneTipo.setId(clienteFoneAtlzCad.getFoneTipo().getId());
		// clienteFone.setFoneTipo(foneTipo);
		// }
		// if (clienteFoneAtlzCad.getContato() != null) {
		// clienteFone.setContato(clienteFoneAtlzCad.getContato());
		// }
		// if (clienteFoneAtlzCad.getIndicadorFonePadrao() != null) {
		// clienteFone.setIndicadorTelefonePadrao(clienteFoneAtlzCad.getIndicadorFonePadrao());
		// }
		// clienteFone.setUltimaAlteracao(new Date());
		// this.getControladorUtil().atualizar(clienteFone);
		//
		// break;
		// }
		// }
		// }
		// }
		// } else {
		// Telefones informados pelo tablet.

		// Remove todos os telefones do cliente
		Collection<ClienteFone> colecaoClienteFone = getControladorCliente()
				.pesquisarClienteFone(idCliente);
		for (ClienteFone clienteFone : colecaoClienteFone) {
			this.getControladorUtil().remover(clienteFone);
		}

		for (ClienteFoneAtualizacaoCadastralDM clienteFoneAtlzCad : colecaoClienteFoneAtlzCad) {
			// Nao existe telefone cadastrado na base do GSAN, novo telefone é
			// gerado.
			Cliente cliente = new Cliente();
			cliente.setId(idCliente);

			ClienteFone clienteFone = new ClienteFone();
			clienteFone.setCliente(cliente);

			FoneTipo foneTipo = new FoneTipo();
			if (clienteFoneAtlzCad.getFoneTipo().getId() != null) {
				foneTipo.setId(clienteFoneAtlzCad.getFoneTipo().getId());
			} else {
				foneTipo.setId(FoneTipo.RESIDENCIAL);
			}
			clienteFone.setFoneTipo(foneTipo);

			clienteFone.setIndicadorTelefonePadrao(clienteFoneAtlzCad
					.getIndicadorFonePadrao());

			clienteFone.setDdd(clienteFoneAtlzCad.getDdd());
			clienteFone.setRamal(clienteFoneAtlzCad.getRamal());
			clienteFone.setTelefone(clienteFoneAtlzCad.getTelefone());
			clienteFone.setUltimaAlteracao(new Date());

			this.getControladorUtil().inserir(clienteFone);
		}
		// }
	}

	/**
	 * [UC1292] Efetuar Instalação de Hidrômetro para Atualização Cadastral
	 * 
	 * @author André Miranda
	 * @since 08/10/2014
	 */
	public void efetuarInstalacaoHidrometroAtualizacaoCadastral(
			Imovel imovel,
			ImovelAtualizacaoCadastralDM imovelAtualizacaoCadastral,
			Integer medicaoTipo,
			Integer idParametro,
			HidrometroInstalacaoHistoricoAtualizacaoCadastralDM hidrometroInstHistAtlzCad,
			boolean funcionalidadeOnline, Usuario usuarioLogado)
			throws ControladorException {
		boolean validacaoPermitida = true;

		try {
			// [FS0004] Verificar Preenchimento dos Campos
			// if
			// (!this.verificarCamposObrigatoriosHidrometroInstalacaoHistoricoAtualizacaoCadastral(imovel,
			// idParametro,
			// imovelAtualizacaoCadastral, hidrometroInstHistAtlzCad,
			// medicaoTipo, funcionalidadeOnline)) {
			// validacaoPermitida = false;
			// }

			// [FS0001] Verificar Situação do Hidrômetro
			Hidrometro hidrometro = repositorioCadastro
					.pesquisarHidrometroPeloNumero(hidrometroInstHistAtlzCad
							.getNumeroHidrometro());
			if (!this.verificarSituacaoHidrometro(imovel, idParametro,
					hidrometro, imovelAtualizacaoCadastral, medicaoTipo,
					funcionalidadeOnline)) {
				validacaoPermitida = false;
			}

			// [FS0002] Verificar a situação de água ou esgoto
			if (!this.verificarSituacaoAguaEsgoto(imovel, idParametro,
					medicaoTipo, imovelAtualizacaoCadastral,
					funcionalidadeOnline)) {
				validacaoPermitida = false;
			}

			// [FS0003] Verificar a Existência de Hidrômetro no Imóvel/Ligação
			// de água
			if (!this.verificarExistenciaHidrometroAtualizacaoCadastral(imovel,
					idParametro, medicaoTipo, imovelAtualizacaoCadastral,
					funcionalidadeOnline)) {
				validacaoPermitida = false;
			}

			if (validacaoPermitida) {
				// [SB0001] Gerar Histórico de Instalação do Hidrômetro
				HidrometroInstalacaoHistorico hidrometroInstalacaoHistorico = this
						.inserirHidrometroInstalacaoHistorico(
								hidrometroInstHistAtlzCad, hidrometro, imovel);

				// [SB0002] Atualizar Imóvel/Ligação de Água
				this.atualizarImovelLigacaoAguaAtualizacaoCadastral(
						hidrometroInstHistAtlzCad.getMedicaoTipo().getId(),
						imovel.getId(), hidrometroInstalacaoHistorico.getId());

				// [SB0003] Atualizar Hidrômetro
				HidrometroSituacao hidrometroSituacao = new HidrometroSituacao();
				hidrometroSituacao.setId(HidrometroSituacao.INSTALADO);
				hidrometroSituacao.setUltimaAlteracao(new Date());
				hidrometro.setHidrometroSituacao(hidrometroSituacao);
				repositorioUtil.atualizar(hidrometro);

				if (!funcionalidadeOnline) {
					// [SB0004] Inserir Registro no Retorno da Atualizacao
					// Cadastral
					this.inserirRetornoAtualizacaoCadastralDM(
							imovel.getId(),
							null,
							AtributoAtualizacaoCadastralDM.SITUACAO_HIDROMETRO,
							RetornoAtualizacaoCadastralDM.SITUACAO_ATUALIZADO,
							MensagemAtualizacaoCadastralDM.ATUALIZACAO_COM_SUCESSO,
							idParametro, imovelAtualizacaoCadastral,
							hidrometroInstHistAtlzCad.getMedicaoTipo().getId());
				}
			}
		} catch (ErroRepositorioException e) {
			e.printStackTrace();
			throw new ControladorException("erro.sistema", e);
		}
	}

	/**
	 * [UC1292] Efetuar Instalação de Hidrômetro para Atualização Cadastral
	 * [FS0001] Verificar preenchimento dos campos
	 * 
	 * @author André Miranda
	 * @since 08/10/2014
	 */
	public boolean verificarSituacaoHidrometro(Imovel imovel,
			Integer idParametroTabelaAtualizacaoCadastro,
			Hidrometro hidrometro,
			ImovelAtualizacaoCadastralDM imovelAtualizacaoCadastral,
			Integer medicaoTipo, boolean funcionalidadeOnline)
			throws ControladorException {

		boolean retorno = true;

		if (hidrometro == null || hidrometro.getId() == null) {
			if (funcionalidadeOnline) {
				throw new ControladorException(
						"atencao.hidrometro_inexistente_estoque");
			}

			// [SB0006] Inserir Registro no retorno da Atualizacao Cadastral
			this.inserirRetornoAtualizacaoCadastralDM(
					imovel.getId(),
					null,
					AtributoAtualizacaoCadastralDM.SITUACAO_HIDROMETRO,
					RetornoAtualizacaoCadastralDM.SITUACAO_PENDENTE,
					MensagemAtualizacaoCadastralDM.HIDROMETRO_INEXISTENTE_ESTOQUE,
					idParametroTabelaAtualizacaoCadastro,
					imovelAtualizacaoCadastral, medicaoTipo);
			retorno = false;
		} else {
			String idImovel = getControladorMicromedicao()
					.pesquisarImovelHidrometroInstalado(hidrometro.getId());
			if (idImovel != null && !idImovel.isEmpty()) {
				if (funcionalidadeOnline) {
					throw new ControladorException(
							"atencao.hidrometro_ja_instalado_outro_imovel");
				}

				// [SB0006] Inserir Registro no retorno da Atualizacao Cadastral
				this.inserirRetornoAtualizacaoCadastralDM(
						imovel.getId(),
						null,
						AtributoAtualizacaoCadastralDM.SITUACAO_HIDROMETRO,
						RetornoAtualizacaoCadastralDM.SITUACAO_PENDENTE,
						MensagemAtualizacaoCadastralDM.HIDROMETRO_JA_INSTALADO_OUTRO_IMOVEL,
						idParametroTabelaAtualizacaoCadastro,
						imovelAtualizacaoCadastral, medicaoTipo);
				retorno = false;
			} else if (!hidrometro.getHidrometroSituacao().getId()
					.equals(HidrometroSituacao.DISPONIVEL)) {
				if (funcionalidadeOnline) {
					throw new ControladorException(
							"atencao.hidrometro_nao_disponivel");
				}

				// [SB0006] Inserir Registro no retorno da Atualizacao Cadastral
				this.inserirRetornoAtualizacaoCadastralDM(
						imovel.getId(),
						null,
						AtributoAtualizacaoCadastralDM.SITUACAO_HIDROMETRO,
						RetornoAtualizacaoCadastralDM.SITUACAO_PENDENTE,
						MensagemAtualizacaoCadastralDM.HIDROMETRO_NAO_DISPONIVEL,
						idParametroTabelaAtualizacaoCadastro,
						imovelAtualizacaoCadastral, medicaoTipo);
				retorno = false;
			}
		}
		return retorno;
	}

	/**
	 * [UC1292] Efetuar Instalação de Hidrômetro para Atualização Cadastral
	 * [FS0002] Verificar situação do hidrômetro
	 * 
	 * @author André Miranda
	 * @since 08/10/2014
	 */
	public boolean verificarSituacaoAguaEsgoto(Imovel imovel,
			Integer idParametroTabelaAtualizacaoCadastro, Integer medicaoTipo,
			ImovelAtualizacaoCadastralDM imovelAtualizacaoCadastral,
			boolean funcionalidadeOnline) throws ControladorException {

		boolean retorno = true;

		if (medicaoTipo.equals(MedicaoTipo.POCO)) {
			if (!imovel.getLigacaoEsgotoSituacao().getId()
					.equals(LigacaoEsgotoSituacao.LIGADO)) {
				if (funcionalidadeOnline) {
					throw new ControladorException(
							"atencao.situacao_ligacao_esgoto_invalida_instalar_hidrometro");
				}

				// [SB0006] Inserir Registro no retorno da Atualizacao Cadastral
				this.inserirRetornoAtualizacaoCadastralDM(
						imovel.getId(),
						null,
						AtributoAtualizacaoCadastralDM.SITUACAO_LIGACAO_ESGOTO,
						RetornoAtualizacaoCadastralDM.SITUACAO_PENDENTE,
						MensagemAtualizacaoCadastralDM.SITUACAO_LIGACAO_ESGOTO_INVALIDA,
						idParametroTabelaAtualizacaoCadastro,
						imovelAtualizacaoCadastral, MedicaoTipo.POCO);
				retorno = false;
			}
		} else if (medicaoTipo.equals(MedicaoTipo.LIGACAO_AGUA)) {
			if (!imovel.getLigacaoAguaSituacao().getId()
					.equals(LigacaoAguaSituacao.LIGADO)
					&& !imovel.getLigacaoAguaSituacao().getId()
							.equals(LigacaoAguaSituacao.LIGADO_EM_ANALISE)
					&& !imovel.getLigacaoAguaSituacao().getId()
							.equals(LigacaoAguaSituacao.CORTADO)) {
				if (funcionalidadeOnline) {
					throw new ControladorException(
							"atencao.situacao_ligacao_agua_invalida_instalar_hidrometro");
				}

				// [SB0006] Inserir Registro no retorno da Atualizacao Cadastral
				this.inserirRetornoAtualizacaoCadastralDM(
						imovel.getId(),
						null,
						AtributoAtualizacaoCadastralDM.SITUACAO_HIDROMETRO,
						RetornoAtualizacaoCadastralDM.SITUACAO_PENDENTE,
						MensagemAtualizacaoCadastralDM.SITUACAO_LIGACAO_AGUA_INVALIDA_PARA_INST_HIDROMETRO,
						idParametroTabelaAtualizacaoCadastro,
						imovelAtualizacaoCadastral, MedicaoTipo.LIGACAO_AGUA);
				retorno = false;
			}
		}
		return retorno;
	}

	/**
	 * [UC1292] Efetuar Instalação de Hidrômetro para Atualização Cadastral
	 * [FS0003] Verificar a Existência de Hidrômetro no Imóvel/Ligação de água
	 * 
	 * @author André Miranda
	 * @since 08/10/2014
	 */
	public boolean verificarExistenciaHidrometroAtualizacaoCadastral(
			Imovel imovel, Integer idParametroTabelaAtualizacaoCadastro,
			Integer medicaoTipo,
			ImovelAtualizacaoCadastralDM imovelAtualizacaoCadastral,
			boolean funcionalidadeOnline) throws ControladorException {

		boolean retorno = true;

		if (medicaoTipo.equals(MedicaoTipo.POCO)
				&& imovel.getHidrometroInstalacaoHistorico() != null
				&& imovel.getHidrometroInstalacaoHistorico().getId() != null) {
			if (funcionalidadeOnline) {
				throw new ControladorException(
						"atencao.imovel_possui_hidrometro_no_poco");
			}

			// [SB0006] Inserir Registro no retorno da Atualizacao Cadastral
			this.inserirRetornoAtualizacaoCadastralDM(imovel.getId(), null,
					AtributoAtualizacaoCadastralDM.SITUACAO_HIDROMETRO,
					RetornoAtualizacaoCadastralDM.SITUACAO_PENDENTE,
					MensagemAtualizacaoCadastralDM.HIDROMETRO_INSTALADO_POCO,
					idParametroTabelaAtualizacaoCadastro,
					imovelAtualizacaoCadastral, medicaoTipo);
			retorno = false;
		}

		if (medicaoTipo.equals(MedicaoTipo.LIGACAO_AGUA)
				&& imovel.getLigacaoAgua() != null
				&& imovel.getLigacaoAgua().getHidrometroInstalacaoHistorico() != null
				&& imovel.getLigacaoAgua().getHidrometroInstalacaoHistorico()
						.getId() != null) {
			if (funcionalidadeOnline) {
				throw new ControladorException(
						"atencao.ligacao_agua_possui_hidrometro");
			}

			// [SB0006] Inserir Registro no retorno da Atualizacao Cadastral
			this.inserirRetornoAtualizacaoCadastralDM(
					imovel.getId(),
					null,
					AtributoAtualizacaoCadastralDM.SITUACAO_HIDROMETRO,
					RetornoAtualizacaoCadastralDM.SITUACAO_PENDENTE,
					MensagemAtualizacaoCadastralDM.LIGACAO_AGUA_POSSUI_HIDROMETRO,
					idParametroTabelaAtualizacaoCadastro,
					imovelAtualizacaoCadastral, medicaoTipo);
			retorno = false;
		}

		return retorno;
	}

	/**
	 * [UC1292] Efetuar Instalação de Hidrômetro para Atualização Cadastral
	 * [FS0004] Verificar preenchimento dos campos
	 * 
	 * @author André Miranda
	 * @since 08/10/2014
	 */
	public boolean verificarCamposObrigatoriosHidrometroInstalacaoHistoricoAtualizacaoCadastral(
			Imovel imovel,
			Integer idParametroTabelaAtualizacaoCadastro,
			ImovelAtualizacaoCadastralDM imovelAtualizacaoCadastral,
			HidrometroInstalacaoHistoricoAtualizacaoCadastralDM hidrometroInstHistAtlzCad,
			Integer medicaoTipo, boolean funcionalidadeOnline)
			throws ControladorException {
		boolean retorno = true;

		if (hidrometroInstHistAtlzCad.getNumeroHidrometro() == null) {
			if (funcionalidadeOnline) {
				throw new ControladorException(
						"atencao.campo_texto.obrigatorio", null,
						"Número do Hidrômetro");
			}

			// [SB0006] Inserir Registro no retorno da Atualizacao Cadastral
			// this.inserirRetornoAtualizacaoCadastralDM(imovel.getId(), null,
			// AtributoAtualizacaoCadastralDM.NUMERO_HIDROMETRO,
			// RetornoAtualizacaoCadastralDM.SITUACAO_PENDENTE,
			// MensagemAtualizacaoCadastralDM.INFORMACAO_OBRIGATORIA,
			// idParametroTabelaAtualizacaoCadastro,
			// imovelAtualizacaoCadastral,medicaoTipo);
			retorno = false;
		}

		if (hidrometroInstHistAtlzCad.getDataInstalacaoHidrometro() == null) {
			hidrometroInstHistAtlzCad.setDataInstalacaoHidrometro(new Date());
		}

		// if (hidrometroInstHistAtlzCad.getMedicaoTipo() == null) {
		// if (funcionalidadeOnline) {
		// throw new ControladorException("atencao.campo_texto.obrigatorio",
		// null, "Tipo de Medição");
		// }
		//
		// // [SB0006] Inserir Registro no retorno da Atualizacao Cadastral
		// this.inserirRetornoAtualizacaoCadastralDM(imovel.getId(), null,
		// AtributoAtualizacaoCadastralDM.HIDROMETRO_MEDICAO_TIPO,
		// RetornoAtualizacaoCadastralDM.SITUACAO_PENDENTE,
		// MensagemAtualizacaoCadastralDM.INFORMACAO_OBRIGATORIA,
		// idParametroTabelaAtualizacaoCadastro,
		// imovelAtualizacaoCadastral,medicaoTipo);
		// retorno = false;
		// }

		if (hidrometroInstHistAtlzCad.getHidrometroLocalInstalacao() == null) {
			if (funcionalidadeOnline) {
				throw new ControladorException(
						"atencao.campo_texto.obrigatorio", null,
						"Local de Instalação do Hidrômetro");
			}

			// [SB0006] Inserir Registro no retorno da Atualizacao Cadastral
			// this.inserirRetornoAtualizacaoCadastralDM(imovel.getId(), null,
			// AtributoAtualizacaoCadastralDM.LOCAL_INST_HIDROMETRO,
			// RetornoAtualizacaoCadastralDM.SITUACAO_PENDENTE,
			// MensagemAtualizacaoCadastralDM.INFORMACAO_OBRIGATORIA,
			// idParametroTabelaAtualizacaoCadastro, imovelAtualizacaoCadastral,
			// medicaoTipo);
			retorno = false;
		}

		if (hidrometroInstHistAtlzCad.getHidrometroProtecao() == null) {
			if (funcionalidadeOnline) {
				throw new ControladorException(
						"atencao.campo_texto.obrigatorio", null,
						"Proteção do Hidrômetro");
			}

			// [SB0006] Inserir Registro no retorno da Atualizacao Cadastral
			// this.inserirRetornoAtualizacaoCadastralDM(imovel.getId(), null,
			// AtributoAtualizacaoCadastralDM.PROTECAO_HIDROMETRO,
			// RetornoAtualizacaoCadastralDM.SITUACAO_PENDENTE,
			// MensagemAtualizacaoCadastralDM.INFORMACAO_OBRIGATORIA,
			// idParametroTabelaAtualizacaoCadastro, imovelAtualizacaoCadastral,
			// medicaoTipo);
			retorno = false;
		}

		if (hidrometroInstHistAtlzCad.getNumeroInstalacaoHidrometro() == null) {
			if (funcionalidadeOnline) {
				throw new ControladorException(
						"atencao.campo_texto.obrigatorio", null,
						"Leitura de Instalação do Hidrômetro");
			}

			// [SB0006] Inserir Registro no retorno da Atualizacao Cadastral
			// this.inserirRetornoAtualizacaoCadastralDM(imovel.getId(), null,
			// AtributoAtualizacaoCadastralDM.LEITURA_INST_HIDROMETRO,
			// RetornoAtualizacaoCadastralDM.SITUACAO_PENDENTE,
			// MensagemAtualizacaoCadastralDM.INFORMACAO_OBRIGATORIA,
			// idParametroTabelaAtualizacaoCadastro, imovelAtualizacaoCadastral,
			// medicaoTipo);
			retorno = false;
		}

		return retorno;
	}

	/**
	 * [UC1292] Efetuar Instalação de Hidrômetro para Atualização Cadastral
	 * [SB0001] Gerar Histórico de Instalação do Hidrômetro
	 * 
	 * @author André Miranda
	 * @since 08/10/2014
	 */
	public HidrometroInstalacaoHistorico inserirHidrometroInstalacaoHistorico(
			HidrometroInstalacaoHistoricoAtualizacaoCadastralDM hidrometroInstHistAtlzCad,
			Hidrometro hidrometro, Imovel imovel) throws ControladorException {

		HidrometroInstalacaoHistorico historico = new HidrometroInstalacaoHistorico();
		historico.setHidrometro(hidrometro);
		historico.setDataInstalacao(hidrometroInstHistAtlzCad
				.getDataInstalacaoHidrometro());
		historico.setNumeroLeituraInstalacao(hidrometroInstHistAtlzCad
				.getNumeroInstalacaoHidrometro());
		historico.setMedicaoTipo(hidrometroInstHistAtlzCad.getMedicaoTipo());
		historico.setRateioTipo(null);
		historico.setHidrometroLocalInstalacao(hidrometroInstHistAtlzCad
				.getHidrometroLocalInstalacao());
		historico.setHidrometroProtecao(hidrometroInstHistAtlzCad
				.getHidrometroProtecao());
		historico.setDataRetirada(null);
		historico.setNumeroLeituraRetirada(null);
		historico.setDataImplantacaoSistema(new Date());
		historico.setNumeroLeituraCorte(null);
		historico.setIndicadorExistenciaCavalete(ConstantesSistema.NAO);
		historico.setIndicadorInstalcaoSubstituicao(ConstantesSistema.SIM);
		historico.setNumeroLeituraSupressao(null);
		historico.setUltimaAlteracao(new Date());

		historico.setImovel(null);
		historico.setLigacaoAgua(null);
		if (hidrometroInstHistAtlzCad.getMedicaoTipo().getId()
				.equals(MedicaoTipo.POCO)) {
			historico.setImovel(imovel);
		} else {
			// Medição Tipo = LIGAÇÃO ÁGUA
			LigacaoAgua ligacaoAgua = new LigacaoAgua();
			ligacaoAgua.setId(imovel.getId());
			historico.setLigacaoAgua(ligacaoAgua);
		}

		historico.setNumeroSelo(null);
		historico.setIndicadorTrocaProtecao(ConstantesSistema.NAO);
		historico.setIndicadorTrocaRegistro(ConstantesSistema.NAO);
		historico.setUsuarioInstalacao(null);
		historico.setUsuarioRetirada(null);
		historico.setNumeroLacre(null);

		Integer idHidrometroInstalacaoHistorico = (Integer) getControladorUtil()
				.inserir(historico);
		historico.setId(idHidrometroInstalacaoHistorico);
		return historico;
	}

	/**
	 * [UC1292] Efetuar Instalação de Hidrômetro para Atualização Cadastral
	 * [SB0002] Atualizar Imóvel/Ligação de Água
	 * 
	 * @author André Miranda
	 * @since 08/10/2014
	 */
	public void atualizarImovelLigacaoAguaAtualizacaoCadastral(
			Integer medicaoTipo, Integer idImovel, Integer idHidrometroInstHist)
			throws ControladorException {
		try {
			if (medicaoTipo.equals(MedicaoTipo.POCO)) {
				repositorioCadastro.atualizarImovel(idImovel,
						idHidrometroInstHist);
			} else {
				repositorioCadastro.atualizarLigacaoAgua(idImovel,
						idHidrometroInstHist);
			}
		} catch (ErroRepositorioException e) {
			e.printStackTrace();
			throw new ControladorException("erro.sistema", e);
		}
	}

	/**
	 * [UC1299] Atualizar Cliente para Atualização Cadastral
	 * 
	 * @author Bruno Sá Barreto
	 * @since 13/10/2014
	 */
	public boolean atualizarClienteAtualizacaoCadastral(
			ImovelAtualizacaoCadastralDM imovelAtualizacaoCadastral,
			ClienteAtualizacaoCadastralDM clienteAtualizacaoCadastral,
			ParametroTabelaAtualizacaoCadastralDM ptac, Imovel imovel,
			LigacaoAguaSituacao ligacaoAguaSituacao,
			LigacaoEsgotoSituacao ligacaoEsgotoSituacao,
			SistemaParametro sistemaParametro) throws ControladorException {

		// 2. O sistema recupera os dados do cliente usuario na base de dados do
		// GSAN
		Collection<ClienteImovel> colecaoClienteImovel = getControladorCliente()
				.obterClienteImovelporRelacaoTipo(imovel.getId(),
						ClienteRelacaoTipo.USUARIO.intValue());
		ClienteImovel clienteImovel = (ClienteImovel) Util
				.retonarObjetoDeColecao(colecaoClienteImovel);

		boolean flagValidacao = true;

		// 2.1. Caso seja inclusão de imóvel (IMAC_ICIMOVELNOVO = 1 na tabela
		// ATUALIZACAOCADASTRAL.IMOVEL_ATLZ_CADASTRAL_DM):
		if (imovelAtualizacaoCadastral.getIndicadorImovelNovo().equals(
				ConstantesSistema.SIM)) {
			// 2.1.1. Validar cliente usuário [SB0003 - Validar Obrigatoriedade
			// do Cliente Usuário]
			flagValidacao = this
					.validarObrigatoriedadeClienteUsuarioAtualizacaoCadastralDM(
							imovelAtualizacaoCadastral, imovel.getId(), ptac,
							ligacaoAguaSituacao, ligacaoEsgotoSituacao,
							sistemaParametro, clienteAtualizacaoCadastral);
		} else {
			// 2.2.1. Validar dados do cliente [SB0001 - Validar cliente];
			flagValidacao = this.validarDadosClienteAtualizacaoCadastral(
					imovelAtualizacaoCadastral, clienteAtualizacaoCadastral,
					ptac, clienteImovel, imovel, ligacaoAguaSituacao,
					ligacaoEsgotoSituacao, sistemaParametro);
		}

		if (flagValidacao) {
			if (clienteAtualizacaoCadastral.getIndicadorDocumentacao().equals(
					ConstantesSistema.SIM)
					|| imovelAtualizacaoCadastral.getIndicadorImovelNovo()
							.equals(ConstantesSistema.SIM)) {
				// [UC1222] Atualizar Cliente a Partir Dispositivo Movel
				getControladorCliente().atualizarClienteAtualizacaoCadastral(
						imovelAtualizacaoCadastral,
						clienteAtualizacaoCadastral, clienteImovel,
						ptac.getId(), false, imovel);

			} else {

				if (!verificarClienteIgualClienteAtualizacaoCadastral(
						clienteImovel, clienteAtualizacaoCadastral)) {

					this.inserirRetornoAtualizacaoCadastralDM(
							imovel.getId(),
							clienteAtualizacaoCadastral.getIdCliente(),
							AtributoAtualizacaoCadastralDM.CLIENTE,
							RetornoAtualizacaoCadastralDM.SITUACAO_PENDENTE,
							MensagemAtualizacaoCadastralDM.DOCUMENTACAO_DO_CLIENTE_NAO_APRESENTADA,
							ptac.getId(), imovelAtualizacaoCadastral, null);

					flagValidacao = false;
				}
			}
		}

		return flagValidacao;
	}

	/**
	 * [SB0001] Validar Cliente [UC1299] Atualizar Cliente para Atualização
	 * Cadastral
	 * 
	 * @author Bruno Sá Barreto, André Miranda
	 * @since 13/10/2014
	 */
	private boolean validarDadosClienteAtualizacaoCadastral(
			ImovelAtualizacaoCadastralDM imovelAtualizacaoCadastral,
			ClienteAtualizacaoCadastralDM clienteAtualizacaoCadastral,
			ParametroTabelaAtualizacaoCadastralDM ptac,
			ClienteImovel clienteImovel, Imovel imovel,
			LigacaoAguaSituacao ligacaoAguaSituacao,
			LigacaoEsgotoSituacao ligacaoEsgotoSituacao,
			SistemaParametro sistemaParametro) throws ControladorException {

		boolean flagValidacao;

		// [SB0003 - Validar Obrigatoriedade do Cliente Usuário]
		flagValidacao = this
				.validarObrigatoriedadeClienteUsuarioAtualizacaoCadastralDM(
						imovelAtualizacaoCadastral, imovel.getId(), ptac,
						ligacaoAguaSituacao, ligacaoEsgotoSituacao,
						sistemaParametro, clienteAtualizacaoCadastral);
		if (!flagValidacao)
			return false;

		// [SB0005 - Verificar se cliente de imóvel público]
		flagValidacao = this.validarClienteAssociadoImovelPublico(
				imovelAtualizacaoCadastral, clienteAtualizacaoCadastral, ptac,
				clienteImovel, imovel);
		if (!flagValidacao)
			return false;

		// [SB0006 - Verificar se cliente inativo]
		flagValidacao = this.verificarSeClienteInativo(clienteImovel,
				clienteAtualizacaoCadastral, imovelAtualizacaoCadastral, ptac);
		if (!flagValidacao)
			return false;

		// [SB0007 - Validar Atributo CPF/CNPJ]
		flagValidacao = this.validarAtributoCpfCnpj(
				clienteAtualizacaoCadastral.getCpfCnpj(), imovel.getId(),
				clienteAtualizacaoCadastral.getId(), ptac,
				imovelAtualizacaoCadastral, clienteImovel);
		if (!flagValidacao)
			return false;

		// [SB0008 - Verificar existência de negativação para o
		// cliente-imóvel]
		flagValidacao = this.verificarExistenciaNegativacaoClienteImovel(
				clienteImovel.getCliente().getId(), imovel.getId(),
				imovelAtualizacaoCadastral, clienteAtualizacaoCadastral, ptac);

		return flagValidacao;
	}

	/**
	 * [SB0008] - Verificar existência de negativação para o cliente-imóvel
	 * [UC1299] Atualizar Cliente para Atualização Cadastral
	 * 
	 * @author Bruno Sá Barreto
	 * @since 13/10/2014
	 */
	private boolean verificarExistenciaNegativacaoClienteImovel(
			Integer idCliente, Integer idImovel,
			ImovelAtualizacaoCadastralDM imovelAtualizacaoCadastral,
			ClienteAtualizacaoCadastralDM clienteAtualizacaoCadastral,
			ParametroTabelaAtualizacaoCadastralDM ptac) {
		try {
			// [FS0006] - Verificar existência de negativação para o
			// cliente-imóvel
			// Caso o cliente do imóvel esteja em processo de negativação
			if (idCliente != null) {
				Integer qtdOcorrenciaNegativacao = this.getControladorCliente()
						.pesquisarExistenciaNegativacaoParaClienteImovel(
								idCliente, idImovel);
				if (qtdOcorrenciaNegativacao != null
						&& qtdOcorrenciaNegativacao > 0) {

					this.inserirRetornoAtualizacaoCadastralDM(
							imovelAtualizacaoCadastral.getIdImovel(),
							clienteAtualizacaoCadastral.getIdCliente(),
							AtributoAtualizacaoCadastralDM.CLIENTE,
							RetornoAtualizacaoCadastralDM.SITUACAO_PENDENTE,
							MensagemAtualizacaoCadastralDM.CLIENTE_EM_PROCESSO_NEGATIVACAO,
							ptac.getId(), imovelAtualizacaoCadastral, null);

					return false;

				}
			}
		} catch (ControladorException e) {
			e.printStackTrace();
		}
		return true;
	}

	/**
	 * [SB0006 - Verificar se cliente inativo] [UC1299] Atualizar Cliente para
	 * Atualização Cadastral
	 * 
	 * @author Bruno Sá Barreto
	 * @since 13/10/2014
	 */
	private boolean verificarSeClienteInativo(
			ClienteImovel clienteImovel,
			ClienteAtualizacaoCadastralDM clienteAtualizacaoCadastral,
			ImovelAtualizacaoCadastralDM imovelAtualizacaoCadastral,
			ParametroTabelaAtualizacaoCadastralDM parametroTabelaAtualizacaoCadastro) {
		try {
			// [FS0003 - Verificar se cliente inativo]
			if (clienteImovel.getCliente().getIndicadorUso() != null
					&& clienteImovel.getCliente().getIndicadorUso()
							.equals(ConstantesSistema.NAO)) {
				if (!verificarClienteIgualClienteAtualizacaoCadastral(
						clienteImovel, clienteAtualizacaoCadastral)) {
					// [SB0006] - Inserir Registro no retorno da Atualizacao
					// Cadastral
					this.inserirRetornoAtualizacaoCadastralDM(
							imovelAtualizacaoCadastral.getIdImovel(),
							clienteAtualizacaoCadastral.getIdCliente(),
							AtributoAtualizacaoCadastralDM.CLIENTE,
							RetornoAtualizacaoCadastralDM.SITUACAO_PENDENTE,
							MensagemAtualizacaoCadastralDM.CLIENTE_INATIVO_NAO_PODE_SER_ATUALIZADO,
							parametroTabelaAtualizacaoCadastro.getId(),
							imovelAtualizacaoCadastral, null);

					return false;
				}
			}
		} catch (ControladorException e) {
			e.printStackTrace();
		}
		return true;
	}

	/**
	 * [SB0005 - Verificar se cliente de imóvel público] [UC1299] Atualizar
	 * Cliente para Atualização Cadastral
	 * 
	 * @author Bruno Sá Barreto
	 * @since 13/10/2014
	 */
	private boolean validarClienteAssociadoImovelPublico(
			ImovelAtualizacaoCadastralDM imovelAtualizacaoCadastral,
			ClienteAtualizacaoCadastralDM clienteAtlzCadastral,
			ParametroTabelaAtualizacaoCadastralDM ptac,
			ClienteImovel clienteImovel, Imovel imovel) {

		boolean resultado = true;

		// [FS0002 - Verificar se cliente de imóvel público
		// [SB0006] - Inserir Registro no retorno da Atualizacao Cadastral
		try {
			if (this.pesquisarClienteResponsavelComEsferaPoderPublico(imovel
					.getId()) != null) {
				if (!this.verificarClienteIgualClienteAtualizacaoCadastral(
						clienteImovel, clienteAtlzCadastral)) {
					this.inserirRetornoAtualizacaoCadastralDM(
							imovel.getId(),
							clienteAtlzCadastral.getIdCliente(),
							AtributoAtualizacaoCadastralDM.CLIENTE,
							RetornoAtualizacaoCadastralDM.SITUACAO_PENDENTE,
							MensagemAtualizacaoCadastralDM.CLIENTE_IMOVEL_PUBLICO_NAO_PODE_SER_ATUALIZADO,
							ptac.getId(), imovelAtualizacaoCadastral, null);
					resultado = false;
				}
			}
		} catch (ControladorException e) {
			e.printStackTrace();
		}

		return resultado;
	}

	/**
	 * [UC1299] Atualizar Cliente Atualização Cadastral [SB0003] - Validar
	 * Obrigatoriedade do Cliente Usuário
	 * 
	 * @author Bruno Sá Barreto
	 * 
	 * @param imovelAtualizacaoCadastral
	 * @param idImovel
	 * @param parametroTabelaAtualizacaoCadastro
	 * @param ligacaoAguaSituacao
	 * @param ligacaoEsgotoSituacao
	 * @param sistemaParametro
	 * @return
	 * @throws ControladorException
	 */
	public boolean validarObrigatoriedadeClienteUsuarioAtualizacaoCadastralDM(
			ImovelAtualizacaoCadastralDM imovelAtualizacaoCadastral,
			Integer idImovel,
			ParametroTabelaAtualizacaoCadastralDM parametroTabelaAtualizacaoCadastro,
			LigacaoAguaSituacao ligacaoAguaSituacao,
			LigacaoEsgotoSituacao ligacaoEsgotoSituacao,
			SistemaParametro sistemaParametro,
			ClienteAtualizacaoCadastralDM clienteAtlzCad)
			throws ControladorException {

		boolean resultado = true;
		try {

			// 1.1. Caso não exista cliente usuário para o imóvel
			if ((clienteAtlzCad == null || clienteAtlzCad.getId() == null)
					|| !Integer.valueOf(ClienteRelacaoTipo.USUARIO).equals(
							clienteAtlzCad.getClienteRelacaoTipo().getId())) {
				// Caso inclusao do imovel
				if (idImovel == null) {
					if ((!ligacaoAguaSituacao.getId().equals(
							LigacaoAguaSituacao.FACTIVEL) && !ligacaoAguaSituacao
							.getId().equals(LigacaoAguaSituacao.POTENCIAL))
							|| (!ligacaoEsgotoSituacao.getId().equals(
									LigacaoEsgotoSituacao.FACTIVEL) && !ligacaoEsgotoSituacao
									.getId().equals(
											LigacaoEsgotoSituacao.POTENCIAL))) {

						// [SB0006] - Inserir Registro no retorno da Atualizacao
						// Cadastral
						this.inserirRetornoAtualizacaoCadastralDM(
								idImovel,
								null,
								AtributoAtualizacaoCadastralDM.CLIENTE,
								RetornoAtualizacaoCadastralDM.SITUACAO_PENDENTE,
								MensagemAtualizacaoCadastralDM.CLIENTE_USUARIO_OBRIGATORIO,
								parametroTabelaAtualizacaoCadastro.getId(),
								imovelAtualizacaoCadastral, null);

						resultado = false;
					} else if (sistemaParametro.getClienteUsuarioDesconhecido() == null) {

						// [SB0006] - Inserir Registro no retorno da Atualizacao
						// Cadastral
						this.inserirRetornoAtualizacaoCadastralDM(
								idImovel,
								null,
								AtributoAtualizacaoCadastralDM.CLIENTE,
								RetornoAtualizacaoCadastralDM.SITUACAO_PENDENTE,
								MensagemAtualizacaoCadastralDM.CLIENTE_USUARIO_OBRIGATORIO,
								parametroTabelaAtualizacaoCadastro.getId(),
								imovelAtualizacaoCadastral, null);

						resultado = false;
					}

				}// caso atualizacao do imovel
				else {
					// [SB0006] - Inserir Registro no retorno da Atualizacao
					// Cadastral
					this.inserirRetornoAtualizacaoCadastralDM(
							idImovel,
							null,
							AtributoAtualizacaoCadastralDM.CLIENTE,
							RetornoAtualizacaoCadastralDM.SITUACAO_PENDENTE,
							MensagemAtualizacaoCadastralDM.CLIENTE_USUARIO_OBRIGATORIO,
							parametroTabelaAtualizacaoCadastro.getId(),
							imovelAtualizacaoCadastral, null);

					resultado = false;
				}
			}
		} catch (Exception e) {
			e.printStackTrace();
			throw new ControladorException("erro.sistema", e);
		}

		return resultado;
	}

	/**
	 * [UC1288] Atualizar Dados Cadastrais do Imóvel pelo Recadastramento
	 * [SB0011 - Validar Cliente].
	 * 
	 * @author Vivianne Sousa
	 * @date 10/07/2012
	 */
	public boolean verificarClienteIgualClienteAtualizacaoCadastral(
			ClienteImovel clienteImovel,
			ClienteAtualizacaoCadastralDM clienteAtualizacaoCadastral)
			throws ControladorException {

		Boolean clienteIgualClienteAtualizacaoCadastral = false;
		Cliente cliente = null;

		if (clienteImovel != null && clienteImovel.getCliente() != null) {
			cliente = clienteImovel.getCliente();

			Integer idOrgaoExpedidor = null;
			if (clienteAtualizacaoCadastral.getOrgaoExpedidorRG() != null) {
				idOrgaoExpedidor = clienteAtualizacaoCadastral
						.getOrgaoExpedidorRG().getId();
			}

			Integer idUnidadeFederacao = null;
			if (clienteAtualizacaoCadastral.getUnidadeFederacao() != null) {
				idUnidadeFederacao = clienteAtualizacaoCadastral
						.getUnidadeFederacao().getId();
			}

			Integer idOrgaoExpedidorCliente = null;
			if (cliente.getOrgaoExpedidorRg() != null) {
				idOrgaoExpedidorCliente = cliente.getOrgaoExpedidorRg().getId();
			}
			Integer idUnidadeFederacaoCliente = null;
			if (cliente.getUnidadeFederacao() != null) {
				idUnidadeFederacaoCliente = cliente.getUnidadeFederacao()
						.getId();
			}
			Integer idClienteTipo = null;
			if (cliente.getClienteTipo() != null) {
				idClienteTipo = cliente.getClienteTipo().getId();
			}
			Integer idSexoCliente = null;
			if (cliente.getPessoaSexo() != null) {
				idSexoCliente = cliente.getPessoaSexo().getId();
			}

			// Util.ehIgual(cliente.getId(),clienteAtualizacaoCadastral.getIdCliente())
			if (Util.ehIgual(cliente.getNome(),
					clienteAtualizacaoCadastral.getNomeCliente())
					&& Util.ehIgual(cliente.getNome(),
							clienteAtualizacaoCadastral.getNomeCliente())
					&& Util.ehIgual(idClienteTipo, clienteAtualizacaoCadastral
							.getClienteTipo().getId())
					&& Util.ehIgual(cliente.getRg(),
							clienteAtualizacaoCadastral.getRg())
					&& Util.ehIgual(cliente.getDataEmissaoRg(),
							clienteAtualizacaoCadastral.getDataEmissaoRg())
					&& (Util.ehIgual(idOrgaoExpedidorCliente, idOrgaoExpedidor) || idOrgaoExpedidor == null)
					&& (Util.ehIgual(idUnidadeFederacaoCliente,
							idUnidadeFederacao) || idUnidadeFederacao == null)
					&& Util.ehIgual(cliente.getDataNascimento(),
							clienteAtualizacaoCadastral.getDataNascimento())
					&& Util.ehIgual(idSexoCliente, clienteAtualizacaoCadastral
							.getSexo().getId())
					&& Util.ehIgual(cliente.getNomeMae(),
							clienteAtualizacaoCadastral.getNomeMae())
					&& (Util.ehIgual(cliente.getCpf(),
							clienteAtualizacaoCadastral.getCpfCnpj()) || Util
							.ehIgual(cliente.getCnpj(),
									clienteAtualizacaoCadastral.getCpfCnpj()))) {

				clienteIgualClienteAtualizacaoCadastral = true;
			}

			// comparar se foi alterado o telefone
			if (clienteIgualClienteAtualizacaoCadastral) {

				Collection colecaoClienteFoneAtualizacaoCadastral = getControladorCliente()
						.obterDadosClienteFoneAtualizacaoCadastralDM(
								clienteAtualizacaoCadastral.getId());
				Collection colecaoClienteFone = getControladorCliente()
						.pesquisarClienteFone(cliente.getId());

				if ((colecaoClienteFoneAtualizacaoCadastral != null && !colecaoClienteFoneAtualizacaoCadastral
						.isEmpty())
						&& (colecaoClienteFone == null || colecaoClienteFone
								.isEmpty())) {
					clienteIgualClienteAtualizacaoCadastral = false;

				} else if (colecaoClienteFoneAtualizacaoCadastral != null
						&& !colecaoClienteFoneAtualizacaoCadastral.isEmpty()
						&& colecaoClienteFone != null
						&& !colecaoClienteFone.isEmpty()) {

					if (colecaoClienteFoneAtualizacaoCadastral.size() > colecaoClienteFone
							.size()) {
						clienteIgualClienteAtualizacaoCadastral = false;

					} else {

						Iterator iterClienteFoneAtualizacaoCadastral = colecaoClienteFoneAtualizacaoCadastral
								.iterator();
						while (iterClienteFoneAtualizacaoCadastral.hasNext()
								&& clienteIgualClienteAtualizacaoCadastral) {
							ClienteFoneAtualizacaoCadastralDM clienteFoneAtualizacaoCadastral = (ClienteFoneAtualizacaoCadastralDM) iterClienteFoneAtualizacaoCadastral
									.next();

							boolean existeFone = false;
							Iterator iterClienteFone = colecaoClienteFone
									.iterator();
							while (iterClienteFone.hasNext() && !existeFone) {
								ClienteFone clienteFone = (ClienteFone) iterClienteFone
										.next();

								if (Util.ehIgual(clienteFone.getTelefone(),
										clienteFoneAtualizacaoCadastral
												.getTelefone())
										&& Util.ehIgual(clienteFone.getDdd(),
												clienteFoneAtualizacaoCadastral
														.getDdd())
										&& Util.ehIgual(clienteFone.getRamal(),
												clienteFoneAtualizacaoCadastral
														.getRamal())
										&& Util.ehIgual(clienteFone
												.getFoneTipo().getId(),
												clienteFoneAtualizacaoCadastral
														.getFoneTipo().getId())
										&& Util.ehIgual(
												clienteFone
														.getIndicadorTelefonePadrao(),
												clienteFoneAtualizacaoCadastral
														.getIndicadorFonePadrao())) {
									existeFone = true;
								}
							}
							if (!existeFone) {
								clienteIgualClienteAtualizacaoCadastral = false;
							}
						}
					}
				}
			}
		}

		return clienteIgualClienteAtualizacaoCadastral;
	}

	/**
	 * [UC1290] Inserir ou Atualizar Imóvel Atualização Cadastral
	 * 
	 * @author André Miranda
	 * @since 13/10/2014
	 * 
	 * @param imovelAtlzCad
	 * @param imovel
	 * @param idParamTblAtlzCad
	 * @param sistemaParametro
	 * @param cpfCnpj
	 * @param clienteValido
	 * @throws ControladorException
	 */
	public void inserirAtualizarImovelAtualizacaoCadastral(
			ImovelAtualizacaoCadastralDM imovelAtlzCad, Imovel imovel,
			Integer idParamTblAtlzCad, SistemaParametro sistemaParametro,
			boolean clienteValido,
			Collection<ParametrosTransacaoBatchHelper> colecaoHelper)
			throws ControladorException {
		boolean categoriaValida = false;
		boolean economiaValida = false;

		// [SB0005] Validar Atualização de Inscrição
		validarInscricaoImovelAtualizacaoCadastral(imovel, null,
				idParamTblAtlzCad, imovelAtlzCad, sistemaParametro);

		// [SB0009] Validar Atualização de Logradouro
		validarAtualizacaoLogradouroAtualizacaoCadastral(imovel, null,
				idParamTblAtlzCad, imovelAtlzCad, colecaoHelper);

		// [SB0001] Validar Atributo Categoria
		categoriaValida = validarAtributoCategoria(imovel, null,
				idParamTblAtlzCad, imovelAtlzCad);

		// [SB0003] Validar Atributo Economias
		economiaValida = validarAtributosEconomias(imovel, imovelAtlzCad, null,
				idParamTblAtlzCad);

		if (categoriaValida && economiaValida) {
			// validarClienteUsuarioImovelAtualizacaoCadastral(
			// imovel,imovelAtlzCad,idCliente,idParamTblAtlzCad,idCategoriaAtlzCad,cpfCnpj);

			// [SB0004] Atualizar Subcategoria do Imóvel
			// metodo responsavel por atualizar a Categoria/subcategoria e
			// quantidade de economias do imovel
			this.atualizarSubcategoriaImovel(imovel, imovelAtlzCad,
					idParamTblAtlzCad, colecaoHelper);
		}

		// [SB0010] Validar Atributo Ligação de Esgoto
		validarAtributoLigacaoEsgoto(imovel, null, idParamTblAtlzCad,
				imovelAtlzCad, colecaoHelper);

		// [SB0002] Validar Atributo Ligação de Água
		validarAtributoLigacaoAgua(imovel, null, idParamTblAtlzCad,
				imovelAtlzCad, colecaoHelper);

		// [SB0007] Atualizar Imóvel
		atualizarImovelAtualizacaoCadastral(imovel, imovelAtlzCad,
				idParamTblAtlzCad, clienteValido, colecaoHelper);
	}

	/**
	 * [UC1290] Inserir ou Atualizar Imóvel Atualização Cadastral [SB0001]
	 * Validar Atributo Categoria
	 * 
	 * @author
	 * @since
	 */
	public boolean validarAtributoCategoria(Imovel imovel, Integer idCliente,
			Integer idParamTblAtlzCad,
			ImovelAtualizacaoCadastralDM imovelAtlzCad)
			throws ControladorException {
		boolean retorno = true;

		try {
			String cpfCnpj = repositorioCadastro
					.obterCpfCnpjClienteUsuarioAtualizacaoCadastralDM(imovelAtlzCad
							.getId());

			// 1
			Collection<Integer> categoriasImovel = repositorioImovel
					.pesquisarCategoriaSubcategoriaImovel(imovel.getId());
			// 2
			Collection<Integer> categoriasAtlzCad = repositorioCadastro
					.obterCategoriaAtualizacaoCadastralDM(imovelAtlzCad.getId());

			// 3
			if ((categoriasImovel != null && categoriasImovel.size() > 1)
					|| (categoriasAtlzCad != null && categoriasAtlzCad.size() > 1)) {

				// [SB0006] Inserir Registro no retorno da Atualizacao Cadastral
				this.inserirRetornoAtualizacaoCadastralDM(
						imovel.getId(),
						idCliente,
						AtributoAtualizacaoCadastralDM.CATEGORIA_SUBCATEGORIA,
						RetornoAtualizacaoCadastralDM.SITUACAO_PENDENTE,
						MensagemAtualizacaoCadastralDM.IMOVEL_POSSUI_MAIS_DE_UMA_CATEGORIA,
						idParamTblAtlzCad, imovelAtlzCad, null);

				return false;
			}

			// 4
			Object[] objetoImovel = (Object[]) Util
					.retonarObjetoDeColecao(categoriasImovel);
			Integer idCategoriaImovel = (Integer) objetoImovel[0];
			Integer idSubcategoriaImovel = (Integer) objetoImovel[1];

			Integer idCategoriaAtlzCad = (Integer) Util
					.retonarObjetoDeColecao(categoriasAtlzCad);

			// 4.1
			if (!idCategoriaImovel.equals(idCategoriaAtlzCad)) {

				boolean clienteUsuarioValido = validarClienteUsuarioImovelAtualizacaoCadastral(
						imovel, imovelAtlzCad, idCliente, idParamTblAtlzCad,
						idCategoriaAtlzCad, cpfCnpj);

				if (clienteUsuarioValido) {
					this.inserirRetornoAtualizacaoCadastralDM(
							imovel.getId(),
							idCliente,
							AtributoAtualizacaoCadastralDM.CATEGORIA_SUBCATEGORIA,
							RetornoAtualizacaoCadastralDM.SITUACAO_PENDENTE,
							MensagemAtualizacaoCadastralDM.ALTERACAO_CATEGORIA_NAO_AUTORIZADA,
							idParamTblAtlzCad, imovelAtlzCad, null);
				}
				return false;

			}

			// 4.2
			Collection<Integer> subcategoriasAtlzCad = this.repositorioCadastro
					.obterSubcategoriaAtualizacaoCadastral(imovelAtlzCad
							.getId());

			Integer idSubcategoriaAtlzCad = (Integer) Util
					.retonarObjetoDeColecao(subcategoriasAtlzCad);

			if (!idSubcategoriaImovel.equals(idSubcategoriaAtlzCad)) {
				// 4.2.1
				boolean alteraValorFaturado = this.alteraValorFaturado(imovel,
						imovelAtlzCad.getId());
				if (alteraValorFaturado) {
					// valor da conta do GSAN diferente da conta do Ambiente
					// Virtual 2
					this.inserirRetornoAtualizacaoCadastralDM(
							imovel.getId(),
							idCliente,
							AtributoAtualizacaoCadastralDM.CATEGORIA_SUBCATEGORIA,
							RetornoAtualizacaoCadastralDM.SITUACAO_PENDENTE,
							MensagemAtualizacaoCadastralDM.ALTERACAO_CATEGORIA_NAO_AUTORIZADA,
							idParamTblAtlzCad, imovelAtlzCad, null);
					return false;
				}
			}
		} catch (ErroRepositorioException e) {
			e.printStackTrace();
			throw new ControladorException("erro.sistema", e);
		}

		return retorno;
	}

	/**
	 * [UC1290] Inserir ou Atualizar Imóvel Atualização Cadastral [SB0002]
	 * Validar Atributo Ligacao de Agua
	 * 
	 * @author André Miranda
	 * @since 13/10/2014
	 */
	public boolean validarAtributoLigacaoAgua(Imovel imovel, Integer idCliente,
			Integer idParamTblAtlzCad,
			ImovelAtualizacaoCadastralDM imovelAtlzCad,
			Collection<ParametrosTransacaoBatchHelper> colecaoHelper)
			throws ControladorException {
		boolean retorno = true;

		// 1 Pesquisar a Situação da Ligação de Água na base de dados do GSAN
		LigacaoAguaSituacao ligacaoImovel = imovel.getLigacaoAguaSituacao();

		// 2 Pesquisar a Situação da Ligação de Água na base de dados do
		// Ambiente Virtual
		LigacaoAguaSituacao ligacaoAtlzCad = imovelAtlzCad
				.getLigacaoAguaSituacao();

		// 3
		if (ligacaoImovel.getId().equals(LigacaoAguaSituacao.CORTADO)
				&& ligacaoAtlzCad.getId().equals(LigacaoAguaSituacao.LIGADO)) {
			// 3.1 [SB0017] Alterar situação da ligação de água de CORTADO para
			// LIGADO
			alterarSituacaoLigacaoAguaCortadoParaLigado(imovel);

			// 3.2 [SB0006] Inserir Registro no retorno da Atualizacao Cadastral
			this.inserirRetornoAtualizacaoCadastralDM(imovel.getId(),
					idCliente,
					AtributoAtualizacaoCadastralDM.SITUACAO_LIGACAO_AGUA,
					RetornoAtualizacaoCadastralDM.SITUACAO_ATUALIZADO,
					MensagemAtualizacaoCadastralDM.ATUALIZACAO_COM_SUCESSO,
					idParamTblAtlzCad, imovelAtlzCad, null);

			// 3.3
			LigacaoEsgotoSituacao ligacaoEsgoto = imovel
					.getLigacaoEsgotoSituacao();
			if (ligacaoEsgoto.getId().equals(LigacaoEsgotoSituacao.CORTADO)) {
				// 3.3.1 [SB0018] Alterar situação da ligação de esgoto de
				// CORTADO para LIGADO
				alterarSituacaoLigacaoEsgotoCortadoParaLigado(imovel);

				// 3.3.2 [SB0006] Inserir Registro no retorno da Atualizacao
				// Cadastral
				this.inserirRetornoAtualizacaoCadastralDM(imovel.getId(),
						idCliente,
						AtributoAtualizacaoCadastralDM.SITUACAO_LIGACAO_ESGOTO,
						RetornoAtualizacaoCadastralDM.SITUACAO_ATUALIZADO,
						MensagemAtualizacaoCadastralDM.ATUALIZACAO_COM_SUCESSO,
						idParamTblAtlzCad, imovelAtlzCad, null);
			}
		}
		// 4.1
		else if (!ligacaoImovel.getId().equals(ligacaoAtlzCad.getId())) {
			// 4.1.1
			retorno = false;

			// 4.1.2 [SB0006] Inserir Registro no retorno da Atualizacao
			// Cadastral
			this.inserirRetornoAtualizacaoCadastralDM(
					imovel.getId(),
					idCliente,
					AtributoAtualizacaoCadastralDM.SITUACAO_LIGACAO_AGUA,
					RetornoAtualizacaoCadastralDM.SITUACAO_PENDENTE,
					MensagemAtualizacaoCadastralDM.ALTERACAO_LIGACAO_AGUA_NAO_AUTORIZADA,
					idParamTblAtlzCad, imovelAtlzCad, null);
		}

		return retorno;
	}

	/**
	 * [UC1290] Inserir ou Atualizar Imóvel Atualização Cadastral [SB0003]
	 * Validar Atributo Economias
	 * 
	 * @author André Miranda
	 * @since 13/10/2014
	 */
	public boolean validarAtributosEconomias(Imovel imovel,
			ImovelAtualizacaoCadastralDM imovelAtlzCad, Integer idCliente,
			Integer idParamTblAtlzCad) throws ControladorException {
		boolean retorno = true;

		try {
			// 1. Pesquisar a Quantidade de Economias do imóvel na base de dados
			// do GSAN
			Short qtdEconomiasImovel = imovel.getQuantidadeEconomias();

			// 2. Pesquisar a Quantidade de Economias do imóvel na base de dados
			// do Amb. Virtual 2
			Short qtdEconomiasAtlzCad = repositorioCadastro
					.obterQuantidadeEconomiaAtualizacaoCadastralDM(imovelAtlzCad
							.getId());

			// 3
			if (!qtdEconomiasImovel.equals(qtdEconomiasAtlzCad)) {
				retorno = false;

				// [SB0006] Inserir Registro no retorno da Atualizacao Cadastral
				this.inserirRetornoAtualizacaoCadastralDM(
						imovel.getId(),
						idCliente,
						AtributoAtualizacaoCadastralDM.ECONOMIA,
						RetornoAtualizacaoCadastralDM.SITUACAO_PENDENTE,
						MensagemAtualizacaoCadastralDM.ALTERACAO_NUMERO_ECONOMIAS_NAO_AUTORIZADA,
						idParamTblAtlzCad, imovelAtlzCad, null);
			}
		} catch (ErroRepositorioException e) {
			e.printStackTrace();
			throw new ControladorException("erro.sistema", e);
		}

		return retorno;
	}

	/**
	 * [UC1290] Inserir ou Atualizar Imóvel Atualização Cadastral [SB0004]
	 * Atualizar Categoria/Subcategoria e Economia do Imóvel
	 * 
	 * @author André Miranda
	 * @since 13/10/2014
	 * 
	 * @param imovel
	 * @param imovelAtlzCad
	 * @param idParamTblAtlzCad
	 * @throws ControladorException
	 */
	private void atualizarSubcategoriaImovel(Imovel imovel,
			ImovelAtualizacaoCadastralDM imovelAtlzCad,
			Integer idParamTblAtlzCad,
			Collection<ParametrosTransacaoBatchHelper> colecaoHelper)
			throws ControladorException {
		try {
			FiltroImovelSubcategoriaAtualizacaoCadastralDM filtro = new FiltroImovelSubcategoriaAtualizacaoCadastralDM();
			filtro.adicionarParametro(new ParametroSimples(
					FiltroImovelSubcategoriaAtualizacaoCadastralDM.ID_IMOVEL_ATUALIZACAO_CADASTRAL,
					imovelAtlzCad.getId()));

			Collection<ImovelSubcategoriaAtualizacaoCadastralDM> colecaoSubcategoria = repositorioUtil
					.pesquisar(filtro,
							ImovelSubcategoriaAtualizacaoCadastralDM.class
									.getName());

			if (colecaoSubcategoria == null || colecaoSubcategoria.isEmpty()) {
				return;
			}

			ImovelSubcategoriaAtualizacaoCadastralDM subcategoria = (ImovelSubcategoriaAtualizacaoCadastralDM) Util
					.retonarObjetoDeColecao(colecaoSubcategoria);

			Set<ImovelSubcategoria> subcategorias = imovel
					.getImovelSubcategorias();
			if (subcategorias.isEmpty()) {
				return;
			}

			ImovelSubcategoria imovelSubcategoria = subcategorias.iterator()
					.next();

			Integer idSubcategoriaAtlzCad = subcategoria.getSubcategoria()
					.getId();
			Integer idSubcategoriaImovel = imovelSubcategoria.getComp_id()
					.getSubcategoria().getId();

			if (!idSubcategoriaImovel.equals(idSubcategoriaAtlzCad)) {
				// imovelSubcategoria.getComp_id().setSubcategoria(subcategoria.getSubcategoria());
				// repositorioUtil.atualizar(imovelSubcategoria);
				repositorioCadastro.atualizarChaveSubcategoriaImovel(
						imovelSubcategoria.getComp_id(), idSubcategoriaAtlzCad);

				// registrar transação da subcategoria principal do imovel
				if (!imovel.getSubCategoriaPrincipalId().equals(
						idSubcategoriaAtlzCad)) {
					ParametrosTransacaoBatchHelper SubCategoriaPrincipalTransacao = new ParametrosTransacaoBatchHelper(
							String.valueOf(imovel.getSubCategoriaPrincipalId()),
							String.valueOf(idSubcategoriaAtlzCad),
							TabelaColuna.SUBCATEGORIA_TABELA_IMOVEL);
					colecaoHelper.add(SubCategoriaPrincipalTransacao);
				}

				imovel.setSubCategoriaPrincipalId(idSubcategoriaAtlzCad);
				repositorioUtil.atualizar(imovel);

				this.inserirRetornoAtualizacaoCadastralDM(imovel.getId(), null,
						AtributoAtualizacaoCadastralDM.CATEGORIA_SUBCATEGORIA,
						RetornoAtualizacaoCadastralDM.SITUACAO_ATUALIZADO,
						MensagemAtualizacaoCadastralDM.ATUALIZACAO_COM_SUCESSO,
						idParamTblAtlzCad, imovelAtlzCad, null);

			}
		} catch (ErroRepositorioException e) {
			e.printStackTrace();
			throw new ControladorException("erro.sistema", e);
		}
	}

	/**
	 * [UC1290] Inserir ou Atualizar Imóvel Atualização Cadastral [SB0005]
	 * Validar Atualização de Inscrição
	 * 
	 * @author André Miranda
	 * @since 13/10/2014
	 */
	public boolean validarInscricaoImovelAtualizacaoCadastral(Imovel imovel,
			Integer idCliente, Integer idParamTblAtlzCad,
			ImovelAtualizacaoCadastralDM imovelAtlzCad,
			SistemaParametro sistemaParametro) throws ControladorException {
		boolean retorno = true;
		SetorComercial setorComercial = null;

		try {
			// 3. Caso a Inscrição do Imóvel na base de dados do GSAN for
			// diferente da Inscrição do Imóvel na base de dados do Ambiente
			// Virtual 2
			if (!imovel.getLocalidade().getId()
					.equals(imovelAtlzCad.getLocalidade().getId())
					|| imovel.getSetorComercial().getCodigo() != imovelAtlzCad
							.getCodigoSetorComercial().intValue()
					|| imovel.getQuadra().getNumeroQuadra() != imovelAtlzCad
							.getNumeroQuadra().intValue()
					|| imovel.getLote() != imovelAtlzCad.getNumeroLote()
							.shortValue()
					|| imovel.getSubLote() != imovelAtlzCad.getNumeroSubLote()
							.shortValue()) {

				// verificar inscrição em duplicidade no GSAN
				DadosImovelPreGsanHelper helper = new DadosImovelPreGsanHelper();
				helper.setIdLocalidade(imovelAtlzCad.getLocalidade().getId()
						.toString());
				helper.setCodigoSetorComercial(imovelAtlzCad
						.getCodigoSetorComercial().toString());
				helper.setNumeroQuadra(imovelAtlzCad.getNumeroQuadra()
						.toString());
				helper.setNumeroLote(imovelAtlzCad.getNumeroLote().toString());
				helper.setNumeroSubLote(imovelAtlzCad.getNumeroSubLote()
						.toString());

				if (this.repositorioImovel
						.verificarImovelInscricaoDuplicidadeGsan(helper)) {
					// [SB0006] Inserir Registro no retorno da Atualizacao
					// Cadastral
					inserirRetornoAtualizacaoCadastralDM(
							imovel.getId(),
							idCliente,
							AtributoAtualizacaoCadastralDM.INSCRICAO,
							RetornoAtualizacaoCadastralDM.SITUACAO_PENDENTE,
							MensagemAtualizacaoCadastralDM.IMOVEL_INSCRICAO_EM_DUPLICIDADE,
							idParamTblAtlzCad, imovelAtlzCad, null);

					return false;
				}

				getControladorImovel()
						.verificarExistenciaAlteracaoInscricaoPendenteImovel(
								imovel);

				setorComercial = repositorioCadastro.pesquisarSetorComercial(
						imovelAtlzCad.getLocalidade().getId(),
						imovelAtlzCad.getCodigoSetorComercial());
				Quadra quadra = getControladorLocalidade()
						.obterQuadraSetorComercial(setorComercial.getId(),
								imovelAtlzCad.getNumeroQuadra());

				// [FS0039] Verificar Duplicidade de Inscricao
				ImovelInscricaoAlterada imovelInscricaoAlteradaDuplicado = getControladorImovel()
						.verificarDuplicidadeImovelInscricaoAlterada(
								imovelAtlzCad.getLocalidade().getId(),
								setorComercial.getId(), quadra.getId(), null,
								imovelAtlzCad.getNumeroLote(),
								imovelAtlzCad.getNumeroSubLote());

				if (imovelInscricaoAlteradaDuplicado != null
						&& imovelInscricaoAlteradaDuplicado.getId() != null) {
					// [SB0006] Inserir Registro no retorno da Atualizacao
					// Cadastral
					inserirRetornoAtualizacaoCadastralDM(
							imovel.getId(),
							idCliente,
							AtributoAtualizacaoCadastralDM.INSCRICAO,
							RetornoAtualizacaoCadastralDM.SITUACAO_PENDENTE,
							MensagemAtualizacaoCadastralDM.IMOVEL_INSCRICAO_EM_DUPLICIDADE,
							idParamTblAtlzCad, imovelAtlzCad, null);

					retorno = false;

				} else {

					// [SB0006] Inserir Registro no retorno da Atualizacao
					// Cadastral
					inserirRetornoAtualizacaoCadastralDM(
							imovel.getId(),
							idCliente,
							AtributoAtualizacaoCadastralDM.INSCRICAO,
							RetornoAtualizacaoCadastralDM.PENDENTE_POR_INSCRICAO,
							MensagemAtualizacaoCadastralDM.ATUALIZACAO_PENDENTE_POR_INSCRICAO,
							idParamTblAtlzCad, imovelAtlzCad, null);

				}
			}

		} catch (ErroRepositorioException e) {
			e.printStackTrace();
			throw new ControladorException("erro.sistema", e);
		}

		return retorno;
	}

	/**
	 * [UC1290] Inserir ou Atualizar Imóvel Atualização Cadastral [SB0007]
	 * Atualizar Imóvel
	 * 
	 * @author André Miranda
	 * @since 13/10/2014
	 * 
	 * @param imovel
	 * @param imovelAtlzCad
	 * @param idParamTblAtlzCad
	 * @param clienteValido
	 * @throws ControladorException
	 */
	public void atualizarImovelAtualizacaoCadastral(Imovel imovel,
			ImovelAtualizacaoCadastralDM imovelAtlzCad,
			Integer idParamTblAtlzCad, boolean clienteValido,
			Collection<ParametrosTransacaoBatchHelper> colecaoHelper)
			throws ControladorException {
		try {
			// Transacao - Numero do Imóvel
			if (!imovel.getNumeroImovel().equals(
					imovelAtlzCad.getNumeroImovel())) {
				colecaoHelper.add(new ParametrosTransacaoBatchHelper(imovel
						.getNumeroImovel(), imovelAtlzCad.getNumeroImovel(),
						TabelaColuna.NUMERO_IMOVEL_TABELA_IMOVEL));
			}

			if (imovelAtlzCad.getObservacao() != null
					&& !imovelAtlzCad.getObservacao().isEmpty()) {
				imovel.setInformacoesComplementares(imovelAtlzCad
						.getObservacao());
			}

			if (imovelAtlzCad.getPavimentoCalcada() != null
					&& imovelAtlzCad.getPavimentoCalcada().getId() != null) {
				PavimentoCalcada pavimentoCalcada = new PavimentoCalcada();
				pavimentoCalcada.setId(imovelAtlzCad.getPavimentoCalcada()
						.getId());
				imovel.setPavimentoCalcada(pavimentoCalcada);
			}
			// else {
			// // [SB0006] Inserir Registro no retorno da Atualizacao Cadastral
			// this.inserirRetornoAtualizacaoCadastralDM(imovel.getId(), null,
			// AtributoAtualizacaoCadastralDM.PAVIMENTO_CALCADA,
			// RetornoAtualizacaoCadastralDM.SITUACAO_PENDENTE,
			// MensagemAtualizacaoCadastralDM.INFORMACAO_OBRIGATORIA,
			// idParamTblAtlzCad, imovelAtlzCad, null);
			// }

			if (imovelAtlzCad.getPavimentoRua() != null
					&& imovelAtlzCad.getPavimentoRua().getId() != null) {
				PavimentoRua pavimentoRua = new PavimentoRua();
				pavimentoRua.setId(imovelAtlzCad.getPavimentoRua().getId());
				imovel.setPavimentoRua(pavimentoRua);
			}
			// else {
			// // [SB0006] Inserir Registro no retorno da Atualizacao Cadastral
			// this.inserirRetornoAtualizacaoCadastralDM(imovel.getId(), null,
			// AtributoAtualizacaoCadastralDM.PAVIMENTO_RUA,
			// RetornoAtualizacaoCadastralDM.SITUACAO_PENDENTE,
			// MensagemAtualizacaoCadastralDM.INFORMACAO_OBRIGATORIA,
			// idParamTblAtlzCad, imovelAtlzCad, null);
			// }

			if (imovelAtlzCad.getFonteAbastecimento() != null
					&& imovelAtlzCad.getFonteAbastecimento().getId() != null) {
				FonteAbastecimento fonteAbastecimento = new FonteAbastecimento();
				fonteAbastecimento.setId(imovelAtlzCad.getFonteAbastecimento()
						.getId());
				imovel.setFonteAbastecimento(fonteAbastecimento);
			}

			if (imovelAtlzCad.getNumeroMedidorEnergia() != null) {
				imovel.setNumeroMedidorEnergia(imovelAtlzCad
						.getNumeroMedidorEnergia());
			}

			if (imovelAtlzCad.getOcorrenciaHidrometro() != null) {
				imovel.setLeituraAnormalidade(imovelAtlzCad
						.getOcorrenciaHidrometro());
			}

			// TODO: Verificar se isso ainda é pra ser feito, não está no UC
			// if (clienteValido) {
			// Collection<ClienteAtualizacaoCadastralDM>
			// colecaoClienteAtualizacaoCadastral = repositorioCadastro.
			// pesquisarClienteAtualizacaoCadastral(imovelAtlzCad.getId(),
			// ClienteRelacaoTipo.USUARIO.intValue(), false);
			//
			// for (ClienteAtualizacaoCadastralDM clienteAtualizacaoCadastral :
			// colecaoClienteAtualizacaoCadastral) {
			// Collection colecaoClienteImovel =
			// this.getControladorCliente().obterClienteImovelporRelacaoTipo(imovel.getId(),
			// ClienteRelacaoTipo.USUARIO.intValue());
			// if (colecaoClienteImovel != null &&
			// !colecaoClienteImovel.isEmpty()) {
			// ClienteImovel clienteImovel = (ClienteImovel)
			// Util.retonarObjetoDeColecao(colecaoClienteImovel);
			//
			// if
			// (clienteImovel.getCliente().getId().equals(clienteAtualizacaoCadastral.getIdCliente())
			// &&
			// clienteAtualizacaoCadastral.getDataRelacaoFim() != null ) {
			// clienteImovel.setDataFimRelacao(new Date());
			//
			// ClienteImovelFimRelacaoMotivo clienteImovelFimRelacaoMotivo = new
			// ClienteImovelFimRelacaoMotivo();
			// clienteImovelFimRelacaoMotivo.setId(ClienteImovelFimRelacaoMotivo.ATU_CADASTRAL);
			// clienteImovel.setClienteImovelFimRelacaoMotivo(clienteImovelFimRelacaoMotivo);
			// clienteImovel.setUltimaAlteracao(new Date());
			//
			// ClienteRelacaoTipo clienteRelacaoTipo = new ClienteRelacaoTipo();
			// clienteRelacaoTipo.setId(clienteAtualizacaoCadastral.getIdClienteRelacaoTipo());
			// clienteImovel.setClienteRelacaoTipo(clienteRelacaoTipo);
			// repositorioUtil.atualizar(clienteImovel);
			// }
			// } else {
			// ClienteImovel clienteImovel = new ClienteImovel();
			// clienteImovel.setDataInicioRelacao(new Date());
			//
			// ClienteRelacaoTipo clienteRelacaoTipo = new ClienteRelacaoTipo();
			// clienteRelacaoTipo.setId(clienteAtualizacaoCadastral.getIdClienteRelacaoTipo());
			// clienteImovel.setClienteRelacaoTipo(clienteRelacaoTipo);
			//
			// Cliente cliente = new Cliente();
			// cliente.setId(clienteAtualizacaoCadastral.getIdCliente());
			// clienteImovel.setCliente(cliente);
			// clienteImovel.setImovel(imovel);
			// clienteImovel.setUltimaAlteracao(new Date());
			//
			// clienteImovel.setIndicadorNomeConta(ConstantesSistema.SIM);
			// repositorioUtil.inserir(clienteImovel);
			// }
			// }
			// }

			SituacaoAtualizacaoCadastral situacao = new SituacaoAtualizacaoCadastral();
			situacao.setId(SituacaoAtualizacaoCadastral.COLETADO);
			imovel.setSituacaoAtualizacaoCadastral(situacao);

			imovel.setComplementoEndereco(imovelAtlzCad
					.getComplementoEndereco());
			imovel.setNumeroImovel(imovelAtlzCad.getNumeroImovel());
			imovel.setNumeroMorador(imovelAtlzCad.getNumeroMorador());
			imovel.setUltimaAlteracao(new Date());
			imovel.setDataAtualizacaoCadastral(new Date());

			if (imovelAtlzCad.getCoordenadaX() != null) {
				imovel.setCoordenadaX(imovelAtlzCad.getCoordenadaX());
			}

			if (imovelAtlzCad.getCoordenadaY() != null) {
				imovel.setCoordenadaY(imovelAtlzCad.getCoordenadaY());
			}

			repositorioUtil.atualizar(imovel);
		} catch (Exception e) {
			e.printStackTrace();
			throw new ControladorException("erro.sistema", e);
		}
	}

	/**
	 * [UC1290] Inserir ou Atualizar Imóvel Atualização Cadastral [SB0008]
	 * Validar Cliente Usuário do Imóvel
	 * 
	 * @author André Miranda
	 * @since 17/10/2014
	 */
	public boolean validarClienteUsuarioImovelAtualizacaoCadastral(
			Imovel imovel, ImovelAtualizacaoCadastralDM imovelAtlzCad,
			Integer idCliente, Integer idParamTblAtlzCad, Integer idCatAtlzCad,
			String cpfCnpj) throws ControladorException {
		boolean retorno = true;

		if (cpfCnpj == null) {
			return retorno;
		}

		if ((idCatAtlzCad.equals(Categoria.COMERCIAL)
				|| idCatAtlzCad.equals(Categoria.INDUSTRIAL) || idCatAtlzCad
					.equals(Categoria.PUBLICO)) && Util.validacaoCPF(cpfCnpj)) {
			// 1.1
			// [SB0006] Inserir Registro no retorno da Atualizacao Cadastral
			inserirRetornoAtualizacaoCadastralDM(
					imovel.getId(),
					idCliente,
					AtributoAtualizacaoCadastralDM.CATEGORIA_SUBCATEGORIA,
					RetornoAtualizacaoCadastralDM.SITUACAO_PENDENTE,
					MensagemAtualizacaoCadastralDM.IMOVEL_CATEGORIA_COM_PUB_IND_ASSOCIADO_CPF,
					idParamTblAtlzCad, imovelAtlzCad, null);

			retorno = false;
		} else if (idCatAtlzCad.equals(Categoria.RESIDENCIAL)
				&& Util.validacaoCNPJ(cpfCnpj)) {
			// 1.2
			// [SB0006] Inserir Registro no retorno da Atualizacao Cadastral
			inserirRetornoAtualizacaoCadastralDM(
					imovel.getId(),
					idCliente,
					AtributoAtualizacaoCadastralDM.CATEGORIA_SUBCATEGORIA,
					RetornoAtualizacaoCadastralDM.SITUACAO_PENDENTE,
					MensagemAtualizacaoCadastralDM.IMOVEL_CATEGORIA_RES_ASSOCIADO_CNPJ,
					idParamTblAtlzCad, imovelAtlzCad, null);

			retorno = false;
		}

		return retorno;
	}

	/**
	 * [UC1290] Inserir ou Atualizar Imóvel Atualização Cadastral [SB0009]
	 * Validar Atualização de Logradouro
	 * 
	 * @author André Miranda, Vivianne Sousa
	 * @since 13/10/2014 , 20/11/2014
	 */
	public boolean validarAtualizacaoLogradouroAtualizacaoCadastral(
			Imovel imovel, Integer idCliente, Integer idParamTblAtlzCad,
			ImovelAtualizacaoCadastralDM imovelAtlzCad,
			Collection<ParametrosTransacaoBatchHelper> colecaoTransacaoHelper)
			throws ControladorException {
		boolean retorno = true;
		boolean inserirRetornoPendente = false;
		boolean inserirRetornoSucesso = false;

		Long idLogradouro = imovel.getLogradouroBairro().getLogradouro()
				.getId().longValue();
		Integer cdCep = imovel.getLogradouroCep().getCep().getCodigo();
		Integer idBairro = imovel.getLogradouroBairro().getBairro().getId();

		try {
			// Verificar se logradouros são diferentes
			if (!idLogradouro.equals(imovelAtlzCad.getIdLogradouro())) {
				inserirRetornoPendente = true;
			} else {
				// 4.1 Verificar se CEPs são diferentes
				if (!cdCep.equals(imovelAtlzCad.getCodigoCep())) {
					FiltroCep filtro = new FiltroCep();
					filtro.adicionarParametro(new ParametroSimples(
							FiltroCep.CODIGO, imovelAtlzCad.getCodigoCep()
									.toString()));
					Collection<Cep> colecaoCep = repositorioUtil.pesquisar(
							filtro, Cep.class.getName());

					if (colecaoCep == null || colecaoCep.isEmpty()) {
						inserirRetornoPendente = true;
					} else {
						Cep cep = (Cep) Util.retonarObjetoDeColecao(colecaoCep);

						// [SB0019] Atualizar CEP do imóvel
						atualizarCepImovelAtualizacaoCadastral(imovel, cep,
							imovel.getLogradouroBairro().getLogradouro(), colecaoTransacaoHelper);
						inserirRetornoSucesso = true;
					}
				}

				// 4.2 Verificar se Bairros são diferentes
				if (!idBairro.equals(imovelAtlzCad.getIdBairro())) {

					FiltroBairro filtro = new FiltroBairro();
					filtro.adicionarParametro(new ParametroSimples(
							FiltroBairro.ID, imovelAtlzCad.getIdBairro()));
					Collection<Bairro> colecaoBairro = repositorioUtil
							.pesquisar(filtro, Bairro.class.getName());

					if (colecaoBairro == null || colecaoBairro.isEmpty()) {
						inserirRetornoPendente = true;
					} else {
						Bairro bairro = (Bairro) Util
								.retonarObjetoDeColecao(colecaoBairro);

						// [SB0021] Atualizar Bairro do imóvel
						atualizarBairroImovelAtualizacaoCadastral(imovel,
								bairro, imovel.getLogradouroBairro().getLogradouro(),
								colecaoTransacaoHelper);
						inserirRetornoSucesso = true;
					}
				}
			}

			if (inserirRetornoPendente) {
				// [SB0006] Inserir Registro no retorno da Atualizacao Cadastral
				this.inserirRetornoAtualizacaoCadastralDM(
						imovel.getId(),
						idCliente,
						AtributoAtualizacaoCadastralDM.LOGRADOURO,
						RetornoAtualizacaoCadastralDM.PENDENTE_POR_LOGRADOURO,
						MensagemAtualizacaoCadastralDM.ATUALIZACAO_PENDENTE_POR_LOGRADOURO,
						idParamTblAtlzCad, imovelAtlzCad, null);
				retorno = false;
			}

			if (inserirRetornoSucesso) {
				// [SB0006] Inserir Registro no retorno da Atualizacao Cadastral
				this.inserirRetornoAtualizacaoCadastralDM(imovel.getId(),
						idCliente, AtributoAtualizacaoCadastralDM.LOGRADOURO,
						RetornoAtualizacaoCadastralDM.SITUACAO_ATUALIZADO,
						MensagemAtualizacaoCadastralDM.ATUALIZACAO_COM_SUCESSO,
						idParamTblAtlzCad, imovelAtlzCad, null);
			}

		} catch (ErroRepositorioException e) {
			e.printStackTrace();
			sessionContext.setRollbackOnly();
			throw new ControladorException("erro.sistema", e);
		}

		return retorno;
	}

	/**
	 * [UC1290] Inserir ou Atualizar Imóvel Atualização Cadastral [SB0010]
	 * Validar Atributo Ligacao de Esgoto
	 * 
	 * @author André Miranda
	 * @since 13/10/2014
	 */
	public boolean validarAtributoLigacaoEsgoto(Imovel imovel,
			Integer idCliente, Integer idParamTblAtlzCad,
			ImovelAtualizacaoCadastralDM imovelAtlzCad,
			Collection<ParametrosTransacaoBatchHelper> colecaoHelper)
			throws ControladorException {
		boolean retorno = true;

		// 1 Pesquisar a Situação da Ligação de Água na base de dados do GSAN
		LigacaoEsgotoSituacao ligacaoImovel = imovel.getLigacaoEsgotoSituacao();

		// 2 Pesquisar a Situação da Ligação de Água na base de dados do
		// Ambiente Virtual
		LigacaoEsgotoSituacao ligacaoAtlzCad = imovelAtlzCad
				.getLigacaoEsgotoSituacao();

		// 3
		if (ligacaoImovel.getId().equals(LigacaoAguaSituacao.CORTADO)
				&& ligacaoAtlzCad.getId().equals(LigacaoAguaSituacao.LIGADO)) {
			// 3.1 [SB0018] Alterar situação da ligação de esgoto de CORTADO
			// para LIGADO
			alterarSituacaoLigacaoEsgotoCortadoParaLigado(imovel);

			// 3.3.2 [SB0006] Inserir Registro no retorno da Atualizacao
			// Cadastral
			this.inserirRetornoAtualizacaoCadastralDM(imovel.getId(),
					idCliente,
					AtributoAtualizacaoCadastralDM.SITUACAO_LIGACAO_ESGOTO,
					RetornoAtualizacaoCadastralDM.SITUACAO_ATUALIZADO,
					MensagemAtualizacaoCadastralDM.ATUALIZACAO_COM_SUCESSO,
					idParamTblAtlzCad, imovelAtlzCad, null);
		}
		// 4.1
		else if (!ligacaoImovel.getId().equals(ligacaoAtlzCad.getId())) {
			// 4.1.1
			retorno = false;

			// 4.1.2 [SB0006] Inserir Registro no retorno da Atualizacao
			// Cadastral
			this.inserirRetornoAtualizacaoCadastralDM(
					imovel.getId(),
					idCliente,
					AtributoAtualizacaoCadastralDM.SITUACAO_LIGACAO_ESGOTO,
					RetornoAtualizacaoCadastralDM.SITUACAO_PENDENTE,
					MensagemAtualizacaoCadastralDM.ALTERACAO_LIGACAO_ESGOTO_NAO_AUTORIZADA,
					idParamTblAtlzCad, imovelAtlzCad, null);
		}

		return retorno;
	}

	/**
	 * [UC1290] Inserir ou Atualizar Imóvel Atualização Cadastral [SB0011]
	 * Associar cliente usuário desconhecido
	 * 
	 * @author André Miranda
	 * @since 15/10/2014
	 */
	public void associarClienteUsuarioDesconhecido(Imovel imovel)
			throws ControladorException {
		try {
			SistemaParametro sistemaParametro = repositorioUtil
					.pesquisarParametrosDoSistema();

			ClienteRelacaoTipo relacaoTipo = new ClienteRelacaoTipo(
					ClienteRelacaoTipo.USUARIO.intValue());

			ClienteImovel clienteImovel = new ClienteImovel();
			clienteImovel.setImovel(imovel);
			clienteImovel.setCliente(sistemaParametro
					.getClienteUsuarioDesconhecido());
			clienteImovel.setDataInicioRelacao(new Date());
			clienteImovel.setDataFimRelacao(null);
			clienteImovel.setClienteImovelFimRelacaoMotivo(null);
			clienteImovel.setUltimaAlteracao(new Date());
			clienteImovel.setClienteRelacaoTipo(relacaoTipo);
			clienteImovel.setIndicadorNomeConta(ConstantesSistema.SIM);

			repositorioUtil.inserir(clienteImovel);
		} catch (ErroRepositorioException e) {
			e.printStackTrace();
			sessionContext.setRollbackOnly();
			throw new ControladorException("erro.sistema", e);
		}
	}

	/**
	 * [UC1290] Inserir ou Atualizar Imóvel Atualização Cadastral [SB0013]
	 * Inserir/Atualizar Cliente
	 * 
	 * Usado pelo método inserirImovel
	 * 
	 * @author André Miranda
	 * @since 15/10/2014
	 */
	public void inserirAtualizarCliente(Imovel imovel,
			ImovelAtualizacaoCadastralDM imovelAtlzCad,
			Integer idParamTblAtlzCad, LigacaoAguaSituacao ligacaoAguaSituacao,
			LigacaoEsgotoSituacao ligacaoEsgotoSituacao,
			SistemaParametro sistemaParametro) throws ControladorException {
		try {
			Collection<ClienteAtualizacaoCadastralDM> colecaoClienteAtlzCad = repositorioCadastro
					.pesquisarClienteAtualizacaoCadastralDM(
							imovelAtlzCad.getId(), null);

			if (colecaoClienteAtlzCad == null
					|| colecaoClienteAtlzCad.isEmpty()) {
				// 1.1 [SB0011] Associar cliente usuário desconhecido
				associarClienteUsuarioDesconhecido(imovel);
			} else {
				// 1.2
				Collection<ClienteImovel> colecaoClienteImovel = getControladorCliente()
						.obterClienteImovelporRelacaoTipo(imovel.getId(),
								ClienteRelacaoTipo.USUARIO.intValue());

				ClienteImovel clienteImovel = (ClienteImovel) Util
						.retonarObjetoDeColecao(colecaoClienteImovel);
				ClienteAtualizacaoCadastralDM clienteAtualizacaoCadastral = (ClienteAtualizacaoCadastralDM) Util
						.retonarObjetoDeColecao(colecaoClienteAtlzCad);

				ParametroTabelaAtualizacaoCadastralDM paramTblAtlzCad = new ParametroTabelaAtualizacaoCadastralDM();
				paramTblAtlzCad.setId(idParamTblAtlzCad);
				this.atualizarClienteAtualizacaoCadastral(imovelAtlzCad,
						clienteAtualizacaoCadastral, paramTblAtlzCad, imovel,
						ligacaoAguaSituacao, ligacaoEsgotoSituacao,
						sistemaParametro);
			}
		} catch (ErroRepositorioException e) {
			e.printStackTrace();
			sessionContext.setRollbackOnly();
			throw new ControladorException("erro.sistema", e);
		}
	}

	/**
	 * [UC1290] Inserir ou Atualizar Imóvel Atualização Cadastral [SB0014]
	 * Inserir Imóvel
	 * 
	 * @author André Miranda
	 * @since 14/10/2014
	 */
	public Imovel inserirImovel(ImovelAtualizacaoCadastralDM imovelAtlzCad,
			Imovel imovel, Integer idParamTblAtlzCad,
			Collection<ParametrosTransacaoBatchHelper> colecaoHelper,
			SistemaParametro sistemaParametro) throws ControladorException {
		try {
			// 1.1
			imovel = new Imovel();
			imovel.setId(imovelAtlzCad.getIdImovel());

			// Localidade
			Localidade localidade = new Localidade();
			localidade.setId(imovelAtlzCad.getLocalidade().getId());
			imovel.setLocalidade(localidade);

			colecaoHelper.add(new ParametrosTransacaoBatchHelper(null, String
					.valueOf(localidade.getId()),
					TabelaColuna.LOCALIDADE_TABELA_IMOVEL));

			// Setor Comercial
			FiltroSetorComercial filtroSetorComercial = new FiltroSetorComercial();
			filtroSetorComercial.adicionarParametro(new ParametroSimples(
					FiltroSetorComercial.ID_LOCALIDADE, imovelAtlzCad
							.getLocalidade().getId()));
			filtroSetorComercial.adicionarParametro(new ParametroSimples(
					FiltroSetorComercial.CODIGO_SETOR_COMERCIAL, imovelAtlzCad
							.getCodigoSetorComercial()));
			Collection colecaoSetorComercial = getControladorUtil().pesquisar(
					filtroSetorComercial, SetorComercial.class.getName());
			SetorComercial setorComercial = (SetorComercial) Util
					.retonarObjetoDeColecao(colecaoSetorComercial);
			imovel.setSetorComercial(setorComercial);

			colecaoHelper.add(new ParametrosTransacaoBatchHelper(null, String
					.valueOf(setorComercial.getCodigo()),
					TabelaColuna.SETOR_COMERCIAL_TABELA_IMOVEL));

			// Quadra
			FiltroQuadra filtroQuadra = new FiltroQuadra();
			filtroQuadra.adicionarParametro(new ParametroSimples(
					FiltroQuadra.ID_LOCALIDADE, imovelAtlzCad.getLocalidade()
							.getId()));
			filtroQuadra.adicionarParametro(new ParametroSimples(
					FiltroQuadra.CODIGO_SETORCOMERCIAL, imovelAtlzCad
							.getCodigoSetorComercial()));
			filtroQuadra
					.adicionarParametro(new ParametroSimples(
							FiltroQuadra.NUMERO_QUADRA, imovelAtlzCad
									.getNumeroQuadra()));
			Collection colecaoQuadra = getControladorUtil().pesquisar(
					filtroQuadra, Quadra.class.getName());
			Quadra quadra = (Quadra) Util.retonarObjetoDeColecao(colecaoQuadra);
			imovel.setQuadra(quadra);

			colecaoHelper.add(new ParametrosTransacaoBatchHelper(null, String
					.valueOf(quadra.getNumeroQuadra()),
					TabelaColuna.QUADRA_TABELA_IMOVEL));

			// Lote
			imovel.setLote(imovelAtlzCad.getNumeroLote().shortValue());
			colecaoHelper
					.add(new ParametrosTransacaoBatchHelper(null, String
							.valueOf(imovel.getLote()),
							TabelaColuna.LOTE_TABELA_IMOVEL));

			// Sublote
			imovel.setSubLote(imovelAtlzCad.getNumeroSubLote().shortValue());
			colecaoHelper.add(new ParametrosTransacaoBatchHelper(null, String
					.valueOf(imovel.getSubLote()),
					TabelaColuna.SUBLOTE_TABELA_IMOVEL));

			// Numero Imovel
			imovel.setNumeroImovel(imovelAtlzCad.getNumeroImovel());
			colecaoHelper.add(new ParametrosTransacaoBatchHelper(null, imovel
					.getNumeroImovel(),
					TabelaColuna.NUMERO_IMOVEL_TABELA_IMOVEL));

			// Logradouro
			Logradouro logradouro = new Logradouro();
			logradouro.setId(imovelAtlzCad.getIdLogradouro().intValue());
			imovel.setLogradouro(logradouro);

			// Bairro
			Bairro bairro = new Bairro();
			bairro.setId(imovelAtlzCad.getIdBairro());
			imovel.setBairro(bairro);

			// Logradouro Bairro
			FiltroLogradouroBairro filtroLogradouroBairro = new FiltroLogradouroBairro();
			filtroLogradouroBairro.adicionarParametro(new ParametroSimples(
					FiltroLogradouroBairro.ID_BAIRRO, imovelAtlzCad
							.getIdBairro()));
			filtroLogradouroBairro.adicionarParametro(new ParametroSimples(
					FiltroLogradouroBairro.LOGRADOURO, imovelAtlzCad
							.getIdLogradouro()));

			Collection colecaoLogradouroBairro = getControladorUtil()
					.pesquisar(filtroLogradouroBairro,
							LogradouroBairro.class.getName());

			if (colecaoLogradouroBairro != null
					&& !colecaoLogradouroBairro.isEmpty()) {
				imovel.setLogradouroBairro((LogradouroBairro) Util
						.retonarObjetoDeColecao(colecaoLogradouroBairro));
			} else {
				LogradouroBairro logradouroBairro = new LogradouroBairro();
				logradouroBairro.setBairro(bairro);
				logradouroBairro.setLogradouro(logradouro);
				logradouroBairro.setUltimaAlteracao(new Date());

				Integer idLogradouroBairro = (Integer) this
						.getControladorUtil().inserir(logradouroBairro);
				logradouroBairro.setId(idLogradouroBairro);

				imovel.setLogradouroBairro(logradouroBairro);
			}

			// Logradouro Cep
			FiltroLogradouroCep filtroLogradouroCep = new FiltroLogradouroCep();
			filtroLogradouroCep.adicionarParametro(new ParametroSimples(
					FiltroLogradouroCep.CODIGO_CEP, imovelAtlzCad
							.getCodigoCep()));
			filtroLogradouroCep.adicionarParametro(new ParametroSimples(
					FiltroLogradouroCep.LOGRADOURO, imovelAtlzCad
							.getIdLogradouro()));

			Collection colecaoLogradouroCep = getControladorUtil().pesquisar(
					filtroLogradouroCep, LogradouroCep.class.getName());

			if (colecaoLogradouroCep != null && !colecaoLogradouroCep.isEmpty()) {
				imovel.setLogradouroCep((LogradouroCep) Util
						.retonarObjetoDeColecao(colecaoLogradouroCep));
			} else {
				FiltroCep filtroCep = new FiltroCep();
				filtroCep.adicionarParametro(new ParametroSimples(
						FiltroCep.CODIGO, imovelAtlzCad.getCodigoCep()));
				Collection colecaoCep = getControladorUtil().pesquisar(
						filtroCep, Cep.class.getName());

				Cep cep = new Cep();
				if (colecaoCep != null && !colecaoCep.isEmpty()) {
					cep = (Cep) Util.retonarObjetoDeColecao(colecaoCep);
				}

				LogradouroCep logradouroCep = new LogradouroCep();
				logradouroCep.setCep(cep);
				logradouroCep.setLogradouro(logradouro);
				logradouroCep.setUltimaAlteracao(new Date());
				logradouroCep.setIndicadorUso(ConstantesSistema.SIM);

				Integer idLogradouroCep = (Integer) this.getControladorUtil()
						.inserir(logradouroCep);
				logradouroCep.setId(idLogradouroCep);

				imovel.setLogradouroCep(logradouroCep);
			}

			// Consumo Tarifa
			ConsumoTarifa consumoTarifa = new ConsumoTarifa();
			consumoTarifa.setId(ConsumoTarifa.CONSUMO_NORMAL);
			imovel.setConsumoTarifa(consumoTarifa);

			// Imovel conta envio
			ImovelContaEnvio imovelContaEnvio = new ImovelContaEnvio();
			imovelContaEnvio.setId(ImovelContaEnvio.ENVIAR_IMOVEL);
			imovel.setImovelContaEnvio(imovelContaEnvio);

			// Situacao Atualizacao cadastral
			SituacaoAtualizacaoCadastral situacaoAtualizacaoCadastral = new SituacaoAtualizacaoCadastral();
			situacaoAtualizacaoCadastral
					.setId(SituacaoAtualizacaoCadastral.COLETADO);
			imovel.setSituacaoAtualizacaoCadastral(situacaoAtualizacaoCadastral);

			if (imovelAtlzCad.getObservacao() != null
					&& !imovelAtlzCad.getObservacao().isEmpty()) {
				imovel.setInformacoesComplementares(imovelAtlzCad
						.getObservacao());
			}

			if (imovelAtlzCad.getNumeroMedidorEnergia() != null) {
				imovel.setNumeroMedidorEnergia(imovelAtlzCad
						.getNumeroMedidorEnergia());
			}

			imovel.setComplementoEndereco(imovelAtlzCad
					.getComplementoEndereco());
			imovel.setPavimentoCalcada(imovelAtlzCad.getPavimentoCalcada());
			imovel.setPavimentoRua(imovelAtlzCad.getPavimentoRua());
			imovel.setFonteAbastecimento(imovelAtlzCad.getFonteAbastecimento());

			// -------------------------------------------------
			// Alterado por Vivianne Sousa - 09/02/2015
			LigacaoAguaSituacao ligacaoAguaSituacao = new LigacaoAguaSituacao();
			Short indicadorRedeAgua = repositorioCadastro
					.pesquisarIndicadorRedeAguaAtualizacaoCadastralDM(
							imovelAtlzCad.getId(),
							imovelAtlzCad.getCodigoSetorComercial(),
							imovelAtlzCad.getLocalidade().getId());

			// Caso para a quadra selecionada existe rede de agua
			if (indicadorRedeAgua.equals(Quadra.COM_REDE)
					|| indicadorRedeAgua.equals(Quadra.REDE_PARCIAL)) {
				// situação de ligação de agua é FACTIVEL
				ligacaoAguaSituacao.setId(LigacaoAguaSituacao.FACTIVEL);
			} else {
				// situação de ligação de agua é POTENCIAL
				ligacaoAguaSituacao.setId(LigacaoAguaSituacao.POTENCIAL);
			}
			imovel.setLigacaoAguaSituacao(ligacaoAguaSituacao);

			LigacaoEsgotoSituacao ligacaoEsgotoSituacao = new LigacaoEsgotoSituacao();
			Short indicadorRedeEsgoto = repositorioCadastro
					.pesquisarIndicadorRedeEsgotoAtualizacaoCadastralDM(
							imovelAtlzCad.getId(),
							imovelAtlzCad.getCodigoSetorComercial(),
							imovelAtlzCad.getLocalidade().getId());

			// Caso para a quadra selecionada existe rede de esgoto
			if (indicadorRedeEsgoto.equals(Quadra.COM_REDE)
					|| indicadorRedeEsgoto.equals(Quadra.REDE_PARCIAL)) {
				ligacaoEsgotoSituacao.setId(LigacaoEsgotoSituacao.FACTIVEL);
			} else {
				ligacaoEsgotoSituacao.setId(LigacaoEsgotoSituacao.POTENCIAL);
			}
			imovel.setLigacaoEsgotoSituacao(ligacaoEsgotoSituacao);
			// --------------------------------------------------

			imovel.setImovelPerfil(imovelAtlzCad.getImovelPerfil());
			imovel.setNumeroMorador(imovelAtlzCad.getNumeroMorador());
			imovel.setLeituraAnormalidade(imovelAtlzCad
					.getOcorrenciaHidrometro());
			imovel.setEnderecoReferencia(imovelAtlzCad.getEnderecoReferencia());

			imovel.setIndicadorEmissaoExtratoFaturamento(ConstantesSistema.NAO);
			imovel.setIndicadorDebitoConta(ConstantesSistema.NAO);
			imovel.setIndicadorExclusao(ConstantesSistema.NAO);
			imovel.setIndicadorImovelCondominio(ConstantesSistema.NAO);
			imovel.setIndicadorJardim(ConstantesSistema.NAO);
			imovel.setIndicadorVencimentoMesSeguinte(ConstantesSistema.NAO);
			imovel.setIndicadorNivelInstalacaoEsgoto(ConstantesSistema.NAO);
			imovel.setIndicadorImovelAreaComum(ConstantesSistema.NAO);
			imovel.setCategoriaPrincipalId(Categoria.RESIDENCIAL);
			imovel.setSubCategoriaPrincipalId(Subcategoria.RESIDENCIAL);
			imovel.setUltimaAlteracao(new Date());
			imovel.setDataAtualizacaoCadastral(new Date());

			imovel.setCoordenadaX(imovelAtlzCad.getCoordenadaX());
			imovel.setCoordenadaY(imovelAtlzCad.getCoordenadaY());

			getControladorImovel().inserirImovel(imovel);

			// 1.2 [SB0013] Inserir/Atualizar Cliente
			inserirAtualizarCliente(imovel, imovelAtlzCad, idParamTblAtlzCad,
					imovelAtlzCad.getLigacaoAguaSituacao(),
					imovelAtlzCad.getLigacaoEsgotoSituacao(), sistemaParametro);

			// 1.3 Inserir subcategorias
			FiltroImovelSubcategoriaAtualizacaoCadastralDM filtro = new FiltroImovelSubcategoriaAtualizacaoCadastralDM();
			filtro.adicionarParametro(new ParametroSimples(
					FiltroImovelSubcategoriaAtualizacaoCadastralDM.ID_IMOVEL_ATUALIZACAO_CADASTRAL,
					imovelAtlzCad.getId()));

			Collection<ImovelSubcategoriaAtualizacaoCadastralDM> colecaoImovelSubcategoria = repositorioUtil
					.pesquisar(filtro,
							ImovelSubcategoriaAtualizacaoCadastralDM.class
									.getName());

			if (colecaoImovelSubcategoria != null) {
				for (ImovelSubcategoriaAtualizacaoCadastralDM imovelSubcategoriaAtlzCad : colecaoImovelSubcategoria) {
					ImovelSubcategoriaPK pk = new ImovelSubcategoriaPK();
					pk.setImovel(imovel);
					pk.setSubcategoria(imovelSubcategoriaAtlzCad
							.getSubcategoria());
					ImovelSubcategoria imovelSubcategoria = new ImovelSubcategoria();
					imovelSubcategoria.setComp_id(pk);
					imovelSubcategoria
							.setQuantidadeEconomias(imovelSubcategoriaAtlzCad
									.getQuantidadeEconomias());
					imovelSubcategoria.setUltimaAlteracao(new Date());

					repositorioUtil.inserir(imovelSubcategoria);
				}
			}

			// 1.4
			Categoria categoriaPrincipal = getControladorImovel()
					.obterPrincipalCategoriaImovel(imovel.getId());
			imovel.setCategoriaPrincipalId(categoriaPrincipal.getId());

			ImovelSubcategoria subcategoriaPrincipal = getControladorImovel()
					.obterPrincipalSubcategoria(categoriaPrincipal.getId(),
							imovel.getId());
			imovel.setSubCategoriaPrincipalId(subcategoriaPrincipal
					.getComp_id().getSubcategoria().getId());

			Collection<Object[]> colecaoImovelSubCategoriaArray = repositorioCadastro
					.obterQtdeEconomiaPorSubcategoriaAtlzCadastral(imovelAtlzCad
							.getId());

			short qtdEconomias = 0;

			for (Object[] object : colecaoImovelSubCategoriaArray) {
				qtdEconomias += (Short) object[3];
			}
			imovel.setQuantidadeEconomias(qtdEconomias);

			repositorioUtil.atualizar(imovel);

			// 1.5
			validarAtributoLigacaoAguaInserirImovel(imovel, imovelAtlzCad,
					idParamTblAtlzCad, colecaoHelper);

			// 1.6
			validarAtributoLigacaoEsgotoInserirImovel(imovel, imovelAtlzCad,
					idParamTblAtlzCad, colecaoHelper);

		} catch (ErroRepositorioException e) {
			e.printStackTrace();
			sessionContext.setRollbackOnly();
			throw new ControladorException("erro.sistema", e);
		}

		return imovel;
	}

	/**
	 * [UC1290] Inserir ou Atualizar Imóvel Atualização Cadastral [SB0015]
	 * Validar Atributo Ligação de Água - Inserir Imóvel
	 * 
	 * @author André Miranda
	 * @since 15/10/2014
	 */
	public void validarAtributoLigacaoAguaInserirImovel(Imovel imovel,
			ImovelAtualizacaoCadastralDM imovelAtlzCad,
			Integer idParamTblAtlzCad,
			Collection<ParametrosTransacaoBatchHelper> colecaoHelper)
			throws ControladorException {

		if (!imovel.getLigacaoAguaSituacao().getId()
				.equals(imovelAtlzCad.getLigacaoAguaSituacao().getId())) {

			// [SB0006] Inserir Registro no retorno da Atualizacao Cadastral
			this.inserirRetornoAtualizacaoCadastralDM(
					imovel.getId(),
					null,
					AtributoAtualizacaoCadastralDM.SITUACAO_LIGACAO_AGUA,
					RetornoAtualizacaoCadastralDM.SITUACAO_PENDENTE,
					MensagemAtualizacaoCadastralDM.ALTERACAO_LIGACAO_AGUA_NAO_AUTORIZADA,
					idParamTblAtlzCad, imovelAtlzCad, null);

		}

	}

	/**
	 * [UC1290] Inserir ou Atualizar Imóvel Atualização Cadastral [SB0016]
	 * Validar Atributo Ligação de Esgoto - Inserir Imóvel
	 * 
	 * @author André Miranda
	 * @since 15/10/2014
	 */
	public void validarAtributoLigacaoEsgotoInserirImovel(Imovel imovel,
			ImovelAtualizacaoCadastralDM imovelAtlzCad,
			Integer idParamTblAtlzCad,
			Collection<ParametrosTransacaoBatchHelper> colecaoHelper)
			throws ControladorException {

		if (!imovel.getLigacaoEsgotoSituacao().getId()
				.equals(imovelAtlzCad.getLigacaoEsgotoSituacao().getId())) {

			// [SB0006] Inserir Registro no retorno da Atualizacao Cadastral
			this.inserirRetornoAtualizacaoCadastralDM(
					imovel.getId(),
					null,
					AtributoAtualizacaoCadastralDM.SITUACAO_LIGACAO_ESGOTO,
					RetornoAtualizacaoCadastralDM.SITUACAO_PENDENTE,
					MensagemAtualizacaoCadastralDM.ALTERACAO_LIGACAO_ESGOTO_NAO_AUTORIZADA,
					idParamTblAtlzCad, imovelAtlzCad, null);

		}

	}

	/**
	 * [UC1290] Inserir ou Atualizar Imóvel Atualização Cadastral [SB0017]
	 * Alterar Situação da Ligação de Água de CORTADO para LIGADO
	 * 
	 * @author André Miranda
	 * @since 13/10/2014
	 */
	public void alterarSituacaoLigacaoAguaCortadoParaLigado(Imovel imovel)
			throws ControladorException {
		try {

			FiltroUnidadeOrganizacional filtroUnidade = new FiltroUnidadeOrganizacional();
			filtroUnidade.adicionarParametro(new ParametroSimples(
					FiltroUnidadeOrganizacional.ID_LOCALIDADE, imovel
							.getLocalidade().getId()));

			Collection colecaoUnidade = this.getControladorUtil().pesquisar(
					filtroUnidade, UnidadeOrganizacional.class.getName());
			UnidadeOrganizacional unidadeOrganizacional = (UnidadeOrganizacional) Util
					.retonarObjetoDeColecao(colecaoUnidade);

			Usuario usuarioBatch = repositorioUsuario
					.pesquisarUsuarioRotinaBatch();
			usuarioBatch.setUnidadeOrganizacional(unidadeOrganizacional);

			getControladorImovel()
					.alterarSituacaoAguaParaLigado(
							imovel,
							usuarioBatch,
							LigacaoAguaSituacao.CORTADO,
							FiscalizacaoSituacao.LIGADO_CLANDESTINO_DE_AGUA_ATU_CADASTRAL);

			LigacaoAguaSituacao ligacaoAguaSituacao = new LigacaoAguaSituacao();
			ligacaoAguaSituacao.setId(LigacaoAguaSituacao.LIGADO);
			imovel.setLigacaoAguaSituacao(ligacaoAguaSituacao);

		} catch (ErroRepositorioException e) {
			e.printStackTrace();
			sessionContext.setRollbackOnly();
			throw new ControladorException("erro.sistema", e);
		}
	}

	/**
	 * [UC1290] Inserir ou Atualizar Imóvel Atualização Cadastral [SB0018]
	 * Alterar Situação da Ligação de Esgoto de CORTADO para LIGADO
	 * 
	 * @author André Miranda
	 * @since 13/10/2014
	 */
	public void alterarSituacaoLigacaoEsgotoCortadoParaLigado(Imovel imovel)
			throws ControladorException {
		try {
			// Gera Ordem de Servico
			OrdemServico ordemServico = new OrdemServico();
			ordemServico.setImovel(imovel);
			ordemServico
					.setObservacao("ORDEM DE SERVICO GERADA PELA ATUALIZACAO CADASTRAL");
			Integer idOrdemServico = getControladorOrdemServico()
					.gerarOrdemServicoFiscalizacao(ordemServico,
							Usuario.USUARIO_BATCH);

			// Informa o retorno da fiscalização
			FiscalizacaoSituacao fiscalizacaoSituacao = repositorioOrdemServico
					.pesquisaFiscalizacaoSituacao(FiscalizacaoSituacao.CORTADO_RELIGADO_A_REVELIA);

			SituacaoEncontradaHelper situacaoEncontradaHelper = new SituacaoEncontradaHelper();
			situacaoEncontradaHelper.setGeracaoDebito(ConstantesSistema.SIM);
			situacaoEncontradaHelper
					.setFiscalizacaoSituacao(fiscalizacaoSituacao);
			situacaoEncontradaHelper.setDataFiscalizacao(new Date());
			Collection colecaoSituacaoEncontradaHelper = new ArrayList();
			colecaoSituacaoEncontradaHelper.add(situacaoEncontradaHelper);

			FiltroUnidadeOrganizacional filtroUnidade = new FiltroUnidadeOrganizacional();
			filtroUnidade.adicionarParametro(new ParametroSimples(
					FiltroUnidadeOrganizacional.ID_LOCALIDADE, imovel
							.getLocalidade().getId()));

			Collection colecaoUnidade = this.getControladorUtil().pesquisar(
					filtroUnidade, UnidadeOrganizacional.class.getName());
			UnidadeOrganizacional unidadeOrganizacional = (UnidadeOrganizacional) Util
					.retonarObjetoDeColecao(colecaoUnidade);

			Usuario usuarioBatch = repositorioUsuario
					.pesquisarUsuarioRotinaBatch();
			usuarioBatch.setUnidadeOrganizacional(unidadeOrganizacional);

			getControladorOrdemServico().informarRetornoOSFiscalizacao(
					idOrdemServico, "",
					imovel.getLigacaoAguaSituacao().getId(),
					LigacaoEsgotoSituacao.CORTADO, imovel.getId(),
					MedicaoTipo.POCO.toString(),
					ConstantesSistema.SIM.toString(), null, usuarioBatch, null,
					ConstantesSistema.NAO, ConstantesSistema.SIM,
					colecaoSituacaoEncontradaHelper, imovel.getLigacaoEsgoto(),
					ConstantesSistema.SIM.toString());

			// Encerra a OS
			getControladorOrdemServico()
					.encerrarOSComExecucaoSemReferencia(
							idOrdemServico,
							new Date(),
							usuarioBatch,
							AtendimentoMotivoEncerramento.ATUALIZACAO_CADASTRAL
									.toString(),
							new Date(),
							"ORDEM DE SERVICO ENCERRADA ATRAVES DA FUNCIONALIDADE DE ATUALIZACAO CADASTRAL",
							ConstantesSistema.NAO.toString(), null, null, null,
							null, null, ConstantesSistema.NAO.toString(), null,
							null, null, null, null);

			LigacaoEsgotoSituacao ligacaoEsgotoSituacao = new LigacaoEsgotoSituacao();
			ligacaoEsgotoSituacao.setId(LigacaoEsgotoSituacao.LIGADO);
			imovel.setLigacaoEsgotoSituacao(ligacaoEsgotoSituacao);

		} catch (ErroRepositorioException e) {
			e.printStackTrace();
			sessionContext.setRollbackOnly();
			throw new ControladorException("erro.sistema", e);
		}
	}

	/**
	 * [UC1290] Inserir ou Atualizar Imóvel Atualização Cadastral [SB0019]
	 * Atualizar CEP do imóvel
	 * 
	 * @author André Miranda
	 * @since 13/10/2014
	 */
	public void atualizarCepImovelAtualizacaoCadastral(Imovel imovel, Cep cep,
			Logradouro logradouro,
			Collection<ParametrosTransacaoBatchHelper> colecaoTransacaoHelper)
			throws ControladorException {
		LogradouroCep logradouroCep;

		try {
			// 1. O sistema verifica se existe associação do logradouro com o
			// CEP
			FiltroLogradouroCep filtro = new FiltroLogradouroCep();
			filtro.adicionarParametro(new ParametroSimples(
					FiltroLogradouroCep.CEP, cep.getCepId()));
			filtro.adicionarParametro(new ParametroSimples(
					FiltroLogradouroCep.LOGRADOURO, logradouro.getId()));
			filtro.adicionarCaminhoParaCarregamentoEntidade(FiltroLogradouroCep.CEP);
			filtro.adicionarCaminhoParaCarregamentoEntidade(FiltroLogradouroCep.LOGRADOURO);

			Collection<LogradouroCep> colecaoLogrCep = repositorioUtil
					.pesquisar(filtro, LogradouroCep.class.getName());

			if (colecaoLogrCep == null || colecaoLogrCep.isEmpty()) {
				// 1.2.1. Insere os dados na tabela CADASTRO.LOGRADOURO_CEP
				logradouroCep = new LogradouroCep();
				logradouroCep.setCep(cep);
				logradouroCep.setLogradouro(logradouro);
				logradouroCep.setIndicadorUso(ConstantesSistema.SIM);
				logradouroCep.setUltimaAlteracao(new Date());
				Integer id = (Integer) repositorioUtil.inserir(logradouroCep);
				logradouroCep.setId(id);
			} else {
				logradouroCep = (LogradouroCep) Util
						.retonarObjetoDeColecao(colecaoLogrCep);
			}

			if (!imovel.getLogradouroCep().getCep().getCodigo()
					.equals(logradouroCep.getCep().getCodigo())) {
				ParametrosTransacaoBatchHelper cepTransacao = new ParametrosTransacaoBatchHelper(
						imovel.getLogradouroCep().getCep().getCodigo()
								.toString(), logradouroCep.getCep().getCodigo()
								.toString(), TabelaColuna.CEP_TABELA_IMOVEL);
				colecaoTransacaoHelper.add(cepTransacao);
			}

			// 1.1 ou 1.2.2 Atualiza a coluna LGCP_ID da tabela CADASTRO.IMOVEL
			// com o LGCP_ID gerado acima.
			imovel.setLogradouroCep(logradouroCep);
			repositorioUtil.atualizar(imovel);
		} catch (ErroRepositorioException e) {
			e.printStackTrace();
			sessionContext.setRollbackOnly();
			throw new ControladorException("erro.sistema", e);
		}
	}

	/**
	 * [UC1299] Atualizar Cliente Atualizacao Caddastral
	 * 
	 * [SB0007] - Validar Atributo CPF/CNPJ
	 * 
	 * @author: Bruno Sá Barreto
	 * @date: 15/10/2014
	 */
	public boolean validarAtributoCpfCnpj(
			String cpfCnpj,
			Integer idImovel,
			Integer idClienteAtlzCadastral,
			ParametroTabelaAtualizacaoCadastralDM parametroTabelaAtualizacaoCadastro,
			ImovelAtualizacaoCadastralDM imovelAtualizacaoCadastral,
			ClienteImovel clienteImovel) throws ControladorException {

		boolean retorno = true;

		try {
			// Caso nao tenha sido informado CPF/CNPJ
			if (cpfCnpj == null || cpfCnpj.equals("")) {

				// [SB0006] - Inserir Registro no retorno da Atualizacao
				// Cadastral
				this.inserirRetornoAtualizacaoCadastralDM(idImovel, null,
						AtributoAtualizacaoCadastralDM.CPF_CNPJ,
						RetornoAtualizacaoCadastralDM.SITUACAO_PENDENTE,
						MensagemAtualizacaoCadastralDM.CPF_CNPJ_NAO_INFORMADO,
						parametroTabelaAtualizacaoCadastro.getId(),
						imovelAtualizacaoCadastral, null);
				retorno = false;

			} else if (!Util.validacaoCPF(cpfCnpj)
					&& !Util.validacaoCNPJ(cpfCnpj)) {
				// [SB0006] - Inserir Registro no retorno da Atualizacao
				// Cadastral
				this.inserirRetornoAtualizacaoCadastralDM(
						idImovel,
						null,
						AtributoAtualizacaoCadastralDM.CPF_CNPJ,
						RetornoAtualizacaoCadastralDM.SITUACAO_PENDENTE,
						MensagemAtualizacaoCadastralDM.NUMERO_CPF_CNPJ_INVALIDO,
						parametroTabelaAtualizacaoCadastro.getId(),
						imovelAtualizacaoCadastral, null);
				retorno = false;

			} else {

				String cpfCnpjGSAN = getControladorCliente()
						.retornaCPFCNPJCliente(
								clienteImovel.getCliente().getId());

				if ((cpfCnpjGSAN == null && cpfCnpj != null)
						|| (cpfCnpjGSAN != null && cpfCnpj == null)
						|| !cpfCnpjGSAN.equals(cpfCnpj)) {

					if (repositorioCadastro
							.verificarRegistroAtendimentoAtualizacaoCadastral(idImovel)) {

						// [SB0006] - Inserir Registro no retorno da Atualizacao
						// Cadastral
						this.inserirRetornoAtualizacaoCadastralDM(
								idImovel,
								null,
								AtributoAtualizacaoCadastralDM.CPF_CNPJ,
								RetornoAtualizacaoCadastralDM.SITUACAO_PENDENTE,
								MensagemAtualizacaoCadastralDM.CPF_CNPJ_ASSOCIADO_RA,
								parametroTabelaAtualizacaoCadastro.getId(),
								imovelAtualizacaoCadastral, null);

						retorno = false;
					}
				}
			}

		} catch (Exception e) {
			e.printStackTrace();
			throw new ControladorException("erro.sistema", e);
		}

		return retorno;

	}

	/**
	 * @author Jonathan Marcos
	 * @since 17/10/2014
	 * @param imovel
	 * @param idParametroTabelaAtualizacaoCadastro
	 * @param imovelAtualizacaoCadastralDM
	 * @param colecaoHelper
	 * @return boolean
	 * @throws ControladorException
	 */
	public LigacaoAgua efetuarLigacaoAguaAtualizacaoCadastral(Imovel imovel,
			Integer idParametroTabelaAtualizacaoCadastro,
			ImovelAtualizacaoCadastralDM imovelAtualizacaoCadastralDM,
			Collection<ParametrosTransacaoBatchHelper> colecaoHelper,
			boolean inserirRetornoAtlzCadastral, Date dataLigacao)
			throws ControladorException {

		LigacaoAgua ligacaoAgua = null;

		try {
			if (imovel.getQuadra().getIndicadorRedeAgua()
					.equals(Quadra.SEM_REDE)) {
				if (imovelAtualizacaoCadastralDM != null
						&& imovelAtualizacaoCadastralDM
								.getIndicadorImovelNovo().equals(
										ConstantesSistema.SIM)) {
					LigacaoAguaSituacao ligacaoAguaSituacao = new LigacaoAguaSituacao();
					ligacaoAguaSituacao.setId(LigacaoAguaSituacao.POTENCIAL);
					imovel.setLigacaoAguaSituacao(ligacaoAguaSituacao);
					imovel.setUltimaAlteracao(new Date());
					repositorioUtil.atualizar(imovel);
				}
			} else {
				/*
				 * SB0001 - Gerar Ligacao de Água
				 */
				LigacaoAguaDiametro ligacaoAguaDiametro = new LigacaoAguaDiametro();
				ligacaoAguaDiametro.setId(new Integer(0));

				LigacaoAguaPerfil ligacaoAguaPerfil = new LigacaoAguaPerfil();
				ligacaoAguaPerfil.setId(LigacaoAguaPerfil.NORMAL);

				LigacaoAguaMaterial ligacaoAguaMaterial = new LigacaoAguaMaterial();
				ligacaoAguaMaterial.setId(LigacaoAguaMaterial.PVC_SOLDAVEL);

				if (imovel.getLigacaoAgua() != null
						&& imovel.getLigacaoAgua().getId() != null) {
					ligacaoAgua = imovel.getLigacaoAgua();
					ligacaoAgua.setLigacaoAguaDiametro(ligacaoAguaDiametro);
					ligacaoAgua.setLigacaoAguaMaterial(ligacaoAguaMaterial);
					ligacaoAgua.setLigacaoAguaPerfil(ligacaoAguaPerfil);
					repositorioUtil.atualizar(ligacaoAgua);
				} else {
					ligacaoAgua = new LigacaoAgua(imovel.getId(), new Date(),
							dataLigacao, null, null, null, null, null,
							new Date(), null, null, null, null, imovel, null,
							null, ligacaoAguaPerfil, null, ligacaoAguaDiametro,
							null, ligacaoAguaMaterial, null, null);
					repositorioUtil.inserir(ligacaoAgua);
				}

				/*
				 * SB0002 - Atualizar Imovel
				 */
				LigacaoAguaSituacao ligacaoAguaSituacao = new LigacaoAguaSituacao();
				ligacaoAguaSituacao.setId(LigacaoAguaSituacao.LIGADO);
				if (!imovel.getLigacaoAguaSituacao().getId()
						.equals(ligacaoAguaSituacao.getId())) {
					ParametrosTransacaoBatchHelper situacaoAguaTransacao = new ParametrosTransacaoBatchHelper(
							String.valueOf(imovel.getLigacaoAguaSituacao()
									.getDescricao()), "LIGADO",
							TabelaColuna.LIGACAO_AGUA_SITUACAO_ID_TABELA_IMOVEL);
					colecaoHelper.add(situacaoAguaTransacao);
				}

				imovel.setLigacaoAguaSituacao(ligacaoAguaSituacao);
				imovel.setUltimaAlteracao(new Date());
				if (imovel.getLigacaoEsgotoSituacao().getId()
						.equals(LigacaoEsgotoSituacao.LIG_FORA_DE_USO)) {

					LigacaoEsgotoSituacao ligacaoEsgotoSituacao = new LigacaoEsgotoSituacao();
					ligacaoEsgotoSituacao.setId(LigacaoEsgotoSituacao.LIGADO);

					ParametrosTransacaoBatchHelper situacaoEsgotoTransacao = new ParametrosTransacaoBatchHelper(
							String.valueOf(imovel.getLigacaoEsgotoSituacao()
									.getDescricao()),
							"LIGADO",
							TabelaColuna.LIGACAO_ESGOTO_SITUACAO_ID_TABELA_IMOVEL);
					colecaoHelper.add(situacaoEsgotoTransacao);

					imovel.setLigacaoEsgotoSituacao(ligacaoEsgotoSituacao);
				}

				repositorioUtil.atualizar(imovel);

				/*
				 * [SB0006] - Inserir Registro no retorno da Atualizacao
				 * Cadastral
				 */
				if (inserirRetornoAtlzCadastral) {
					this.inserirRetornoAtualizacaoCadastralDM(
							imovel.getId(),
							null,
							AtributoAtualizacaoCadastralDM.SITUACAO_LIGACAO_AGUA,
							RetornoAtualizacaoCadastralDM.SITUACAO_ATUALIZADO,
							MensagemAtualizacaoCadastralDM.ATUALIZACAO_COM_SUCESSO,
							idParametroTabelaAtualizacaoCadastro,
							imovelAtualizacaoCadastralDM, null);
				}
			}
		} catch (ErroRepositorioException e) {
			e.printStackTrace();
			throw new ControladorException("erro.sistema", e);
		}
		return ligacaoAgua;
	}

	/**
	 * @author Jonathan Marcos
	 * @since 17/10/2014
	 * @param imovel
	 * @param imovelAtualizacaoCadastralDM
	 * @param medicaoTipo
	 * @param idParametroTabelaAtualizacaoCadastro
	 * @param colecaoHelper
	 * @return boolean
	 * @throws ControladorException
	 */
	public boolean efetuarLigacaoEsgotoAtualizacaoCadastral(Imovel imovel,
			ImovelAtualizacaoCadastralDM imovelAtualizacaoCadastralDM,
			Integer idParametroTabelaAtualizacaoCadastro,
			Collection<ParametrosTransacaoBatchHelper> colecaoHelper,
			boolean inserirRetornoAtlzCadastral) throws ControladorException {

		boolean validacaoPermitida = true;
		try {
			if (imovel.getQuadra().getIndicadorRedeEsgoto()
					.equals(Quadra.SEM_REDE)) {
				if (imovelAtualizacaoCadastralDM != null
						&& imovelAtualizacaoCadastralDM
								.getIndicadorImovelNovo().equals(
										ConstantesSistema.SIM)) {

					LigacaoEsgotoSituacao ligacaoEsgotoSituacao = new LigacaoEsgotoSituacao();
					ligacaoEsgotoSituacao
							.setId(LigacaoEsgotoSituacao.POTENCIAL);

					imovel.setLigacaoEsgotoSituacao(ligacaoEsgotoSituacao);
					imovel.setUltimaAlteracao(new Date());
					repositorioUtil.atualizar(imovel);
				} else {
					validacaoPermitida = false;
				}
			} else {
				/*
				 * SB0001 - Gerar Ligacao de Esgoto
				 */
				LigacaoEsgotoDiametro ligacaoEsgotoDiametro = new LigacaoEsgotoDiametro();
				ligacaoEsgotoDiametro
						.setId(LigacaoEsgotoDiametro.QUATRO_POLEGADAS);

				LigacaoEsgotoPerfil ligacaoEsgotoPerfil = new LigacaoEsgotoPerfil();
				ligacaoEsgotoPerfil.setId(LigacaoEsgotoPerfil.CONVENCIONAL);

				LigacaoEsgotoMaterial ligacaoEsgotoMaterial = new LigacaoEsgotoMaterial();
				ligacaoEsgotoMaterial.setId(LigacaoEsgotoMaterial.PVC);

				if (imovel.getLigacaoEsgoto() != null
						&& imovel.getLigacaoEsgoto().getId() != null) {

					LigacaoEsgoto ligacaoEsgoto = imovel.getLigacaoEsgoto();
					ligacaoEsgoto
							.setLigacaoEsgotoDiametro(ligacaoEsgotoDiametro);
					ligacaoEsgoto
							.setLigacaoEsgotoMaterial(ligacaoEsgotoMaterial);
					ligacaoEsgoto.setLigacaoEsgotoPerfil(ligacaoEsgotoPerfil);
					repositorioUtil.atualizar(ligacaoEsgoto);

				} else {
					BigDecimal cemPorcento = new BigDecimal(100);
					LigacaoEsgoto ligacaoEsgoto = new LigacaoEsgoto(
							imovel.getId(), new Date(), null,
							LigacaoEsgotoPerfil.CEM_PORCENTO, cemPorcento,
							new Date(), ConstantesSistema.NAO,
							ConstantesSistema.NAO, imovel, ligacaoEsgotoPerfil,
							ligacaoEsgotoDiametro, ligacaoEsgotoMaterial);
					repositorioUtil.inserir(ligacaoEsgoto);
				}

				/*
				 * SB0002 - Atualizar Imovel
				 */
				LigacaoEsgotoSituacao ligacaoEsgotoSituacao = new LigacaoEsgotoSituacao();
				ligacaoEsgotoSituacao.setId(LigacaoEsgotoSituacao.LIGADO);

				if (!imovel.getLigacaoEsgotoSituacao().getId()
						.equals(ligacaoEsgotoSituacao.getId())) {
					ParametrosTransacaoBatchHelper situacaoEsgotoTransacao = new ParametrosTransacaoBatchHelper(
							String.valueOf(imovel.getLigacaoEsgotoSituacao()
									.getDescricao()),
							"LIGADO",
							TabelaColuna.LIGACAO_ESGOTO_SITUACAO_ID_TABELA_IMOVEL);
					colecaoHelper.add(situacaoEsgotoTransacao);
				}
				imovel.setLigacaoEsgotoSituacao(ligacaoEsgotoSituacao);
				imovel.setUltimaAlteracao(new Date());
				repositorioUtil.atualizar(imovel);
			}

			/*
			 * [SB0006] - Inserir Registro no retorno da Atualizacao Cadastral
			 */
			if (inserirRetornoAtlzCadastral) {
				this.inserirRetornoAtualizacaoCadastralDM(imovel.getId(), null,
						AtributoAtualizacaoCadastralDM.SITUACAO_LIGACAO_ESGOTO,
						RetornoAtualizacaoCadastralDM.SITUACAO_ATUALIZADO,
						MensagemAtualizacaoCadastralDM.ATUALIZACAO_COM_SUCESSO,
						idParametroTabelaAtualizacaoCadastro,
						imovelAtualizacaoCadastralDM, null);
			}

		} catch (ErroRepositorioException e) {
			e.printStackTrace();
			throw new ControladorException("erro.sistema", e);
		}
		return validacaoPermitida;
	}

	/**
	 * [UC1290] Inserir ou Atualizar Imóvel Atualização Cadastral [SB0020]
	 * Calcular Valor de Água e/ou Esgoto
	 * 
	 * @author Vivianne Sousa
	 * @date 20/10/2014
	 * 
	 * @throws ControladorException
	 */
	public BigDecimal calcularValorAguaEsgoto(
			SistemaParametro sistemaParametro, Imovel imovel,
			Collection colecaoQuantidadeEconomias) throws ControladorException {

		BigDecimal valorAguaEsgoto = new BigDecimal("0.00");

		int anoMesFaturamento = sistemaParametro.getAnoMesFaturamento();

		// Tarifa do Imóvel
		Integer idConsumoTarifa = getControladorImovel()
				.recuperarIdConsumoTarifa(imovel.getId());

		ConsumoTarifa consumoTarifa = new ConsumoTarifa();
		if (idConsumoTarifa != null) {
			consumoTarifa.setId(idConsumoTarifa);
		}
		imovel.setConsumoTarifa(consumoTarifa);

		// Consumo fatura de água
		int consumoAgua = getControladorFaturamento()
				.pesquisarMaiorNumeroConsumoFaixaInicio();

		// Consumo fatura de esgoto
		int consumoEsgoto = consumoAgua;

		// Consumo mínimo da ligacao
		int consumoMinimoLigacao = getControladorMicromedicao()
				.obterConsumoMinimoLigacao(imovel, null);

		int mesConta = Util.obterMes(anoMesFaturamento);
		int anoConta = Util.obterAno(anoMesFaturamento);
		int ultimoDiaMes = new Integer(Util.obterUltimoDiaMes(mesConta,
				anoConta));
		// Data de Leitura Atual
		Date dataLeituraAtualFaturamento = Util.criarData(ultimoDiaMes,
				mesConta, anoConta);
		// Data de Leitura Anterior
		Date dataLeituraAnteriorFaturamento = Util.criarData(1, mesConta,
				anoConta);

		// Percentual de esgoto
		BigDecimal percentualEsgoto = getControladorLigacaoEsgoto()
				.recuperarPercentualEsgoto(imovel.getId());

		if (percentualEsgoto == null) {
			percentualEsgoto = new BigDecimal("100.00");
		}

		// [UC0120] - Calcular Valores de Água e/ou Esgoto
		Collection colecaoCalcularValoresAguaEsgotoHelper = getControladorFaturamento()
				.calcularValoresAguaEsgoto(anoMesFaturamento,
						LigacaoAguaSituacao.LIGADO,
						LigacaoEsgotoSituacao.LIGADO, ConstantesSistema.SIM,
						ConstantesSistema.SIM, colecaoQuantidadeEconomias,
						consumoAgua, consumoEsgoto, consumoMinimoLigacao,
						dataLeituraAnteriorFaturamento,
						dataLeituraAtualFaturamento, percentualEsgoto,
						idConsumoTarifa, null, null);

		BigDecimal valorTotalAgua = new BigDecimal("0.00");
		BigDecimal valorTotalEsgoto = new BigDecimal("0.00");

		Iterator iteratorColecaoCalcularValoresAguaEsgotoHelper = colecaoCalcularValoresAguaEsgotoHelper
				.iterator();

		while (iteratorColecaoCalcularValoresAguaEsgotoHelper.hasNext()) {

			CalcularValoresAguaEsgotoHelper calcularValoresAguaEsgotoHelper = (CalcularValoresAguaEsgotoHelper) iteratorColecaoCalcularValoresAguaEsgotoHelper
					.next();

			// Caso tenha valor de água faturado para categoria adiciona o valor
			// de água ao valor total de água. Caso contrário soma zero.
			if (calcularValoresAguaEsgotoHelper.getValorFaturadoAguaCategoria() != null) {
				valorTotalAgua = valorTotalAgua
						.add(calcularValoresAguaEsgotoHelper
								.getValorFaturadoAguaCategoria());
			} else {
				valorTotalAgua = valorTotalAgua.add(new BigDecimal("0.00"));
			}

			// Caso tenha valor de esgoto faturado para categoria adiciona o
			// valor de esgoto ao valor total de esgoto. Caso contrário soma
			// zero.
			if (calcularValoresAguaEsgotoHelper
					.getValorFaturadoEsgotoCategoria() != null) {
				valorTotalEsgoto = valorTotalEsgoto
						.add(calcularValoresAguaEsgotoHelper
								.getValorFaturadoEsgotoCategoria());
			} else {
				valorTotalEsgoto = valorTotalEsgoto.add(new BigDecimal("0.00"));
			}
		}

		valorAguaEsgoto = valorTotalAgua.add(valorTotalEsgoto);

		return valorAguaEsgoto;
	}

	/**
	 * [UC1290] Inserir ou Atualizar Imóvel Atualização Cadastral [SB0001]
	 * Validar Atributo Categoria
	 * 
	 * @author Vivianne Sousa
	 * @date 20/10/2014
	 * 
	 * @throws ControladorException
	 */
	public boolean alteraValorFaturado(Imovel imovel,
			Integer idImovelAtualizacaoCadastralDM) throws ControladorException {

		boolean alteraValorFaturado = false;

		Collection colecaoQuantidadeEconomias = null;
		SistemaParametro sistemaParametro = getControladorUtil()
				.pesquisarParametrosDoSistema();

		// 4.2.1.1. Calcular valor da conta com subcategoria na base de dados do
		// GSAN
		/*
		 * Categorias e suas respectivas quantidade de economias Verificando se
		 * a empresa fatura por CATEGORIA ou SUBCATEGORIA
		 */
		if (sistemaParametro.getIndicadorTarifaCategoria().equals(
				SistemaParametro.INDICADOR_TARIFA_CATEGORIA)) {

			// [UC0108] - Obter Quantidade de Economias por Categoria
			colecaoQuantidadeEconomias = this.getControladorImovel()
					.obterQuantidadeEconomiasCategoria(imovel);

		} else {

			// [UC0108] - Obter Quantidade de Economias por Subcategoria
			colecaoQuantidadeEconomias = this.getControladorImovel()
					.obterQuantidadeEconomiasSubCategoria(imovel.getId());
		}

		BigDecimal valorAguaEsgotoGSAN = this.calcularValorAguaEsgoto(
				sistemaParametro, imovel, colecaoQuantidadeEconomias);

		// 4.2.1.2. Calcular valor da conta com subcategoria na base de dados do
		// Ambiente Virtual 2
		/*
		 * Categorias e suas respectivas quantidade de economias Verificando se
		 * a empresa fatura por CATEGORIA ou SUBCATEGORIA
		 */
		if (sistemaParametro.getIndicadorTarifaCategoria().equals(
				SistemaParametro.INDICADOR_TARIFA_CATEGORIA)) {

			// Obter Quantidade de Economias por Categoria
			colecaoQuantidadeEconomias = obterQtdeEconomiaPorCategoriaAtlzCadastral(idImovelAtualizacaoCadastralDM);

		} else {

			// Obter Quantidade de Economias por Subcategoria
			colecaoQuantidadeEconomias = this
					.obterQtdeEconomiaPorSubcategoriaAtlzCadastral(idImovelAtualizacaoCadastralDM);
		}

		BigDecimal valorAguaEsgotoAmbienteVirtual2 = this
				.calcularValorAguaEsgoto(sistemaParametro, imovel,
						colecaoQuantidadeEconomias);

		if (valorAguaEsgotoGSAN.compareTo(valorAguaEsgotoAmbienteVirtual2) != 0) {
			alteraValorFaturado = true;
		}

		return alteraValorFaturado;
	}

	/**
	 * [UC1290] Inserir ou Atualizar Imóvel Atualização Cadastral [SB0020]
	 * Calcular Valor de Água e/ou Esgoto
	 * 
	 * @author Vivianne Sousa
	 * @date 20/10/2014
	 * 
	 * @throws ErroRepositorioException
	 */
	public Collection obterQtdeEconomiaPorCategoriaAtlzCadastral(
			Integer idImovelAtualizacaoCadastralDM) throws ControladorException {
		try {
			Collection colecaoCategoria = new ArrayList();
			Collection<Object[]> colecaoImovelSubCategoriaArray = repositorioCadastro
					.obterQtdeEconomiaPorCategoriaAtlzCadastral(idImovelAtualizacaoCadastralDM);

			if (colecaoImovelSubCategoriaArray != null
					&& !colecaoImovelSubCategoriaArray.isEmpty()) {
				throw new ControladorException(
						"atencao.nao_cadastrado.imovel_subcategoria", null);
			}

			for (Object[] imovelSubcategoriaArray : colecaoImovelSubCategoriaArray) {
				Categoria categoria = new Categoria();

				categoria.setId((Integer) imovelSubcategoriaArray[0]);
				categoria.setDescricao(String
						.valueOf(imovelSubcategoriaArray[1]));
				categoria
						.setConsumoEstouro((Integer) imovelSubcategoriaArray[2]);
				categoria
						.setVezesMediaEstouro((BigDecimal) imovelSubcategoriaArray[3]);
				categoria
						.setQuantidadeEconomiasCategoria(((Short) imovelSubcategoriaArray[4])
								.intValue());
				categoria.setConsumoAlto((Integer) imovelSubcategoriaArray[6]);
				categoria
						.setMediaBaixoConsumo((Integer) imovelSubcategoriaArray[7]);
				categoria
						.setVezesMediaAltoConsumo((BigDecimal) imovelSubcategoriaArray[8]);
				categoria
						.setPorcentagemMediaBaixoConsumo((BigDecimal) imovelSubcategoriaArray[9]);

				if ((String) imovelSubcategoriaArray[10] != null) {
					categoria
							.setDescricaoAbreviada((String) imovelSubcategoriaArray[10]);
				}

				categoria
						.setNumeroConsumoMaximoEc((Integer) imovelSubcategoriaArray[11]);
				categoria
						.setIndicadorCobrancaAcrescimos((Short) imovelSubcategoriaArray[12]);
				categoria
						.setFatorEconomias((Short) imovelSubcategoriaArray[13]);
				CategoriaTipo categoriaTipo = new CategoriaTipo();
				categoriaTipo.setId((Integer) imovelSubcategoriaArray[14]);
				categoriaTipo
						.setDescricao((String) imovelSubcategoriaArray[15]);
				categoria.setCategoriaTipo(categoriaTipo);
				categoria
						.setNumeroConsumoMaximoEc((Integer) imovelSubcategoriaArray[16]);
				categoria
						.setQuantidadeDiasPrimeiroFaturamento((Short) imovelSubcategoriaArray[17]);

				colecaoCategoria.add(categoria);
			}

			return colecaoCategoria;
		} catch (ErroRepositorioException e) {
			e.printStackTrace();
			throw new ControladorException("erro.sistema", e);
		}
	}

	/**
	 * [UC1290] Inserir ou Atualizar Imóvel Atualização Cadastral [SB0020]
	 * Calcular Valor de Água e/ou Esgoto
	 * 
	 * @author Vivianne Sousa
	 * @date 20/10/2014
	 * 
	 * @throws ErroRepositorioException
	 */
	public Collection obterQtdeEconomiaPorSubcategoriaAtlzCadastral(
			Integer idImovelAtualizacaoCadastralDM) throws ControladorException {

		try {
			// Criação das coleções
			Collection<Subcategoria> colecaoSubcategoria = new ArrayList();
			Collection<Object[]> colecaoImovelSubCategoriaArray = null;

			colecaoImovelSubCategoriaArray = repositorioCadastro
					.obterQtdeEconomiaPorSubcategoriaAtlzCadastral(idImovelAtualizacaoCadastralDM);

			if (colecaoImovelSubCategoriaArray == null
					|| colecaoImovelSubCategoriaArray.isEmpty()) {
				throw new ControladorException(
						"atencao.nao_cadastrado.imovel_subcategoria", null);
			}

			for (Object[] imovelSubcategoriaArray : colecaoImovelSubCategoriaArray) {
				Subcategoria subCategoria = new Subcategoria();

				subCategoria.setId((Integer) imovelSubcategoriaArray[0]);
				subCategoria.setCodigo((Integer) imovelSubcategoriaArray[1]);
				subCategoria.setDescricao((String) imovelSubcategoriaArray[2]);
				subCategoria
						.setQuantidadeEconomias(((Short) imovelSubcategoriaArray[3])
								.intValue());
				subCategoria
						.setCodigoTarifaSocial((String) imovelSubcategoriaArray[4]);
				subCategoria
						.setNumeroFatorFiscalizacao((Short) imovelSubcategoriaArray[5]);
				subCategoria
						.setIndicadorTarifaConsumo((Short) imovelSubcategoriaArray[6]);
				subCategoria
						.setIndicadorSazonalidade((Short) imovelSubcategoriaArray[10]);

				if (imovelSubcategoriaArray[12] != null) {
					subCategoria
							.setDescricaoAbreviada((String) imovelSubcategoriaArray[12]);
				}

				Categoria categoria = new Categoria();

				categoria.setId((Integer) imovelSubcategoriaArray[7]);
				categoria.setDescricao((String) imovelSubcategoriaArray[8]);
				categoria.setFatorEconomias((Short) imovelSubcategoriaArray[9]);
				if (imovelSubcategoriaArray[11] != null) {
					categoria
							.setDescricaoAbreviada((String) imovelSubcategoriaArray[11]);
				}

				subCategoria.setCategoria(categoria);

				colecaoSubcategoria.add(subCategoria);
			}

			return colecaoSubcategoria;
		} catch (ErroRepositorioException e) {
			e.printStackTrace();
			throw new ControladorException("erro.sistema", e);
		}
	}

	/**
	 * Método responsável por<br>
	 * pesquisar nomes dos usuários<br>
	 * que são leituristas associados<br>
	 * a empresa
	 * 
	 * @author Jonathan Marcos
	 * @since 21/10/2014
	 * @param idEmpresa
	 * @return Collection
	 * @throws ErroRepositorioException
	 */
	public Collection<Usuario> pesquisarUsuarioAtuCadastral(Integer idEmpresa)
			throws ControladorException {
		try {
			return repositorioCadastro
					.pesquisarUsuarioAtualizacaoCadastral(idEmpresa);
		} catch (Exception e) {
			sessionContext.setRollbackOnly();
			throw new ControladorException("erro.sistema", e);
		}
	}

	/**
	 * [UC1290] Inserir ou Atualizar Imóvel Atualização Cadastral [SB0021]
	 * Atualizar Bairro do imóvel
	 * 
	 * @author Vivianne Sousa
	 * @since 20/11/2014
	 */
	public void atualizarBairroImovelAtualizacaoCadastral(Imovel imovel,
			Bairro bairro, Logradouro logradouro,
			Collection<ParametrosTransacaoBatchHelper> colecaoTransacaoHelper)
			throws ControladorException {
		LogradouroBairro logradouroBairro;

		try {
			// 1. O sistema verifica se existe associação do logradouro com o
			// Bairro
			FiltroLogradouroBairro filtro = new FiltroLogradouroBairro();
			filtro.adicionarParametro(new ParametroSimples(
					FiltroLogradouroBairro.BAIRRO, bairro.getId()));
			filtro.adicionarParametro(new ParametroSimples(
					FiltroLogradouroBairro.LOGRADOURO, logradouro.getId()));
			filtro.adicionarCaminhoParaCarregamentoEntidade(FiltroLogradouroBairro.BAIRRO);
			filtro.adicionarCaminhoParaCarregamentoEntidade(FiltroLogradouroBairro.LOGRADOURO);

			Collection<LogradouroBairro> colecaoLogrBairro = repositorioUtil
					.pesquisar(filtro, LogradouroBairro.class.getName());

			if (colecaoLogrBairro == null || colecaoLogrBairro.isEmpty()) {
				// 1.2.1. Insere os dados na tabela CADASTRO.LOGRADOURO_BAIRRO
				logradouroBairro = new LogradouroBairro();
				logradouroBairro.setBairro(bairro);
				logradouroBairro.setLogradouro(logradouro);
				logradouroBairro.setUltimaAlteracao(new Date());
				Integer id = (Integer) repositorioUtil
						.inserir(logradouroBairro);
				logradouroBairro.setId(id);
			} else {
				logradouroBairro = (LogradouroBairro) Util
						.retonarObjetoDeColecao(colecaoLogrBairro);
			}

			if (!imovel.getLogradouroBairro().getBairro().getId()
					.equals(logradouroBairro.getBairro().getId())) {
				ParametrosTransacaoBatchHelper bairroTransacao = new ParametrosTransacaoBatchHelper(
						imovel.getLogradouroBairro().getBairro().getNome(),
						logradouroBairro.getBairro().getNome(),
						TabelaColuna.BAIRRO_TABELA_IMOVEL);
				colecaoTransacaoHelper.add(bairroTransacao);
			}

			if (!imovel.getLogradouroBairro().getLogradouro().getId()
					.equals(logradouroBairro.getLogradouro().getId())) {
				ParametrosTransacaoBatchHelper logradouroTransacao = new ParametrosTransacaoBatchHelper(
						imovel.getLogradouroBairro().getLogradouro().getNome(),
						logradouroBairro.getLogradouro().getNome(),
						TabelaColuna.LOGRADOURO_TABELA_IMOVEL);
				colecaoTransacaoHelper.add(logradouroTransacao);
			}

			// 1.1 ou 1.2.2 Atualiza a coluna LGBR_ID da tabela CADASTRO.IMOVEL
			// com o LGBR_ID gerado acima.
			imovel.setLogradouroBairro(logradouroBairro);
			repositorioUtil.atualizar(imovel);

		} catch (ErroRepositorioException e) {
			e.printStackTrace();
			sessionContext.setRollbackOnly();
			throw new ControladorException("erro.sistema", e);
		}
	}

	/**
	 * [UC1443] - Gerar Relatorio de Novos Logradouros
	 * 
	 * @author Anderson Cabral, Bruno Sá Barreto
	 * @since 15/03/2013
	 * 
	 * @param idEmpresa
	 * @param idLocalidade
	 * @return Collection<Object[]>
	 * @throws ControladorException
	 */
	public Collection<Object[]> pesquisarLogradouroAtlzCad(String idEmpresa,
			String idLocalidade) throws ControladorException {

		try {
			return repositorioCadastro.pesquisarLogradouroAtlzCad(idEmpresa,
					idLocalidade);

		} catch (Exception e) {
			sessionContext.setRollbackOnly();
			throw new ControladorException("erro.sistema", e);
		}
	}

	/**
	 * [UC1443] - Gerar Relatorio de Novos Logradouros
	 * 
	 * @author Bruno Sá Barreto
	 * @since 15/03/2013
	 * 
	 * @param idEmpresa
	 * @param idLocalidade
	 * @return Collection<Object[]>
	 * @throws ControladorException
	 */
	public Collection<Object[]> pesquisarLogradouroAtlzCad(String idEmpresa,
			String idLocalidade, String idsSelecionados)
			throws ControladorException {

		try {
			return repositorioCadastro.pesquisarLogradouroAtlzCad(idEmpresa,
					idLocalidade, idsSelecionados);
		} catch (Exception e) {
			sessionContext.setRollbackOnly();
			throw new ControladorException("erro.sistema", e);
		}
	}

	/**
	 * [UC1443] - Gerar Relatorio de Novos Logradouros
	 * 
	 * @author Anderson Cabral
	 * @author Bruno Sá Barreto
	 * @since 15/03/2013
	 * 
	 * @param idLogradouro
	 * @return Collection<Object[]>
	 * @throws ControladorException
	 */
	public Collection<Object[]> pesquisarLogradouroBairroAtlzCad(
			String idLogradouro) throws ControladorException {

		try {
			return repositorioCadastro
					.pesquisarLogradouroBairroAtlzCad(idLogradouro);

		} catch (Exception e) {
			sessionContext.setRollbackOnly();
			throw new ControladorException("erro.sistema", e);
		}
	}

	/**
	 * [UC1443] - Gerar Relatorio de Novos Logradouros
	 * 
	 * @author Anderson Cabral
	 * @author Bruno Sá Barreto
	 * @since 15/03/2013
	 * 
	 * @param idLogradouro
	 * @return Collection<Object[]>
	 * @throws ControladorException
	 */
	public Collection<Object[]> pesquisarLogradouroCepAtlzCad(
			String idLogradouro) throws ControladorException {

		try {
			return repositorioCadastro
					.pesquisarLogradouroCepAtlzCad(idLogradouro);

		} catch (Exception e) {
			sessionContext.setRollbackOnly();
			throw new ControladorException("erro.sistema", e);
		}
	}

	/**
	 * [UC1442] Inserir Novos Logradouros Atualização Cadastral IT010 -
	 * Pesquisar Imóveis associados ao Logradouro
	 * 
	 * @author Anderson Cabral
	 * @author Bruno Sá Barreto
	 * @since 27/12/2013
	 * 
	 * @param idLogradouro
	 * @return ArrayList<Integer>
	 * @throws ErroRepositorioException
	 */
	public ArrayList<Integer> pesquisarImovelAtualizacaoCadastralPorLogradouro(
			Integer idLogradouro) throws ControladorException {
		try {
			return this.repositorioCadastro
					.pesquisarImovelAtualizacaoCadastralPorLogradouro(idLogradouro);
		} catch (ErroRepositorioException e) {
			throw new ControladorException("erro.sistema", e);
		}
	}

	/**
	 * [UC1442] Inserir Novos Logradouros Atualizacao Cadastral [FS0002]
	 * Verificar CEP Associado a Logradouro
	 * 
	 * @author Bruno Sá Barreto
	 * 
	 * @since 22/11/2014
	 * 
	 * @param codigoCep
	 * @return boolean
	 */
	public boolean verificaSeExisteAssociacaoCepLogradouro(Integer codigo)
			throws ControladorException {
		try {
			return this.repositorioCadastro
					.verificaSeExisteAssociacaoCepLogradouro(codigo);
		} catch (ErroRepositorioException e) {
			throw new ControladorException("erro.sistema", e);
		}
	}

	/**
	 * Pesquisa na base e retorna o objeto associado ao id passado como
	 * parâmetro.
	 * 
	 * @author Bruno Sá Barreto
	 * @since 22/11/2014
	 * 
	 * @return LogradouroBairro
	 * @param idLogradouroBairro
	 */
	public LogradouroBairro pesquisarLogradouroBairroPorId(
			Integer idLogradouroBairro) throws ControladorException {
		try {
			return this.repositorioCadastro
					.pesquisarLogradouroBairroPorId(idLogradouroBairro);
		} catch (ErroRepositorioException e) {
			throw new ControladorException("erro.sistema", e);
		}
	}

	/**
	 * [UC 1312] Gerar Resumo da Situação dos imóveis por cadastrador
	 * 
	 * @author Cesar Medeiros
	 * @since 12/04/2012
	 * 
	 * @param Helper
	 * @return Collection<>
	 * @throws ErroRepositorioException
	 */
	public Collection<RelatorioResumoSituacaoImoveisAnalistaCadastradorBean> pesquisarResumoSituacaoImoveis(
			DadosResumoMovimentoAtualizacaoCadastralHelper helper)
			throws ControladorException {

		Collection<RelatorioResumoSituacaoImoveisAnalistaCadastradorBean> colecaoBeans = new ArrayList<RelatorioResumoSituacaoImoveisAnalistaCadastradorBean>();

		Collection colecaoResumoCadastrador = null;

		boolean valido = true;

		try {
			colecaoResumoCadastrador = repositorioCadastro
					.pesquisarResumoSituacaoImoveisPorCadastradorAnalista(helper);

			if (!Util.isVazioOrNulo(colecaoResumoCadastrador)) {
				Iterator iterator = colecaoResumoCadastrador.iterator();

				Integer qtdTotalImoveisInconsistentes = 0;
				Integer qtdTotalImoveisAtualizados = 0;
				Integer qtdTotalImoveisCadastrador = 0;

				Integer qtdTotalImoveisAprovados = 0;
				Integer qtdTotalImoveisAceitos = 0;
				Integer qtdTotalImoveisRejeitados = 0;
				Integer qtdTotalImoveisAnalista = 0;

				while (iterator.hasNext()) {
					RelatorioResumoSituacaoImoveisAnalistaCadastradorBean bean = new RelatorioResumoSituacaoImoveisAnalistaCadastradorBean();
					Object[] array = (Object[]) iterator.next();
					valido = true;

					String tipo = (String) array[8];
					if (tipo != null && tipo.equalsIgnoreCase("cad")) {
						bean.setTipoCadastradorAnalista("1");
						bean.setDescTipo("Cadastrador");
					} else {
						bean.setTipoCadastradorAnalista("2");
						bean.setDescTipo("Analista");
					}
					bean.setDescQuantidade1("Qtde Inconsist. Aprovadas");
					bean.setDescPercentagem1("%");
					bean.setDescQuantidade2("Qtde Inconsist. Aceitas");
					bean.setDescPercentagem2("%");
					bean.setDescQuantidade3("Qtde Inconsist. Rejeitadas");
					bean.setDescPercentagem3("%");
					bean.setDescTotalImoveis("Total Incons.");

					bean.setIdAnalistaCadastrador((Integer) array[2]);

					if ((Integer) array[0] != null) {
						bean.setIdLocalidade((Integer) array[0]);
					}

					if ((String) array[1] != null) {
						bean.setDescricaoLocalidade((String) array[1]);
					}

					if ((String) array[3] != null) {
						bean.setNomeAnalistaCadastrador((String) array[3]);
					}

					Integer totalImoveisAprovados = 0;
					if ((Integer) array[4] != null) {
						totalImoveisAprovados = (Integer) array[4];
						bean.setQtdImoveis1(totalImoveisAprovados);

						qtdTotalImoveisAprovados = qtdTotalImoveisAprovados
								+ totalImoveisAprovados;
					}

					Integer totalImoveisAceitos = 0;
					if ((Integer) array[5] != null) {
						totalImoveisAceitos = (Integer) array[5];
						bean.setQtdImoveis2(totalImoveisAceitos);

						qtdTotalImoveisAceitos = qtdTotalImoveisAceitos
								+ totalImoveisAceitos;
					}

					Integer totalImoveisRejeitados = 0;
					if ((Integer) array[6] != null) {
						totalImoveisRejeitados = (Integer) array[6];
						bean.setQtdImoveis3(totalImoveisRejeitados);

						qtdTotalImoveisRejeitados = qtdTotalImoveisRejeitados
								+ totalImoveisRejeitados;
					}

					Integer totalImoveis = totalImoveisAprovados
							+ totalImoveisAceitos + totalImoveisRejeitados;
					bean.setTotalImoveis(totalImoveis);

					qtdTotalImoveisAnalista = qtdTotalImoveisAnalista
							+ totalImoveis;

					if (totalImoveis != 0) {
						BigDecimal percentualImoveisAprovados = Util
								.divideDepoisMultiplicaComCasasDecimais(
										totalImoveisAprovados, totalImoveis,
										100);
						// new BigDecimal(totalImoveisAprovados).divide
						// (new BigDecimal(totalImoveis), 2,
						// BigDecimal.ROUND_HALF_UP)
						// .multiply(new BigDecimal(100));
						bean.setPercentualImoveis1(percentualImoveisAprovados);

						BigDecimal percentualImoveisAceitos = Util
								.divideDepoisMultiplicaComCasasDecimais(
										totalImoveisAceitos, totalImoveis, 100);
						// new BigDecimal(totalImoveisAceitos).divide
						// (new BigDecimal(totalImoveis), 2,
						// BigDecimal.ROUND_HALF_UP)
						// .multiply(new BigDecimal(100));
						bean.setPercentualImoveis2(percentualImoveisAceitos);

						BigDecimal percentualImoveisRejeitados = Util
								.divideDepoisMultiplicaComCasasDecimais(
										totalImoveisRejeitados, totalImoveis,
										100);
						// new BigDecimal(totalImoveisRejeitados).divide(new
						// BigDecimal(totalImoveis), 2,
						// BigDecimal.ROUND_HALF_UP)
						// .multiply(new BigDecimal(100));
						bean.setPercentualImoveis3(percentualImoveisRejeitados);
					} else {
						if (totalImoveisAprovados == 0
								&& totalImoveisAceitos == 0
								&& totalImoveisRejeitados == 0)
							valido = false;

						bean.setPercentualImoveis1(new BigDecimal(0));
						bean.setPercentualImoveis2(new BigDecimal(0));
						bean.setPercentualImoveis3(new BigDecimal(0));
					}

					if (qtdTotalImoveisAnalista != 0) {
						// calculo dos percentuais finais
						BigDecimal percentualTotalImoveisAprovados = Util
								.divideDepoisMultiplicaComCasasDecimais(
										qtdTotalImoveisAprovados,
										qtdTotalImoveisAnalista, 100);
						// new BigDecimal(qtdTotalImoveisAprovados)
						// .divide(new BigDecimal(qtdTotalImoveisAnalista), 2,
						// BigDecimal.ROUND_HALF_UP)
						// .multiply(new BigDecimal(100));
						bean.setPercentualTotalImoveis1(percentualTotalImoveisAprovados);

						BigDecimal percentualTotalImoveisAceitos = Util
								.divideDepoisMultiplicaComCasasDecimais(
										qtdTotalImoveisAceitos,
										qtdTotalImoveisAnalista, 100);
						// new BigDecimal(qtdTotalImoveisAceitos)
						// .divide(new BigDecimal(qtdTotalImoveisAnalista), 2,
						// BigDecimal.ROUND_HALF_UP)
						// .multiply(new BigDecimal(100));
						bean.setPercentualTotalImoveis2(percentualTotalImoveisAceitos);

						BigDecimal percentualTotalImoveisRejeitados = Util
								.divideDepoisMultiplicaComCasasDecimais(
										qtdTotalImoveisRejeitados,
										qtdTotalImoveisAnalista, 100);
						// new BigDecimal(qtdTotalImoveisRejeitados)
						// .divide(new BigDecimal(qtdTotalImoveisAnalista), 2,
						// BigDecimal.ROUND_HALF_UP)
						// .multiply(new BigDecimal(100));
						bean.setPercentualTotalImoveis3(percentualTotalImoveisRejeitados);
					}
					if (valido)
						colecaoBeans.add(bean);
				}
			}

		} catch (ErroRepositorioException ex) {
			throw new ControladorException("erro.sistema", ex);
		}

		return colecaoBeans;
	}

	/**
	 * [UC 1313] Gerar Resumo Quantitativo de Mensagens Pendentes por
	 * Cadastrador
	 * 
	 * @author Cesar Medeiros
	 * @since 09/12/2014
	 * 
	 * @param Helper
	 * @return Collection<>
	 * @throws ControladorException
	 */
	public Collection<RelatorioMensagensPendentesCadastradorBean> pesquisarResumoQuantitativoMensagensPendentesCadastrador(
			DadosResumoMovimentoAtualizacaoCadastralHelper helper)
			throws ControladorException {

		Collection<RelatorioMensagensPendentesCadastradorBean> colecaoBeans = new ArrayList<RelatorioMensagensPendentesCadastradorBean>();
		Collection colecao = null;

		try {
			colecao = repositorioCadastro
					.pesquisarResumoQuantitativoMensagensPendentesCadastrador(helper);

			if (!Util.isVazioOrNulo(colecao)) {
				String localidadeAnterior = "";
				String idLocalidade = "";
				String idCadastradorAnterior = "";
				String idCadastrador = "";

				Integer quantidadeTotalGeralLocalidade = 0;
				Integer quantidadeTotalPorCadastrador = 0;
				Integer quantidadeTotalGeralCadastrador = 0;
				BigDecimal percTotalGeralCadastradorPorTotalLocalidade = BigDecimal.ZERO;

				RelatorioMensagensPendentesCadastradorBean bean = new RelatorioMensagensPendentesCadastradorBean();
				Iterator iterator = colecao.iterator();

				while (iterator.hasNext()) {
					bean = new RelatorioMensagensPendentesCadastradorBean();
					Object[] array = (Object[]) iterator.next();

					if ((Integer) array[0] != null) {
						idLocalidade = String.valueOf((Integer) array[0]);
						bean.setIdLocalidade((Integer) array[0]);
					}

					if ((String) array[1] != null) {
						bean.setDescricaoLocalidade((String) array[1]);
					}

					if ((Integer) array[2] != null) {
						idCadastrador = String.valueOf((Integer) array[2]);
						bean.setIdCadastrador((Integer) array[2]);
					}

					if ((String) array[3] != null) {
						bean.setNomeCadastrador((String) array[3]);
					}

					if ((String) array[4] != null) {
						bean.setDescricaoMensagem((String) array[4]);
					}

					Integer qtdImoveisPorMensagemCadastrador = 1;
					if ((Integer) array[5] != null) {
						qtdImoveisPorMensagemCadastrador = (Integer) array[5];
						bean.setQuantidadeImoveis(new BigDecimal(
								qtdImoveisPorMensagemCadastrador));
					}

					// adicionado por Vivianne Sousa - 02/08/2012
					// quantidade de inconsistências por cadastrador
					// if(idLocalidade.equals(localidadeAnterior)){
					// if(!idCadastrador.equals(idCadastradorAnterior)){
					// quantidadeTotalPorCadastrador = repositorioCadastro.
					// pesquisarQuantidadeMensagensPendentesCadastrador(helper,
					// bean.getIdLocalidade(),bean.getIdCadastrador());
					//
					// if(quantidadeTotalPorCadastrador == null){
					// quantidadeTotalPorCadastrador = 0;
					// }
					// }
					// }else{
					//
					// quantidadeTotalPorCadastrador = repositorioCadastro.
					// pesquisarQuantidadeMensagensPendentesCadastrador(helper,
					// bean.getIdLocalidade(),bean.getIdCadastrador());
					// if(quantidadeTotalPorCadastrador == null){
					// quantidadeTotalPorCadastrador = 0;
					// }
					//
					// quantidadeTotalGeralLocalidade = repositorioCadastro.
					// pesquisarQuantidadeMensagensPendentesLocalidade(helper);
					//
					// //calculando o total de inconsistencias dos cadastradores
					// e
					// //o percentual em relação ao total de inconsistencias da
					// localidade
					// Integer idCadastradorHelper = null;
					// if(helper.getIdCadastrador() != null){
					// idCadastradorHelper = new Integer
					// (helper.getIdCadastrador());
					// }
					// quantidadeTotalGeralCadastrador = repositorioCadastro.
					// pesquisarQuantidadeMensagensPendentesCadastrador(helper,
					// bean.getIdLocalidade(),idCadastradorHelper);
					// percTotalGeralCadastradorPorTotalLocalidade =
					// Util.divideDepoisMultiplicaComCasasDecimais(quantidadeTotalGeralCadastrador,
					// quantidadeTotalGeralLocalidade, 100);
					// }
					//
					// bean.setPercTotalGeralCadastradorPorTotalLocalidade(percTotalGeralCadastradorPorTotalLocalidade.setScale(2));
					// bean.setQuantidadeTotalGeralCadastrador(quantidadeTotalGeralCadastrador);
					//
					// if(quantidadeTotalPorCadastrador != null &&
					// quantidadeTotalPorCadastrador != 0){
					// BigDecimal resultado =
					// Util.divideDepoisMultiplicaComCasasDecimais(qtdImoveisPorMensagemCadastrador,
					// quantidadeTotalPorCadastrador, 100);
					// bean.setPercentagemMsgPorCadastrador(resultado.setScale(2));
					// bean.setQuantidadeTotalPorCadastrador(quantidadeTotalPorCadastrador);
					// }
					//
					// localidadeAnterior = idLocalidade;
					// idCadastradorAnterior = idCadastrador;
					//
					// if(quantidadeTotalGeralLocalidade != null &&
					// quantidadeTotalGeralLocalidade != 0){
					// BigDecimal resultado =
					// Util.divideDepoisMultiplicaComCasasDecimais(quantidadeTotalPorCadastrador,
					// quantidadeTotalGeralLocalidade, 100);
					// bean.setPercentagem(resultado.setScale(2));
					// bean.setQuantidadeTotal(quantidadeTotalGeralLocalidade);
					// }

					colecaoBeans.add(bean);
				}

			}
		} catch (ErroRepositorioException ex) {
			throw new ControladorException("erro.sistema", ex);
		}

		return colecaoBeans;
	}

	/**
	 * [UC 1314] Gerar Resumo Quantitativo de Mensagens Pendentes
	 * 
	 * @author Cesar Medeiros
	 * @since 09/12/2014
	 * 
	 * @param Helper
	 * @return Collection<>
	 * @throws ControladorException
	 */
	public Collection<RelatorioQuantitativoMensagensPendentesBean> pesquisarResumoQuantitativoMensagensPendentes(
			DadosResumoMovimentoAtualizacaoCadastralHelper helper)
			throws ControladorException {

		Collection<RelatorioQuantitativoMensagensPendentesBean> colecaoBeans = new ArrayList<RelatorioQuantitativoMensagensPendentesBean>();
		Collection colecao = null;

		try {
			colecao = this.repositorioCadastro
					.pesquisarResumoQuantitativoMensagensPendentes(helper);

			if (!Util.isVazioOrNulo(colecao)) {
				RelatorioQuantitativoMensagensPendentesBean bean = null;
				Iterator iterator = colecao.iterator();

				String idLocalidadeAnterior = "";
				String idLocalidade = "";
				Integer quantidadeTotalImoveisLocalidade = 0;
				Integer quantidadeImoveisComInconsistencias = 0;

				while (iterator.hasNext()) {
					bean = new RelatorioQuantitativoMensagensPendentesBean();
					Object[] array = (Object[]) iterator.next();

					if ((Integer) array[0] != null) {
						idLocalidade = String.valueOf((Integer) array[0]);
						bean.setIdLocalidade((Integer) array[0]);
					}

					if ((String) array[1] != null) {
						bean.setDescricaoLocalidade((String) array[1]);
					}

					if ((String) array[2] != null) {
						bean.setDescricaoMensagem((String) array[2]);
					}

					if ((Integer) array[3] != null) {
						bean.setQuantidadeImoveisPendentes((Integer) array[3]);
					}

					if (!idLocalidade.equals(idLocalidadeAnterior)) {
						quantidadeTotalImoveisLocalidade = repositorioCadastro
								.recuperaQtdeImoveisPorLocalidadeEEmpresa(
										Integer.parseInt(idLocalidade),
										Integer.parseInt(helper.getIdEmpresa()));
						if (quantidadeTotalImoveisLocalidade == null) {
							quantidadeTotalImoveisLocalidade = 0;
						}

						quantidadeImoveisComInconsistencias = repositorioCadastro
								.recuperaQtdeImoveisComInconsistenciasPorLocalidadeEEmpresa(
										Integer.parseInt(idLocalidade),
										Integer.parseInt(helper.getIdEmpresa()));

						if (quantidadeImoveisComInconsistencias == null) {
							quantidadeImoveisComInconsistencias = 0;
						}
					}

					bean.setQuantidadeImoveisLocalidade(quantidadeTotalImoveisLocalidade
							.toString());
					bean.setQuantidadeImoveisComInconsistencias(quantidadeImoveisComInconsistencias
							.toString());

					idLocalidadeAnterior = idLocalidade;

					colecaoBeans.add(bean);
				}
			}

		} catch (ErroRepositorioException ex) {
			throw new ControladorException("erro.sistema", ex);
		}

		return colecaoBeans;
	}

	/**
	 * Método responsável por<br>
	 * pesquisar se existe o<br>
	 * arquivo KMZ cadastrado para Setor Comercial cadastrado
	 * 
	 * @author Jonathan Marcos
	 * @since 09/12/2014
	 * @param idLocalidade
	 * @param codigoSetorComercial
	 * @return Object[]
	 * @throws ControladorException
	 */
	public Object[] pesquisarSetorComercialMapaKMZ(Integer idLocalidade,
			Integer codigoSetorComercial) throws ControladorException {
		try {
			return this.repositorioCadastro.pesquisarSetorComercialMapaKMZ(
					idLocalidade, codigoSetorComercial);
		} catch (ErroRepositorioException e) {
			throw new ControladorException("erro.sistema", e);
		}
	}

	/**
	 * [UC1391] - Gerar Roteiro Dispositivo Móvel Atualização Cadastral [FE0003]
	 * - Verificar existência de mapa do setor comercial
	 * 
	 * Caso não exista mapa associado ao setor comercial
	 * (ATUALIZACAOCADASTRAL.MAPA_ATLZ_CAD_DM onde STCM_ID = ID do setor
	 * comercial)
	 * 
	 * @author Bruno Sá Barreto
	 * @since 09/12/2014
	 * 
	 * @return resultado
	 * @param codigoSetorComercial
	 */
	public boolean verificarExistenciaMapaSetorComercial(Integer idLocalidade,
			Integer codigoSetorComercial) throws ControladorException {
		try {
			return this.repositorioCadastro
					.verificarExistenciaMapaSetorComercial(idLocalidade,
							codigoSetorComercial);
		} catch (ErroRepositorioException e) {
			throw new ControladorException("erro.sistema", e);
		}
	}

	/**
	 * [UC1393] - Processar Requisição do Dispositivo Móvel Atualização
	 * Cadastral retorna o arquivo de mapa do setor comercial caso ele exista.
	 * 
	 * @author Bruno Sá Barreto
	 * @since 11/12/2014
	 */
	public byte[] pesquisarArquivoMapSetorComercial(Integer idLocalidade,
			Integer codigoSetorComercial) throws ControladorException {
		try {
			return this.repositorioCadastro.pesquisarArquivoMapSetorComercial(
					idLocalidade, codigoSetorComercial);
		} catch (ErroRepositorioException e) {
			throw new ControladorException("erro.sistema", e);
		}

	}

	/**
	 * Verifica se o id de um logradouro existe na base de dados retorna o
	 * booleano afirmando ou negando a assertiva.
	 * 
	 * @author Bruno Sá Barreto
	 * @since 12/12/2014
	 * 
	 * @return resultado
	 * @param idLogradouro
	 */
	public boolean verificarSeLogradouroExisteNoGsan(Long idLogradouro)
			throws ControladorException {
		try {
			return this.repositorioCadastro
					.verificarSeLogradouroExisteNoGsan(idLogradouro);
		} catch (ErroRepositorioException e) {
			throw new ControladorException("erro.sistema", e);
		}
	}

	/**
	 * retorna o logr_id do imóvel
	 * 
	 * @author Bruno Sá Barreto
	 * @since 12/12/2014
	 * 
	 * @return resultado
	 * @param idLogradouro
	 */
	public Long pesquisarIdLogradouroDoImovel(Integer idImovel)
			throws ControladorException {
		try {
			return this.repositorioCadastro
					.pesquisarIdLogradouroDoImovel(idImovel);
		} catch (ErroRepositorioException e) {
			throw new ControladorException("erro.sistema", e);
		}
	}

	/**
	 * [UC 1311] Gerar Resumo da Posição de Atualização Cadastral
	 * 
	 * @author Cesar Medeiros
	 * @since 15/12/2014
	 * 
	 * @param Helper
	 * @return Collection
	 * @throws ControladorException
	 */
	public Collection<RelatorioResumoPosicaoAtualizacaoCadastralBean> pesquisarResumoPosicaoAtualizacaoCadastral(
			DadosResumoMovimentoAtualizacaoCadastralHelper helper)
			throws ControladorException {

		Collection<RelatorioResumoPosicaoAtualizacaoCadastralBean> colecaoBeans = new ArrayList<RelatorioResumoPosicaoAtualizacaoCadastralBean>();
		Collection retorno = null;

		try {
			retorno = repositorioCadastro
					.pesquisarResumoPosicaoAtualizacaoCadastral(helper);

			if (!Util.isVazioOrNulo(retorno)) {

				Iterator iterator = retorno.iterator();
				Integer idLocalidadeAnterior = 0;
				Integer quantidadeImoveisNaLocalidade = 0;

				while (iterator.hasNext()) {

					Object[] array = (Object[]) iterator.next();

					Integer quantidadeImoveisIncluidos = 0;
					Integer quantidadeImoveisAtualizados = 0;

					// Quantidade de Imoveis Incluidos que retornaram do tablet
					if ((Integer) array[7] != null) {
						quantidadeImoveisIncluidos = (Integer) array[7];
					}

					// Quantidade de Imoveis Atualizados que retornaram do
					// tablet
					if ((Integer) array[8] != null) {
						quantidadeImoveisAtualizados = (Integer) array[8];
					}

					if (quantidadeImoveisIncluidos.intValue() != 0
							|| quantidadeImoveisAtualizados.intValue() != 0) {

						RelatorioResumoPosicaoAtualizacaoCadastralBean bean = new RelatorioResumoPosicaoAtualizacaoCadastralBean();

						// Id Localidade
						if ((Integer) array[0] != null) {
							Integer idLocalidade = (Integer) array[0];
							bean.setIdLocalidade(idLocalidade);

							if (idLocalidade.intValue() != idLocalidadeAnterior) {

								quantidadeImoveisNaLocalidade = repositorioImovel
										.pesquisarQuantidadeImoveisPorLocalidade(idLocalidade);
								idLocalidadeAnterior = idLocalidade;
							}

							bean.setQuantidadeImoveisNaLocalidade(quantidadeImoveisNaLocalidade);
						}

						// Descricao Localidade
						if ((String) array[1] != null) {
							String descricaoLocalidade = (String) array[1];
							bean.setDescricaoLocalidade(descricaoLocalidade);
						}

						// Quantidade de Imoveis selecionados para o Roteiro
						if ((Integer) array[2] != null) {
							bean.setQuantidadeImoveisRoteiro((Integer) array[2]);
						}

						if ((Integer) array[11] != null) {
							bean.setQuantidadePreGsanAtualizados((Integer) array[11]);
						}

						if ((Integer) array[12] != null) {
							bean.setQuantidadePreGsanIncluidos((Integer) array[12]);
						}

						if ((Integer) array[13] != null) {
							bean.setQuantidadeComInconsistencia((Integer) array[13]);
						}

						if ((Integer) array[14] != null) {
							bean.setQuantidadeSemInconsistencia((Integer) array[14]);
						}

						if ((Integer) array[15] != null) {
							bean.setQuantidadeRetornoCampo((Integer) array[15]);
						}

						if ((Integer) array[16] != null) {
							bean.setQuantidadeRemovido((Integer) array[16]);
						}

						// Quantidade de Imoveis no Ambiente Virtual II
						if ((Integer) array[4] != null) {
							bean.setQuantidadeAmbienteII((Integer) array[4]);
						}

						// Quantidade de Imoveis Atualizados no GSAN
						if ((Integer) array[5] != null) {
							bean.setQuantidadeAtualizadosGSAN((Integer) array[5]);
						}

						// Quantidade de Imoveis Incluidos que retornaram do
						// tablet
						bean.setQuantidadeImoveisIncluidos(quantidadeImoveisIncluidos);

						// Quantidade de Imoveis Atualizados que retornaram do
						// tablet
						bean.setQuantidadeImoveisAtualizados(quantidadeImoveisAtualizados);

						// Usuario associado ao arquivo
						if ((String) array[9] != null) {
							bean.setNomeUsuario((String) array[9]);
						}

						// codigo do setor
						if ((Integer) array[10] != null) {
							bean.setCodigoSetor(((Integer) array[10])
									.toString());
						}

						colecaoBeans.add(bean);
					}
				}
			}

		} catch (ErroRepositorioException ex) {
			throw new ControladorException("erro.sistema", ex);
		}

		return colecaoBeans;
	}

	/**
	 * [UC1297] Atualizar Dados Cadastrais para Imoveis Inconsistentes
	 * 
	 * [SB0006] Relatório dos Imoveis Inconsistentes
	 * 
	 * @author Davi Menezes
	 * @author Bruno Sá Barreto
	 * 
	 * @date 26/03/2012
	 * 
	 * @return Collection<RelatorioImoveisInconsistentesBean>
	 * @throws ControladorException
	 */
	public Collection<RelatorioImoveisInconsistentesMovimentoBean> pesquisarRelatorioImoveisInconsistentesMovimento(
			String[] idsRegistro, String idLocalidade,
			String codigoSetorComercial, String numeroQuadras,
			String idCadastrador, String indicadorSituacaoMovimento,
			String tipoInconsistencia) throws ControladorException {

		Collection<RelatorioImoveisInconsistentesMovimentoBean> colBeans = new ArrayList<RelatorioImoveisInconsistentesMovimentoBean>();

		RelatorioImoveisInconsistentesMovimentoBean bean = null;

		Collection colecao = null;

		try {
			String idImovelAnterior = "";
			String idLocalidadeAnterior = "";
			for (int i = 0; i < idsRegistro.length; i++) {
				String[] aux = idsRegistro[i].split("\\|");
				Integer idMovimento = Integer.parseInt(aux[0]);
				String data = aux[1];
				Date dataMovimento = Util.converteStringParaDate(data);

				colecao = repositorioCadastro
						.pesquisarRelatorioImoveisInconsistentesMovimento(
								idMovimento, dataMovimento, idLocalidade,
								codigoSetorComercial, numeroQuadras,
								idCadastrador, indicadorSituacaoMovimento,
								tipoInconsistencia);

				if (!Util.isVazioOrNulo(colecao)) {
					Iterator iterator = colecao.iterator();

					Integer total = new Integer(0);

					while (iterator.hasNext()) {
						Object[] array = (Object[]) iterator.next();
						bean = new RelatorioImoveisInconsistentesMovimentoBean();

						if ((String) array[0] != null) {
							String idImovel = ((String) array[0]);
							bean.setIdImovel(Integer.valueOf(idImovel));

							Imovel imovel = repositorioImovel
									.pesquisarImovel(Integer.parseInt(idImovel));

							if (imovel != null) {
								bean.setMatricula(imovel
										.getMatriculaFormatada());
							}
						}

						Date novaData = (Date) array[1];
						bean.setDataMovimento(Util.formatarData(novaData));

						// if (!colBeans.contains(bean)) {

						bean.setIdLocalidade((String) array[2]);
						bean.setDescricaoLocalidade((String) array[3]);

						if (idLocalidadeAnterior.equals("")) {

							idLocalidadeAnterior = bean.getIdLocalidade();
							idImovelAnterior = (String) array[0];
							total = new Integer(1);

						} else if (idLocalidadeAnterior.equals(bean
								.getIdLocalidade())) {

							if (!idImovelAnterior.equals((String) array[0])) {

								total = new Integer(1);
								idImovelAnterior = (String) array[0];
							} else {
								total = new Integer(0);
							}
						} else {
							idLocalidadeAnterior = bean.getIdLocalidade();
							idImovelAnterior = (String) array[0];
							total = new Integer(1);
						}

						bean.setTotal(total);

						if ((String) array[4] != null) {
							bean.setCodigoSetor((String) array[4]);
						} else {
							bean.setCodigoSetor("");
						}

						if ((String) array[5] != null) {
							bean.setQuadra((String) array[5]);
						} else {
							bean.setQuadra("");
						}

						if ((String) array[6] != null) {
							bean.setSituacaoCadastral(((String) array[6])
									.toUpperCase());
						} else {
							bean.setSituacaoCadastral("");
						}

						if ((String) array[7] != null) {
							bean.setDadoInconsistente((String) array[7]);
						} else {
							bean.setDadoInconsistente("");
						}

						if ((String) array[8] != null) {
							bean.setTipoInconsistencia((String) array[8]);
						} else {
							bean.setTipoInconsistencia("");
						}

						if ((String) array[9] != null) {
							bean.setCadastrador(((String) array[9])
									.toUpperCase());
						} else {
							bean.setCadastrador("");
						}

						colBeans.add(bean);

						// }

					}
				}
			}
		} catch (ErroRepositorioException e) {
			throw new ControladorException("erro.sistema", e);
		}

		return colBeans;
	}

	/**
	 * [UC1669] Atualizar Dados nas Tabelas Resumos Grenciais Faturamento
	 * 
	 * @author Fábio Aguiar
	 * @date 04/02/2015
	 * 
	 * @throws ErroRepositorioException
	 */
	public void gerarResumoCadastroAtualizaDados(
			Integer idFuncionalidadeIniciada) throws ControladorException {

		int idUnidadeIniciada = 0;

		/*
		 * Registrar o inÃ­cio do processamento da Unidade de Processamento do
		 * Batch
		 */
		idUnidadeIniciada = getControladorBatch()
				.iniciarUnidadeProcessamentoBatch(idFuncionalidadeIniciada,
						UnidadeProcessamento.FUNCIONALIDADE, 0);

		try {

			System.out.println("Iniciou Gerar Resumo Cadastro Analitico Dados");
			repositorioCadastro.gerarResumoCadastroAtualizaDados();
			System.out
					.println("Finalizou Gerar Resumo Cadastro Analitico Dados");

			getControladorBatch().encerrarUnidadeProcessamentoBatch(null,
					idUnidadeIniciada, false);

		} catch (Exception ex) {
			ex.printStackTrace();
			getControladorBatch().encerrarUnidadeProcessamentoBatch(ex,
					idUnidadeIniciada, true);
			throw new EJBException(ex);
		}
	}

}
